cscope 15 $HOME/moosefs/mfs-1.6.25               0001487388
	@config.h

11 
	#DATA_PATH
 "/v¨/lib/mfs"

	)

14 
	#DEFAULT_GROUP
 "mfs"

	)

17 
	#DEFAULT_USER
 "mfs"

	)

20 
	#ETC_PATH
 "/ëc"

	)

23 
	#HAVE_ARPA_INET_H
 1

	)

26 
	#HAVE_ATEXIT
 1

	)

29 
	#HAVE_BZERO
 1

	)

33 
	#HAVE_DECL_STRERROR_R
 1

	)

37 
	#HAVE_DIRENT_H
 1

	)

40 
	#HAVE_DLFCN_H
 1

	)

43 
	#HAVE_DUP2
 1

	)

46 
	#HAVE_FCNTL_H
 1

	)

49 
	#HAVE_FORK
 1

	)

52 
	#HAVE_FSEEKO
 1

	)

55 
	#HAVE_FTELLO
 1

	)

58 
	#HAVE_FTRUNCATE
 1

	)

61 
	#HAVE_FUSE_VERSION
 1

	)

64 
	#HAVE_GETADDRINFO
 1

	)

67 
	#HAVE_GETCWD
 1

	)

70 
	#HAVE_GETPASS
 1

	)

73 
	#HAVE_GETRUSAGE
 1

	)

76 
	#HAVE_GETTIMEOFDAY
 1

	)

79 
	#HAVE_INTTYPES_H
 1

	)

82 
	#HAVE_LIMITS_H
 1

	)

90 
	#HAVE_MALLOC
 1

	)

93 
	#HAVE_MEMMOVE
 1

	)

96 
	#HAVE_MEMORY_H
 1

	)

99 
	#HAVE_MEMSET
 1

	)

102 
	#HAVE_MKDIR
 1

	)

105 
	#HAVE_MLOCKALL
 1

	)

111 
	#HAVE_NETDB_H
 1

	)

114 
	#HAVE_NETINET_IN_H
 1

	)

117 
	#HAVE_PERROR
 1

	)

120 
	#HAVE_POLL
 1

	)

123 
	#HAVE_PREAD
 1

	)

126 
	#HAVE_PTHREAD
 1

	)

129 
	#HAVE_PTHREAD_SPIN_LOCK
 1

	)

132 
	#HAVE_PWRITE
 1

	)

135 
	#HAVE_READV
 1

	)

139 
	#HAVE_REALLOC
 1

	)

142 
	#HAVE_REALPATH
 1

	)

145 
	#HAVE_SETITIMER
 1

	)

148 
	#HAVE_SOCKET
 1

	)

155 
	#HAVE_STDBOOL_H
 1

	)

158 
	#HAVE_STDDEF_H
 1

	)

161 
	#HAVE_STDINT_H
 1

	)

164 
	#HAVE_STDLIB_H
 1

	)

167 
	#HAVE_STRCHR
 1

	)

170 
	#HAVE_STRDUP
 1

	)

173 
	#HAVE_STRERROR
 1

	)

176 
	#HAVE_STRERROR_R
 1

	)

179 
	#HAVE_STRINGS_H
 1

	)

182 
	#HAVE_STRING_H
 1

	)

185 
	#HAVE_STRTOL
 1

	)

188 
	#HAVE_STRTOUL
 1

	)

191 
	#HAVE_STRUCT_RUSAGE_RU_MAXRSS
 1

	)

197 
	#HAVE_STRUCT_STAT_ST_BLKSIZE
 1

	)

200 
	#HAVE_STRUCT_STAT_ST_BLOCKS
 1

	)

206 
	#HAVE_STRUCT_STAT_ST_RDEV
 1

	)

209 
	#HAVE_STRUCT_TM_TM_GMTOFF
 1

	)

213 
	#HAVE_ST_BLOCKS
 1

	)

216 
	#HAVE_SYSLOG_H
 1

	)

223 
	#HAVE_SYS_MMAN_H
 1

	)

230 
	#HAVE_SYS_RESOURCE_H
 1

	)

236 
	#HAVE_SYS_SOCKET_H
 1

	)

239 
	#HAVE_SYS_STATVFS_H
 1

	)

242 
	#HAVE_SYS_STAT_H
 1

	)

245 
	#HAVE_SYS_TIME_H
 1

	)

248 
	#HAVE_SYS_TYPES_H
 1

	)

251 
	#HAVE_SYS_WAIT_H
 1

	)

254 
	#HAVE_UNISTD_H
 1

	)

257 
	#HAVE_VFORK
 1

	)

263 
	#HAVE_WORKING_FORK
 1

	)

266 
	#HAVE_WORKING_VFORK
 1

	)

269 
	#HAVE_WRITEV
 1

	)

272 
	#HAVE_ZLIB_H
 1

	)

275 
	#HAVE__BOOL
 1

	)

278 
	#LIGHT_MFS
 0

	)

282 
	#LSTAT_FOLLOWS_SLASHED_SYMLINK
 1

	)

286 
	#LT_OBJDIR
 ".libs/"

	)

289 
	#PACKAGE
 "mfs"

	)

292 
	#PACKAGE_BUGREPORT
 "bugs@moo£fs.com"

	)

295 
	#PACKAGE_NAME
 "MFS"

	)

298 
	#PACKAGE_STRING
 "MFS 1.6.25"

	)

301 
	#PACKAGE_TARNAME
 "mfs"

	)

304 
	#PACKAGE_URL
 ""

	)

307 
	#PACKAGE_VERSION
 "1.6.25"

	)

310 
	#PREFIX
 "/u§"

	)

313 
	#PROTO_BASE
 0

	)

320 
	#RUN_PATH
 "/v¨/run/mfs"

	)

323 
	#STDC_HEADERS
 1

	)

326 
	#STRERROR_R_CHAR_P
 1

	)

329 
	#TIME_WITH_SYS_TIME
 1

	)

335 
	#VERSHEX
 ((1)*0x10000+(6)*0x100+(25))

	)

338 
	#VERSION
 "1.6.25"

	)

341 
	#VERSMAJ
 1

	)

344 
	#VERSMID
 6

	)

347 
	#VERSMIN
 25

	)

351 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


352 #i‡
deföed
 
__BIG_ENDIAN__


353 
	#WORDS_BIGENDIAN
 1

	)

356 #i‚de‡
WORDS_BIGENDIAN


390 #i‚de‡
__˝lu•lus


	@mfschunkserver/bgjobs.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<sy¶og.h
>

25 
	~<öây≥s.h
>

28 
	~<limôs.h
>

29 
	~<±hªad.h
>

30 
	~<î∫o.h
>

32 
	~"pcqueue.h
"

33 
	~"d©≠ack.h
"

34 
	~"mas£π.h
"

36 
	~"hdd•a˚mgr.h
"

37 
	~"ª∂iˇt‹.h
"

39 
	#JHASHSIZE
 0x400

	)

40 
	#JHASHPOS
(
id
Ë((id)&0x3FF)

	)

43 
	mJSTATE_DISABLED
,

44 
	mJSTATE_ENABLED
,

45 
	mJSTATE_INPROGRESS


49 
	mOP_EXIT
,

50 
	mOP_INVAL
,

51 
	mOP_CHUNKOP
,

52 
	mOP_OPEN
,

53 
	mOP_CLOSE
,

54 
	mOP_READ
,

55 
	mOP_WRITE
,

56 
	mOP_REPLICATE


60 
	s_chunk_›_¨gs
 {

61 
uöt64_t
 
	mchunkid
,
	mc›ychunkid
;

62 
uöt32_t
 
	mvîsi⁄
,
	m√wvîsi⁄
,
	mc›yvîsi⁄
;

63 
uöt32_t
 
	mÀngth
;

64 } 
	tchunk_›_¨gs
;

67 
	s_chunk_oc_¨gs
 {

68 
uöt64_t
 
	mchunkid
;

69 } 
	tchunk_oc_¨gs
;

72 
	s_chunk_rd_¨gs
 {

73 
uöt64_t
 
	mchunkid
;

74 
uöt32_t
 
	mvîsi⁄
;

75 
uöt32_t
 
	moff£t
,
	msize
;

76 
uöt16_t
 
	mblocknum
;

77 
uöt8_t
 *
	mbuf„r
;

78 
uöt8_t
 *
	m¸cbuff
;

79 } 
	tchunk_rd_¨gs
;

82 
	s_chunk_wr_¨gs
 {

83 
uöt64_t
 
	mchunkid
;

84 
uöt32_t
 
	mvîsi⁄
;

85 
uöt32_t
 
	moff£t
,
	msize
;

86 
uöt16_t
 
	mblocknum
;

87 c⁄° 
uöt8_t
 *
	mbuf„r
;

88 c⁄° 
uöt8_t
 *
	m¸cbuff
;

89 } 
	tchunk_wr_¨gs
;

91 
	s_chunk_Ω_¨gs
 {

92 
uöt64_t
 
	mchunkid
;

93 
uöt32_t
 
	mvîsi⁄
;

94 
uöt8_t
 
	m§c˙t
;

95 } 
	tchunk_Ω_¨gs
;

97 
	s_job
 {

98 
uöt32_t
 
	mjobid
;

99 (*
	mˇŒback
)(
uöt8_t
 
	m°©us
,*
	mexåa
);

100 *
	mexåa
;

101 *
	m¨gs
;

102 
uöt8_t
 
	mj°©e
;

103 
_job
 *
	m√xt
;

104 } 
	tjob
;

106 
	s_jobpoﬁ
 {

107 
	mΩùe
,
	mwpùe
;

108 
uöt8_t
 
	mw‹kîs
;

109 
±hªad_t
 *
	mw‹kîthªads
;

110 
±hªad_muãx_t
 
	mpùñock
;

111 
±hªad_muãx_t
 
	mjob¶ock
;

112 *
	mjobqueue
;

113 *
	m°©usqueue
;

114 
job
* 
	mjobhash
[
JHASHSIZE
];

115 
uöt32_t
 
	m√xtjobid
;

116 } 
	tjobpoﬁ
;

118 
ölöe
 
	$job_£nd_°©us
(
jobpoﬁ
 *
jp
,
uöt32_t
 
jobid
,
uöt8_t
 
°©us
) {

119 
	`ós£π
(
	`±hªad_muãx_lock
(&(
jp
->
pùñock
))==0);

120 i‡(
	`queue_i£m±y
(
jp
->
°©usqueue
)) {

121 
	`ós£π
(
	`wrôe
(
jp
->
wpùe
,&
°©us
,1)==1);

123 
	`queue_put
(
jp
->
°©usqueue
,
jobid
,
°©us
,
NULL
,1);

124 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
pùñock
))==0);

126 
	}
}

128 
ölöe
 
	$job_ª˚ive_°©us
(
jobpoﬁ
 *
jp
,
uöt32_t
 *
jobid
,
uöt8_t
 *
°©us
) {

129 
uöt32_t
 
q°©us
;

130 
	`ós£π
(
	`±hªad_muãx_lock
(&(
jp
->
pùñock
))==0);

131 
	`queue_gë
(
jp
->
°©usqueue
,
jobid
,&
q°©us
,
NULL
,NULL);

132 *
°©us
 = 
q°©us
;

133 i‡(
	`queue_i£m±y
(
jp
->
°©usqueue
)) {

134 
	`ós£π
(
	`ªad
(
jp
->
Ωùe
,&
q°©us
,1)==1);

135 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
pùñock
))==0);

138 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
pùñock
))==0);

140 
	}
}

142 
	#›¨gs
 ((
chunk_›_¨gs
*)(
j±r
->
¨gs
))

	)

143 
	#oˇrgs
 ((
chunk_oc_¨gs
*)(
j±r
->
¨gs
))

	)

144 
	#rd¨gs
 ((
chunk_rd_¨gs
*)(
j±r
->
¨gs
))

	)

145 
	#wørgs
 ((
chunk_wr_¨gs
*)(
j±r
->
¨gs
))

	)

146 
	#Ω¨gs
 ((
chunk_Ω_¨gs
*)(
j±r
->
¨gs
))

	)

147 * 
	$job_w‹kî
(*
th_¨g
) {

148 
jobpoﬁ
 *
jp
 = (jobpoﬁ*)
th_¨g
;

149 
job
 *
j±r
;

150 
uöt8_t
 *
j±ørg
;

151 
uöt8_t
 
°©us
,
j°©e
;

152 
uöt32_t
 
jobid
;

153 
uöt32_t
 
›
;

157 
	`queue_gë
(
jp
->
jobqueue
,&
jobid
,&
›
,&
j±ørg
,
NULL
);

158 
j±r
 = (
job
*)
j±ørg
;

159 
	`ós£π
(
	`±hªad_muãx_lock
(&(
jp
->
job¶ock
))==0);

160 i‡(
j±r
!=
NULL
) {

161 
j°©e
=
j±r
->jstate;

162 i‡(
j±r
->
j°©e
==
JSTATE_ENABLED
) {

163 
j±r
->
j°©e
=
JSTATE_INPROGRESS
;

166 
j°©e
=
JSTATE_DISABLED
;

168 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
job¶ock
))==0);

169 
›
) {

170 
OP_INVAL
:

171 
°©us
 = 
ERROR_EINVAL
;

173 
OP_CHUNKOP
:

174 i‡(
j°©e
==
JSTATE_DISABLED
) {

175 
°©us
 = 
ERROR_NOTDONE
;

177 
°©us
 = 
	`hdd_chunk›
(
›¨gs
->
chunkid
,›¨gs->
vîsi⁄
,›¨gs->
√wvîsi⁄
,›¨gs->
c›ychunkid
,›¨gs->
c›yvîsi⁄
,›¨gs->
Àngth
);

180 
OP_OPEN
:

181 
°©us
 = 
	`hdd_›í
(
oˇrgs
->
chunkid
);

183 
OP_CLOSE
:

184 
°©us
 = 
	`hdd_˛o£
(
oˇrgs
->
chunkid
);

186 
OP_READ
:

187 i‡(
j°©e
==
JSTATE_DISABLED
) {

188 
°©us
 = 
ERROR_NOTDONE
;

190 
°©us
 = 
	`hdd_ªad
(
rd¨gs
->
chunkid
,rd¨gs->
vîsi⁄
,rd¨gs->
blocknum
,rd¨gs->
buf„r
,rd¨gs->
off£t
,rd¨gs->
size
,rd¨gs->
¸cbuff
);

193 
OP_WRITE
:

194 i‡(
j°©e
==
JSTATE_DISABLED
) {

195 
°©us
 = 
ERROR_NOTDONE
;

197 
°©us
 = 
	`hdd_wrôe
(
wørgs
->
chunkid
,wørgs->
vîsi⁄
,wørgs->
blocknum
,wørgs->
buf„r
,wørgs->
off£t
,wørgs->
size
,wørgs->
¸cbuff
);

200 
OP_REPLICATE
:

201 i‡(
j°©e
==
JSTATE_DISABLED
) {

202 
°©us
 = 
ERROR_NOTDONE
;

204 
°©us
 = 
	`ª∂iˇã
(
Ω¨gs
->
chunkid
,Ω¨gs->
vîsi⁄
,Ω¨gs->
§c˙t
,((
uöt8_t
*)(
j±r
->
¨gs
))+(
chunk_Ω_¨gs
));

209  
NULL
;

211 
	`job_£nd_°©us
(
jp
,
jobid
,
°©us
);

213 
	}
}

215 
ölöe
 
uöt32_t
 
job_√w
(
jobpoﬁ
 *
jp
,uöt32_à
›
,*
¨gs
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*extra) {

217 
uöt32_t
 
jobid
 = 
jp
->
√xtjobid
;

218 
uöt32_t
 
jhpos
 = 
	`JHASHPOS
(
jobid
);

219 
job
 *
j±r
;

220 
j±r
 = 
	`mÆloc
((
job
));

221 
	`∑s£π
(
j±r
);

222 
j±r
->
jobid
 = jobid;

223 
j±r
->
ˇŒback
 = callback;

224 
j±r
->
exåa
 =Éxtra;

225 
j±r
->
¨gs
 =árgs;

226 
j±r
->
j°©e
 = 
JSTATE_ENABLED
;

227 
j±r
->
√xt
 = 
jp
->
jobhash
[
jhpos
];

228 
jp
->
jobhash
[
jhpos
] = 
j±r
;

229 
	`queue_put
(
jp
->
jobqueue
,
jobid
,
›
,(
uöt8_t
*)
j±r
,1);

230 
jp
->
√xtjobid
++;

231 i‡(
jp
->
√xtjobid
==0) {

232 
jp
->
√xtjobid
=1;

234  
jobid
;

235 
	}
}

239 * 
	$job_poﬁ_√w
(
uöt8_t
 
w‹kîs
,
uöt32_t
 
jobs
,*
wakeupdesc
) {

240 
fd
[2];

241 
uöt32_t
 
i
;

242 
±hªad_©å_t
 
th©å
;

243 
jobpoﬁ
* 
jp
;

245 i‡(
	`pùe
(
fd
)<0) {

246  
NULL
;

248 
jp
=
	`mÆloc
((
jobpoﬁ
));

249 
	`∑s£π
(
jp
);

251 *
wakeupdesc
 = 
fd
[0];

252 
jp
->
Ωùe
 = 
fd
[0];

253 
jp
->
wpùe
 = 
fd
[1];

254 
jp
->
w‹kîs
 = workers;

255 
jp
->
w‹kîthªads
 = 
	`mÆloc
((
±hªad_t
)*
w‹kîs
);

256 
	`∑s£π
(
jp
->
w‹kîthªads
);

257 
	`ós£π
(
	`±hªad_muãx_öô
(&(
jp
->
pùñock
),
NULL
)==0);

258 
	`ós£π
(
	`±hªad_muãx_öô
(&(
jp
->
job¶ock
),
NULL
)==0);

259 
jp
->
jobqueue
 = 
	`queue_√w
(
jobs
);

261 
jp
->
°©usqueue
 = 
	`queue_√w
(0);

262 
i
=0 ; i<
JHASHSIZE
 ; i++) {

263 
jp
->
jobhash
[
i
]=
NULL
;

265 
jp
->
√xtjobid
 = 1;

266 
	`ós£π
(
	`±hªad_©å_öô
(&
th©å
)==0);

267 
	`ós£π
(
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000)==0);

268 
	`ós£π
(
	`±hªad_©å_£tdëach°©e
(&
th©å
,
PTHREAD_CREATE_JOINABLE
)==0);

269 
i
=0 ; i<
w‹kîs
 ; i++) {

270 
	`ós£π
(
	`±hªad_¸óã
(
jp
->
w‹kîthªads
+
i
,&
th©å
,
job_w‹kî
,jp)==0);

272 
	`ós£π
(
	`±hªad_©å_de°roy
(&
th©å
)==0);

273  
jp
;

274 
	}
}

276 
uöt32_t
 
	$job_poﬁ_jobs_cou¡
(*
jpoﬁ
) {

277 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

278  
	`queue_ñemíts
(
jp
->
jobqueue
);

279 
	}
}

281 
job_poﬁ_dißbÀ_™d_ch™ge_ˇŒback_Æl
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
)) {

282 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

283 
uöt32_t
 
jhpos
;

284 
job
 *
j±r
;

286 
	`ós£π
(
	`±hªad_muãx_lock
(&(
jp
->
job¶ock
))==0);

287 
jhpos
 = 0 ; jhpos<
JHASHSIZE
 ; jhpos++) {

288 
j±r
 = 
jp
->
jobhash
[
jhpos
] ; j±∏; j±r=j±r->
√xt
) {

289 i‡(
j±r
->
j°©e
==
JSTATE_ENABLED
) {

290 
j±r
->
j°©e
=
JSTATE_DISABLED
;

292 
j±r
->
ˇŒback
=callback;

295 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
job¶ock
))==0);

296 
	}
}

298 
	$job_poﬁ_dißbÀ_job
(*
jpoﬁ
,
uöt32_t
 
jobid
) {

299 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

300 
uöt32_t
 
jhpos
 = 
	`JHASHPOS
(
jobid
);

301 
job
 *
j±r
;

302 
j±r
 = 
jp
->
jobhash
[
jhpos
] ; j±∏; j±r=j±r->
√xt
) {

303 i‡(
j±r
->
jobid
==jobid) {

304 
	`ós£π
(
	`±hªad_muãx_lock
(&(
jp
->
job¶ock
))==0);

305 i‡(
j±r
->
j°©e
==
JSTATE_ENABLED
) {

306 
j±r
->
j°©e
=
JSTATE_DISABLED
;

308 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
jp
->
job¶ock
))==0);

311 
	}
}

313 
job_poﬁ_ch™ge_ˇŒback
(*
jpoﬁ
,
uöt32_t
 
jobid
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*extra) {

314 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

315 
uöt32_t
 
jhpos
 = 
	`JHASHPOS
(
jobid
);

316 
job
 *
j±r
;

317 
j±r
 = 
jp
->
jobhash
[
jhpos
] ; j±∏; j±r=j±r->
√xt
) {

318 i‡(
j±r
->
jobid
==jobid) {

319 
j±r
->
ˇŒback
=callback;

320 
j±r
->
exåa
=extra;

323 
	}
}

325 
	$job_poﬁ_check_jobs
(*
jpoﬁ
) {

326 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

327 
uöt32_t
 
jobid
,
jhpos
;

328 
uöt8_t
 
°©us
;

329 
nŸœ°
;

330 
job
 **
jh™dÀ
,*
j±r
;

332 
nŸœ°
 = 
	`job_ª˚ive_°©us
(
jp
,&
jobid
,&
°©us
);

333 
jhpos
 = 
	`JHASHPOS
(
jobid
);

334 
jh™dÀ
 = 
jp
->
jobhash
+
jhpos
;

335 (
j±r
 = *
jh™dÀ
)) {

336 i‡(
j±r
->
jobid
==jobid) {

337 i‡(
j±r
->
ˇŒback
) {

338 
j±r
->
	`ˇŒback
(
°©us
,j±r->
exåa
);

340 *
jh™dÀ
 = 
j±r
->
√xt
;

341 i‡(
j±r
->
¨gs
) {

342 
	`‰ì
(
j±r
->
¨gs
);

344 
	`‰ì
(
j±r
);

347 
jh™dÀ
 = &(
j±r
->
√xt
);

350 } 
nŸœ°
);

351 
	}
}

353 
	$job_poﬁ_dñëe
(*
jpoﬁ
) {

354 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

355 
uöt32_t
 
i
;

357 
i
=0 ; i<
jp
->
w‹kîs
 ; i++) {

358 
	`queue_put
(
jp
->
jobqueue
,0,
OP_EXIT
,
NULL
,1);

360 
i
=0 ; i<
jp
->
w‹kîs
 ; i++) {

361 
	`ós£π
(
	`±hªad_joö
(
jp
->
w‹kîthªads
[
i
],
NULL
)==0);

363 
	`ßs£π
(
	`queue_i£m±y
(
jp
->
jobqueue
));

364 i‡(!
	`queue_i£m±y
(
jp
->
°©usqueue
)) {

365 
	`job_poﬁ_check_jobs
(
jp
);

368 
	`queue_dñëe
(
jp
->
jobqueue
);

369 
	`queue_dñëe
(
jp
->
°©usqueue
);

370 
	`ós£π
(
	`±hªad_muãx_de°roy
(&(
jp
->
pùñock
))==0);

371 
	`ós£π
(
	`±hªad_muãx_de°roy
(&(
jp
->
job¶ock
))==0);

372 
	`‰ì
(
jp
->
w‹kîthªads
);

373 
	`˛o£
(
jp
->
Ωùe
);

374 
	`˛o£
(
jp
->
wpùe
);

375 
	`‰ì
(
jp
);

376 
	}
}

378 
uöt32_t
 
job_övÆ
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*extra) {

379 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

380  
	`job_√w
(
jp
,
OP_INVAL
,
NULL
,
ˇŒback
,
exåa
);

381 
	}
}

383 
uöt32_t
 
job_chunk›
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àngth
) {

384 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

385 
chunk_›_¨gs
 *
¨gs
;

386 
¨gs
 = 
	`mÆloc
((
chunk_›_¨gs
));

387 
	`∑s£π
(
¨gs
);

388 
¨gs
->
chunkid
 = chunkid;

389 
¨gs
->
vîsi⁄
 = version;

390 
¨gs
->
√wvîsi⁄
 =Çewversion;

391 
¨gs
->
c›ychunkid
 = copychunkid;

392 
¨gs
->
c›yvîsi⁄
 = copyversion;

393 
¨gs
->
Àngth
 =Üength;

394  
	`job_√w
(
jp
,
OP_CHUNKOP
,
¨gs
,
ˇŒback
,
exåa
);

395 
	}
}

397 
uöt32_t
 
job_›í
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
) {

398 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

399 
chunk_oc_¨gs
 *
¨gs
;

400 
¨gs
 = 
	`mÆloc
((
chunk_oc_¨gs
));

401 
	`∑s£π
(
¨gs
);

402 
¨gs
->
chunkid
 = chunkid;

403  
	`job_√w
(
jp
,
OP_OPEN
,
¨gs
,
ˇŒback
,
exåa
);

404 
	}
}

406 
uöt32_t
 
job_˛o£
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
) {

407 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

408 
chunk_oc_¨gs
 *
¨gs
;

409 
¨gs
 = 
	`mÆloc
((
chunk_oc_¨gs
));

410 
	`∑s£π
(
¨gs
);

411 
¨gs
->
chunkid
 = chunkid;

412  
	`job_√w
(
jp
,
OP_CLOSE
,
¨gs
,
ˇŒback
,
exåa
);

413 
	}
}

415 
uöt32_t
 
job_ªad
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,
uöt16_t
 
blocknum
,uöt8_à*
buf„r
,uöt32_à
off£t
,uöt32_à
size
,uöt8_à*
¸cbuff
) {

416 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

417 
chunk_rd_¨gs
 *
¨gs
;

418 
¨gs
 = 
	`mÆloc
((
chunk_rd_¨gs
));

419 
	`∑s£π
(
¨gs
);

420 
¨gs
->
chunkid
 = chunkid;

421 
¨gs
->
vîsi⁄
 = version;

422 
¨gs
->
blocknum
 = blocknum;

423 
¨gs
->
buf„r
 = buffer;

424 
¨gs
->
off£t
 = offset;

425 
¨gs
->
size
 = size;

426 
¨gs
->
¸cbuff
 = crcbuff;

427  
	`job_√w
(
jp
,
OP_READ
,
¨gs
,
ˇŒback
,
exåa
);

428 
	}
}

430 
uöt32_t
 
job_wrôe
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,
uöt16_t
 
blocknum
,c⁄° uöt8_à*
buf„r
,uöt32_à
off£t
,uöt32_à
size
,c⁄° uöt8_à*
¸cbuff
) {

431 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

432 
chunk_wr_¨gs
 *
¨gs
;

433 
¨gs
 = 
	`mÆloc
((
chunk_wr_¨gs
));

434 
	`∑s£π
(
¨gs
);

435 
¨gs
->
chunkid
 = chunkid;

436 
¨gs
->
vîsi⁄
 = version;

437 
¨gs
->
blocknum
 = blocknum;

438 
¨gs
->
buf„r
 = buffer;

439 
¨gs
->
off£t
 = offset;

440 
¨gs
->
size
 = size;

441 
¨gs
->
¸cbuff
 = crcbuff;

442  
	`job_√w
(
jp
,
OP_WRITE
,
¨gs
,
ˇŒback
,
exåa
);

443 
	}
}

445 
uöt32_t
 
job_ª∂iˇã
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt8_à
§c˙t
,c⁄° uöt8_à*
§cs
) {

446 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

447 
chunk_Ω_¨gs
 *
¨gs
;

448 
uöt8_t
 *
±r
;

449 
±r
 = 
	`mÆloc
((
chunk_Ω_¨gs
)+
§c˙t
*18);

450 
	`∑s£π
(
±r
);

451 
¨gs
 = (
chunk_Ω_¨gs
*)
±r
;

452 
±r
 +(
chunk_Ω_¨gs
);

453 
¨gs
->
chunkid
 = chunkid;

454 
¨gs
->
vîsi⁄
 = version;

455 
¨gs
->
§c˙t
 = srccnt;

456 
	`mem˝y
(
±r
,
§cs
,
§c˙t
*18);

457  
	`job_√w
(
jp
,
OP_REPLICATE
,
¨gs
,
ˇŒback
,
exåa
);

458 
	}
}

460 
uöt32_t
 
job_ª∂iˇã_sim∂e
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt32_à
ù
,
uöt16_t
 
p‹t
) {

461 
jobpoﬁ
* 
jp
 = (jobpoﬁ*)
jpoﬁ
;

462 
chunk_Ω_¨gs
 *
¨gs
;

463 
uöt8_t
 *
±r
;

464 
±r
 = 
	`mÆloc
((
chunk_Ω_¨gs
)+18);

465 
	`∑s£π
(
±r
);

466 
¨gs
 = (
chunk_Ω_¨gs
*)
±r
;

467 
±r
 +(
chunk_Ω_¨gs
);

468 
¨gs
->
chunkid
 = chunkid;

469 
¨gs
->
vîsi⁄
 = version;

470 
¨gs
->
§c˙t
 = 1;

471 
	`put64bô
(&
±r
,
chunkid
);

472 
	`put32bô
(&
±r
,
vîsi⁄
);

473 
	`put32bô
(&
±r
,
ù
);

474 
	`put16bô
(&
±r
,
p‹t
);

475  
	`job_√w
(
jp
,
OP_REPLICATE
,
¨gs
,
ˇŒback
,
exåa
);

476 
	}
}

	@mfschunkserver/bgjobs.h

19 #i‚de‡
_BGJOBS_H_


20 
	#_BGJOBS_H_


	)

22 
	~<öây≥s.h
>

24 * 
job_poﬁ_√w
(
uöt8_t
 
w‹kîs
,
uöt32_t
 
jobs
,*
wakeupdesc
);

25 
uöt32_t
 
job_poﬁ_jobs_cou¡
(*
jpoﬁ
);

26 
job_poﬁ_dißbÀ_™d_ch™ge_ˇŒback_Æl
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
));

27 
	`job_poﬁ_dißbÀ_job
(*
jpoﬁ
,
uöt32_t
 
jobid
);

28 
	`job_poﬁ_check_jobs
(*
jpoﬁ
);

29 
	`job_poﬁ_ch™ge_ˇŒback
(*
jpoﬁ
,
uöt32_t
 
jobid
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*extra);

30 
	`job_poﬁ_dñëe
(*
jpoﬁ
);

33 
uöt32_t
 
	`job_övÆ
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*extra);

34 
uöt32_t
 
	`job_chunk›
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àngth
);

36 
	#job_dñëe
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
Ë
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,0,0,0,0)

	)

37 
	#job_¸óã
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
Ë
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,0,0,0,1)

	)

38 
	#job_ã°
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
Ë
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,0,0,0,2)

	)

39 
	#job_vîsi⁄
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
Ë(((_√wvîsi⁄)>0)?
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,_√wvîsi⁄,0,0,0xFFFFFFFF):
	`job_övÆ
(_jp,_cb,_ex))

	)

40 
	#job_åunˇã
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_Àngth
Ë(((_√wvîsi⁄)>0&&(_Àngth)!=0xFFFFFFFF)?
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,_√wvîsi⁄,0,0,_Àngth):
	`job_övÆ
(_jp,_cb,_ex))

	)

41 
	#job_du∂iˇã
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_c›ychunkid
,
_c›yvîsi⁄
Ë(((_√wvîsi⁄>0)&&(_c›ychunkid)>0)?
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,_√wvîsi⁄,_c›ychunkid,_c›yvîsi⁄,0xFFFFFFFF):
	`job_övÆ
(_jp,_cb,_ex))

	)

42 
	#job_du±runc
(
_jp
,
_cb
,
_ex
,
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_c›ychunkid
,
_c›yvîsi⁄
,
_Àngth
Ë(((_√wvîsi⁄>0)&&(_c›ychunkid)>0&&(_Àngth)!=0xFFFFFFFF)?
	`job_chunk›
(_jp,_cb,_ex,_chunkid,_vîsi⁄,_√wvîsi⁄,_c›ychunkid,_c›yvîsi⁄,_Àngth):
	`job_övÆ
(_jp,_cb,_ex))

	)

44 
uöt32_t
 
	`job_›í
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
);

45 
uöt32_t
 
	`job_˛o£
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
);

46 
uöt32_t
 
	`job_ªad
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,
uöt16_t
 
blocknum
,uöt8_à*
buf„r
,uöt32_à
off£t
,uöt32_à
size
,uöt8_à*
¸cbuff
);

47 
uöt32_t
 
	`job_wrôe
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,
uöt16_t
 
blocknum
,c⁄° uöt8_à*
buf„r
,uöt32_à
off£t
,uöt32_à
size
,c⁄° uöt8_à*
¸cbuff
);

50 
uöt32_t
 
	`job_ª∂iˇã
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt8_à
§c˙t
,c⁄° uöt8_à*
§cs
);

51 
uöt32_t
 
	`job_ª∂iˇã_sim∂e
(*
jpoﬁ
,(*
ˇŒback
)(
uöt8_t
 
°©us
,*
exåa
),*exåa,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
,uöt32_à
ù
,
uöt16_t
 
p‹t
);

	@mfschunkserver/chartsdata.c

19 
	~"c⁄fig.h
"

21 
	~<time.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<sy¶og.h
>

28 
	~<sys/time.h
>

29 
	~<î∫o.h
>

30 
	~<sys/ªsour˚.h
>

32 
	~"ch¨ts.h
"

33 
	~"maö.h
"

35 
	~"cs£rv.h
"

36 
	~"ma°îc⁄n.h
"

37 
	~"hdd•a˚mgr.h
"

38 
	~"ª∂iˇt‹.h
"

40 
	#CHARTS_FILENAME
 "cs°©s.mfs"

	)

42 
	#CHARTS_UCPU
 0

	)

43 
	#CHARTS_SCPU
 1

	)

44 
	#CHARTS_MASTERIN
 2

	)

45 
	#CHARTS_MASTEROUT
 3

	)

46 
	#CHARTS_CSCONNIN
 4

	)

47 
	#CHARTS_CSCONNOUT
 5

	)

48 
	#CHARTS_CSSERVIN
 6

	)

49 
	#CHARTS_CSSERVOUT
 7

	)

50 
	#CHARTS_BYTESR
 8

	)

51 
	#CHARTS_BYTESW
 9

	)

52 
	#CHARTS_LLOPR
 10

	)

53 
	#CHARTS_LLOPW
 11

	)

54 
	#CHARTS_DATABYTESR
 12

	)

55 
	#CHARTS_DATABYTESW
 13

	)

56 
	#CHARTS_DATALLOPR
 14

	)

57 
	#CHARTS_DATALLOPW
 15

	)

58 
	#CHARTS_HLOPR
 16

	)

59 
	#CHARTS_HLOPW
 17

	)

60 
	#CHARTS_RTIME
 18

	)

61 
	#CHARTS_WTIME
 19

	)

62 
	#CHARTS_REPL
 20

	)

63 
	#CHARTS_CREATE
 21

	)

64 
	#CHARTS_DELETE
 22

	)

65 
	#CHARTS_VERSION
 23

	)

66 
	#CHARTS_DUPLICATE
 24

	)

67 
	#CHARTS_TRUNCATE
 25

	)

68 
	#CHARTS_DUPTRUNC
 26

	)

69 
	#CHARTS_TEST
 27

	)

70 
	#CHARTS_CHUNKIOJOBS
 28

	)

71 
	#CHARTS_CHUNKOPJOBS
 29

	)

73 
	#CHARTS
 30

	)

76 
	#STATDEFS
 { \

77 {"u˝u" ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

78 {"s˝u" ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

79 {"ma°îö" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

80 {"ma°îout" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

81 {"csc⁄nö" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

82 {"csc⁄nout" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

83 {"cs£rvö" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

84 {"cs£rvout" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

85 {"byã§" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

86 {"byãsw" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

87 {"Œ›r" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

88 {"Œ›w" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

89 {"d©abyã§" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

90 {"d©abyãsw" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

91 {"d©Æl›r" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

92 {"d©Æl›w" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

93 {"hl›r" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

94 {"hl›w" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

95 {"πime" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MICRO
, 1,60}, \

96 {"wtime" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MICRO
, 1,60}, \

97 {"ª∂" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

98 {"¸óã" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

99 {"dñëe" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

100 {"vîsi⁄" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

101 {"du∂iˇã" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

102 {"åunˇã" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

103 {"du±runc" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

104 {"ã°" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

105 {"chunkiojobs" ,
CHARTS_MODE_MAX
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

106 {"chunk›jobs" ,
CHARTS_MODE_MAX
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

107 {
NULL
 ,0 ,0,0 , 0, 0} \

108 };

	)

110 
	#CALCDEFS
 { \

111 
CHARTS_DEFS_END
 \

112 };

	)

115 
	#ESTATDEFS
 { \

116 {
	`CHARTS_DIRECT
(
CHARTS_UCPU
Ë,CHARTS_DIRECT(
CHARTS_SCPU
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

117 {
	`CHARTS_DIRECT
(
CHARTS_CSSERVIN
Ë,CHARTS_DIRECT(
CHARTS_CSCONNIN
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

118 {
	`CHARTS_DIRECT
(
CHARTS_CSSERVOUT
Ë,CHARTS_DIRECT(
CHARTS_CSCONNOUT
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

119 {
	`CHARTS_DIRECT
(
CHARTS_BYTESR
Ë,CHARTS_DIRECT(
CHARTS_DATABYTESR
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

120 {
	`CHARTS_DIRECT
(
CHARTS_BYTESW
Ë,CHARTS_DIRECT(
CHARTS_DATABYTESW
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

121 {
	`CHARTS_DIRECT
(
CHARTS_LLOPR
Ë,CHARTS_DIRECT(
CHARTS_DATALLOPR
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

122 {
	`CHARTS_DIRECT
(
CHARTS_LLOPW
Ë,CHARTS_DIRECT(
CHARTS_DATALLOPW
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

123 {
	`CHARTS_DIRECT
(
CHARTS_CHUNKOPJOBS
Ë,CHARTS_DIRECT(
CHARTS_CHUNKIOJOBS
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

124 {
CHARTS_NONE
 ,CHARTS_NONE ,CHARTS_NONE ,0 ,0,0 , 0, 0} \

125 };

	)

127 c⁄° 
uöt32_t
 
	gˇlcdefs
[]=
CALCDEFS


128 c⁄° 
°©def
 
°©defs
[]=
STATDEFS


129 c⁄° 
e°©def
 
e°©defs
[]=
ESTATDEFS


131 
ôimîvÆ
 
ô_£t
;

133 
	$ch¨tsd©a_ª‰esh
() {

134 
uöt64_t
 
d©a
[
CHARTS
];

135 
uöt32_t
 
i
,
bö
,
bout
,
›r
,
›w
,
dbr
,
dbw
,
d›r
,
d›w
,
ª∂
;

136 
uöt32_t
 
›_¸
,
›_de
,
›_ve
,
›_du
,
›_å
,
›_dt
,
›_ã
;

137 
uöt32_t
 
cs£rvjobs
,
ma°îjobs
;

138 
ôimîvÆ
 
uc
,
pc
;

139 
uöt32_t
 
ucu£c
,
pcu£c
;

144 
i
=0 ; i<
CHARTS
 ; i++) {

145 
d©a
[
i
]=0;

173 
	`£tôimî
(
ITIMER_VIRTUAL
,&
ô_£t
,&
uc
);

174 
	`£tôimî
(
ITIMER_PROF
,&
ô_£t
,&
pc
);

176 i‡(
uc
.
ô_vÆue
.
tv_£c
<=999) {

177 
uc
.
ô_vÆue
.
tv_£c
 = 999-uc.it_value.tv_sec;

178 
uc
.
ô_vÆue
.
tv_u£c
 = 999999-uc.it_value.tv_usec;

180 
uc
.
ô_vÆue
.
tv_£c
 = 0;

181 
uc
.
ô_vÆue
.
tv_u£c
 = 0;

183 i‡(
pc
.
ô_vÆue
.
tv_£c
<=999) {

184 
pc
.
ô_vÆue
.
tv_£c
 = 999-pc.it_value.tv_sec;

185 
pc
.
ô_vÆue
.
tv_u£c
 = 999999-pc.it_value.tv_usec;

187 
pc
.
ô_vÆue
.
tv_£c
 = 0;

188 
uc
.
ô_vÆue
.
tv_u£c
 = 0;

191 
ucu£c
 = 
uc
.
ô_vÆue
.
tv_£c
*1000000+uc.ô_vÆue.
tv_u£c
;

192 
pcu£c
 = 
pc
.
ô_vÆue
.
tv_£c
*1000000+pc.ô_vÆue.
tv_u£c
;

194 i‡(
pcu£c
>
ucu£c
) {

195 
pcu£c
-=
ucu£c
;

197 
pcu£c
=0;

199 
d©a
[
CHARTS_UCPU
] = 
ucu£c
;

200 
d©a
[
CHARTS_SCPU
] = 
pcu£c
;

202 
	`ma°îc⁄n_°©s
(&
bö
,&
bout
,&
ma°îjobs
);

203 
d©a
[
CHARTS_MASTERIN
]=
bö
;

204 
d©a
[
CHARTS_MASTEROUT
]=
bout
;

205 
d©a
[
CHARTS_CHUNKOPJOBS
]=
ma°îjobs
;

209 
d©a
[
CHARTS_CSCONNIN
]=0;

210 
d©a
[
CHARTS_CSCONNOUT
]=0;

211 
	`cs£rv_°©s
(&
bö
,&
bout
,&
›r
,&
›w
,&
cs£rvjobs
);

212 
d©a
[
CHARTS_CSSERVIN
]=
bö
;

213 
d©a
[
CHARTS_CSSERVOUT
]=
bout
;

214 
d©a
[
CHARTS_CHUNKIOJOBS
]=
cs£rvjobs
;

215 
d©a
[
CHARTS_HLOPR
]=
›r
;

216 
d©a
[
CHARTS_HLOPW
]=
›w
;

217 
	`hdd_°©s
(&
bö
,&
bout
,&
›r
,&
›w
,&
dbr
,&
dbw
,&
d›r
,&
d›w
,
d©a
+
CHARTS_RTIME
,d©a+
CHARTS_WTIME
);

218 
d©a
[
CHARTS_BYTESR
]=
bö
;

219 
d©a
[
CHARTS_BYTESW
]=
bout
;

220 
d©a
[
CHARTS_LLOPR
]=
›r
;

221 
d©a
[
CHARTS_LLOPW
]=
›w
;

222 
d©a
[
CHARTS_DATABYTESR
]=
dbr
;

223 
d©a
[
CHARTS_DATABYTESW
]=
dbw
;

224 
d©a
[
CHARTS_DATALLOPR
]=
d›r
;

225 
d©a
[
CHARTS_DATALLOPW
]=
d›w
;

226 
	`ª∂iˇt‹_°©s
(&
ª∂
);

227 
d©a
[
CHARTS_REPL
]=
ª∂
;

228 
	`hdd_›_°©s
(&
›_¸
,&
›_de
,&
›_ve
,&
›_du
,&
›_å
,&
›_dt
,&
›_ã
);

229 
d©a
[
CHARTS_CREATE
]=
›_¸
;

230 
d©a
[
CHARTS_DELETE
]=
›_de
;

231 
d©a
[
CHARTS_VERSION
]=
›_ve
;

232 
d©a
[
CHARTS_DUPLICATE
]=
›_du
;

233 
d©a
[
CHARTS_TRUNCATE
]=
›_å
;

234 
d©a
[
CHARTS_DUPTRUNC
]=
›_dt
;

235 
d©a
[
CHARTS_TEST
]=
›_ã
;

237 
	`ch¨ts_add
(
d©a
,
	`maö_time
()-60);

238 
	}
}

240 
	$ch¨tsd©a_ãrm
() {

241 
	`ch¨tsd©a_ª‰esh
();

242 
	`ch¨ts_°‹e
();

243 
	`ch¨ts_ãrm
();

244 
	}
}

246 
	$ch¨tsd©a_°‹e
() {

247 
	`ch¨ts_°‹e
();

248 
	}
}

250 
	$ch¨tsd©a_öô
 () {

251 
ôimîvÆ
 
uc
,
pc
;

253 
ô_£t
.
ô_öãrvÆ
.
tv_£c
 = 0;

254 
ô_£t
.
ô_öãrvÆ
.
tv_u£c
 = 0;

255 
ô_£t
.
ô_vÆue
.
tv_£c
 = 999;

256 
ô_£t
.
ô_vÆue
.
tv_u£c
 = 999999;

257 
	`£tôimî
(
ITIMER_VIRTUAL
,&
ô_£t
,&
uc
);

258 
	`£tôimî
(
ITIMER_PROF
,&
ô_£t
,&
pc
);

260 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
ch¨tsd©a_ª‰esh
);

261 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,3600,0,
ch¨tsd©a_°‹e
);

262 
	`maö_de°ru˘ªgi°î
(
ch¨tsd©a_ãrm
);

263  
	`ch¨ts_öô
(
ˇlcdefs
,
°©defs
,
e°©defs
,
CHARTS_FILENAME
);

264 
	}
}

	@mfschunkserver/chartsdata.h

19 #i‚de‡
_CHARTSDATA_H_


20 
	#_CHARTSDATA_H_


	)

22 
	~<öây≥s.h
>

24 
ch¨tsd©a_öô
 ();

	@mfschunkserver/csserv.c

19 
	~"c⁄fig.h
"

21 
	#BGJOBS
 1

	)

22 
	#BGJOBSCNT
 1000

	)

24 
	~<time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/uio.h
>

27 
	~<uni°d.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sy¶og.h
>

31 
	~<î∫o.h
>

32 
	~<öây≥s.h
>

33 
	~<√töë/ö.h
>

35 
	~"MFSCommuniˇti⁄.h
"

37 
	~"d©≠ack.h
"

38 
	~"cs£rv.h
"

39 
	~"cfg.h
"

40 
	~"maö.h
"

41 
	~"sockës.h
"

42 
	~"hdd•a˚mgr.h
"

44 
	~"ch¨ts.h
"

45 
	~"¶oggî.h
"

46 #ifde‡
BGJOBS


47 
	~"bgjobs.h
"

49 
	~"mas£π.h
"

52 
	#CSSERV_TIMEOUT
 5

	)

54 
	#CONNECT_RETRIES
 10

	)

55 
	#CONNECT_TIMEOUT
(
˙t
Ë(((˙t)%2)?(300000*(1<<((˙t)>>1))):(200000*(1<<((˙t)>>1))))

	)

57 
	#MaxPackëSize
 100000

	)

60 íum {
	mHEADER
,
	mDATA
};

62 íum {
	mIDLE
,
	mREAD
,
	mWRITELAST
,
	mCONNECTING
,
	mWRITEINIT
,
	mWRITEFWD
,
	mWRITEFINISH
,
	mCLOSE
,
	mCLOSEWAIT
,
	mCLOSED
};

64 #ifde‡
BGJOBS


65 
	swrôe°©us
 {

66 
uöt32_t
 
	mwrôeid
;

67 
wrôe°©us
 *
	m√xt
;

68 } 
	twrôe°©us
;

71 
	s∑ckë°ru˘
 {

72 
∑ckë°ru˘
 *
	m√xt
;

73 
uöt8_t
 *
	m°¨çå
;

74 
uöt32_t
 
	mbyã¶e·
;

75 
uöt8_t
 *
	m∑ckë
;

76 } 
	t∑ckë°ru˘
;

78 
	scs£rvíåy
 {

79 
uöt8_t
 
	m°©e
;

80 
uöt8_t
 
	mmode
;

81 
uöt8_t
 
	mfwdmode
;

83 
	msock
;

84 
	mfwdsock
;

85 
uöt64_t
 
	mc⁄n°¨t
;

86 
uöt32_t
 
	mfwdù
;

87 
uöt16_t
 
	mfwdp‹t
;

88 
uöt8_t
 
	mc⁄ƒëry˙t
;

89 
öt32_t
 
	mpdes˝os
;

90 
öt32_t
 
	mfwdpdes˝os
;

91 
uöt32_t
 
	ma˘ivôy
;

92 
uöt8_t
 
	mhdrbuff
[8];

93 
uöt8_t
 
	mfwdhdrbuff
[8];

94 
∑ckë°ru˘
 
	möpuçackë
;

95 
uöt8_t
 *
	mfwd°¨çå
;

96 
uöt32_t
 
	mfwdbyã¶e·
;

97 
∑ckë°ru˘
 
	mfwdöpuçackë
;

98 
uöt8_t
 *
	mfwdöô∑ckë
;

99 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

102 #ifde‡
BGJOBS


104 
uöt32_t
 
	mwjobid
;

105 
uöt32_t
 
	mwjobwrôeid
;

106 
wrôe°©us
 *
	mtodﬁi°
;

109 
uöt32_t
 
	mrjobid
;

110 
uöt8_t
 
	mtodo˙t
;

113 *
	mΩackë
;

114 *
	mw∑ckë
;

117 
uöt8_t
 
	mchunkis›í
;

118 
uöt64_t
 
	mchunkid
;

119 
uöt32_t
 
	mvîsi⁄
;

120 
uöt32_t
 
	moff£t
;

121 
uöt32_t
 
	msize
;

133 
cs£rvíåy
 *
	m√xt
;

134 } 
	tcs£rvíåy
;

136 
cs£rvíåy
 *
	gcs£rvhód
=
NULL
;

137 
	glsock
;

138 
öt32_t
 
	glsockpdes˝os
;

140 #ifde‡
BGJOBS


141 *
	gjpoﬁ
;

142 
	gjobfd
;

143 
öt32_t
 
	gjobfdpdes˝os
;

146 
uöt32_t
 
	gmyli°íù
;

147 
uöt16_t
 
	gmyli°íp‹t
;

149 
uöt32_t
 
	g°©s_byãsö
=0;

150 
uöt32_t
 
	g°©s_byãsout
=0;

151 
uöt32_t
 
	g°©s_hl›r
=0;

152 
uöt32_t
 
	g°©s_hl›w
=0;

153 
uöt32_t
 
	g°©s_maxjobs˙t
=0;

156 *
	gLi°íHo°
;

157 *
	gLi°íP‹t
;

159 
	$cs£rv_°©s
(
uöt32_t
 *
bö
,uöt32_à*
bout
,uöt32_à*
hl›r
,uöt32_à*
hl›w
,uöt32_à*
maxjobs˙t
) {

160 *
bö
 = 
°©s_byãsö
;

161 *
bout
 = 
°©s_byãsout
;

162 *
hl›r
 = 
°©s_hl›r
;

163 *
hl›w
 = 
°©s_hl›w
;

164 *
maxjobs˙t
 = 
°©s_maxjobs˙t
;

165 
°©s_byãsö
 = 0;

166 
°©s_byãsout
 = 0;

167 
°©s_hl›r
 = 0;

168 
°©s_hl›w
 = 0;

169 
°©s_maxjobs˙t
 = 0;

170 
	}
}

172 * 
	$cs£rv_¸óã_dëached_∑ckë
(
uöt32_t
 
ty≥
,uöt32_à
size
) {

173 
∑ckë°ru˘
 *
ouçackë
;

174 
uöt8_t
 *
±r
;

175 
uöt32_t
 
psize
;

177 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

178 
	`∑s£π
(
ouçackë
);

179 
psize
 = 
size
+8;

180 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

181 
	`∑s£π
(
ouçackë
->
∑ckë
);

182 
ouçackë
->
byã¶e·
 = 
psize
;

183 
±r
 = 
ouçackë
->
∑ckë
;

184 
	`put32bô
(&
±r
,
ty≥
);

185 
	`put32bô
(&
±r
,
size
);

186 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

187 
ouçackë
->
√xt
 = 
NULL
;

188  
ouçackë
;

189 
	}
}

191 
uöt8_t
* 
	$cs£rv_gë_∑ckë_d©a
(*
∑ckë
) {

192 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

193  
ouçackë
->
∑ckë
+8;

194 
	}
}

196 
	$cs£rv_dñëe_∑ckë
(*
∑ckë
) {

197 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

198 
	`‰ì
(
ouçackë
->
∑ckë
);

199 
	`‰ì
(
ouçackë
);

200 
	}
}

202 
	$cs£rv_©èch_∑ckë
(
cs£rvíåy
 *
ïå
,*
∑ckë
) {

203 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

204 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

205 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

206 
	}
}

208 * 
	$cs£rv_¥e£rve_öpuçackë
(
cs£rvíåy
 *
ïå
) {

209 * 
ªt
;

210 
ªt
 = 
ïå
->
öpuçackë
.
∑ckë
;

211 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

212  
ªt
;

213 
	}
}

215 
	$cs£rv_dñëe_¥e£rved
(*
p
) {

216 i‡(
p
) {

217 
	`‰ì
(
p
);

219 
	}
}

221 
uöt8_t
* 
	$cs£rv_¸óã_©èched_∑ckë
(
cs£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

222 
∑ckë°ru˘
 *
ouçackë
;

223 
uöt8_t
 *
±r
;

224 
uöt32_t
 
psize
;

226 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

227 
	`∑s£π
(
ouçackë
);

228 
psize
 = 
size
+8;

229 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

230 
	`∑s£π
(
ouçackë
->
∑ckë
);

231 
ouçackë
->
byã¶e·
 = 
psize
;

232 
±r
 = 
ouçackë
->
∑ckë
;

233 
	`put32bô
(&
±r
,
ty≥
);

234 
	`put32bô
(&
±r
,
size
);

235 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

236 
ouçackë
->
√xt
 = 
NULL
;

237 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

238 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

239  
±r
;

240 
	}
}

243 
	$cs£rv_öôc⁄√˘
(
cs£rvíåy
 *
ïå
) {

244 
°©us
;

245 
ïå
->
fwdsock
=
	`t˝sockë
();

246 i‡(
ïå
->
fwdsock
<0) {

247 
	`mfs_îæog
(
LOG_WARNING
,"create socket,Érror");

250 i‡(
	`t˝n⁄block
(
ïå
->
fwdsock
)<0) {

251 
	`mfs_îæog
(
LOG_WARNING
,"setÇonblock,Érror");

252 
	`t˝˛o£
(
ïå
->
fwdsock
);

253 
ïå
->
fwdsock
=-1;

256 
°©us
 = 
	`t˝numc⁄√˘
(
ïå
->
fwdsock
,ïå->
fwdù
,ïå->
fwdp‹t
);

257 i‡(
°©us
<0) {

258 
	`mfs_îæog
(
LOG_WARNING
,"connect failed,Érror");

259 
	`t˝˛o£
(
ïå
->
fwdsock
);

260 
ïå
->
fwdsock
=-1;

263 i‡(
°©us
==0) {

265 
	`t˝nodñay
(
ïå
->
fwdsock
);

266 
ïå
->
°©e
=
WRITEINIT
;

270 
ïå
->
°©e
=
CONNECTING
;

271 
ïå
->
c⁄n°¨t
=
	`maö_utime
();

274 
	}
}

276 
	$cs£rv_ªåyc⁄√˘
(
cs£rvíåy
 *
ïå
) {

277 
uöt8_t
 *
±r
;

278 
	`t˝˛o£
(
ïå
->
fwdsock
);

279 
ïå
->
fwdsock
=-1;

280 
ïå
->
c⁄ƒëry˙t
++;

281 i‡(
ïå
->
c⁄ƒëry˙t
<
CONNECT_RETRIES
) {

282 i‡(
	`cs£rv_öôc⁄√˘
(
ïå
)<0) {

283 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

284 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

285 
	`put32bô
(&
±r
,0);

286 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

287 
ïå
->
°©e
 = 
WRITEFINISH
;

291 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

292 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

293 
	`put32bô
(&
±r
,0);

294 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

295 
ïå
->
°©e
 = 
WRITEFINISH
;

298 
	}
}

300 
	$cs£rv_makefwd∑ckë
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

301 
uöt8_t
 *
±r
;

302 
uöt32_t
 
psize
;

303 
psize
 = 12+
Àngth
;

304 
ïå
->
fwdbyã¶e·
 = 8+
psize
;

305 
ïå
->
fwdöô∑ckë
 = 
	`mÆloc
”±r->
fwdbyã¶e·
);

306 
	`∑s£π
(
ïå
->
fwdöô∑ckë
);

307 
ïå
->
fwd°¨çå
 =É±r->
fwdöô∑ckë
;

308 i‡(
ïå
->
fwdöô∑ckë
==
NULL
) {

311 
±r
 = 
ïå
->
fwdöô∑ckë
;

312 
	`put32bô
(&
±r
,
CLTOCS_WRITE
);

313 
	`put32bô
(&
±r
,
psize
);

314 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

315 
	`put32bô
(&
±r
,
ïå
->
vîsi⁄
);

316 i‡(
Àngth
>0) {

317 
	`mem˝y
(
±r
,
d©a
,
Àngth
);

320 
	}
}

322 #ifde‡
BGJOBS


324 
cs£rv_check_√xçackë
(
cs£rvíåy
 *
ïå
);

327 
	$cs£rv_dñayed_˛o£
(
uöt8_t
 
°©us
,*
e
) {

328 
cs£rvíåy
 *
ïå
 = (cs£rvíåy*)
e
;

329 i‡(
ïå
->
wjobid
>0 &&É±r->
wjobwrôeid
==0 && 
°©us
==
STATUS_OK
) {

330 
ïå
->
chunkis›í
 = 1;

332 i‡(
ïå
->
chunkis›í
) {

333 
	`job_˛o£
(
jpoﬁ
,
NULL
,NULL,
ïå
->
chunkid
);

334 
ïå
->
chunkis›í
=0;

336 
ïå
->
°©e
 = 
CLOSED
;

337 
	}
}

342 
cs£rv_ªad_c⁄töue
(
cs£rvíåy
 *
ïå
);

344 
	$cs£rv_ªad_föished
(
uöt8_t
 
°©us
,*
e
) {

345 
cs£rvíåy
 *
ïå
 = (cs£rvíåy*)
e
;

346 
uöt8_t
 *
±r
;

347 
ïå
->
rjobid
=0;

348 i‡(
°©us
==
STATUS_OK
) {

349 
ïå
->
todo˙t
--;

350 i‡(
ïå
->
todo˙t
==0) {

351 
	`cs£rv_ªad_c⁄töue
(
ïå
);

354 i‡(
ïå
->
Ωackë
) {

355 
	`cs£rv_dñëe_∑ckë
(
ïå
->
Ωackë
);

356 
ïå
->
Ωackë
 = 
NULL
;

358 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

359 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

360 
	`put8bô
(&
±r
,
°©us
);

361 
	`job_˛o£
(
jpoﬁ
,
NULL
,NULL,
ïå
->
chunkid
);

362 
ïå
->
chunkis›í
 = 0;

363 
ïå
->
°©e
 = 
IDLE
;

365 
	}
}

367 
	$cs£rv_£nd_föished
(
cs£rvíåy
 *
ïå
) {

368 
ïå
->
todo˙t
--;

369 i‡(
ïå
->
todo˙t
==0) {

370 
	`cs£rv_ªad_c⁄töue
(
ïå
);

372 
	}
}

374 
	$cs£rv_ªad_c⁄töue
(
cs£rvíåy
 *
ïå
) {

375 
uöt16_t
 
blocknum
;

376 
uöt16_t
 
blockoff£t
;

377 
uöt32_t
 
size
;

378 
uöt8_t
 *
±r
;

380 i‡(
ïå
->
Ωackë
) {

381 
	`cs£rv_©èch_∑ckë
(
ïå
,ïå->
Ωackë
);

382 
ïå
->
Ωackë
=
NULL
;

383 
ïå
->
todo˙t
++;

385 i‡(
ïå
->
size
==0) {

386 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

387 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

388 
	`put8bô
(&
±r
,
STATUS_OK
);

389 
	`job_˛o£
(
jpoﬁ
,
NULL
,NULL,
ïå
->
chunkid
);

390 
ïå
->
chunkis›í
 = 0;

391 
ïå
->
°©e
 = 
IDLE
;

393 
blocknum
 = (
ïå
->
off£t
)>>
MFSBLOCKBITS
;

394 
blockoff£t
 = (
ïå
->
off£t
)&
MFSBLOCKMASK
;

395 i‡(((
ïå
->
off£t
+ïå->
size
-1)>>
MFSBLOCKBITS
Ë=
blocknum
) {

396 
size
 = 
ïå
->size;

398 
size
 = 
MFSBLOCKSIZE
-
blockoff£t
;

400 
ïå
->
Ωackë
 = 
	`cs£rv_¸óã_dëached_∑ckë
(
CSTOCL_READ_DATA
,8+2+2+4+4+
size
);

401 
±r
 = 
	`cs£rv_gë_∑ckë_d©a
(
ïå
->
Ωackë
);

402 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

403 
	`put16bô
(&
±r
,
blocknum
);

404 
	`put16bô
(&
±r
,
blockoff£t
);

405 
	`put32bô
(&
±r
,
size
);

406 
ïå
->
rjobid
 = 
	`job_ªad
(
jpoﬁ
,
cs£rv_ªad_föished
,ïå,ïå->
chunkid
,ïå->
vîsi⁄
,
blocknum
,
±r
+4,
blockoff£t
,
size
,ptr);

407 i‡(
ïå
->
rjobid
==0) {

408 
ïå
->
°©e
 = 
CLOSE
;

411 
ïå
->
todo˙t
++;

412 
ïå
->
off£t
+=
size
;

413 
ïå
->
size
-=size;

415 
	}
}

417 
	$cs£rv_ªad_öô
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

418 
uöt8_t
 *
±r
;

419 
uöt8_t
 
°©us
;

421 i‡(
Àngth
!=8+4+4+4) {

422 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_READ - wr⁄g sizê(%"
PRIu32
"/20)",
Àngth
);

423 
ïå
->
°©e
 = 
CLOSE
;

426 
ïå
->
chunkid
 = 
	`gë64bô
(&
d©a
);

427 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

428 
ïå
->
off£t
 = 
	`gë32bô
(&
d©a
);

429 
ïå
->
size
 = 
	`gë32bô
(&
d©a
);

430 
°©us
 = 
	`hdd_check_vîsi⁄
(
ïå
->
chunkid
,ïå->
vîsi⁄
);

431 i‡(
°©us
!=
STATUS_OK
) {

432 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

433 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

434 
	`put8bô
(&
±r
,
°©us
);

437 i‡(
ïå
->
size
==0) {

438 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

439 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

440 
	`put8bô
(&
±r
,
STATUS_OK
);

443 i‡(
ïå
->
size
>
MFSCHUNKSIZE
) {

444 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

445 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

446 
	`put8bô
(&
±r
,
ERROR_WRONGSIZE
);

449 i‡(
ïå
->
off£t
>=
MFSCHUNKSIZE
 ||É±r->off£t+ïå->
size
>MFSCHUNKSIZE) {

450 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

451 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

452 
	`put8bô
(&
±r
,
ERROR_WRONGOFFSET
);

455 
°©us
 = 
	`hdd_›í
(
ïå
->
chunkid
);

456 i‡(
°©us
!=
STATUS_OK
) {

457 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

458 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

459 
	`put8bô
(&
±r
,
°©us
);

462 
°©s_hl›r
++;

463 
ïå
->
chunkis›í
 = 1;

464 
ïå
->
°©e
 = 
READ
;

465 
ïå
->
todo˙t
 = 0;

466 
ïå
->
rjobid
 = 0;

467 
	`cs£rv_ªad_c⁄töue
(
ïå
);

468 
	}
}

472 
	$cs£rv_wrôe_föished
(
uöt8_t
 
°©us
,*
e
) {

473 
cs£rvíåy
 *
ïå
 = (cs£rvíåy*)
e
;

474 
uöt8_t
 *
±r
;

475 
wrôe°©us
 **
wµå
,*
w±r
;

477 
ïå
->
wjobid
 = 0;

478 i‡(
°©us
!=
STATUS_OK
) {

479 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

480 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

481 
	`put32bô
(&
±r
,
ïå
->
wjobwrôeid
);

482 
	`put8bô
(&
±r
,
°©us
);

483 
ïå
->
°©e
 = 
WRITEFINISH
;

486 i‡(
ïå
->
wjobwrôeid
==0) {

487 
ïå
->
chunkis›í
 = 1;

489 i‡(
ïå
->
°©e
==
WRITELAST
) {

490 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

491 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

492 
	`put32bô
(&
±r
,
ïå
->
wjobwrôeid
);

493 
	`put8bô
(&
±r
,
STATUS_OK
);

495 
wµå
 = &(
ïå
->
todﬁi°
);

496 (
w±r
=*
wµå
)) {

497 i‡(
w±r
->
wrôeid
==
ïå
->
wjobwrôeid
) {

498 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

499 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

500 
	`put32bô
(&
±r
,
ïå
->
wjobwrôeid
);

501 
	`put8bô
(&
±r
,
STATUS_OK
);

502 *
wµå
 = 
w±r
->
√xt
;

503 
	`‰ì
(
w±r
);

505 
wµå
 = &(
w±r
->
√xt
);

509 
w±r
 = 
	`mÆloc
((
wrôe°©us
));

510 
	`∑s£π
(
w±r
);

511 
w±r
->
wrôeid
 = 
ïå
->
wjobwrôeid
;

512 
w±r
->
√xt
 = 
ïå
->
todﬁi°
;

513 
ïå
->
todﬁi°
 = 
w±r
;

515 
	`cs£rv_check_√xçackë
(
ïå
);

516 
	}
}

518 
	$cs£rv_wrôe_öô
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

519 
uöt8_t
 *
±r
;

520 
uöt8_t
 
°©us
;

522 i‡(
Àngth
<12 || ((length-12)%6)!=0) {

523 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE - wr⁄g sizê(%"
PRIu32
"/12+N*6)",
Àngth
);

524 
ïå
->
°©e
 = 
CLOSE
;

527 
ïå
->
chunkid
 = 
	`gë64bô
(&
d©a
);

528 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

529 
°©us
 = 
	`hdd_check_vîsi⁄
(
ïå
->
chunkid
,ïå->
vîsi⁄
);

530 i‡(
°©us
!=
STATUS_OK
) {

531 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

532 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

533 
	`put32bô
(&
±r
,0);

534 
	`put8bô
(&
±r
,
°©us
);

535 
ïå
->
°©e
 = 
WRITEFINISH
;

539 i‡(
Àngth
>(8+4)) {

540 
ïå
->
fwdù
 = 
	`gë32bô
(&
d©a
);

541 
ïå
->
fwdp‹t
 = 
	`gë16bô
(&
d©a
);

542 
ïå
->
c⁄ƒëry˙t
 = 0;

543 i‡(
	`cs£rv_makefwd∑ckë
(
ïå
,
d©a
,
Àngth
-12-6)<0) {

544 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

545 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

546 
	`put32bô
(&
±r
,0);

547 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

548 
ïå
->
°©e
 = 
WRITEFINISH
;

551 i‡(
	`cs£rv_öôc⁄√˘
(
ïå
)<0) {

552 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

553 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

554 
	`put32bô
(&
±r
,0);

555 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

556 
ïå
->
°©e
 = 
WRITEFINISH
;

560 
ïå
->
°©e
 = 
WRITELAST
;

562 
°©s_hl›w
++;

564 
ïå
->
wjobwrôeid
 = 0;

565 
ïå
->
wjobid
 = 
	`job_›í
(
jpoﬁ
,
cs£rv_wrôe_föished
,ïå,ïå->
chunkid
);

566 
	}
}

568 
	$cs£rv_wrôe_d©a
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

569 
uöt64_t
 
chunkid
;

570 
uöt16_t
 
blocknum
;

571 
uöt16_t
 
off£t
;

572 
uöt32_t
 
size
;

573 
uöt32_t
 
wrôeid
;

574 
uöt8_t
 *
±r
;

576 i‡(
Àngth
<8+4+2+2+4+4) {

577 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE_DATA - wr⁄g sizê(%"
PRIu32
"/24+size)",
Àngth
);

578 
ïå
->
°©e
 = 
CLOSE
;

581 
chunkid
 = 
	`gë64bô
(&
d©a
);

582 
wrôeid
 = 
	`gë32bô
(&
d©a
);

583 
blocknum
 = 
	`gë16bô
(&
d©a
);

584 
off£t
 = 
	`gë16bô
(&
d©a
);

585 
size
 = 
	`gë32bô
(&
d©a
);

586 i‡(
Àngth
!=8+4+2+2+4+4+
size
) {

587 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE_DATA - wr⁄g sizê(%"
PRIu32
"/24+%"PRIu32")",
Àngth
,
size
);

588 
ïå
->
°©e
 = 
CLOSE
;

591 i‡(
chunkid
!=
ïå
->chunkid) {

592 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

593 
	`put64bô
(&
±r
,
chunkid
);

594 
	`put32bô
(&
±r
,
wrôeid
);

595 
	`put8bô
(&
±r
,
ERROR_WRONGCHUNKID
);

596 
ïå
->
°©e
 = 
WRITEFINISH
;

599 i‡(
ïå
->
w∑ckë
) {

600 
	`cs£rv_dñëe_¥e£rved
(
ïå
->
w∑ckë
);

602 
ïå
->
w∑ckë
 = 
	`cs£rv_¥e£rve_öpuçackë
(eptr);

603 
ïå
->
wjobwrôeid
 = 
wrôeid
;

604 
ïå
->
wjobid
 = 
	`job_wrôe
(
jpoﬁ
,
cs£rv_wrôe_föished
,ïå,
chunkid
,ïå->
vîsi⁄
,
blocknum
,
d©a
+4,
off£t
,
size
,data);

606 
	}
}

608 
	$cs£rv_wrôe_°©us
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

609 
uöt8_t
 *
±r
;

610 
uöt64_t
 
chunkid
;

611 
uöt32_t
 
wrôeid
;

612 
uöt8_t
 
°©us
;

613 
wrôe°©us
 **
wµå
,*
w±r
;

615 i‡(
Àngth
!=8+4+1) {

616 
	`sy¶og
(
LOG_NOTICE
,"CSTOCL_WRITE_STATUS - wr⁄g sizê(%"
PRIu32
"/13)",
Àngth
);

617 
ïå
->
°©e
 = 
CLOSE
;

620 
chunkid
 = 
	`gë64bô
(&
d©a
);

621 
wrôeid
 = 
	`gë32bô
(&
d©a
);

622 
°©us
 = 
	`gë8bô
(&
d©a
);

626 i‡(
ïå
->
chunkid
!=chunkid) {

627 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

628 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

629 
	`put32bô
(&
±r
,0);

630 
	`put8bô
(&
±r
,
ERROR_WRONGCHUNKID
);

631 
ïå
->
°©e
 = 
WRITEFINISH
;

634 i‡(
°©us
!=
STATUS_OK
) {

635 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

636 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

637 
	`put32bô
(&
±r
,
wrôeid
);

638 
	`put8bô
(&
±r
,
°©us
);

639 
ïå
->
°©e
 = 
WRITEFINISH
;

642 
wµå
 = &(
ïå
->
todﬁi°
);

643 (
w±r
=*
wµå
)) {

644 i‡(
w±r
->
wrôeid
==writeid) {

645 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

646 
	`put64bô
(&
±r
,
chunkid
);

647 
	`put32bô
(&
±r
,
wrôeid
);

648 
	`put8bô
(&
±r
,
STATUS_OK
);

649 *
wµå
 = 
w±r
->
√xt
;

650 
	`‰ì
(
w±r
);

653 
wµå
 = &(
w±r
->
√xt
);

657 
w±r
 = 
	`mÆloc
((
wrôe°©us
));

658 
	`∑s£π
(
w±r
);

659 
w±r
->
wrôeid
 = writeid;

660 
w±r
->
√xt
 = 
ïå
->
todﬁi°
;

661 
ïå
->
todﬁi°
 = 
w±r
;

662 
	}
}

664 
	$cs£rv_fwdîr‹
(
cs£rvíåy
 *
ïå
) {

665 
uöt8_t
 *
±r
;

666 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

667 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

668 
	`put32bô
(&
±r
,0);

669 i‡(
ïå
->
°©e
==
CONNECTING
) {

670 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

672 
	`put8bô
(&
±r
,
ERROR_DISCONNECTED
);

674 
ïå
->
°©e
 = 
WRITEFINISH
;

675 
	}
}

682 
	$cs£rv_ªad_c⁄töue
(
cs£rvíåy
 *
ïå
) {

683 
uöt16_t
 
blocknum
;

684 
uöt16_t
 
blockoff£t
;

685 
uöt32_t
 
size
;

686 
uöt8_t
 *
±r
;

687 
uöt8_t
 
°©us
;

688 *
∑ckë
;

690 
blocknum
 = (
ïå
->
off£t
)>>
MFSBLOCKBITS
;

691 
blockoff£t
 = (
ïå
->
off£t
)&
MFSBLOCKMASK
;

692 i‡((
ïå
->
off£t
+ïå->
size
-1)>>
MFSBLOCKBITS
 =
blocknum
) {

693 
size
 = 
ïå
->size;

694 
∑ckë
 = 
	`cs£rv_¸óã_dëached_∑ckë
(
CSTOCL_READ_DATA
,8+2+2+4+4+
size
);

695 
±r
 = 
	`cs£rv_gë_∑ckë_d©a
(
∑ckë
);

696 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

697 
	`put16bô
(&
±r
,
blocknum
);

698 
	`put16bô
(&
±r
,
blockoff£t
);

699 
	`put32bô
(&
±r
,
size
);

700 
°©us
 = 
	`hdd_ªad
(
ïå
->
chunkid
,ïå->
vîsi⁄
,
blocknum
,
±r
+4,
blockoff£t
,
size
,ptr);

701 i‡(
°©us
!=
STATUS_OK
) {

702 
	`cs£rv_dñëe_∑ckë
(
∑ckë
);

704 
	`cs£rv_©èch_∑ckë
(
ïå
,
∑ckë
);

706 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

707 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

708 
	`put8bô
(&
±r
,
°©us
);

709 
	`hdd_˛o£
(
ïå
->
chunkid
);

710 
ïå
->
chunkis›í
 = 0;

711 
ïå
->
°©e
 = 
IDLE
;

713 
size
 = 
MFSBLOCKSIZE
-
blockoff£t
;

714 
∑ckë
 = 
	`cs£rv_¸óã_dëached_∑ckë
(
CSTOCL_READ_DATA
,8+2+2+4+4+
size
);

715 
±r
 = 
	`cs£rv_gë_∑ckë_d©a
(
∑ckë
);

716 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

717 
	`put16bô
(&
±r
,
blocknum
);

718 
	`put16bô
(&
±r
,
blockoff£t
);

719 
	`put32bô
(&
±r
,
size
);

720 
°©us
 = 
	`hdd_ªad
(
ïå
->
chunkid
,ïå->
vîsi⁄
,
blocknum
,
±r
+4,
blockoff£t
,
size
,ptr);

721 i‡(
°©us
!=
STATUS_OK
) {

722 
	`cs£rv_dñëe_∑ckë
(
∑ckë
);

723 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

724 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

725 
	`put8bô
(&
±r
,
°©us
);

726 
	`hdd_˛o£
(
ïå
->
chunkid
);

727 
ïå
->
chunkis›í
 = 0;

728 
ïå
->
°©e
 = 
IDLE
;

730 
	`cs£rv_©èch_∑ckë
(
ïå
,
∑ckë
);

731 
ïå
->
off£t
+=
size
;

732 
ïå
->
size
-=size;

735 
	}
}

737 
	$cs£rv_ªad_öô
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

738 
uöt8_t
 *
±r
;

739 
uöt8_t
 
°©us
;

741 i‡(
Àngth
!=8+4+4+4) {

742 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_READ - wr⁄g sizê(%"
PRIu32
"/20)",
Àngth
);

743 
ïå
->
°©e
 = 
CLOSE
;

746 
ïå
->
chunkid
 = 
	`gë64bô
(&
d©a
);

747 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

748 
ïå
->
off£t
 = 
	`gë32bô
(&
d©a
);

749 
ïå
->
size
 = 
	`gë32bô
(&
d©a
);

750 
°©us
 = 
	`hdd_check_vîsi⁄
(
ïå
->
chunkid
,ïå->
vîsi⁄
);

751 i‡(
°©us
!=
STATUS_OK
) {

752 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

753 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

754 
	`put8bô
(&
±r
,
°©us
);

757 i‡(
ïå
->
size
==0) {

758 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

759 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

760 
	`put8bô
(&
±r
,
STATUS_OK
);

763 i‡(
ïå
->
size
>
MFSCHUNKSIZE
) {

764 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

765 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

766 
	`put8bô
(&
±r
,
ERROR_WRONGSIZE
);

769 i‡(
ïå
->
off£t
>=
MFSCHUNKSIZE
 ||É±r->off£t+ïå->
size
>MFSCHUNKSIZE) {

770 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

771 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

772 
	`put8bô
(&
±r
,
ERROR_WRONGOFFSET
);

775 
°©us
 = 
	`hdd_›í
(
ïå
->
chunkid
);

776 i‡(
°©us
!=
STATUS_OK
) {

777 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_READ_STATUS
,8+1);

778 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

779 
	`put8bô
(&
±r
,
°©us
);

782 
°©s_hl›r
++;

783 
ïå
->
chunkis›í
 = 1;

784 
ïå
->
°©e
 = 
READ
;

785 
	`cs£rv_ªad_c⁄töue
(
ïå
);

786 
	}
}

790 
	$cs£rv_wrôe_öô
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

791 
uöt8_t
 *
±r
;

792 
uöt8_t
 
°©us
,
vî
;

793 
uöt64_t
 
chunkid
,
c›ychunkid
;

794 
uöt32_t
 
vîsi⁄
,
√wvîsi⁄
,
c›yvîsi⁄
,
Àng
;

796 i‡(
Àngth
<12 || ((length-12)%6)!=0) {

797 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE - wr⁄g sizê(%"
PRIu32
"/12+N*6)",
Àngth
);

798 
ïå
->
°©e
 = 
CLOSE
;

801 
ïå
->
w›_chunkid
=0;

802 
ïå
->
chunkid
 = 
	`gë64bô
(&
d©a
);

803 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

804 
°©us
 = 
	`hdd_check_vîsi⁄
(
ïå
->
chunkid
,ïå->
vîsi⁄
);

805 i‡(
°©us
!=
STATUS_OK
) {

806 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

807 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

808 
	`put32bô
(&
±r
,0);

809 
	`put8bô
(&
±r
,
°©us
);

810 
ïå
->
°©e
 = 
WRITEFINISH
;

813 i‡(
Àngth
>(8+4)) {

814 
ïå
->
fwdù
 = 
	`gë32bô
(&
d©a
);

815 
ïå
->
fwdp‹t
 = 
	`gë16bô
(&
d©a
);

816 
ïå
->
c⁄ƒëry˙t
 = 0;

817 i‡(
	`cs£rv_makefwd∑ckë
(
ïå
,
d©a
,
Àngth
-12-6)<0) {

818 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

819 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

820 
	`put32bô
(&
±r
,0);

821 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

822 
ïå
->
°©e
 = 
WRITEFINISH
;

825 i‡(
	`cs£rv_öôc⁄√˘
(
ïå
)<0) {

826 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

827 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

828 
	`put32bô
(&
±r
,0);

829 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

830 
ïå
->
°©e
 = 
WRITEFINISH
;

833 
°©us
 = 
	`hdd_›í
(
ïå
->
chunkid
);

834 i‡(
°©us
!=
STATUS_OK
) {

835 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

836 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

837 
	`put32bô
(&
±r
,0);

838 
	`put8bô
(&
±r
,
°©us
);

839 
ïå
->
°©e
 = 
WRITEFINISH
;

842 
°©s_hl›w
++;

843 
ïå
->
chunkis›í
 = 1;

845 
°©us
 = 
	`hdd_›í
(
ïå
->
chunkid
);

846 i‡(
°©us
!=
STATUS_OK
) {

847 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

848 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

849 
	`put32bô
(&
±r
,0);

850 
	`put8bô
(&
±r
,
°©us
);

851 
ïå
->
°©e
 = 
WRITEFINISH
;

854 
°©s_hl›w
++;

855 
ïå
->
chunkis›í
 = 1;

856 
ïå
->
°©e
 = 
WRITELAST
;

857 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

858 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

859 
	`put32bô
(&
±r
,0);

860 
	`put8bô
(&
±r
,
STATUS_OK
);

863 
	}
}

865 
	$cs£rv_wrôe_d©a
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

866 
uöt64_t
 
chunkid
;

867 
uöt16_t
 
blocknum
;

868 
uöt16_t
 
off£t
;

869 
uöt32_t
 
size
;

870 
uöt32_t
 
wrôeid
;

871 
uöt8_t
 *
±r
;

872 
uöt8_t
 
°©us
;

874 i‡(
Àngth
<8+4+2+2+4+4) {

875 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE_DATA - wr⁄g sizê(%"
PRIu32
"/24+size)",
Àngth
);

876 
ïå
->
°©e
 = 
CLOSE
;

879 
chunkid
 = 
	`gë64bô
(&
d©a
);

880 
wrôeid
 = 
	`gë32bô
(&
d©a
);

881 
blocknum
 = 
	`gë16bô
(&
d©a
);

882 
off£t
 = 
	`gë16bô
(&
d©a
);

883 
size
 = 
	`gë32bô
(&
d©a
);

884 i‡(
Àngth
!=8+4+2+2+4+4+
size
) {

885 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_WRITE_DATA - wr⁄g sizê(%"
PRIu32
"/24+%"PRIu32")",
Àngth
,
size
);

886 
ïå
->
°©e
 = 
CLOSE
;

889 i‡(
chunkid
!=
ïå
->chunkid) {

890 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

891 
	`put64bô
(&
±r
,
chunkid
);

892 
	`put32bô
(&
±r
,
wrôeid
);

893 
	`put8bô
(&
±r
,
ERROR_WRONGCHUNKID
);

894 
ïå
->
°©e
 = 
WRITEFINISH
;

897 
°©us
 = 
	`hdd_wrôe
(
chunkid
,
ïå
->
vîsi⁄
,
blocknum
,
d©a
+4,
off£t
,
size
,data);

898 i‡(
°©us
!=
STATUS_OK
) {

899 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

900 
	`put64bô
(&
±r
,
chunkid
);

901 
	`put32bô
(&
±r
,
wrôeid
);

902 
	`put8bô
(&
±r
,
°©us
);

903 
ïå
->
°©e
 = 
WRITEFINISH
;

906 i‡(
ïå
->
°©e
==
WRITELAST
) {

907 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

908 
	`put64bô
(&
±r
,
chunkid
);

909 
	`put32bô
(&
±r
,
wrôeid
);

910 
	`put8bô
(&
±r
,
STATUS_OK
);

912 
	}
}

914 
	$cs£rv_wrôe_°©us
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

915 
uöt8_t
 *
±r
;

916 
uöt64_t
 
chunkid
;

917 
uöt32_t
 
wrôeid
;

918 
uöt8_t
 
°©us
;

920 i‡(
Àngth
!=8+4+1) {

921 
	`sy¶og
(
LOG_NOTICE
,"CSTOCL_WRITE_STATUS - wr⁄g sizê(%"
PRIu32
"/13)",
Àngth
);

922 
ïå
->
°©e
 = 
CLOSE
;

925 
chunkid
 = 
	`gë64bô
(&
d©a
);

926 
wrôeid
 = 
	`gë32bô
(&
d©a
);

927 
°©us
 = 
	`gë8bô
(&
d©a
);

929 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

930 
	`put64bô
(&
±r
,
chunkid
);

931 
	`put32bô
(&
±r
,
wrôeid
);

932 
	`put8bô
(&
±r
,
°©us
);

933 i‡(
°©us
!=
STATUS_OK
) {

934 
ïå
->
°©e
 = 
WRITEFINISH
;

936 
	}
}

938 
	$cs£rv_fwdîr‹
(
cs£rvíåy
 *
ïå
) {

939 
uöt8_t
 *
±r
;

940 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_WRITE_STATUS
,8+4+1);

941 
	`put64bô
(&
±r
,
ïå
->
chunkid
);

942 
	`put32bô
(&
±r
,0);

943 i‡(
ïå
->
°©e
==
CONNECTING
) {

944 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

946 
	`put8bô
(&
±r
,
ERROR_DISCONNECTED
);

948 
ïå
->
°©e
 = 
WRITEFINISH
;

949 
	}
}

955 
	$cs£rv_gë_chunk_blocks
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

956 
uöt64_t
 
chunkid
;

957 
uöt32_t
 
vîsi⁄
;

958 
uöt8_t
 *
±r
;

959 
uöt8_t
 
°©us
;

960 
uöt16_t
 
blocks
;

962 i‡(
Àngth
!=8+4) {

963 
	`sy¶og
(
LOG_NOTICE
,"CSTOCS_GET_CHUNK_BLOCKS - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

964 
ïå
->
°©e
 = 
CLOSE
;

967 
chunkid
 = 
	`gë64bô
(&
d©a
);

968 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

969 
°©us
 = 
	`hdd_gë_blocks
(
chunkid
,
vîsi⁄
,&
blocks
);

970 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCS_GET_CHUNK_BLOCKS_STATUS
,8+4+2+1);

971 
	`put64bô
(&
±r
,
chunkid
);

972 
	`put32bô
(&
±r
,
vîsi⁄
);

973 
	`put16bô
(&
±r
,
blocks
);

974 
	`put8bô
(&
±r
,
°©us
);

975 
	}
}

977 
	$cs£rv_chunk_checksum
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

978 
uöt64_t
 
chunkid
;

979 
uöt32_t
 
vîsi⁄
;

980 
uöt8_t
 *
±r
;

981 
uöt8_t
 
°©us
;

982 
uöt32_t
 
checksum
;

984 i‡(
Àngth
!=8+4) {

985 
	`sy¶og
(
LOG_NOTICE
,"ANTOCS_CHUNK_CHECKSUM - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

986 
ïå
->
°©e
 = 
CLOSE
;

989 
chunkid
 = 
	`gë64bô
(&
d©a
);

990 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

991 
°©us
 = 
	`hdd_gë_checksum
(
chunkid
,
vîsi⁄
,&
checksum
);

992 i‡(
°©us
!=
STATUS_OK
) {

993 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM
,8+4+1);

995 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM
,8+4+4);

997 
	`put64bô
(&
±r
,
chunkid
);

998 
	`put32bô
(&
±r
,
vîsi⁄
);

999 i‡(
°©us
!=
STATUS_OK
) {

1000 
	`put8bô
(&
±r
,
°©us
);

1002 
	`put32bô
(&
±r
,
checksum
);

1004 
	}
}

1006 
	$cs£rv_chunk_checksum_èb
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1007 
uöt64_t
 
chunkid
;

1008 
uöt32_t
 
vîsi⁄
;

1009 
uöt8_t
 *
±r
;

1010 
uöt8_t
 
°©us
;

1011 
uöt8_t
 
¸˘ab
[4096];

1013 i‡(
Àngth
!=8+4) {

1014 
	`sy¶og
(
LOG_NOTICE
,"ANTOCS_CHUNK_CHECKSUM_TAB - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

1015 
ïå
->
°©e
 = 
CLOSE
;

1018 
chunkid
 = 
	`gë64bô
(&
d©a
);

1019 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

1020 
°©us
 = 
	`hdd_gë_checksum_èb
(
chunkid
,
vîsi⁄
,
¸˘ab
);

1021 i‡(
°©us
!=
STATUS_OK
) {

1022 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM_TAB
,8+4+1);

1024 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM_TAB
,8+4+4096);

1026 
	`put64bô
(&
±r
,
chunkid
);

1027 
	`put32bô
(&
±r
,
vîsi⁄
);

1028 i‡(
°©us
!=
STATUS_OK
) {

1029 
	`put8bô
(&
±r
,
°©us
);

1031 
	`mem˝y
(
±r
,
¸˘ab
,4096);

1033 
	}
}

1035 
	$cs£rv_hdd_li°_v1
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1036 
uöt32_t
 
l
;

1037 
uöt8_t
 *
±r
;

1039 ()
d©a
;

1040 i‡(
Àngth
!=0) {

1041 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_HDD_LIST(1Ë- wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

1042 
ïå
->
°©e
 = 
CLOSE
;

1045 
l
 = 
	`hdd_disköfo_v1_size
();

1046 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_HDD_LIST_V1
,
l
);

1047 
	`hdd_disköfo_v1_d©a
(
±r
);

1048 
	}
}

1050 
	$cs£rv_hdd_li°_v2
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1051 
uöt32_t
 
l
;

1052 
uöt8_t
 *
±r
;

1054 ()
d©a
;

1055 i‡(
Àngth
!=0) {

1056 
	`sy¶og
(
LOG_NOTICE
,"CLTOCS_HDD_LIST(2Ë- wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

1057 
ïå
->
°©e
 = 
CLOSE
;

1060 
l
 = 
	`hdd_disköfo_v2_size
();

1061 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
CSTOCL_HDD_LIST_V2
,
l
);

1062 
	`hdd_disköfo_v2_d©a
(
±r
);

1063 
	}
}

1065 
	$cs£rv_ch¨t
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1066 
uöt32_t
 
ch¨tid
;

1067 
uöt8_t
 *
±r
;

1068 
uöt32_t
 
l
;

1070 i‡(
Àngth
!=4) {

1071 
	`sy¶og
(
LOG_NOTICE
,"CLTOAN_CHART - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

1072 
ïå
->
°©e
 = 
CLOSE
;

1075 
ch¨tid
 = 
	`gë32bô
(&
d©a
);

1076 
l
 = 
	`ch¨ts_make_≤g
(
ch¨tid
);

1077 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
ANTOCL_CHART
,
l
);

1078 i‡(
l
>0) {

1079 
	`ch¨ts_gë_≤g
(
±r
);

1081 
	}
}

1083 
	$cs£rv_ch¨t_d©a
(
cs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1084 
uöt32_t
 
ch¨tid
;

1085 
uöt8_t
 *
±r
;

1086 
uöt32_t
 
l
;

1088 i‡(
Àngth
!=4) {

1089 
	`sy¶og
(
LOG_NOTICE
,"CLTOAN_CHART_DATA - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

1090 
ïå
->
°©e
 = 
CLOSE
;

1093 
ch¨tid
 = 
	`gë32bô
(&
d©a
);

1094 
l
 = 
	`ch¨ts_d©asize
(
ch¨tid
);

1095 
±r
 = 
	`cs£rv_¸óã_©èched_∑ckë
(
ïå
,
ANTOCL_CHART_DATA
,
l
);

1096 i‡(
l
>0) {

1097 
	`ch¨ts_maked©a
(
±r
,
ch¨tid
);

1099 
	}
}

1102 
	$cs£rv_ouçutcheck
(
cs£rvíåy
 *
ïå
) {

1103 i‡(
ïå
->
°©e
==
READ
) {

1104 #ifde‡
BGJOBS


1105 
	`cs£rv_£nd_föished
(
ïå
);

1107 
	`cs£rv_ªad_c⁄töue
(
ïå
);

1110 
	}
}

1112 
	$cs£rv_˛o£
(
cs£rvíåy
 *
ïå
) {

1113 #ifde‡
BGJOBS


1114 i‡(
ïå
->
rjobid
>0) {

1115 
	`job_poﬁ_dißbÀ_job
(
jpoﬁ
,
ïå
->
rjobid
);

1116 
	`job_poﬁ_ch™ge_ˇŒback
(
jpoﬁ
,
ïå
->
rjobid
,
cs£rv_dñayed_˛o£
,eptr);

1117 
ïå
->
°©e
 = 
CLOSEWAIT
;

1118 } i‡(
ïå
->
wjobid
>0) {

1119 
	`job_poﬁ_dißbÀ_job
(
jpoﬁ
,
ïå
->
wjobid
);

1120 
	`job_poﬁ_ch™ge_ˇŒback
(
jpoﬁ
,
ïå
->
wjobid
,
cs£rv_dñayed_˛o£
,eptr);

1121 
ïå
->
°©e
 = 
CLOSEWAIT
;

1123 i‡(
ïå
->
chunkis›í
) {

1124 
	`job_˛o£
(
jpoﬁ
,
NULL
,NULL,
ïå
->
chunkid
);

1125 
ïå
->
chunkis›í
=0;

1127 
ïå
->
°©e
 = 
CLOSED
;

1130 i‡(
ïå
->
chunkis›í
) {

1131 
	`hdd_˛o£
(
ïå
->
chunkid
);

1132 
ïå
->
chunkis›í
=0;

1134 
ïå
->
°©e
 = 
CLOSED
;

1136 
	}
}

1138 
	$cs£rv_gŸ∑ckë
(
cs£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

1140 i‡(
ty≥
==
ANTOAN_NOP
) {

1143 i‡(
ïå
->
°©e
==
IDLE
) {

1144 
ty≥
) {

1145 
CLTOCS_READ
:

1146 
	`cs£rv_ªad_öô
(
ïå
,
d©a
,
Àngth
);

1148 
CLTOCS_WRITE
:

1149 
	`cs£rv_wrôe_öô
(
ïå
,
d©a
,
Àngth
);

1157 
CSTOCS_GET_CHUNK_BLOCKS
:

1158 
	`cs£rv_gë_chunk_blocks
(
ïå
,
d©a
,
Àngth
);

1160 
ANTOCS_CHUNK_CHECKSUM
:

1161 
	`cs£rv_chunk_checksum
(
ïå
,
d©a
,
Àngth
);

1163 
ANTOCS_CHUNK_CHECKSUM_TAB
:

1164 
	`cs£rv_chunk_checksum_èb
(
ïå
,
d©a
,
Àngth
);

1166 
CLTOCS_HDD_LIST_V1
:

1167 
	`cs£rv_hdd_li°_v1
(
ïå
,
d©a
,
Àngth
);

1169 
CLTOCS_HDD_LIST_V2
:

1170 
	`cs£rv_hdd_li°_v2
(
ïå
,
d©a
,
Àngth
);

1172 
CLTOAN_CHART
:

1173 
	`cs£rv_ch¨t
(
ïå
,
d©a
,
Àngth
);

1175 
CLTOAN_CHART_DATA
:

1176 
	`cs£rv_ch¨t_d©a
(
ïå
,
d©a
,
Àngth
);

1179 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1180 
ïå
->
°©e
 = 
CLOSE
;

1182 } i‡(
ïå
->
°©e
==
WRITELAST
) {

1183 i‡(
ty≥
==
CLTOCS_WRITE_DATA
) {

1184 
	`cs£rv_wrôe_d©a
(
ïå
,
d©a
,
Àngth
);

1186 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1187 
ïå
->
°©e
 = 
CLOSE
;

1189 } i‡(
ïå
->
°©e
==
WRITEFWD
) {

1190 
ty≥
) {

1191 
CLTOCS_WRITE_DATA
:

1192 
	`cs£rv_wrôe_d©a
(
ïå
,
d©a
,
Àngth
);

1194 
CSTOCL_WRITE_STATUS
:

1195 
	`cs£rv_wrôe_°©us
(
ïå
,
d©a
,
Àngth
);

1198 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1199 
ïå
->
°©e
 = 
CLOSE
;

1201 } i‡(
ïå
->
°©e
==
WRITEFINISH
) {

1202 i‡(
ty≥
==
CLTOCS_WRITE_DATA
) {

1205 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1206 
ïå
->
°©e
 = 
CLOSE
;

1209 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1210 
ïå
->
°©e
 = 
CLOSE
;

1212 
	}
}

1214 
	$cs£rv_ãrm
() {

1215 
cs£rvíåy
 *
ïå
,*
ó±r
;

1216 
∑ckë°ru˘
 *
µå
,*
∑±r
;

1217 #ifde‡
BGJOBS


1218 
wrôe°©us
 *
w±r
,*
w≠å
;

1221 
	`sy¶og
(
LOG_NOTICE
,"˛osög %s:%s",
Li°íHo°
,
Li°íP‹t
);

1222 
	`t˝˛o£
(
lsock
);

1224 #ifde‡
BGJOBS


1225 
	`job_poﬁ_dñëe
(
jpoﬁ
);

1228 
ïå
 = 
cs£rvhód
;

1229 
ïå
) {

1230 i‡(
ïå
->
chunkis›í
) {

1231 
	`hdd_˛o£
(
ïå
->
chunkid
);

1233 
	`t˝˛o£
(
ïå
->
sock
);

1234 i‡(
ïå
->
fwdsock
>=0) {

1235 
	`t˝˛o£
(
ïå
->
fwdsock
);

1237 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1238 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1240 i‡(
ïå
->
fwdöpuçackë
.
∑ckë
) {

1241 
	`‰ì
(
ïå
->
fwdöpuçackë
.
∑ckë
);

1243 i‡(
ïå
->
fwdöô∑ckë
) {

1244 
	`‰ì
(
ïå
->
fwdöô∑ckë
);

1246 #ifde‡
BGJOBS


1247 
w±r
 = 
ïå
->
todﬁi°
;

1248 
w±r
) {

1249 
w≠å
 = 
w±r
;

1250 
w±r
 = w±r->
√xt
;

1251 
	`‰ì
(
w≠å
);

1254 
µå
 = 
ïå
->
ouçuthód
;

1255 
µå
) {

1256 i‡(
µå
->
∑ckë
) {

1257 
	`‰ì
(
µå
->
∑ckë
);

1259 
∑±r
 = 
µå
;

1260 
µå
 =Ö±r->
√xt
;

1261 
	`‰ì
(
∑±r
);

1263 
ó±r
 = 
ïå
;

1264 
ïå
 =É±r->
√xt
;

1265 
	`‰ì
(
ó±r
);

1267 
cs£rvhód
=
NULL
;

1268 
	`‰ì
(
Li°íHo°
);

1269 
	`‰ì
(
Li°íP‹t
);

1270 
	}
}

1272 
	$cs£rv_check_√xçackë
(
cs£rvíåy
 *
ïå
) {

1273 
uöt32_t
 
ty≥
,
size
;

1274 c⁄° 
uöt8_t
 *
±r
;

1275 i‡(
ïå
->
°©e
==
WRITEFWD
) {

1276 i‡(
ïå
->
mode
==
DATA
 &&É±r->
öpuçackë
.
byã¶e·
==0 &&É±r->
fwdbyã¶e·
==0) {

1277 
±r
 = 
ïå
->
hdrbuff
;

1278 
ty≥
 = 
	`gë32bô
(&
±r
);

1279 
size
 = 
	`gë32bô
(&
±r
);

1281 
ïå
->
mode
 = 
HEADER
;

1282 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1283 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1285 
	`cs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
+8,
size
);

1287 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1288 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1290 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1293 i‡(
ïå
->
mode
==
DATA
 &&É±r->
öpuçackë
.
byã¶e·
==0) {

1294 
±r
 = 
ïå
->
hdrbuff
;

1295 
ty≥
 = 
	`gë32bô
(&
±r
);

1296 
size
 = 
	`gë32bô
(&
±r
);

1298 
ïå
->
mode
 = 
HEADER
;

1299 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1300 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1302 
	`cs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

1304 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1305 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1307 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1310 
	}
}

1312 
	$cs£rv_fwdc⁄√˘ed
(
cs£rvíåy
 *
ïå
) {

1313 
°©us
;

1314 
°©us
 = 
	`t˝gë°©us
(
ïå
->
fwdsock
);

1315 i‡(
°©us
) {

1316 
	`mfs_îæog_sûít
(
LOG_WARNING
,"connection failed,Érror");

1317 
	`cs£rv_fwdîr‹
(
ïå
);

1320 
	`t˝nodñay
(
ïå
->
fwdsock
);

1321 
ïå
->
°©e
=
WRITEINIT
;

1322 
	}
}

1324 
	$cs£rv_fwdªad
(
cs£rvíåy
 *
ïå
) {

1325 
öt32_t
 
i
;

1326 
uöt32_t
 
ty≥
,
size
;

1327 c⁄° 
uöt8_t
 *
±r
;

1328 i‡(
ïå
->
fwdmode
==
HEADER
) {

1329 
i
=
	`ªad
(
ïå
->
fwdsock
,ïå->
fwdöpuçackë
.
°¨çå
,ïå->fwdöpuçackë.
byã¶e·
);

1330 i‡(
i
==0) {

1332 
	`cs£rv_fwdîr‹
(
ïå
);

1335 i‡(
i
<0) {

1336 i‡(
î∫o
!=
EAGAIN
) {

1337 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(fwdread)ÑeadÉrror");

1338 
	`cs£rv_fwdîr‹
(
ïå
);

1342 
°©s_byãsö
+=
i
;

1343 
ïå
->
fwdöpuçackë
.
°¨çå
+=
i
;

1344 
ïå
->
fwdöpuçackë
.
byã¶e·
-=
i
;

1345 i‡(
ïå
->
fwdöpuçackë
.
byã¶e·
>0) {

1348 
±r
 = 
ïå
->
fwdhdrbuff
+4;

1349 
size
 = 
	`gë32bô
(&
±r
);

1350 i‡(
size
>
MaxPackëSize
) {

1351 
	`sy¶og
(
LOG_WARNING
,"(fwdªadË∑ckëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

1352 
	`cs£rv_fwdîr‹
(
ïå
);

1355 i‡(
size
>0) {

1356 
ïå
->
fwdöpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

1357 
	`∑s£π
(
ïå
->
fwdöpuçackë
.
∑ckë
);

1358 
ïå
->
fwdöpuçackë
.
°¨çå
 =É±r->fwdöpuçackë.
∑ckë
;

1360 
ïå
->
fwdöpuçackë
.
byã¶e·
 = 
size
;

1361 
ïå
->
fwdmode
 = 
DATA
;

1363 i‡(
ïå
->
fwdmode
==
DATA
) {

1364 i‡(
ïå
->
fwdöpuçackë
.
byã¶e·
>0) {

1365 
i
=
	`ªad
(
ïå
->
fwdsock
,ïå->
fwdöpuçackë
.
°¨çå
,ïå->fwdöpuçackë.
byã¶e·
);

1366 i‡(
i
==0) {

1368 
	`cs£rv_fwdîr‹
(
ïå
);

1371 i‡(
i
<0) {

1372 i‡(
î∫o
!=
EAGAIN
) {

1373 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(fwdread)ÑeadÉrror");

1374 
	`cs£rv_fwdîr‹
(
ïå
);

1378 
°©s_byãsö
+=
i
;

1379 
ïå
->
fwdöpuçackë
.
°¨çå
+=
i
;

1380 
ïå
->
fwdöpuçackë
.
byã¶e·
-=
i
;

1381 i‡(
ïå
->
fwdöpuçackë
.
byã¶e·
>0) {

1385 
±r
 = 
ïå
->
fwdhdrbuff
;

1386 
ty≥
 = 
	`gë32bô
(&
±r
);

1387 
size
 = 
	`gë32bô
(&
±r
);

1389 
ïå
->
fwdmode
=
HEADER
;

1390 
ïå
->
fwdöpuçackë
.
byã¶e·
 = 8;

1391 
ïå
->
fwdöpuçackë
.
°¨çå
 =É±r->
fwdhdrbuff
;

1393 
	`cs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
fwdöpuçackë
.
∑ckë
,
size
);

1395 i‡(
ïå
->
fwdöpuçackë
.
∑ckë
) {

1396 
	`‰ì
(
ïå
->
fwdöpuçackë
.
∑ckë
);

1398 
ïå
->
fwdöpuçackë
.
∑ckë
=
NULL
;

1400 
	}
}

1402 
	$cs£rv_fwdwrôe
(
cs£rvíåy
 *
ïå
) {

1403 
öt32_t
 
i
;

1404 i‡(
ïå
->
fwdbyã¶e·
>0) {

1405 
i
=
	`wrôe
(
ïå
->
fwdsock
,ïå->
fwd°¨çå
,ïå->
fwdbyã¶e·
);

1406 i‡(
i
==0) {

1408 
	`cs£rv_fwdîr‹
(
ïå
);

1411 i‡(
i
<0) {

1412 i‡(
î∫o
!=
EAGAIN
) {

1413 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(fwdwrite) writeÉrror");

1414 
	`cs£rv_fwdîr‹
(
ïå
);

1418 
°©s_byãsout
+=
i
;

1419 
ïå
->
fwd°¨çå
+=
i
;

1420 
ïå
->
fwdbyã¶e·
-=
i
;

1422 i‡(
ïå
->
fwdbyã¶e·
==0) {

1423 
	`‰ì
(
ïå
->
fwdöô∑ckë
);

1424 
ïå
->
fwdöô∑ckë
 = 
NULL
;

1425 
ïå
->
fwd°¨çå
 = 
NULL
;

1427 
ïå
->
fwdmode
 = 
HEADER
;

1428 
ïå
->
fwdöpuçackë
.
byã¶e·
 = 8;

1429 
ïå
->
fwdöpuçackë
.
°¨çå
 =É±r->
fwdhdrbuff
;

1430 
ïå
->
fwdöpuçackë
.
∑ckë
 = 
NULL
;

1431 
ïå
->
°©e
 = 
WRITEFWD
;

1433 
	}
}

1435 
	$cs£rv_f‹w¨d
(
cs£rvíåy
 *
ïå
) {

1436 
öt32_t
 
i
;

1437 
uöt32_t
 
ty≥
,
size
;

1438 c⁄° 
uöt8_t
 *
±r
;

1439 i‡(
ïå
->
mode
==
HEADER
) {

1440 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

1441 i‡(
i
==0) {

1443 
ïå
->
°©e
 = 
CLOSE
;

1446 i‡(
i
<0) {

1447 i‡(
î∫o
!=
EAGAIN
) {

1448 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(forward)ÑeadÉrror");

1449 
ïå
->
°©e
 = 
CLOSE
;

1453 
°©s_byãsö
+=
i
;

1454 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

1455 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

1456 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1459 
±r
 = 
ïå
->
hdrbuff
+4;

1460 
size
 = 
	`gë32bô
(&
±r
);

1461 i‡(
size
>
MaxPackëSize
) {

1462 
	`sy¶og
(
LOG_WARNING
,"(f‹w¨dË∑ckëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

1463 
ïå
->
°©e
 = 
CLOSE
;

1466 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
+8);

1467 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

1468 
	`mem˝y
(
ïå
->
öpuçackë
.
∑ckë
,ïå->
hdrbuff
,8);

1469 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

1470 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
+8;

1471 
ïå
->
fwdbyã¶e·
 = 8;

1472 
ïå
->
fwd°¨çå
 =É±r->
öpuçackë
.
∑ckë
;

1473 
ïå
->
mode
 = 
DATA
;

1475 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1476 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

1477 i‡(
i
==0) {

1479 
ïå
->
°©e
 = 
CLOSE
;

1482 i‡(
i
<0) {

1483 i‡(
î∫o
!=
EAGAIN
) {

1484 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(forward)ÑeadÉrror: %s");

1485 
ïå
->
°©e
 = 
CLOSE
;

1489 
°©s_byãsö
+=
i
;

1490 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

1491 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

1492 
ïå
->
fwdbyã¶e·
+=
i
;

1494 i‡(
ïå
->
fwdbyã¶e·
>0) {

1495 
i
=
	`wrôe
(
ïå
->
fwdsock
,ïå->
fwd°¨çå
,ïå->
fwdbyã¶e·
);

1496 i‡(
i
==0) {

1498 
	`cs£rv_fwdîr‹
(
ïå
);

1501 i‡(
i
<0) {

1502 i‡(
î∫o
!=
EAGAIN
) {

1503 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(forward) writeÉrror: %s");

1504 
	`cs£rv_fwdîr‹
(
ïå
);

1508 
°©s_byãsout
+=
i
;

1509 
ïå
->
fwd°¨çå
+=
i
;

1510 
ïå
->
fwdbyã¶e·
-=
i
;

1512 #ifde‡
BGJOBS


1513 i‡(
ïå
->
öpuçackë
.
byã¶e·
==0 &&É±r->
fwdbyã¶e·
==0 &&É±r->
wjobid
==0) {

1515 i‡(
ïå
->
öpuçackë
.
byã¶e·
==0 &&É±r->
fwdbyã¶e·
==0) {

1517 
±r
 = 
ïå
->
hdrbuff
;

1518 
ty≥
 = 
	`gë32bô
(&
±r
);

1519 
size
 = 
	`gë32bô
(&
±r
);

1521 
ïå
->
mode
 = 
HEADER
;

1522 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1523 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1525 
	`cs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
+8,
size
);

1527 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1528 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1530 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1532 
	}
}

1534 
	$cs£rv_ªad
(
cs£rvíåy
 *
ïå
) {

1535 
öt32_t
 
i
;

1536 
uöt32_t
 
ty≥
,
size
;

1537 c⁄° 
uöt8_t
 *
±r
;

1539 i‡(
ïå
->
mode
 =
HEADER
) {

1540 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

1541 i‡(
i
==0) {

1543 
ïå
->
°©e
 = 
CLOSE
;

1546 i‡(
i
<0) {

1547 i‡(
î∫o
!=
EAGAIN
) {

1548 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(read)ÑeadÉrror");

1549 
ïå
->
°©e
 = 
CLOSE
;

1553 
°©s_byãsö
+=
i
;

1554 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

1555 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

1557 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1561 
±r
 = 
ïå
->
hdrbuff
+4;

1562 
size
 = 
	`gë32bô
(&
±r
);

1564 i‡(
size
>0) {

1565 i‡(
size
>
MaxPackëSize
) {

1566 
	`sy¶og
(
LOG_WARNING
,"‘ódË∑ckëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

1567 
ïå
->
°©e
 = 
CLOSE
;

1570 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

1571 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

1572 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

1574 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

1575 
ïå
->
mode
 = 
DATA
;

1577 i‡(
ïå
->
mode
 =
DATA
) {

1578 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1579 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

1580 i‡(
i
==0) {

1582 
ïå
->
°©e
 = 
CLOSE
;

1585 i‡(
i
<0) {

1586 i‡(
î∫o
!=
EAGAIN
) {

1587 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(read)ÑeadÉrror");

1588 
ïå
->
°©e
 = 
CLOSE
;

1592 
°©s_byãsö
+=
i
;

1593 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

1594 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

1596 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1600 #ifde‡
BGJOBS


1601 i‡(
ïå
->
wjobid
==0) {

1603 
±r
 = 
ïå
->
hdrbuff
;

1604 
ty≥
 = 
	`gë32bô
(&
±r
);

1605 
size
 = 
	`gë32bô
(&
±r
);

1607 
ïå
->
mode
 = 
HEADER
;

1608 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1609 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1611 
	`cs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

1613 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1614 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1616 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1617 #ifde‡
BGJOBS


1621 
	}
}

1623 
	$cs£rv_wrôe
(
cs£rvíåy
 *
ïå
) {

1624 
∑ckë°ru˘
 *
∑ck
;

1625 
öt32_t
 
i
;

1627 
∑ck
 = 
ïå
->
ouçuthód
;

1628 i‡(
∑ck
==
NULL
) {

1631 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

1632 i‡(
i
==0) {

1634 
ïå
->
°©e
 = 
CLOSE
;

1637 i‡(
i
<0) {

1638 i‡(
î∫o
!=
EAGAIN
) {

1639 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"(write) writeÉrror");

1640 
ïå
->
°©e
 = 
CLOSE
;

1644 
°©s_byãsout
+=
i
;

1645 
∑ck
->
°¨çå
+=
i
;

1646 
∑ck
->
byã¶e·
-=
i
;

1647 i‡(
∑ck
->
byã¶e·
>0) {

1650 
	`‰ì
(
∑ck
->
∑ckë
);

1651 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

1652 i‡(
ïå
->
ouçuthód
==
NULL
) {

1653 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

1655 
	`‰ì
(
∑ck
);

1656 
	`cs£rv_ouçutcheck
(
ïå
);

1658 
	}
}

1660 
	$cs£rv_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

1661 
uöt32_t
 
pos
 = *
ndesc
;

1663 
cs£rvíåy
 *
ïå
;

1665 
pdesc
[
pos
].
fd
 = 
lsock
;

1666 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1667 
lsockpdes˝os
 = 
pos
;

1668 
pos
++;

1670 #ifde‡
BGJOBS


1671 
pdesc
[
pos
].
fd
 = 
jobfd
;

1672 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1673 
jobfdpdes˝os
 = 
pos
;

1674 
pos
++;

1680 
ïå
=
cs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

1681 
ïå
->
pdes˝os
 = -1;

1682 
ïå
->
fwdpdes˝os
 = -1;

1683 
ïå
->
°©e
) {

1684 
IDLE
:

1685 
READ
:

1686 
WRITELAST
:

1687 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1688 
pdesc
[
pos
].
evíts
 = 0;

1689 
ïå
->
pdes˝os
 = 
pos
;

1691 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1692 
pdesc
[
pos
].
evíts
 |
POLLIN
;

1698 i‡(
ïå
->
ouçuthód
!=
NULL
) {

1699 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

1705 
pos
++;

1707 
CONNECTING
:

1708 
pdesc
[
pos
].
fd
 = 
ïå
->
fwdsock
;

1709 
pdesc
[
pos
].
evíts
 = 
POLLOUT
;

1710 
ïå
->
fwdpdes˝os
 = 
pos
;

1711 
pos
++;

1718 
WRITEINIT
:

1719 i‡(
ïå
->
fwdbyã¶e·
>0) {

1720 
pdesc
[
pos
].
fd
 = 
ïå
->
fwdsock
;

1721 
pdesc
[
pos
].
evíts
 = 
POLLOUT
;

1722 
ïå
->
fwdpdes˝os
 = 
pos
;

1723 
pos
++;

1731 
WRITEFWD
:

1732 
pdesc
[
pos
].
fd
 = 
ïå
->
fwdsock
;

1733 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1734 
ïå
->
fwdpdes˝os
 = 
pos
;

1740 i‡(
ïå
->
fwdbyã¶e·
>0) {

1741 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

1744 
pos
++;

1746 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1747 
pdesc
[
pos
].
evíts
 = 0;

1748 
ïå
->
pdes˝os
 = 
pos
;

1750 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1751 
pdesc
[
pos
].
evíts
 |
POLLIN
;

1757 i‡(
ïå
->
ouçuthód
!=
NULL
) {

1758 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

1764 
pos
++;

1766 
WRITEFINISH
:

1767 i‡(
ïå
->
ouçuthód
!=
NULL
) {

1768 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1769 
pdesc
[
pos
].
evíts
 = 
POLLOUT
;

1770 
ïå
->
pdes˝os
 = 
pos
;

1771 
pos
++;

1781 *
ndesc
 = 
pos
;

1783 
	}
}

1785 
	$cs£rv_£rve
(
pﬁlfd
 *
pdesc
) {

1786 
uöt32_t
 
now
=
	`maö_time
();

1787 
uöt64_t
 
u£˙ow
=
	`maö_utime
();

1788 
cs£rvíåy
 *
ïå
,**
k±r
;

1789 
∑ckë°ru˘
 *
µå
,*
∑±r
;

1790 #ifde‡
BGJOBS


1791 
wrôe°©us
 *
w±r
,*
w≠å
;

1792 
uöt32_t
 
jobs˙t
;

1794 
ns
;

1795 
uöt8_t
 
l°©e
;

1797 i‡(
lsockpdes˝os
>=0 && (
pdesc
[lsockpdes˝os].
ªvíts
 & 
POLLIN
)) {

1799 
ns
=
	`t˝ac˚±
(
lsock
);

1800 i‡(
ns
<0) {

1801 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"acceptÉrror");

1803 #ifde‡
BGJOBS


1804 i‡(
	`job_poﬁ_jobs_cou¡
(
jpoﬁ
)>=(
BGJOBSCNT
*9)/10) {

1805 
	`sy¶og
(
LOG_WARNING
,"jobs queue is full !!!");

1806 
	`t˝˛o£
(
ns
);

1809 
	`t˝n⁄block
(
ns
);

1810 
	`t˝nodñay
(
ns
);

1811 
ïå
 = 
	`mÆloc
((
cs£rvíåy
));

1812 
	`∑s£π
(
ïå
);

1813 
ïå
->
√xt
 = 
cs£rvhód
;

1814 
cs£rvhód
 = 
ïå
;

1815 
ïå
->
°©e
 = 
IDLE
;

1816 
ïå
->
mode
 = 
HEADER
;

1817 
ïå
->
fwdmode
 = 
HEADER
;

1818 
ïå
->
sock
 = 
ns
;

1819 
ïå
->
fwdsock
 = -1;

1820 
ïå
->
pdes˝os
 = -1;

1821 
ïå
->
fwdpdes˝os
 = -1;

1822 
ïå
->
a˘ivôy
 = 
now
;

1823 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1824 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1825 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

1826 
ïå
->
fwd°¨çå
 = 
NULL
;

1827 
ïå
->
fwdbyã¶e·
 = 0;

1828 
ïå
->
fwdöpuçackë
.
∑ckë
 = 
NULL
;

1829 
ïå
->
fwdöô∑ckë
 = 
NULL
;

1830 
ïå
->
ouçuthód
 = 
NULL
;

1831 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

1832 
ïå
->
chunkis›í
 = 0;

1833 #ifde‡
BGJOBS


1834 
ïå
->
wjobid
 = 0;

1835 
ïå
->
wjobwrôeid
 = 0;

1836 
ïå
->
todﬁi°
 = 
NULL
;

1838 
ïå
->
rjobid
 = 0;

1839 
ïå
->
todo˙t
 = 0;

1841 
ïå
->
Ωackë
 = 
NULL
;

1842 
ïå
->
w∑ckë
 = 
NULL
;

1847 #ifde‡
BGJOBS


1848 i‡(
jobfdpdes˝os
>=0 && (
pdesc
[jobfdpdes˝os].
ªvíts
 & 
POLLIN
)) {

1850 
	`job_poﬁ_check_jobs
(
jpoﬁ
);

1853 
ïå
=
cs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

1854 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & (
POLLERR
|
POLLHUP
))) {

1855 
ïå
->
°©e
 = 
CLOSE
;

1856 } i‡(
ïå
->
fwdpdes˝os
>=0 && (
pdesc
[ïå->fwdpdes˝os].
ªvíts
 & (
POLLERR
|
POLLHUP
))) {

1857 
	`cs£rv_fwdîr‹
(
ïå
);

1859 
l°©e
 = 
ïå
->
°©e
;

1860 i‡(
l°©e
==
IDLE
 ||Ü°©e==
READ
 ||Ü°©e==
WRITELAST
 ||Ü°©e==
WRITEFINISH
) {

1861 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLIN
)) {

1863 
ïå
->
a˘ivôy
 = 
now
;

1864 
	`cs£rv_ªad
(
ïå
);

1866 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLOUT
Ë&&É±r->
°©e
==
l°©e
) {

1868 
ïå
->
a˘ivôy
 = 
now
;

1869 
	`cs£rv_wrôe
(
ïå
);

1871 } i‡(
l°©e
==
CONNECTING
 && 
ïå
->
fwdpdes˝os
>=0 && (
pdesc
[ïå->fwdpdes˝os].
ªvíts
 & 
POLLOUT
)) {

1872 
ïå
->
a˘ivôy
 = 
now
;

1873 
	`cs£rv_fwdc⁄√˘ed
(
ïå
);

1874 i‡(
ïå
->
°©e
==
WRITEINIT
) {

1875 
	`cs£rv_fwdwrôe
(
ïå
);

1877 i‡(
ïå
->
°©e
==
WRITEFWD
) {

1878 
	`cs£rv_f‹w¨d
(
ïå
);

1880 } i‡(
ïå
->
°©e
==
WRITEINIT
 &&É±r->
fwdpdes˝os
>=0 && (
pdesc
[ïå->fwdpdes˝os].
ªvíts
 & 
POLLOUT
)) {

1881 
ïå
->
a˘ivôy
 = 
now
;

1882 
	`cs£rv_fwdwrôe
(
ïå
);

1883 i‡(
ïå
->
°©e
==
WRITEFWD
) {

1884 
	`cs£rv_f‹w¨d
(
ïå
);

1886 } i‡(
ïå
->
°©e
==
WRITEFWD
) {

1887 i‡((
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLIN
)Ë|| (ïå->
fwdpdes˝os
>=0 && (pdesc[ïå->fwdpdes˝os].ªvít†& 
POLLOUT
))) {

1889 
ïå
->
a˘ivôy
 = 
now
;

1890 
	`cs£rv_f‹w¨d
(
ïå
);

1892 i‡(
ïå
->
fwdpdes˝os
>=0 && (
pdesc
[ïå->fwdpdes˝os].
ªvíts
 & 
POLLIN
Ë&&É±r->
°©e
==
l°©e
) {

1894 
ïå
->
a˘ivôy
 = 
now
;

1895 
	`cs£rv_fwdªad
(
ïå
);

1897 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLOUT
Ë&&É±r->
°©e
==
l°©e
) {

1899 
ïå
->
a˘ivôy
 = 
now
;

1900 
	`cs£rv_wrôe
(
ïå
);

1903 i‡(
ïå
->
°©e
==
WRITEFINISH
 &&É±r->
ouçuthód
==
NULL
) {

1904 
ïå
->
°©e
 = 
CLOSE
;

1906 i‡(
ïå
->
°©e
==
CONNECTING
 &&É±r->
c⁄n°¨t
+
	`CONNECT_TIMEOUT
”±r->
c⁄ƒëry˙t
)<
u£˙ow
) {

1907 
	`cs£rv_ªåyc⁄√˘
(
ïå
);

1909 i‡(
ïå
->
°©e
!=
CLOSE
 &&É±r->°©e!=
CLOSEWAIT
 &&É±r->°©e!=
CLOSED
 &&É±r->
a˘ivôy
+
CSSERV_TIMEOUT
<
now
) {

1911 
ïå
->
°©e
 = 
CLOSE
;

1913 i‡(
ïå
->
°©e
 =
CLOSE
) {

1914 
	`cs£rv_˛o£
(
ïå
);

1917 #ifde‡
BGJOBS


1918 
jobs˙t
 = 
	`job_poﬁ_jobs_cou¡
(
jpoﬁ
);

1919 i‡(
jobs˙t
>=
°©s_maxjobs˙t
) {

1920 
°©s_maxjobs˙t
=
jobs˙t
;

1923 
k±r
 = &
cs£rvhód
;

1924 (
ïå
=*
k±r
)) {

1925 i‡(
ïå
->
°©e
 =
CLOSED
) {

1926 
	`t˝˛o£
(
ïå
->
sock
);

1927 i‡(
ïå
->
Ωackë
) {

1928 
	`cs£rv_dñëe_∑ckë
(
ïå
->
Ωackë
);

1930 i‡(
ïå
->
w∑ckë
) {

1931 
	`cs£rv_dñëe_¥e£rved
(
ïå
->
w∑ckë
);

1933 i‡(
ïå
->
fwdsock
>=0) {

1934 
	`t˝˛o£
(
ïå
->
fwdsock
);

1936 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1937 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1939 i‡(
ïå
->
fwdöpuçackë
.
∑ckë
) {

1940 
	`‰ì
(
ïå
->
fwdöpuçackë
.
∑ckë
);

1942 i‡(
ïå
->
fwdöô∑ckë
) {

1943 
	`‰ì
(
ïå
->
fwdöô∑ckë
);

1945 #ifde‡
BGJOBS


1946 
w±r
 = 
ïå
->
todﬁi°
;

1947 
w±r
) {

1948 
w≠å
 = 
w±r
;

1949 
w±r
 = w±r->
√xt
;

1950 
	`‰ì
(
w≠å
);

1953 
µå
 = 
ïå
->
ouçuthód
;

1954 
µå
) {

1955 i‡(
µå
->
∑ckë
) {

1956 
	`‰ì
(
µå
->
∑ckë
);

1958 
∑±r
 = 
µå
;

1959 
µå
 =Ö±r->
√xt
;

1960 
	`‰ì
(
∑±r
);

1962 *
k±r
 = 
ïå
->
√xt
;

1963 
	`‰ì
(
ïå
);

1965 
k±r
 = &(
ïå
->
√xt
);

1968 
	}
}

1970 
uöt32_t
 
	$cs£rv_gëli°íù
() {

1971  
myli°íù
;

1972 
	}
}

1974 
uöt16_t
 
	$cs£rv_gëli°íp‹t
() {

1975  
myli°íp‹t
;

1976 
	}
}

1978 
	$cs£rv_öô
() {

1979 
Li°íHo°
 = 
	`cfg_gë°r
("CSSERV_LISTEN_HOST","*");

1980 
Li°íP‹t
 = 
	`cfg_gë°r
("CSSERV_LISTEN_PORT","9422");

1982 
lsock
 = 
	`t˝sockë
();

1983 i‡(
lsock
<0) {

1984 
	`mfs_îæog
(
LOG_ERR
,"main server moduleÉrror: can't create socket");

1987 
	`t˝n⁄block
(
lsock
);

1988 
	`t˝nodñay
(
lsock
);

1989 
	`t˝ªu£addr
(
lsock
);

1990 i‡(
	`t˝£èc˚±fûãr
(
lsock
)<0 && 
î∫o
!=
ENOTSUP
) {

1991 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"main server moduleÉrror:can't setáccept filter");

1993 
	`t˝ªsﬁve
(
Li°íHo°
,
Li°íP‹t
,&
myli°íù
,&
myli°íp‹t
,1);

1994 i‡(
	`t˝numli°í
(
lsock
,
myli°íù
,
myli°íp‹t
,100)<0) {

1995 
	`mfs_îæog
(
LOG_ERR
,"main server moduleÉrror: can'tÜisten on socket");

1998 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"maö sîvî moduÀ:Üi°í o¿%s:%s",
Li°íHo°
,
Li°íP‹t
);

2000 
cs£rvhód
 = 
NULL
;

2001 
	`maö_de°ru˘ªgi°î
(
cs£rv_ãrm
);

2002 
	`maö_pﬁÃegi°î
(
cs£rv_desc
,
cs£rv_£rve
);

2004 #ifde‡
BGJOBS


2005 
jpoﬁ
 = 
	`job_poﬁ_√w
(10,
BGJOBSCNT
,&
jobfd
);

2009 
	}
}

	@mfschunkserver/csserv.h

19 #i‚de‡
_CSSERV_H_


20 
	#_CSSERV_H_


	)

22 
	~<öây≥s.h
>

24 
cs£rv_°©s
(
uöt32_t
 *
bö
,uöt32_à*
bout
,uöt32_à*
hl›r
,uöt32_à*
hl›w
,uöt32_à*
maxjobs˙t
);

25 
cs£rv_c°ocs_c⁄√˘ed
(*
e
,*
˝å
);

26 
cs£rv_c°ocs_gŸ°©us
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
wrôeid
,
uöt8_t
 
s
);

27 
cs£rv_c°ocs_disc⁄√˘ed
(*
e
);

28 
uöt32_t
 
cs£rv_gëli°íù
();

29 
uöt16_t
 
cs£rv_gëli°íp‹t
();

30 
cs£rv_öô
();

	@mfschunkserver/hddspacemgr.c

19 
	~"c⁄fig.h
"

21 
	#MMAP_ALLOC
 1

	)

24 
	~<öây≥s.h
>

25 
	~<sy¶og.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<uni°d.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<sys/°©vfs.h
>

34 
	~<sys/time.h
>

35 
	~<time.h
>

36 
	~<dúít.h
>

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<±hªad.h
>

40 #ifde‡
MMAP_ALLOC


41 
	~<sys/mm™.h
>

44 
	~"MFSCommuniˇti⁄.h
"

45 
	~"cfg.h
"

46 
	~"d©≠ack.h
"

47 
	~"¸c.h
"

48 
	~"maö.h
"

49 
	~"¶oggî.h
"

50 
	~"mas£π.h
"

51 
	~"øndom.h
"

53 
	#PRESERVE_BLOCK
 1

	)

55 #i‡
deföed
(
HAVE_PREAD
Ë&& deföed(
HAVE_PWRITE
)

56 
	#USE_PIO
 1

	)

60 
	#DELAYEDSTEP
 2

	)

62 
	#OPENDELAY
 5

	)

63 
	#CRCDELAY
 100

	)

64 
	#OPENSTEPS
 (
OPENDELAY
/
DELAYEDSTEP
)+1

	)

65 
	#CRCSTEPS
 (
CRCDELAY
/
DELAYEDSTEP
)+1

	)

67 #ifde‡
PRESERVE_BLOCK


68 
	#PRESERVEDELAY
 10

	)

69 
	#PRESERVESTEPS
 (
PRESERVEDELAY
/
DELAYEDSTEP
)+1

	)

72 
	#LOSTCHUNKSBLOCKSIZE
 1024

	)

74 
	#CHUNKHDRSIZE
 (1024+4*1024)

	)

75 
	#CHUNKHDRCRC
 1024

	)

77 
	#STATSHISTORY
 (24*60)

	)

79 
	#ERRORLIMIT
 2

	)

80 
	#LASTERRSIZE
 30

	)

81 
	#LASTERRTIME
 60

	)

83 
	#HASHSIZE
 32768

	)

84 
	#HASHPOS
(
chunkid
Ë((chunkid)&0x7FFF)

	)

86 
	#DHASHSIZE
 64

	)

87 
	#DHASHPOS
(
chunkid
Ë((chunkid)&0x3F)

	)

89 
	#CH_NEW_NONE
 0

	)

90 
	#CH_NEW_AUTO
 1

	)

91 
	#CH_NEW_EXCLUSIVE
 2

	)

93 
	#CHUNKLOCKED
 ((*)1)

	)

95 
	sdamagedchunk
 {

96 
uöt64_t
 
	mchunkid
;

97 
damagedchunk
 *
	m√xt
;

98 } 
	tdamagedchunk
;

100 
	slo°chunk
 {

101 
uöt64_t
 
	mchunkidblock
[
LOSTCHUNKSBLOCKSIZE
];

102 
uöt32_t
 
	mchunksöblock
;

103 
lo°chunk
 *
	m√xt
;

104 } 
	tlo°chunk
;

106 
	sd›chunk
 {

107 
uöt64_t
 
	mchunkid
;

108 
d›chunk
 *
	m√xt
;

109 } 
	td›chunk
;

111 
	gfﬁdî
;

113 
	si€º‹
 {

114 
uöt64_t
 
	mchunkid
;

115 
uöt32_t
 
	mtime°amp
;

116 
	mîr‹numbî
;

117 } 
	ti€º‹
;

119 
	s_˙tc⁄d
 {

120 
±hªad_c⁄d_t
 
	mc⁄d
;

121 
uöt32_t
 
	mw˙t
;

122 
_˙tc⁄d
 *
	m√xt
;

123 } 
	t˙tc⁄d
;

125 
	schunk
 {

126 *
	mfûíame
;

127 
uöt64_t
 
	mchunkid
;

128 
fﬁdî
 *
	mow√r
;

129 
uöt32_t
 
	mvîsi⁄
;

130 
uöt16_t
 
	mblocks
;

131 
uöt16_t
 
	m¸¸efcou¡
;

132 
uöt8_t
 
	m›í°ïs
;

133 
uöt8_t
 
	m¸c°ïs
;

134 
uöt8_t
 
	m¸cch™ged
;

135 
	#CH_AVAIL
 0

	)

136 
	#CH_LOCKED
 1

	)

137 
	#CH_DELETED
 2

	)

138 
	#CH_TOBEDELETED
 3

	)

139 
uöt8_t
 
	m°©e
;

140 
˙tc⁄d
 *
	mcc⁄d
;

141 
uöt8_t
 *
	m¸c
;

142 
	mfd
;

144 #ifde‡
PRESERVE_BLOCK


145 
uöt8_t
 *
	mblock
;

146 
uöt16_t
 
	mblockno
;

147 
uöt8_t
 
	mblock°ïs
;

149 
uöt8_t
 
	mvÆid©å
;

151 
chunk
 *
	mã°√xt
,**
	mã°¥ev
;

152 
chunk
 *
	m√xt
;

153 } 
	tchunk
;

155 
	shdd°©s
 {

156 
uöt64_t
 
	mrbyãs
;

157 
uöt64_t
 
	mwbyãs
;

158 
uöt64_t
 
	mu£¸ódsum
;

159 
uöt64_t
 
	mu£cwrôesum
;

160 
uöt64_t
 
	mu£cfsyncsum
;

161 
uöt32_t
 
	mr›s
;

162 
uöt32_t
 
	mw›s
;

163 
uöt32_t
 
	mfsync›s
;

164 
uöt32_t
 
	mu£¸ódmax
;

165 
uöt32_t
 
	mu£cwrôemax
;

166 
uöt32_t
 
	mu£cfsyncmax
;

167 } 
	thdd°©s
;

169 
	sfﬁdî
 {

170 *
	m∑th
;

171 
	m√edª‰esh
:1;

172 
	mtodñ
:2;

173 
	mdamaged
:1;

174 
uöt64_t
 
	mÀave‰ì
;

175 
uöt64_t
 
	mavaû
;

176 
uöt64_t
 
	mtŸÆ
;

177 
hdd°©s
 
	mc°©
;

178 
hdd°©s
 
	m°©s
[
STATSHISTORY
];

179 
uöt32_t
 
	m°©•os
;

180 
i€º‹
 
	mœ°îπab
[
LASTERRSIZE
];

181 
uöt32_t
 
	mchunkcou¡
;

182 
uöt32_t
 
	mœ°îrödx
;

183 
uöt32_t
 
	mœ°ª‰esh
;

184 
dev_t
 
	mdevid
;

185 
öo_t
 
	mlocköode
;

186 
	mˇºy
;

187 
±hªad_t
 
	msˇ¡hªad
;

188 
chunk
 *
	mã°hód
,**
	mã°èû
;

189 
fﬁdî
 *
	m√xt
;

190 } 
	tfﬁdî
;

203 
uöt32_t
 
	gHDDTe°Fªq
=10;

206 
fﬁdî
 *
	gfﬁdîhód
=
NULL
;

209 
chunk
* 
	ghashèb
[
HASHSIZE
];

212 
d›chunk
 *
	gd›hashèb
[
DHASHSIZE
];

214 
d›chunk
 *
	g√wd›chunks
=
NULL
;

217 
damagedchunk
 *
	gdamagedchunks
=
NULL
;

218 
lo°chunk
 *
	glo°chunks
=
NULL
;

219 
uöt32_t
 
	gîr‹cou¡î
=0;

220 
	ghdd•a˚ch™ged
=0;

222 
±hªad_t
 
	gfﬁdî°hªad
,
	gdñayedthªad
,
	gã°îthªad
;

223 
	gãrm
=0;

224 
±hªad_muãx_t
 
	gãrmlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

227 
±hªad_muãx_t
 
	g°©¶ock
 = 
PTHREAD_MUTEX_INITIALIZER
;

230 
±hªad_muãx_t
 
	gd›lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

231 
±hªad_muãx_t
 
	gnd›lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

234 
±hªad_muãx_t
 
	gd˛ock
 = 
PTHREAD_MUTEX_INITIALIZER
;

237 
±hªad_muãx_t
 
	ghashlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

238 
˙tc⁄d
 *
	gc˛i°
 = 
NULL
;

241 
±hªad_muãx_t
 
	gfﬁdîlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

244 
±hªad_muãx_t
 
	gã°lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

246 #i‚de‡
PRESERVE_BLOCK


247 
±hªad_key_t
 
	ghdrbuf„rkey
;

248 
±hªad_key_t
 
	gblockbuf„rkey
;

251 
uöt32_t
 
	gsˇ≈rogªss
;

252 
uöt8_t
 
	gsˇ≈rogªsswaôög
;

253 
±hªad_c⁄d_t
 
	gsˇ≈rogªssc⁄d
 = 
PTHREAD_COND_INITIALIZER
;

255 
uöt32_t
 
	gem±yblock¸c
;

257 
uöt32_t
 
	g°©s_byã§
=0;

258 
uöt32_t
 
	g°©s_byãsw
=0;

259 
uöt32_t
 
	g°©s_›r
=0;

260 
uöt32_t
 
	g°©s_›w
=0;

261 
uöt32_t
 
	g°©s_d©abyã§
=0;

262 
uöt32_t
 
	g°©s_d©abyãsw
=0;

263 
uöt32_t
 
	g°©s_d©a›r
=0;

264 
uöt32_t
 
	g°©s_d©a›w
=0;

265 
uöt64_t
 
	g°©s_πime
=0;

266 
uöt64_t
 
	g°©s_wtime
=0;

268 
uöt32_t
 
	g°©s_¸óã
=0;

269 
uöt32_t
 
	g°©s_dñëe
=0;

270 
uöt32_t
 
	g°©s_ã°
=0;

271 
uöt32_t
 
	g°©s_vîsi⁄
=0;

272 
uöt32_t
 
	g°©s_du∂iˇã
=0;

273 
uöt32_t
 
	g°©s_åunˇã
=0;

274 
uöt32_t
 
	g°©s_du±runc
=0;

276 
ölöe
 
	$hdd_°©s_˛ór
(
hdd°©s
 *
r
) {

277 
	`mem£t
(
r
,0,(
hdd°©s
));

278 
	}
}

280 
ölöe
 
	$hdd_°©s_add
(
hdd°©s
 *
d°
,hdd°©†*
§c
) {

281 
d°
->
rbyãs
 +
§c
->rbytes;

282 
d°
->
wbyãs
 +
§c
->wbytes;

283 
d°
->
u£¸ódsum
 +
§c
->usecreadsum;

284 
d°
->
u£cwrôesum
 +
§c
->usecwritesum;

285 
d°
->
u£cfsyncsum
 +
§c
->usecfsyncsum;

286 
d°
->
r›s
 +
§c
->rops;

287 
d°
->
w›s
 +
§c
->wops;

288 
d°
->
fsync›s
 +
§c
->fsyncops;

289 i‡(
§c
->
u£¸ódmax
>
d°
->usecreadmax) {

290 
d°
->
u£¸ódmax
 = 
§c
->usecreadmax;

292 i‡(
§c
->
u£cwrôemax
>
d°
->usecwritemax) {

293 
d°
->
u£cwrôemax
 = 
§c
->usecwritemax;

295 i‡(
§c
->
u£cfsyncmax
>
d°
->usecfsyncmax) {

296 
d°
->
u£cfsyncmax
 = 
§c
->usecfsyncmax;

298 
	}
}

301 
ölöe
 
	$hdd_°©s_bö¨y_∑ck
(
uöt8_t
 **
buff
,
hdd°©s
 *
r
) {

302 
	`put64bô
(
buff
,
r
->
rbyãs
);

303 
	`put64bô
(
buff
,
r
->
wbyãs
);

304 
	`put64bô
(
buff
,
r
->
u£¸ódsum
);

305 
	`put64bô
(
buff
,
r
->
u£cwrôesum
);

306 
	`put64bô
(
buff
,
r
->
u£cfsyncsum
);

307 
	`put32bô
(
buff
,
r
->
r›s
);

308 
	`put32bô
(
buff
,
r
->
w›s
);

309 
	`put32bô
(
buff
,
r
->
fsync›s
);

310 
	`put32bô
(
buff
,
r
->
u£¸ódmax
);

311 
	`put32bô
(
buff
,
r
->
u£cwrôemax
);

312 
	`put32bô
(
buff
,
r
->
u£cfsyncmax
);

313 
	}
}

326 
	$hdd_ªp‹t_damaged_chunk
(
uöt64_t
 
chunkid
) {

327 
damagedchunk
 *
dc
;

328 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

329 
dc
 = 
	`mÆloc
((
damagedchunk
));

330 
	`∑s£π
(
dc
);

331 
dc
->
chunkid
 = chunkid;

332 
dc
->
√xt
 = 
damagedchunks
;

333 
damagedchunks
 = 
dc
;

334 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

335 
	}
}

337 
uöt32_t
 
	$hdd_gë_damaged_chunk_cou¡
() {

338 
damagedchunk
 *
dc
;

339 
uöt32_t
 
ªsu…
;

340 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

341 
ªsu…
=0;

342 
dc
 = 
damagedchunks
 ; d¯; dc=dc->
√xt
) {

343 
ªsu…
++;

345  
ªsu…
;

346 
	}
}

348 
	$hdd_gë_damaged_chunk_d©a
(
uöt8_t
 *
buff
) {

349 
damagedchunk
 *
dc
,*
ndc
;

350 
uöt64_t
 
chunkid
;

351 i‡(
buff
) {

352 
dc
=
damagedchunks
;

353 
dc
) {

354 
ndc
 = 
dc
;

355 
dc
 = dc->
√xt
;

356 
chunkid
 = 
ndc
->chunkid;

357 
	`put64bô
(&
buff
,
chunkid
);

358 
	`‰ì
(
ndc
);

360 
damagedchunks
=
NULL
;

362 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

363 
	}
}

365 
	$hdd_ªp‹t_lo°_chunk
(
uöt64_t
 
chunkid
) {

366 
lo°chunk
 *
lc
;

367 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

368 i‡(
lo°chunks
 &&Üo°chunks->
chunksöblock
<
LOSTCHUNKSBLOCKSIZE
) {

369 
lo°chunks
->
chunkidblock
[lo°chunks->
chunksöblock
++]=
chunkid
;

371 
lc
 = 
	`mÆloc
((
lo°chunk
));

372 
	`∑s£π
(
lc
);

373 
lc
->
chunkidblock
[0]=
chunkid
;

374 
lc
->
chunksöblock
=1;

375 
lc
->
√xt
 = 
lo°chunks
;

376 
lo°chunks
 = 
lc
;

378 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

379 
	}
}

381 
uöt32_t
 
	$hdd_gë_lo°_chunk_cou¡
() {

382 
lo°chunk
 *
lc
;

383 
uöt32_t
 
ªsu…
;

384 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

385 
ªsu…
=0;

386 
lc
=
lo°chunks
 ;Ü¯;Ücˆc->
√xt
) {

387 
ªsu…
+=
lc
->
chunksöblock
;

389  
ªsu…
;

390 
	}
}

392 
	$hdd_gë_lo°_chunk_d©a
(
uöt8_t
 *
buff
) {

393 
lo°chunk
 *
lc
,*
∆c
;

394 
uöt64_t
 
chunkid
;

395 
uöt32_t
 
i
;

396 i‡(
buff
) {

397 
lc
=
lo°chunks
;

398 
lc
) {

399 
∆c
 = 
lc
;

400 
i
=0 ; i<
lc
->
chunksöblock
 ; i++) {

401 
chunkid
 = 
lc
->
chunkidblock
[
i
];

402 
	`put64bô
(&
buff
,
chunkid
);

404 
lc
 =Üc->
√xt
;

405 
	`‰ì
(
∆c
);

407 
lo°chunks
=
NULL
;

409 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

410 
	}
}

412 
uöt32_t
 
	$hdd_îr‹cou¡î
() {

413 
uöt32_t
 
ªsu…
;

414 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

415 
ªsu…
 = 
îr‹cou¡î
;

416 
îr‹cou¡î
 = 0;

417 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

418  
ªsu…
;

419 
	}
}

421 
	$hdd_•a˚ch™ged
() {

422 
uöt32_t
 
ªsu…
;

423 
	`ós£π
(
	`±hªad_muãx_lock
(&
d˛ock
)==0);

424 
ªsu…
 = 
hdd•a˚ch™ged
;

425 
hdd•a˚ch™ged
 = 0;

426 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
d˛ock
)==0);

427  
ªsu…
;

428 
	}
}

430 
	$hdd_°©s
(
uöt32_t
 *
br
,uöt32_à*
bw
,uöt32_à*
›r
,uöt32_à*
›w
,uöt32_à*
dbr
,uöt32_à*
dbw
,uöt32_à*
d›r
,uöt32_à*
d›w
,
uöt64_t
 *
πime
,uöt64_à*
wtime
) {

431 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

432 *
br
 = 
°©s_byã§
;

433 *
bw
 = 
°©s_byãsw
;

434 *
›r
 = 
°©s_›r
;

435 *
›w
 = 
°©s_›w
;

436 *
dbr
 = 
°©s_d©abyã§
;

437 *
dbw
 = 
°©s_d©abyãsw
;

438 *
d›r
 = 
°©s_d©a›r
;

439 *
d›w
 = 
°©s_d©a›w
;

440 *
πime
 = 
°©s_πime
;

441 *
wtime
 = 
°©s_wtime
;

442 
°©s_byã§
=0;

443 
°©s_byãsw
=0;

444 
°©s_›r
=0;

445 
°©s_›w
=0;

446 
°©s_d©abyã§
=0;

447 
°©s_d©abyãsw
=0;

448 
°©s_d©a›r
=0;

449 
°©s_d©a›w
=0;

450 
°©s_πime
=0;

451 
°©s_wtime
=0;

452 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

453 
	}
}

455 
	$hdd_›_°©s
(
uöt32_t
 *
›_¸óã
,uöt32_à*
›_dñëe
,uöt32_à*
›_vîsi⁄
,uöt32_à*
›_du∂iˇã
,uöt32_à*
›_åunˇã
,uöt32_à*
›_du±runc
,uöt32_à*
›_ã°
) {

456 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

457 *
›_¸óã
 = 
°©s_¸óã
;

458 *
›_dñëe
 = 
°©s_dñëe
;

459 *
›_vîsi⁄
 = 
°©s_vîsi⁄
;

460 *
›_du∂iˇã
 = 
°©s_du∂iˇã
;

461 *
›_åunˇã
 = 
°©s_åunˇã
;

462 *
›_du±runc
 = 
°©s_du±runc
;

463 *
›_ã°
 = 
°©s_ã°
;

464 
°©s_¸óã
=0;

465 
°©s_dñëe
=0;

466 
°©s_vîsi⁄
=0;

467 
°©s_du∂iˇã
=0;

468 
°©s_åunˇã
=0;

469 
°©s_du±runc
=0;

470 
°©s_ã°
=0;

471 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

472 
	}
}

474 
ölöe
 
	$hdd_°©s_ªad
(
uöt32_t
 
size
) {

475 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

476 
°©s_›r
++;

477 
°©s_byã§
 +
size
;

478 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

479 
	}
}

481 
ölöe
 
	$hdd_°©s_wrôe
(
uöt32_t
 
size
) {

482 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

483 
°©s_›w
++;

484 
°©s_byãsw
 +
size
;

485 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

486 
	}
}

488 
ölöe
 
	$hdd_°©s_d©¨ód
(
fﬁdî
 *
f
,
uöt32_t
 
size
,
öt64_t
 
πime
) {

489 i‡(
πime
<=0) {

492 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

493 
°©s_d©a›r
++;

494 
°©s_d©abyã§
 +
size
;

495 
°©s_πime
 +
πime
;

496 
f
->
c°©
.
r›s
++;

497 
f
->
c°©
.
rbyãs
 +
size
;

498 
f
->
c°©
.
u£¸ódsum
 +
πime
;

499 i‡(
πime
>
f
->
c°©
.
u£¸ódmax
) {

500 
f
->
c°©
.
u£¸ódmax
=
πime
;

502 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

503 
	}
}

505 
ölöe
 
	$hdd_°©s_d©awrôe
(
fﬁdî
 *
f
,
uöt32_t
 
size
,
öt64_t
 
wtime
) {

506 i‡(
wtime
<=0) {

509 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

510 
°©s_d©a›w
++;

511 
°©s_d©abyãsw
 +
size
;

512 
°©s_wtime
 +
wtime
;

513 
f
->
c°©
.
w›s
++;

514 
f
->
c°©
.
wbyãs
 +
size
;

515 
f
->
c°©
.
u£cwrôesum
 +
wtime
;

516 i‡(
wtime
>
f
->
c°©
.
u£cwrôemax
) {

517 
f
->
c°©
.
u£cwrôemax
=
wtime
;

519 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

520 
	}
}

522 
ölöe
 
	$hdd_°©s_d©afsync
(
fﬁdî
 *
f
,
öt64_t
 
fsyn˘ime
) {

523 i‡(
fsyn˘ime
<=0) {

526 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

527 
°©s_wtime
 +
fsyn˘ime
;

528 
f
->
c°©
.
fsync›s
++;

529 
f
->
c°©
.
u£cfsyncsum
 +
fsyn˘ime
;

530 i‡(
fsyn˘ime
>
f
->
c°©
.
u£cfsyncmax
) {

531 
f
->
c°©
.
u£cfsyncmax
=
fsyn˘ime
;

533 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

534 
	}
}

536 
uöt32_t
 
	$hdd_disköfo_v1_size
() {

537 
fﬁdî
 *
f
;

538 
uöt32_t
 
s
=0,
¶
;

539 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

540 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
 ) {

541 
¶
 = 
	`°æí
(
f
->
∑th
);

542 i‡(
¶
>255) {

543 
¶
=255;

545 
s
+=34+
¶
;

547  
s
;

548 
	}
}

550 
	$hdd_disköfo_v1_d©a
(
uöt8_t
 *
buff
) {

551 
fﬁdî
 *
f
;

552 
uöt32_t
 
¶
;

553 
uöt32_t
 
ei
;

554 i‡(
buff
) {

555 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
 ) {

556 
¶
 = 
	`°æí
(
f
->
∑th
);

557 i‡(
¶
>255) {

558 
	`put8bô
(&
buff
,255);

559 
	`mem˝y
(
buff
,"(...)",5);

560 
	`mem˝y
(
buff
+5,
f
->
∑th
+(
¶
-250),250);

561 
buff
+=255;

563 
	`put8bô
(&
buff
,
¶
);

564 i‡(
¶
>0) {

565 
	`mem˝y
(
buff
,
f
->
∑th
,
¶
);

566 
buff
+=
¶
;

569 
	`put8bô
(&
buff
,((
f
->
todñ
)?1:0)+((f->
damaged
)?2:0));

570 
ei
 = (
f
->
œ°îrödx
+(
LASTERRSIZE
-1))%LASTERRSIZE;

571 
	`put64bô
(&
buff
,
f
->
œ°îπab
[
ei
].
chunkid
);

572 
	`put32bô
(&
buff
,
f
->
œ°îπab
[
ei
].
time°amp
);

573 
	`put64bô
(&
buff
,
f
->
tŸÆ
-f->
avaû
);

574 
	`put64bô
(&
buff
,
f
->
tŸÆ
);

575 
	`put32bô
(&
buff
,
f
->
chunkcou¡
);

578 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

579 
	}
}

581 
uöt32_t
 
	$hdd_disköfo_v2_size
() {

582 
fﬁdî
 *
f
;

583 
uöt32_t
 
s
=0,
¶
;

584 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

585 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
 ) {

586 
¶
 = 
	`°æí
(
f
->
∑th
);

587 i‡(
¶
>255) {

588 
¶
=255;

590 
s
+=2+226+
¶
;

592  
s
;

593 
	}
}

595 
	$hdd_disköfo_v2_d©a
(
uöt8_t
 *
buff
) {

596 
fﬁdî
 *
f
;

597 
hdd°©s
 
s
;

598 
uöt32_t
 
¶
;

599 
uöt32_t
 
ei
;

600 
uöt32_t
 
pos
;

601 i‡(
buff
) {

602 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

603 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
 ) {

604 
¶
 = 
	`°æí
(
f
->
∑th
);

605 i‡(
¶
>255) {

606 
	`put16bô
(&
buff
,226+255);

607 
	`put8bô
(&
buff
,255);

608 
	`mem˝y
(
buff
,"(...)",5);

609 
	`mem˝y
(
buff
+5,
f
->
∑th
+(
¶
-250),250);

610 
buff
+=255;

612 
	`put16bô
(&
buff
,226+
¶
);

613 
	`put8bô
(&
buff
,
¶
);

614 i‡(
¶
>0) {

615 
	`mem˝y
(
buff
,
f
->
∑th
,
¶
);

616 
buff
+=
¶
;

619 
	`put8bô
(&
buff
,((
f
->
todñ
)?1:0)+((f->
damaged
)?2:0));

620 
ei
 = (
f
->
œ°îrödx
+(
LASTERRSIZE
-1))%LASTERRSIZE;

621 
	`put64bô
(&
buff
,
f
->
œ°îπab
[
ei
].
chunkid
);

622 
	`put32bô
(&
buff
,
f
->
œ°îπab
[
ei
].
time°amp
);

623 
	`put64bô
(&
buff
,
f
->
tŸÆ
-f->
avaû
);

624 
	`put64bô
(&
buff
,
f
->
tŸÆ
);

625 
	`put32bô
(&
buff
,
f
->
chunkcou¡
);

626 
s
 = 
f
->
°©s
[f->
°©•os
];

627 
	`hdd_°©s_bö¨y_∑ck
(&
buff
,&
s
);

628 
pos
=1 ;Öos<60 ;Öos++) {

629 
	`hdd_°©s_add
(&
s
,&(
f
->
°©s
[(f->
°©•os
+
pos
)%
STATSHISTORY
]));

631 
	`hdd_°©s_bö¨y_∑ck
(&
buff
,&
s
);

632 
pos
=60 ;Öos<24*60 ;Öos++) {

633 
	`hdd_°©s_add
(&
s
,&(
f
->
°©s
[(f->
°©•os
+
pos
)%
STATSHISTORY
]));

635 
	`hdd_°©s_bö¨y_∑ck
(&
buff
,&
s
);

637 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

639 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

640 
	}
}

642 
	$hdd_disköfo_move°©s
() {

643 
fﬁdî
 *
f
;

644 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

645 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

646 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
 ) {

647 i‡(
f
->
°©•os
==0) {

648 
f
->
°©•os
=
STATSHISTORY
-1;

650 
f
->
°©•os
--;

652 
f
->
°©s
[f->
°©•os
]=f->
c°©
;

653 
	`hdd_°©s_˛ór
(&(
f
->
c°©
));

655 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

656 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

657 
	}
}

659 
ölöe
 
	$hdd_chunk_ªmove
(
chunk
 *
c
) {

660 
chunk
 **
˝å
,*
˝
;

661 
uöt32_t
 
hashpos
 = 
	`HASHPOS
(
c
->
chunkid
);

662 
˝å
 = &(
hashèb
[
hashpos
]);

663 (
˝
=*
˝å
)) {

664 i‡(
c
==
˝
) {

665 *
˝å
 = 
˝
->
√xt
;

666 i‡(
˝
->
fd
>=0) {

667 
	`˛o£
(
˝
->
fd
);

669 i‡(
˝
->
¸c
!=
NULL
) {

670 #ifde‡
MMAP_ALLOC


671 
	`munm≠
((*)(
˝
->
¸c
),4096);

673 
	`‰ì
(
˝
->
¸c
);

676 #ifde‡
PRESERVE_BLOCK


677 i‡(
˝
->
block
!=
NULL
) {

678 #ifde‡
MMAP_ALLOC


679 
	`munm≠
((*)(
˝
->
block
),
MFSBLOCKSIZE
);

681 
	`‰ì
(
˝
->
block
);

685 i‡(
˝
->
fûíame
!=
NULL
) {

686 
	`‰ì
(
˝
->
fûíame
);

688 i‡(
˝
->
ow√r
) {

689 
	`±hªad_muãx_lock
(&
ã°lock
);

690 i‡(
˝
->
ã°√xt
) {

691 
˝
->
ã°√xt
->
ã°¥ev
 = cp->testprev;

693 
˝
->
ow√r
->
ã°èû
 = cp->
ã°¥ev
;

695 *(
˝
->
ã°¥ev
Ë˝->
ã°√xt
;

696 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

698 
	`‰ì
(
˝
);

701 
˝å
 = &(
˝
->
√xt
);

703 
	}
}

705 
	$hdd_chunk_ªÀa£
(
chunk
 *
c
) {

706 
	`±hªad_muãx_lock
(&
hashlock
);

708 i‡(
c
->
°©e
==
CH_LOCKED
) {

709 
c
->
°©e
 = 
CH_AVAIL
;

710 i‡(
c
->
cc⁄d
) {

713 
	`±hªad_c⁄d_sig«l
(&(
c
->
cc⁄d
->
c⁄d
));

715 } i‡(
c
->
°©e
==
CH_TOBEDELETED
) {

716 i‡(
c
->
cc⁄d
) {

717 
c
->
°©e
 = 
CH_DELETED
;

720 
	`±hªad_c⁄d_sig«l
(&(
c
->
cc⁄d
->
c⁄d
));

722 
	`hdd_chunk_ªmove
(
c
);

725 
	`±hªad_muãx_u∆ock
(&
hashlock
);

726 
	}
}

728 
	$hdd_chunk_gë©å
(
chunk
 *
c
) {

729 
°©
 
sb
;

730 i‡(
	`°©
(
c
->
fûíame
,&
sb
)<0) {

733 i‡((
sb
.
°_mode
 & 
S_IFMT
Ë!
S_IFREG
) {

736 i‡(
sb
.
°_size
<
CHUNKHDRSIZE
 || sb.°_size>(CHUNKHDRSIZE+
MFSCHUNKSIZE
Ë|| ((sb.°_size-CHUNKHDRSIZE)&
MFSBLOCKMASK
)!=0) {

739 
c
->
blocks
 = (
sb
.
°_size
 - 
CHUNKHDRSIZE
Ë/ 
MFSBLOCKSIZE
;

741 
c
->
vÆid©å
 = 1;

743 
	}
}

745 
chunk
* 
	$hdd_chunk_åyföd
(
uöt64_t
 
chunkid
) {

746 
uöt32_t
 
hashpos
 = 
	`HASHPOS
(
chunkid
);

747 
chunk
 *
c
;

748 
	`±hªad_muãx_lock
(&
hashlock
);

749 
c
=
hashèb
[
hashpos
] ; c && c->
chunkid
!=chunkid ; c=c->
√xt
) {}

750 i‡(
c
!=
NULL
) {

751 i‡(
c
->
°©e
==
CH_LOCKED
) {

752 
c
 = 
CHUNKLOCKED
;

753 } i‡(
c
->
°©e
!=
CH_AVAIL
) {

754 
c
 = 
NULL
;

756 
c
->
°©e
=
CH_LOCKED
;

762 
	`±hªad_muãx_u∆ock
(&
hashlock
);

763  
c
;

764 
	}
}

766 
hdd_chunk_dñëe
(
chunk
 *
c
);

768 
chunk
* 
	$hdd_chunk_gë
(
uöt64_t
 
chunkid
,
uöt8_t
 
cÊag
) {

769 
uöt32_t
 
hashpos
 = 
	`HASHPOS
(
chunkid
);

770 
chunk
 *
c
;

771 
˙tc⁄d
 *
cc
;

772 
	`±hªad_muãx_lock
(&
hashlock
);

773 
c
=
hashèb
[
hashpos
] ; c && c->
chunkid
!=chunkid ; c=c->
√xt
) {}

774 i‡(
c
==
NULL
) {

775 i‡(
cÊag
!=
CH_NEW_NONE
) {

776 
c
 = 
	`mÆloc
((
chunk
));

777 
	`∑s£π
(
c
);

778 
c
->
chunkid
 = chunkid;

779 
c
->
vîsi⁄
 = 0;

780 
c
->
ow√r
 = 
NULL
;

781 
c
->
fûíame
 = 
NULL
;

782 
c
->
blocks
 = 0;

783 
c
->
¸¸efcou¡
 = 0;

784 
c
->
›í°ïs
 = 0;

785 
c
->
¸c°ïs
 = 0;

786 
c
->
¸cch™ged
 = 0;

787 
c
->
fd
 = -1;

788 
c
->
¸c
 = 
NULL
;

789 
c
->
°©e
 = 
CH_LOCKED
;

790 
c
->
cc⁄d
 = 
NULL
;

791 #ifde‡
PRESERVE_BLOCK


792 
c
->
block
 = 
NULL
;

793 
c
->
blockno
 = 0xFFFF;

794 
c
->
block°ïs
 = 0;

796 
c
->
vÆid©å
 = 0;

797 
c
->
ã°√xt
 = 
NULL
;

798 
c
->
ã°¥ev
 = 
NULL
;

799 
c
->
√xt
 = 
hashèb
[
hashpos
];

800 
hashèb
[
hashpos
]=
c
;

803 
	`±hªad_muãx_u∆ock
(&
hashlock
);

804  
c
;

806 i‡(
cÊag
==
CH_NEW_EXCLUSIVE
) {

807 i‡(
c
->
°©e
==
CH_AVAIL
 || c->°©e==
CH_LOCKED
) {

808 
	`±hªad_muãx_u∆ock
(&
hashlock
);

809  
NULL
;

813 
c
->
°©e
) {

814 
CH_AVAIL
:

815 
c
->
°©e
=
CH_LOCKED
;

817 
	`±hªad_muãx_u∆ock
(&
hashlock
);

818 i‡(
c
->
vÆid©å
==0) {

819 i‡(
	`hdd_chunk_gë©å
(
c
)) {

820 
	`hdd_ªp‹t_damaged_chunk
(
c
->
chunkid
);

821 
	`u∆ök
(
c
->
fûíame
);

822 
	`hdd_chunk_dñëe
(
c
);

823  
NULL
;

826  
c
;

827 
CH_DELETED
:

828 i‡(
cÊag
!=
CH_NEW_NONE
) {

829 i‡(
c
->
fd
>=0) {

830 
	`˛o£
(
c
->
fd
);

832 i‡(
c
->
¸c
!=
NULL
) {

833 #ifde‡
MMAP_ALLOC


834 
	`munm≠
((*)(
c
->
¸c
),4096);

836 
	`‰ì
(
c
->
¸c
);

839 #ifde‡
PRESERVE_BLOCK


840 i‡(
c
->
block
!=
NULL
) {

841 #ifde‡
MMAP_ALLOC


842 
	`munm≠
((*)(
c
->
¸c
),
MFSBLOCKSIZE
);

844 
	`‰ì
(
c
->
block
);

848 i‡(
c
->
fûíame
!=
NULL
) {

849 
	`‰ì
(
c
->
fûíame
);

851 
	`±hªad_muãx_lock
(&
ã°lock
);

852 i‡(
c
->
ã°√xt
) {

853 
c
->
ã°√xt
->
ã°¥ev
 = c->testprev;

855 
c
->
ow√r
->
ã°èû
 = c->
ã°¥ev
;

857 *(
c
->
ã°¥ev
Ëc->
ã°√xt
;

858 
c
->
ã°√xt
 = 
NULL
;

859 
c
->
ã°¥ev
 = 
NULL
;

860 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

861 
c
->
vîsi⁄
 = 0;

862 
c
->
ow√r
 = 
NULL
;

863 
c
->
fûíame
 = 
NULL
;

864 
c
->
blocks
 = 0;

865 
c
->
¸¸efcou¡
 = 0;

866 
c
->
›í°ïs
 = 0;

867 
c
->
¸c°ïs
 = 0;

868 
c
->
¸cch™ged
 = 0;

869 
c
->
fd
 = -1;

870 
c
->
¸c
 = 
NULL
;

871 #ifde‡
PRESERVE_BLOCK


872 
c
->
block
 = 
NULL
;

873 
c
->
blockno
 = 0xFFFF;

874 
c
->
block°ïs
 = 0;

876 
c
->
vÆid©å
 = 0;

877 
c
->
°©e
 = 
CH_LOCKED
;

879 
	`±hªad_muãx_u∆ock
(&
hashlock
);

880  
c
;

882 i‡(
c
->
cc⁄d
==
NULL
) {

883 
	`hdd_chunk_ªmove
(
c
);

887 
	`±hªad_c⁄d_sig«l
(&(
c
->
cc⁄d
->
c⁄d
));

889 
	`±hªad_muãx_u∆ock
(&
hashlock
);

890  
NULL
;

891 
CH_TOBEDELETED
:

892 
CH_LOCKED
:

893 i‡(
c
->
cc⁄d
==
NULL
) {

894 
cc
=
c˛i°
 ; c¯&& cc->
w˙t
 ; cc=cc->
√xt
) {}

895 i‡(
cc
==
NULL
) {

896 
cc
 = 
	`mÆloc
((
˙tc⁄d
));

897 
	`∑s£π
(
cc
);

898 
	`±hªad_c⁄d_öô
(&(
cc
->
c⁄d
),
NULL
);

899 
cc
->
w˙t
 = 0;

900 
cc
->
√xt
 = 
c˛i°
;

901 
c˛i°
 = 
cc
;

903 
c
->
cc⁄d
 = 
cc
;

905 
c
->
cc⁄d
->
w˙t
++;

908 
	`±hªad_c⁄d_waô
(&(
c
->
cc⁄d
->
c⁄d
),&
hashlock
);

910 
c
->
cc⁄d
->
w˙t
--;

911 i‡(
c
->
cc⁄d
->
w˙t
==0) {

912 
c
->
cc⁄d
=
NULL
;

916 
	}
}

918 
	$hdd_chunk_dñëe
(
chunk
 *
c
) {

919 
fﬁdî
 *
f
;

920 
	`±hªad_muãx_lock
(&
hashlock
);

921 
f
 = 
c
->
ow√r
;

922 i‡(
c
->
cc⁄d
) {

923 
c
->
°©e
 = 
CH_DELETED
;

926 
	`±hªad_c⁄d_sig«l
(&(
c
->
cc⁄d
->
c⁄d
));

928 
	`hdd_chunk_ªmove
(
c
);

930 
	`±hªad_muãx_u∆ock
(&
hashlock
);

931 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

932 
f
->
chunkcou¡
--;

933 
f
->
√edª‰esh
 = 1;

934 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

935 
	}
}

937 
chunk
* 
	$hdd_chunk_¸óã
(
fﬁdî
 *
f
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

938 
uöt32_t
 
Àng
;

939 
chunk
 *
c
;

941 
c
 = 
	`hdd_chunk_gë
(
chunkid
,
CH_NEW_EXCLUSIVE
);

942 i‡(
c
==
NULL
) {

943  
NULL
;

945 
c
->
vîsi⁄
 = version;

946 
Àng
 = 
	`°æí
(
f
->
∑th
);

947 
c
->
fûíame
 = 
	`mÆloc
(
Àng
+39);

948 
	`∑s£π
(
c
->
fûíame
);

949 
	`mem˝y
(
c
->
fûíame
,
f
->
∑th
,
Àng
);

954 
	`•rötf
(
c
->
fûíame
+
Àng
,"%02X/chunk_%016"
PRIX64
"_%08"
PRIX32
".mfs",()(
chunkid
&255),chunkid,
vîsi⁄
);

955 
f
->
√edª‰esh
 = 1;

956 
f
->
chunkcou¡
++;

957 
c
->
ow√r
 = 
f
;

958 
	`±hªad_muãx_lock
(&
ã°lock
);

959 
c
->
ã°√xt
 = 
NULL
;

960 
c
->
ã°¥ev
 = 
f
->
ã°èû
;

961 (*
c
->
ã°¥ev
) = c;

962 
f
->
ã°èû
 = &(
c
->
ã°√xt
);

963 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

964  
c
;

965 
	}
}

967 
	#hdd_chunk_föd
(
chunkid
Ë
	`hdd_chunk_gë
(chunkid,
CH_NEW_NONE
)

	)

969 
	$hdd_chunk_ã°move
(
chunk
 *
c
) {

970 
	`±hªad_muãx_lock
(&
ã°lock
);

971 i‡(
c
->
ã°√xt
) {

972 *(
c
->
ã°¥ev
Ëc->
ã°√xt
;

973 
c
->
ã°√xt
->
ã°¥ev
 = c->testprev;

974 
c
->
ã°√xt
 = 
NULL
;

975 
c
->
ã°¥ev
 = c->
ow√r
->
ã°èû
;

976 *(
c
->
ã°¥ev
) = c;

977 
c
->
ow√r
->
ã°èû
 = &(c->
ã°√xt
);

980 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

981 
	}
}

984 
ölöe
 
	$hdd_ª‰esh_ußge
(
fﬁdî
 *
f
) {

985 
°©vfs
 
fsöfo
;

987 i‡(
	`°©vfs
(
f
->
∑th
,&
fsöfo
)<0) {

988 
f
->
avaû
 = 0ULL;

989 
f
->
tŸÆ
 = 0ULL;

991 
f
->
avaû
 = (
uöt64_t
)(
fsöfo
.
f_‰size
)*(uöt64_t)(fsöfo.
f_bavaû
);

992 
f
->
tŸÆ
 = (
uöt64_t
)(
fsöfo
.
f_‰size
)*(uöt64_t)(fsöfo.
f_blocks
-(fsöfo.
f_b‰ì
-fsöfo.
f_bavaû
));

994 i‡(
f
->
avaû
 < f->
Àave‰ì
) {

995 
f
->
avaû
 = 0ULL;

997 
f
->
avaû
 -f->
Àave‰ì
;

999 
	}
}

1001 
ölöe
 
fﬁdî
* 
	$hdd_gëfﬁdî
() {

1002 
fﬁdî
 *
f
,*
bf
;

1003 
maxˇºy
;

1004 
möavaû
,
maxavaû
;

1005 
s
,
d
;

1006 
∑vaû
;

1007 
ok
;

1010 
möavaû
=0.0;

1011 
maxavaû
=0.0;

1012 
maxˇºy
=1.0;

1013 
bf
=
NULL
;

1014 
ok
=0;

1015 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

1016 i‡(
f
->
damaged
 || f->
todñ
 || f->
tŸÆ
==0 || f->
avaû
==0) {

1019 i‡(
f
->
ˇºy
 >
maxˇºy
) {

1020 
maxˇºy
 = 
f
->
ˇºy
;

1021 
bf
=
f
;

1023 
∑vaû
 = ()(
f
->
avaû
)/()(f->
tŸÆ
);

1024 i‡(
ok
==0 || 
möavaû
>
∑vaû
) {

1025 
möavaû
=
∑vaû
;

1026 
ok
=1;

1028 i‡(
∑vaû
>
maxavaû
) {

1029 
maxavaû
=
∑vaû
;

1032 i‡(
bf
) {

1033 
bf
->
ˇºy
-=1.0;

1034  
bf
;

1036 i‡(
maxavaû
==0.0) {

1037  
NULL
;

1039 i‡(
maxavaû
<0.01) {

1040 
s
=0.0;

1042 
s
=
möavaû
*0.8;

1043 i‡(
s
<0.01) {

1044 
s
=0.01;

1047 
d
 = 
maxavaû
-
s
;

1048 
maxˇºy
=1.0;

1049 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

1050 i‡(
f
->
damaged
 || f->
todñ
 || f->
tŸÆ
==0 || f->
avaû
==0) {

1053 
∑vaû
 = ()(
f
->
avaû
)/()(f->
tŸÆ
);

1054 i‡(
∑vaû
>
s
) {

1055 
f
->
ˇºy
 +((
∑vaû
-
s
)/
d
);

1057 i‡(
f
->
ˇºy
 >
maxˇºy
) {

1058 
maxˇºy
 = 
f
->
ˇºy
;

1059 
bf
=
f
;

1062 i‡(
bf
) {

1063 
bf
->
ˇºy
-=1.0;

1065  
bf
;

1066 
	}
}

1068 
	$hdd_check_fﬁdîs
() {

1069 
fﬁdî
 *
f
;

1070 
chunk
 **
˝å
,*
c
;

1071 
uöt32_t
 
i
;

1072 
uöt32_t
 
now
;

1073 
ch™ged
=0,
îr
;

1074 
timevÆ
 
tv
;

1075 
	`gëtimeofday
(&
tv
,
NULL
);

1076 
now
 = 
tv
.
tv_£c
;

1077 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

1078 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

1079 i‡(
f
->
damaged
) {

1082 
îr
=0;

1083 
i
=0 ; i<
LASTERRSIZE
; i++) {

1084 i‡(
f
->
œ°îπab
[
i
].
time°amp
+
LASTERRTIME
>=
now
 && (f->œ°îπab[i].
îr‹numbî
==
EIO
 || f->œ°îπab[i].îr‹numbî==
EROFS
)) {

1085 
îr
++;

1088 i‡(
îr
>=
ERRORLIMIT
 && 
f
->
todñ
<2) {

1089 
	`sy¶og
(
LOG_WARNING
,"%uÉº‹†occuºed i¿%u sec⁄d†⁄ fﬁdî: %s",
îr
,
LASTERRTIME
,
f
->
∑th
);

1090 
	`±hªad_muãx_lock
(&
hashlock
);

1091 
	`±hªad_muãx_lock
(&
ã°lock
);

1092 
i
=0 ; i<
HASHSIZE
 ; i++) {

1093 
˝å
 = &(
hashèb
[
i
]);

1094 (
c
=*
˝å
)) {

1095 i‡(
c
->
ow√r
==
f
) {

1096 
	`hdd_ªp‹t_lo°_chunk
(
c
->
chunkid
);

1097 i‡(
c
->
°©e
==
CH_AVAIL
) {

1098 *
˝å
=
c
->
√xt
;

1099 i‡(
c
->
fd
>=0) {

1100 
	`˛o£
(
c
->
fd
);

1102 i‡(
c
->
¸c
!=
NULL
) {

1103 #ifde‡
MMAP_ALLOC


1104 
	`munm≠
((*)(
c
->
¸c
),4096);

1106 
	`‰ì
(
c
->
¸c
);

1109 #ifde‡
PRESERVE_BLOCK


1110 i‡(
c
->
block
!=
NULL
) {

1111 #ifde‡
MMAP_ALLOC


1112 
	`munm≠
((*)(
c
->
block
),
MFSBLOCKSIZE
);

1114 
	`‰ì
(
c
->
block
);

1118 i‡(
c
->
fûíame
) {

1119 
	`‰ì
(
c
->
fûíame
);

1121 i‡(
c
->
ã°√xt
) {

1122 
c
->
ã°√xt
->
ã°¥ev
 = c->testprev;

1124 
c
->
ow√r
->
ã°èû
 = c->
ã°¥ev
;

1126 *(
c
->
ã°¥ev
Ëc->
ã°√xt
;

1127 
	`‰ì
(
c
);

1128 } i‡(
c
->
°©e
==
CH_LOCKED
) {

1129 
˝å
 = &(
c
->
√xt
);

1130 
c
->
°©e
=
CH_TOBEDELETED
;

1133 
˝å
 = &(
c
->
√xt
);

1137 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

1138 
	`±hªad_muãx_u∆ock
(&
hashlock
);

1139 
f
->
damaged
=1;

1140 
ch™ged
=1;

1142 i‡(
f
->
√edª‰esh
 || f->
œ°ª‰esh
+60<
now
) {

1143 
	`hdd_ª‰esh_ußge
(
f
);

1144 
f
->
√edª‰esh
 = 0;

1145 
f
->
œ°ª‰esh
 = 
now
;

1146 
ch™ged
=1;

1150 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

1151 i‡(
ch™ged
) {

1152 
	`±hªad_muãx_lock
(&
d˛ock
);

1153 
hdd•a˚ch™ged
=1;

1154 
	`±hªad_muãx_u∆ock
(&
d˛ock
);

1156 
	}
}

1158 
ölöe
 
	$hdd_îr‹_occuªd
(
chunk
 *
c
) {

1159 
uöt32_t
 
i
;

1160 
fﬁdî
 *
f
;

1161 
timevÆ
 
tv
;

1162 
îrmem
 = 
î∫o
;

1164 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

1165 
	`gëtimeofday
(&
tv
,
NULL
);

1166 
f
 = 
c
->
ow√r
;

1167 
i
 = 
f
->
œ°îrödx
;

1168 
f
->
œ°îπab
[
i
].
chunkid
 = 
c
->chunkid;

1169 
f
->
œ°îπab
[
i
].
îr‹numbî
 = 
îrmem
;

1170 
f
->
œ°îπab
[
i
].
time°amp
 = 
tv
.
tv_£c
;

1171 
i
 = (i+1)%
LASTERRSIZE
;

1172 
f
->
œ°îrödx
 = 
i
;

1173 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

1175 
	`±hªad_muãx_lock
(&
d˛ock
);

1176 
îr‹cou¡î
++;

1177 
	`±hªad_muãx_u∆ock
(&
d˛ock
);

1179 
î∫o
 = 
îrmem
;

1180 
	}
}

1185 
	#CHUNKS_CUT_COUNT
 10000

	)

1186 
uöt32_t
 
	ghdd_gë_chunks_pos
;

1188 
	$hdd_gë_chunks_begö
() {

1189 
	`±hªad_muãx_lock
(&
hashlock
);

1190 
hdd_gë_chunks_pos
=0;

1191 
	}
}

1193 
	$hdd_gë_chunks_íd
() {

1194 
	`±hªad_muãx_u∆ock
(&
hashlock
);

1195 
	}
}

1197 
uöt32_t
 
	$hdd_gë_chunks_√xt_li°_cou¡
() {

1198 
uöt32_t
 
ªs
=0;

1199 
uöt32_t
 
i
=0;

1200 
chunk
 *
c
;

1201 
ªs
<
CHUNKS_CUT_COUNT
 && 
hdd_gë_chunks_pos
+
i
<
HASHSIZE
) {

1202 
c
 = 
hashèb
[
hdd_gë_chunks_pos
+
i
] ; c ; c=c->
√xt
) {

1203 
ªs
++;

1205 
i
++;

1207  
ªs
;

1208 
	}
}

1210 
	$hdd_gë_chunks_√xt_li°_d©a
(
uöt8_t
 *
buff
) {

1211 
uöt32_t
 
ªs
=0;

1212 
uöt32_t
 
v
;

1213 
chunk
 *
c
;

1214 
ªs
<
CHUNKS_CUT_COUNT
 && 
hdd_gë_chunks_pos
<
HASHSIZE
) {

1215 
c
 = 
hashèb
[
hdd_gë_chunks_pos
] ; c ; c=c->
√xt
) {

1216 
	`put64bô
(&
buff
,
c
->
chunkid
);

1217 
v
 = 
c
->
vîsi⁄
;

1218 i‡(
c
->
ow√r
->
todñ
) {

1219 
v
|=0x80000000;

1221 
	`put32bô
(&
buff
,
v
);

1222 
ªs
++;

1224 
hdd_gë_chunks_pos
++;

1226 
	}
}

1295 
	$hdd_gë_•a˚
(
uöt64_t
 *
u£d•a˚
,uöt64_à*
tŸÆ•a˚
,
uöt32_t
 *
chunkcou¡
,uöt64_à*
tdu£d•a˚
,uöt64_à*
tdtŸÆ•a˚
,uöt32_à*
tdchunkcou¡
) {

1296 
fﬁdî
 *
f
;

1297 
uöt64_t
 
avaû
,
tŸÆ
;

1298 
uöt64_t
 
tdavaû
,
tdtŸÆ
;

1299 
uöt32_t
 
chunks
,
tdchunks
;

1300 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

1301 
avaû
 = 
tŸÆ
 = 
tdavaû
 = 
tdtŸÆ
 = 0ULL;

1302 
chunks
 = 
tdchunks
 = 0;

1303 
f
 = 
fﬁdîhód
 ; f ; f=f->
√xt
) {

1304 i‡(
f
->
damaged
) {

1307 i‡(
f
->
todñ
==0) {

1308 
avaû
+=
f
->avail;

1309 
tŸÆ
+=
f
->total;

1310 
chunks
+=
f
->
chunkcou¡
;

1312 
tdavaû
+=
f
->
avaû
;

1313 
tdtŸÆ
+=
f
->
tŸÆ
;

1314 
tdchunks
+=
f
->
chunkcou¡
;

1317 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

1318 *
u£d•a˚
 = 
tŸÆ
 - 
avaû
;

1319 *
tŸÆ•a˚
 = 
tŸÆ
;

1320 *
chunkcou¡
 = 
chunks
;

1321 *
tdu£d•a˚
 = 
tdtŸÆ
 - 
tdavaû
;

1322 *
tdtŸÆ•a˚
 = 
tdtŸÆ
;

1323 *
tdchunkcou¡
 = 
tdchunks
;

1324 
	}
}

1326 
ölöe
 
	$chunk_em±y¸c
(
chunk
 *
c
) {

1327 #ifde‡
MMAP_ALLOC


1328 
c
->
¸c
 = (
uöt8_t
*)
	`mm≠
(
NULL
,4096,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

1330 
c
->
¸c
 = (
uöt8_t
*)
	`mÆloc
(4096);

1332 
	`mem£t
(
c
->
¸c
,0,4096);

1333 
	`∑s£π
(
c
->
¸c
);

1334 
	}
}

1336 
ölöe
 
	$chunk_ªad¸c
(
chunk
 *
c
) {

1337 
ªt
;

1338 
uöt8_t
 
hdr
[20];

1339 c⁄° 
uöt8_t
 *
±r
;

1340 
uöt64_t
 
chunkid
;

1341 
uöt32_t
 
vîsi⁄
;

1342 #ifde‡
USE_PIO


1343 i‡(
	`¥ód
(
c
->
fd
,
hdr
,20,0)!=20) {

1344 
îrmem
 = 
î∫o
;

1345 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"chunk_ªad¸c: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1346 
î∫o
 = 
îrmem
;

1347  
ERROR_IO
;

1350 
	`l£ek
(
c
->
fd
,0,
SEEK_SET
);

1351 i‡(
	`ªad
(
c
->
fd
,
hdr
,20)!=20) {

1352 
îrmem
 = 
î∫o
;

1353 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"chunk_ªad¸c: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1354 
î∫o
 = 
îrmem
;

1355  
ERROR_IO
;

1358 i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "C 1.0",8)!=0) {

1359 
	`sy¶og
(
LOG_WARNING
,"chunk_ªad¸c: fûe:%†- wr⁄g hódî",
c
->
fûíame
);

1360 
î∫o
 = 0;

1361  
ERROR_IO
;

1363 
±r
 = 
hdr
+8;

1364 
chunkid
 = 
	`gë64bô
(&
±r
);

1365 
vîsi⁄
 = 
	`gë32bô
(&
±r
);

1366 i‡(
c
->
chunkid
!=chunkid || c->
vîsi⁄
!=version) {

1367 
	`sy¶og
(
LOG_WARNING
,"chunk_ªad¸c: fûe:%†- wr⁄g id/vîsi⁄ i¿hódî (%016"
PRIX64
"_%08"
PRIX32
")",
c
->
fûíame
,
chunkid
,
vîsi⁄
);

1368 
î∫o
 = 0;

1369  
ERROR_IO
;

1371 #ifde‡
MMAP_ALLOC


1372 
c
->
¸c
 = (
uöt8_t
*)
	`mm≠
(
NULL
,4096,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

1374 
c
->
¸c
 = (
uöt8_t
*)
	`mÆloc
(4096);

1376 
	`∑s£π
(
c
->
¸c
);

1377 #ifde‡
USE_PIO


1378 
ªt
 = 
	`¥ód
(
c
->
fd
,c->
¸c
,4096,
CHUNKHDRCRC
);

1380 
	`l£ek
(
c
->
fd
,
CHUNKHDRCRC
,
SEEK_SET
);

1381 
ªt
 = 
	`ªad
(
c
->
fd
,c->
¸c
,4096);

1383 i‡(
ªt
!=4096) {

1384 
îrmem
 = 
î∫o
;

1385 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"chunk_ªad¸c: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1386 #ifde‡
MMAP_ALLOC


1387 
	`munm≠
((*)(
c
->
¸c
),4096);

1389 
	`‰ì
(
c
->
¸c
);

1391 
c
->
¸c
 = 
NULL
;

1392 
î∫o
 = 
îrmem
;

1393  
ERROR_IO
;

1395 
	`hdd_°©s_ªad
(4096);

1396 
î∫o
 = 0;

1397  
STATUS_OK
;

1398 
	}
}

1400 
ölöe
 
	$chunk_‰ì¸c
(
chunk
 *
c
) {

1401 #ifde‡
MMAP_ALLOC


1402 
	`munm≠
((*)(
c
->
¸c
),4096);

1404 
	`‰ì
(
c
->
¸c
);

1406 
c
->
¸c
 = 
NULL
;

1407 
	}
}

1409 
ölöe
 
	$chunk_wrôe¸c
(
chunk
 *
c
) {

1410 
ªt
;

1411 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

1412 
c
->
ow√r
->
√edª‰esh
 = 1;

1413 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

1414 #ifde‡
USE_PIO


1415 
ªt
 = 
	`pwrôe
(
c
->
fd
,c->
¸c
,4096,
CHUNKHDRCRC
);

1417 
	`l£ek
(
c
->
fd
,
CHUNKHDRCRC
,
SEEK_SET
);

1418 
ªt
 = 
	`wrôe
(
c
->
fd
,c->
¸c
,4096);

1420 i‡(
ªt
!=4096) {

1421 
îrmem
 = 
î∫o
;

1422 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"chunk_wrôe¸c: fûe:%†- wrôêîr‹",
c
->
fûíame
);

1423 
î∫o
 = 
îrmem
;

1424  
ERROR_IO
;

1426 
	`hdd_°©s_wrôe
(4096);

1427  
STATUS_OK
;

1428 
	}
}

1430 
	$hdd_ã°_show_chunks
() {

1431 
uöt32_t
 
hashpos
;

1432 
chunk
 *
c
;

1433 
	`±hªad_muãx_lock
(&
hashlock
);

1434 
hashpos
=0 ; hashpos<
HASHSIZE
 ; hashpos++) {

1435 
c
=
hashèb
[
hashpos
] ; c ; c=c->
√xt
) {

1436 
	`¥ötf
("chunk id:%"
PRIu64
" vîsi⁄:%"
PRIu32
" sèã:%"
PRIu8
"\n",
c
->
chunkid
,c->
vîsi⁄
,c->
°©e
);

1439 
	`±hªad_muãx_u∆ock
(&
hashlock
);

1440 
	}
}

1442 
	$hdd_ã°_show_›íedchunks
() {

1443 
d›chunk
 *
cc
,*
tcc
;

1444 
uöt32_t
 
dhashpos
;

1445 
chunk
 *
c
;

1447 
	`¥ötf
("lock doplock\n");

1448 i‡(
	`±hªad_muãx_lock
(&
d›lock
)<0) {

1449 
	`¥ötf
("lockÉº‹: %u\n",
î∫o
);

1451 
	`¥ötf
("lockÇdoplock\n");

1452 i‡(
	`±hªad_muãx_lock
(&
nd›lock
)<0) {

1453 
	`¥ötf
("lockÉº‹: %u\n",
î∫o
);

1456 
cc
 = 
√wd›chunks
;

1457 
cc
) {

1458 
dhashpos
 = 
	`DHASHPOS
(
cc
->
chunkid
);

1459 
tcc
=
d›hashèb
[
dhashpos
] ;Åc¯&&Åcc->
chunkid
!=
cc
->chunkid ;ÅccÒcc->
√xt
) {}

1460 i‡(
tcc
) {

1461 
tcc
 = 
cc
;

1462 
cc
 = cc->
√xt
;

1463 
	`‰ì
(
tcc
);

1465 
tcc
 = 
cc
;

1466 
cc
 = cc->
√xt
;

1467 
tcc
->
√xt
 = 
d›hashèb
[
dhashpos
];

1468 
d›hashèb
[
dhashpos
] = 
tcc
;

1471 
√wd›chunks
=
NULL
;

1472 
	`¥ötf
("unlockÇdoplock\n");

1473 i‡(
	`±hªad_muãx_u∆ock
(&
nd›lock
)<0) {

1474 
	`¥ötf
("u∆ockÉº‹: %u\n",
î∫o
);

1477 
dhashpos
=0 ; dhashpos<
DHASHSIZE
 ; dhashpos++) {

1478 
cc
 = 
d›hashèb
[
dhashpos
]; c¯; cc=cc->
√xt
) {

1479 
c
 = 
	`hdd_chunk_föd
(
cc
->
chunkid
);

1480 i‡(
c
==
NULL
) {

1481 
	`¥ötf
("id: %"
PRIu64
" - chunk d€¢'àexi°\n",
cc
->
chunkid
);

1482 } i‡(
c
->
¸¸efcou¡
>0) {

1483 
	`¥ötf
("id: %"
PRIu64
" - chunk i¿u£ (ªfcou¡:%u)\n",
cc
->
chunkid
,
c
->
¸¸efcou¡
);

1484 
	`hdd_chunk_ªÀa£
(
c
);

1486 #ifde‡
PRESERVE_BLOCK


1487 
	`¥ötf
("id: %"
PRIu64
" - fd:%d (°ïs:%uË¸c:%∞(°ïs:%uËblock:%p,blockno:%u (°ïs:%u)\n",
cc
->
chunkid
,
c
->
fd
,c->
›í°ïs
,c->
¸c
,c->
¸c°ïs
,c->
block
,c->
blockno
,c->
block°ïs
);

1489 
	`¥ötf
("id: %"
PRIu64
" - fd:%d (°ïs:%uË¸c:%∞(°ïs:%u)\n",
cc
->
chunkid
,
c
->
fd
,c->
›í°ïs
,c->
¸c
,c->
¸c°ïs
);

1491 
	`hdd_chunk_ªÀa£
(
c
);

1495 
	`¥ötf
("unlock doplock\n");

1496 i‡(
	`±hªad_muãx_u∆ock
(&
d›lock
)<0) {

1497 
	`¥ötf
("u∆ockÉº‹: %u\n",
î∫o
);

1499 
	}
}

1501 
	$hdd_dñayed_›s
() {

1502 
d›chunk
 **
c˝
,*
cc
,*
tcc
;

1503 
uöt32_t
 
dhashpos
;

1504 
chunk
 *
c
;

1507 
	`±hªad_muãx_lock
(&
d›lock
);

1508 
	`±hªad_muãx_lock
(&
nd›lock
);

1511 
cc
 = 
√wd›chunks
;

1512 
cc
) {

1513 
dhashpos
 = 
	`DHASHPOS
(
cc
->
chunkid
);

1514 
tcc
=
d›hashèb
[
dhashpos
] ;Åc¯&&Åcc->
chunkid
!=
cc
->chunkid ;ÅccÒcc->
√xt
) {}

1515 i‡(
tcc
) {

1516 
tcc
 = 
cc
;

1517 
cc
 = cc->
√xt
;

1518 
	`‰ì
(
tcc
);

1520 
tcc
 = 
cc
;

1521 
cc
 = cc->
√xt
;

1522 
tcc
->
√xt
 = 
d›hashèb
[
dhashpos
];

1523 
d›hashèb
[
dhashpos
] = 
tcc
;

1526 
√wd›chunks
=
NULL
;

1527 
	`±hªad_muãx_u∆ock
(&
nd›lock
);

1530 
dhashpos
=0 ; dhashpos<
DHASHSIZE
 ; dhashpos++) {

1531 
c˝
 = 
d›hashèb
+
dhashpos
;

1532 (
cc
=*
c˝
)) {

1534 
c
 = 
	`hdd_chunk_åyföd
(
cc
->
chunkid
);

1539 i‡(
c
==
NULL
) {

1540 *
c˝
 = 
cc
->
√xt
;

1541 
	`‰ì
(
cc
);

1542 } i‡(
c
==
CHUNKLOCKED
) {

1543 
c˝
 = &(
cc
->
√xt
);

1544 } i‡(
c
->
¸¸efcou¡
>0) {

1545 
	`hdd_chunk_ªÀa£
(
c
);

1546 
c˝
 = &(
cc
->
√xt
);

1548 #ifde‡
PRESERVE_BLOCK


1550 i‡(
c
->
block°ïs
>0) {

1551 
c
->
block°ïs
--;

1552 } i‡(
c
->
block
!=
NULL
) {

1553 #ifde‡
MMAP_ALLOC


1554 
	`munm≠
((*)(
c
->
block
),
MFSBLOCKSIZE
);

1556 
	`‰ì
(
c
->
block
);

1558 
c
->
block
 = 
NULL
;

1559 
c
->
blockno
 = 0xFFFF;

1563 i‡(
c
->
›í°ïs
>0) {

1564 
c
->
›í°ïs
--;

1565 } i‡(
c
->
fd
>=0) {

1566 i‡(
	`˛o£
(
c
->
fd
)<0) {

1567 
	`hdd_îr‹_occuªd
(
c
);

1568 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_dñayed_›s: fûe:%†- clo£Éº‹",
c
->
fûíame
);

1569 
	`hdd_ªp‹t_damaged_chunk
(
c
->
chunkid
);

1571 
c
->
fd
 = -1;

1574 i‡(
c
->
¸c°ïs
>0) {

1575 
c
->
¸c°ïs
--;

1576 } i‡(
c
->
¸c
!=
NULL
) {

1577 i‡(
c
->
¸cch™ged
) {

1578 
	`sy¶og
(
LOG_ERR
,"£riou†îr‹: cr¯ch™ge†lo° (chunk:%016"
PRIX64
"_%08"
PRIX32
")",
c
->
chunkid
,c->
vîsi⁄
);

1581 
	`chunk_‰ì¸c
(
c
);

1583 #ifde‡
PRESERVE_BLOCK


1584 i‡(
c
->
fd
<0 && c->
¸c
==
NULL
 && c->
block
==NULL) {

1586 i‡(
c
->
fd
<0 && c->
¸c
==
NULL
) {

1588 *
c˝
 = 
cc
->
√xt
;

1589 
	`‰ì
(
cc
);

1591 
c˝
 = &(
cc
->
√xt
);

1593 
	`hdd_chunk_ªÀa£
(
c
);

1598 
	`±hªad_muãx_u∆ock
(&
d›lock
);

1600 
	}
}

1602 
ölöe
 
uöt64_t
 
	$gë_u£˘ime
() {

1603 
timevÆ
 
tv
;

1604 
	`gëtimeofday
(&
tv
,
NULL
);

1605  ((
uöt64_t
)(
tv
.
tv_£c
))*1000000+tv.
tv_u£c
;

1606 
	}
}

1608 
	$hdd_io_begö
(
chunk
 *
c
,
√wÊag
) {

1609 
d›chunk
 *
cc
;

1610 
°©us
;

1611 
add
;

1616 
	`hdd_chunk_ã°move
(
c
);

1617 i‡(
c
->
¸¸efcou¡
==0) {

1618 #ifde‡
PRESERVE_BLOCK


1619 
add
 = (
c
->
fd
<0 && c->
¸c
==
NULL
 && c->
block
==NULL);

1621 
add
 = (
c
->
fd
<0 && c->
¸c
==
NULL
);

1623 i‡(
c
->
fd
<0) {

1624 i‡(
√wÊag
) {

1625 
c
->
fd
 = 
	`›í
(c->
fûíame
,
O_RDWR
 | 
O_TRUNC
 | 
O_CREAT
,0666);

1627 i‡(
c
->
ow√r
->
todñ
<2) {

1628 
c
->
fd
 = 
	`›í
(c->
fûíame
,
O_RDWR
);

1630 
c
->
fd
 = 
	`›í
(c->
fûíame
,
O_RDONLY
);

1633 i‡(
c
->
fd
<0) {

1634 
îrmem
 = 
î∫o
;

1635 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_begö: fûe:%†- o≥¿îr‹",
c
->
fûíame
);

1636 
î∫o
 = 
îrmem
;

1637  
ERROR_IO
;

1640 i‡(
c
->
¸c
==
NULL
) {

1641 i‡(
√wÊag
) {

1642 
	`chunk_em±y¸c
(
c
);

1644 
°©us
 = 
	`chunk_ªad¸c
(
c
);

1645 i‡(
°©us
!=
STATUS_OK
) {

1646 
îrmem
 = 
î∫o
;

1647 i‡(
add
) {

1648 
	`˛o£
(
c
->
fd
);

1649 
c
->
fd
=-1;

1651 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_begö: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1652 
î∫o
 = 
îrmem
;

1653  
°©us
;

1656 
c
->
¸cch™ged
=0;

1658 #ifde‡
PRESERVE_BLOCK


1659 i‡(
c
->
block
==
NULL
) {

1660 #ifde‡
MMAP_ALLOC


1661 
c
->
block
 = (
uöt8_t
*)
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

1663 
c
->
block
 = (
uöt8_t
*)
	`mÆloc
(
MFSBLOCKSIZE
);

1666 
	`∑s£π
(
c
->
block
);

1667 
c
->
blockno
 = 0xFFFF;

1670 i‡(
add
) {

1671 
cc
 = 
	`mÆloc
((
d›chunk
));

1672 
	`∑s£π
(
cc
);

1673 
cc
->
chunkid
 = 
c
->chunkid;

1674 
	`±hªad_muãx_lock
(&
nd›lock
);

1675 
cc
->
√xt
 = 
√wd›chunks
;

1676 
√wd›chunks
 = 
cc
;

1677 
	`±hªad_muãx_u∆ock
(&
nd›lock
);

1680 
c
->
¸¸efcou¡
++;

1681 
î∫o
 = 0;

1682  
STATUS_OK
;

1683 
	}
}

1685 
	$hdd_io_íd
(
chunk
 *
c
) {

1686 
°©us
;

1687 
uöt64_t
 
ts
,
ã
;

1692 i‡(
c
->
¸cch™ged
) {

1693 
°©us
 = 
	`chunk_wrôe¸c
(
c
);

1694 
c
->
¸cch™ged
=0;

1695 i‡(
°©us
!=
STATUS_OK
) {

1696 
îrmem
 = 
î∫o
;

1697 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_íd: fûe:%†- wrôêîr‹",
c
->
fûíame
);

1698 
î∫o
 = 
îrmem
;

1699  
°©us
;

1701 
ts
 = 
	`gë_u£˘ime
();

1702 #ifde‡
F_FULLFSYNC


1703 i‡(
	`f˙é
(
c
->
fd
,
F_FULLFSYNC
)<0) {

1704 
îrmem
 = 
î∫o
;

1705 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_íd: fûe:%†- fsyn¯(vü f˙éËîr‹",
c
->
fûíame
);

1706 
î∫o
 = 
îrmem
;

1707  
ERROR_IO
;

1710 i‡(
	`fsync
(
c
->
fd
)<0) {

1711 
îrmem
 = 
î∫o
;

1712 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_íd: fûe:%†- fsyn¯(dúe˘ cÆlËîr‹",
c
->
fûíame
);

1713 
î∫o
 = 
îrmem
;

1714  
ERROR_IO
;

1717 
ã
 = 
	`gë_u£˘ime
();

1718 
	`hdd_°©s_d©afsync
(
c
->
ow√r
,
ã
-
ts
);

1720 
c
->
¸¸efcou¡
--;

1721 i‡(
c
->
¸¸efcou¡
==0) {

1722 i‡(
OPENSTEPS
==0) {

1723 i‡(
	`˛o£
(
c
->
fd
)<0) {

1724 
îrmem
 = 
î∫o
;

1725 
c
->
fd
 = -1;

1726 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_io_íd: fûe:%†- clo£Éº‹",
c
->
fûíame
);

1727 
î∫o
 = 
îrmem
;

1728  
ERROR_IO
;

1730 
c
->
fd
 = -1;

1732 
c
->
›í°ïs
 = 
OPENSTEPS
;

1734 
c
->
¸c°ïs
 = 
CRCSTEPS
;

1735 #ifde‡
PRESERVE_BLOCK


1736 
c
->
block°ïs
 = 
PRESERVESTEPS
;

1739 
î∫o
 = 0;

1740  
STATUS_OK
;

1741 
	}
}

1748 
	$hdd_›í
(
uöt64_t
 
chunkid
) {

1749 
°©us
;

1750 
chunk
 *
c
;

1751 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

1752 i‡(
c
==
NULL
) {

1753  
ERROR_NOCHUNK
;

1755 
°©us
 = 
	`hdd_io_begö
(
c
,0);

1756 i‡(
°©us
!=
STATUS_OK
) {

1757 
	`hdd_îr‹_occuªd
(
c
);

1758 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1760 
	`hdd_chunk_ªÀa£
(
c
);

1764  
°©us
;

1765 
	}
}

1767 
	$hdd_˛o£
(
uöt64_t
 
chunkid
) {

1768 
°©us
;

1769 
chunk
 *
c
;

1770 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

1771 i‡(
c
==
NULL
) {

1772  
ERROR_NOCHUNK
;

1774 
°©us
 = 
	`hdd_io_íd
(
c
);

1775 i‡(
°©us
!=
STATUS_OK
) {

1776 
	`hdd_îr‹_occuªd
(
c
);

1777 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1779 
	`hdd_chunk_ªÀa£
(
c
);

1783  
°©us
;

1784 
	}
}

1786 
	$hdd_ªad
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 
blocknum
,
uöt8_t
 *
buf„r
,uöt32_à
off£t
,uöt32_à
size
,uöt8_à*
¸cbuff
) {

1787 
chunk
 *
c
;

1788 
ªt
;

1789 c⁄° 
uöt8_t
 *
r¸˝å
;

1790 
uöt32_t
 
¸c
,
b¸c
,
¥e¸c
,
po°¸c
,
comböed¸c
;

1791 
uöt64_t
 
ts
,
ã
;

1792 #i‚de‡
PRESERVE_BLOCK


1793 
uöt8_t
 *
blockbuf„r
;

1794 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

1795 i‡(
blockbuf„r
==
NULL
) {

1796 #ifde‡
MMAP_ALLOC


1797 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

1799 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

1801 
	`∑s£π
(
blockbuf„r
);

1802 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

1805 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

1806 i‡(
c
==
NULL
) {

1807  
ERROR_NOCHUNK
;

1809 i‡(
c
->
vîsi⁄
!=version && version>0) {

1810 
	`hdd_chunk_ªÀa£
(
c
);

1811  
ERROR_WRONGVERSION
;

1813 i‡(
blocknum
>=
MFSBLOCKSINCHUNK
) {

1814 
	`hdd_chunk_ªÀa£
(
c
);

1815  
ERROR_BNUMTOOBIG
;

1817 i‡(
size
>
MFSBLOCKSIZE
) {

1818 
	`hdd_chunk_ªÀa£
(
c
);

1819  
ERROR_WRONGSIZE
;

1821 i‡((
off£t
>=
MFSBLOCKSIZE
Ë|| (off£t+
size
>MFSBLOCKSIZE)) {

1822 
	`hdd_chunk_ªÀa£
(
c
);

1823  
ERROR_WRONGOFFSET
;

1825 i‡(
blocknum
>=
c
->
blocks
) {

1826 
	`mem£t
(
buf„r
,0,
size
);

1827 i‡(
size
==
MFSBLOCKSIZE
) {

1828 
¸c
 = 
em±yblock¸c
;

1830 
¸c
 = 
	`my¸c32_zîoblock
(0,
size
);

1832 
	`put32bô
(&
¸cbuff
,
¸c
);

1833 
	`hdd_chunk_ªÀa£
(
c
);

1834  
STATUS_OK
;

1836 i‡(
off£t
==0 && 
size
==
MFSBLOCKSIZE
) {

1837 #ifde‡
PRESERVE_BLOCK


1838 i‡(
c
->
blockno
==
blocknum
) {

1839 
	`mem˝y
(
buf„r
,
c
->
block
,
MFSBLOCKSIZE
);

1840 
ªt
 = 
MFSBLOCKSIZE
;

1843 
ts
 = 
	`gë_u£˘ime
();

1844 #ifde‡
USE_PIO


1845 
ªt
 = 
	`¥ód
(
c
->
fd
,
buf„r
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

1847 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

1848 
ªt
 = 
	`ªad
(
c
->
fd
,
buf„r
,
MFSBLOCKSIZE
);

1850 
ã
 = 
	`gë_u£˘ime
();

1851 
	`hdd_°©s_d©¨ód
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

1852 #ifde‡
PRESERVE_BLOCK


1853 
c
->
blockno
 = 
blocknum
;

1854 
	`mem˝y
(
c
->
block
,
buf„r
,
MFSBLOCKSIZE
);

1857 
¸c
 = 
	`my¸c32
(0,
buf„r
,
MFSBLOCKSIZE
);

1858 
r¸˝å
 = (
c
->
¸c
)+(4*
blocknum
);

1859 
b¸c
 = 
	`gë32bô
(&
r¸˝å
);

1860 i‡(
b¸c
!=
¸c
) {

1861 
î∫o
 = 0;

1862 
	`hdd_îr‹_occuªd
(
c
);

1863 
	`sy¶og
(
LOG_WARNING
,"ªad_block_‰om_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

1864 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1865 
	`hdd_chunk_ªÀa£
(
c
);

1866  
ERROR_CRC
;

1868 i‡(
ªt
!=
MFSBLOCKSIZE
) {

1869 
	`hdd_îr‹_occuªd
(
c
);

1870 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"ªad_block_‰om_chunk: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1871 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1872 
	`hdd_chunk_ªÀa£
(
c
);

1873  
ERROR_IO
;

1876 #ifde‡
PRESERVE_BLOCK


1877 i‡(
c
->
blockno
 !
blocknum
) {

1878 
ts
 = 
	`gë_u£˘ime
();

1879 #ifde‡
USE_PIO


1880 
ªt
 = 
	`¥ód
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

1882 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

1883 
ªt
 = 
	`ªad
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

1885 
ã
 = 
	`gë_u£˘ime
();

1886 
	`hdd_°©s_d©¨ód
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

1887 
c
->
blockno
 = 
blocknum
;

1889 
ªt
 = 
MFSBLOCKSIZE
;

1891 
¥e¸c
 = 
	`my¸c32
(0,
c
->
block
,
off£t
);

1892 
¸c
 = 
	`my¸c32
(0,
c
->
block
+
off£t
,
size
);

1893 
po°¸c
 = 
	`my¸c32
(0,
c
->
block
+
off£t
+
size
,
MFSBLOCKSIZE
-(offset+size));

1895 
ts
 = 
	`gë_u£˘ime
();

1896 #ifde‡
USE_PIO


1897 
ªt
 = 
	`¥ód
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

1899 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

1900 
ªt
 = 
	`ªad
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

1902 
ã
 = 
	`gë_u£˘ime
();

1903 
	`hdd_°©s_d©¨ód
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

1905 
¥e¸c
 = 
	`my¸c32
(0,
blockbuf„r
,
off£t
);

1906 
¸c
 = 
	`my¸c32
(0,
blockbuf„r
+
off£t
,
size
);

1907 
po°¸c
 = 
	`my¸c32
(0,
blockbuf„r
+
off£t
+
size
,
MFSBLOCKSIZE
-(offset+size));

1909 i‡(
off£t
==0) {

1910 
comböed¸c
 = 
	`my¸c32_comböe
(
¸c
,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

1912 
comböed¸c
 = 
	`my¸c32_comböe
(
¥e¸c
,
¸c
,
size
);

1913 i‡((
off£t
+
size
)<
MFSBLOCKSIZE
) {

1914 
comböed¸c
 = 
	`my¸c32_comböe
(comböed¸c,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

1917 
r¸˝å
 = (
c
->
¸c
)+(4*
blocknum
);

1918 
b¸c
 = 
	`gë32bô
(&
r¸˝å
);

1920 i‡(
b¸c
!=
comböed¸c
) {

1921 
î∫o
 = 0;

1922 
	`hdd_îr‹_occuªd
(
c
);

1923 
	`sy¶og
(
LOG_WARNING
,"ªad_block_‰om_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

1924 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1925 
	`hdd_chunk_ªÀa£
(
c
);

1926  
ERROR_CRC
;

1928 i‡(
ªt
!=
MFSBLOCKSIZE
) {

1929 
	`hdd_îr‹_occuªd
(
c
);

1930 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"ªad_block_‰om_chunk: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

1931 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

1932 
	`hdd_chunk_ªÀa£
(
c
);

1933  
ERROR_IO
;

1935 #ifde‡
PRESERVE_BLOCK


1936 
	`mem˝y
(
buf„r
,
c
->
block
+
off£t
,
size
);

1938 
	`mem˝y
(
buf„r
,
blockbuf„r
+
off£t
,
size
);

1941 
	`put32bô
(&
¸cbuff
,
¸c
);

1942 
	`hdd_chunk_ªÀa£
(
c
);

1943  
STATUS_OK
;

1944 
	}
}

1946 
	$hdd_wrôe
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 
blocknum
,c⁄° 
uöt8_t
 *
buf„r
,uöt32_à
off£t
,uöt32_à
size
,c⁄° uöt8_à*
¸cbuff
) {

1947 
chunk
 *
c
;

1948 
ªt
;

1949 
uöt8_t
 *
w¸˝å
;

1950 c⁄° 
uöt8_t
 *
r¸˝å
;

1951 
uöt32_t
 
¸c
,
b¸c
,
¥e¸c
,
po°¸c
,
comböed¸c
,
ch¸c
;

1952 
uöt32_t
 
i
;

1953 
uöt64_t
 
ts
,
ã
;

1954 #i‚de‡
PRESERVE_BLOCK


1955 
uöt8_t
 *
blockbuf„r
;

1956 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

1957 i‡(
blockbuf„r
==
NULL
) {

1958 #ifde‡
MMAP_ALLOC


1959 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

1961 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

1963 
	`∑s£π
(
blockbuf„r
);

1964 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

1967 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

1968 i‡(
c
==
NULL
) {

1969  
ERROR_NOCHUNK
;

1971 i‡(
c
->
vîsi⁄
!=version && version>0) {

1972 
	`hdd_chunk_ªÀa£
(
c
);

1973  
ERROR_WRONGVERSION
;

1975 i‡(
blocknum
>=
MFSBLOCKSINCHUNK
) {

1976 
	`hdd_chunk_ªÀa£
(
c
);

1977  
ERROR_BNUMTOOBIG
;

1979 i‡(
size
>
MFSBLOCKSIZE
) {

1980 
	`hdd_chunk_ªÀa£
(
c
);

1981  
ERROR_WRONGSIZE
;

1983 i‡((
off£t
>=
MFSBLOCKSIZE
Ë|| (off£t+
size
>MFSBLOCKSIZE)) {

1984 
	`hdd_chunk_ªÀa£
(
c
);

1985  
ERROR_WRONGOFFSET
;

1987 
¸c
 = 
	`gë32bô
(&
¸cbuff
);

1988 i‡(
¸c
!=
	`my¸c32
(0,
buf„r
,
size
)) {

1989 
	`hdd_chunk_ªÀa£
(
c
);

1990  
ERROR_CRC
;

1992 i‡(
off£t
==0 && 
size
==
MFSBLOCKSIZE
) {

1993 i‡(
blocknum
>=
c
->
blocks
) {

1994 
w¸˝å
 = (
c
->
¸c
)+(4*(c->
blocks
));

1995 
i
=
c
->
blocks
 ; i<
blocknum
 ; i++) {

1996 
	`put32bô
(&
w¸˝å
,
em±yblock¸c
);

1998 
c
->
blocks
=
blocknum
+1;

2000 
ts
 = 
	`gë_u£˘ime
();

2001 #ifde‡
USE_PIO


2002 
ªt
 = 
	`pwrôe
(
c
->
fd
,
buf„r
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

2004 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

2005 
ªt
 = 
	`wrôe
(
c
->
fd
,
buf„r
,
MFSBLOCKSIZE
);

2007 
ã
 = 
	`gë_u£˘ime
();

2008 
	`hdd_°©s_d©awrôe
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

2009 i‡(
¸c
!=
	`my¸c32
(0,
buf„r
,
MFSBLOCKSIZE
)) {

2010 
î∫o
 = 0;

2011 
	`hdd_îr‹_occuªd
(
c
);

2012 
	`sy¶og
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

2013 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2014 
	`hdd_chunk_ªÀa£
(
c
);

2015  
ERROR_CRC
;

2017 
w¸˝å
 = (
c
->
¸c
)+(4*
blocknum
);

2018 
	`put32bô
(&
w¸˝å
,
¸c
);

2019 
c
->
¸cch™ged
=1;

2020 i‡(
ªt
!=
MFSBLOCKSIZE
) {

2021 
	`hdd_îr‹_occuªd
(
c
);

2022 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2023 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2024 
	`hdd_chunk_ªÀa£
(
c
);

2025  
ERROR_IO
;

2027 #ifde‡
PRESERVE_BLOCK


2028 
	`mem˝y
(
c
->
block
,
buf„r
,
MFSBLOCKSIZE
);

2029 
c
->
blockno
 = 
blocknum
;

2032 i‡(
blocknum
<
c
->
blocks
) {

2033 #ifde‡
PRESERVE_BLOCK


2034 i‡(
c
->
blockno
 !
blocknum
) {

2035 
ts
 = 
	`gë_u£˘ime
();

2036 #ifde‡
USE_PIO


2037 
ªt
 = 
	`¥ód
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

2039 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

2040 
ªt
 = 
	`ªad
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

2042 
ã
 = 
	`gë_u£˘ime
();

2043 
	`hdd_°©s_d©¨ód
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

2044 
c
->
blockno
 = 
blocknum
;

2046 
ªt
 = 
MFSBLOCKSIZE
;

2049 
ts
 = 
	`gë_u£˘ime
();

2050 #ifde‡
USE_PIO


2051 
ªt
 = 
	`¥ód
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
));

2053 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
),
SEEK_SET
);

2054 
ªt
 = 
	`ªad
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

2056 
ã
 = 
	`gë_u£˘ime
();

2057 
	`hdd_°©s_d©¨ód
(
c
->
ow√r
,
MFSBLOCKSIZE
,
ã
-
ts
);

2059 i‡(
ªt
!=
MFSBLOCKSIZE
) {

2060 
	`hdd_îr‹_occuªd
(
c
);

2061 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

2062 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2063 
	`hdd_chunk_ªÀa£
(
c
);

2064  
ERROR_IO
;

2066 #ifde‡
PRESERVE_BLOCK


2067 
¥e¸c
 = 
	`my¸c32
(0,
c
->
block
,
off£t
);

2068 
ch¸c
 = 
	`my¸c32
(0,
c
->
block
+
off£t
,
size
);

2069 
po°¸c
 = 
	`my¸c32
(0,
c
->
block
+
off£t
+
size
,
MFSBLOCKSIZE
-(offset+size));

2071 
¥e¸c
 = 
	`my¸c32
(0,
blockbuf„r
,
off£t
);

2072 
ch¸c
 = 
	`my¸c32
(0,
blockbuf„r
+
off£t
,
size
);

2073 
po°¸c
 = 
	`my¸c32
(0,
blockbuf„r
+
off£t
+
size
,
MFSBLOCKSIZE
-(offset+size));

2075 i‡(
off£t
==0) {

2076 
comböed¸c
 = 
	`my¸c32_comböe
(
ch¸c
,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

2078 
comböed¸c
 = 
	`my¸c32_comböe
(
¥e¸c
,
ch¸c
,
size
);

2079 i‡((
off£t
+
size
)<
MFSBLOCKSIZE
) {

2080 
comböed¸c
 = 
	`my¸c32_comböe
(comböed¸c,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

2083 
r¸˝å
 = (
c
->
¸c
)+(4*
blocknum
);

2084 
b¸c
 = 
	`gë32bô
(&
r¸˝å
);

2086 i‡(
b¸c
!=
comböed¸c
) {

2087 
î∫o
 = 0;

2088 
	`hdd_îr‹_occuªd
(
c
);

2089 
	`sy¶og
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

2090 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2091 
	`hdd_chunk_ªÀa£
(
c
);

2092  
ERROR_CRC
;

2095 i‡(
	`·runˇã
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)(
blocknum
+1))<<
MFSBLOCKBITS
))<0) {

2096 
	`hdd_îr‹_occuªd
(
c
);

2097 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- fåunˇãÉº‹",
c
->
fûíame
);

2098 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2099 
	`hdd_chunk_ªÀa£
(
c
);

2100  
ERROR_IO
;

2102 
w¸˝å
 = (
c
->
¸c
)+(4*(c->
blocks
));

2103 
i
=
c
->
blocks
 ; i<
blocknum
 ; i++) {

2104 
	`put32bô
(&
w¸˝å
,
em±yblock¸c
);

2106 
c
->
blocks
=
blocknum
+1;

2107 #ifde‡
PRESERVE_BLOCK


2108 
	`mem£t
(
c
->
block
,0,
MFSBLOCKSIZE
);

2109 
c
->
blockno
 = 
blocknum
;

2111 
	`mem£t
(
blockbuf„r
,0,
MFSBLOCKSIZE
);

2113 
¥e¸c
 = 
	`my¸c32_zîoblock
(0,
off£t
);

2114 
po°¸c
 = 
	`my¸c32_zîoblock
(0,
MFSBLOCKSIZE
-(
off£t
+
size
));

2116 #ifde‡
PRESERVE_BLOCK


2117 
	`mem˝y
(
c
->
block
+
off£t
,
buf„r
,
size
);

2118 
ts
 = 
	`gë_u£˘ime
();

2119 #ifde‡
USE_PIO


2120 
ªt
 = 
	`pwrôe
(
c
->
fd
,c->
block
+
off£t
,
size
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
)+offset);

2122 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
)+
off£t
,
SEEK_SET
);

2123 
ªt
 = 
	`wrôe
(
c
->
fd
,c->
block
+
off£t
,
size
);

2125 
ã
 = 
	`gë_u£˘ime
();

2126 
	`hdd_°©s_d©awrôe
(
c
->
ow√r
,
size
,
ã
-
ts
);

2127 
ch¸c
 = 
	`my¸c32
(0,
c
->
block
+
off£t
,
size
);

2129 
	`mem˝y
(
blockbuf„r
+
off£t
,
buf„r
,
size
);

2130 
ts
 = 
	`gë_u£˘ime
();

2131 #ifde‡
USE_PIO


2132 
ªt
 = 
	`pwrôe
(
c
->
fd
,
blockbuf„r
+
off£t
,
size
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
)+offset);

2134 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocknum
)<<
MFSBLOCKBITS
)+
off£t
,
SEEK_SET
);

2135 
ªt
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
+
off£t
,
size
);

2137 
ã
 = 
	`gë_u£˘ime
();

2138 
	`hdd_°©s_d©awrôe
(
c
->
ow√r
,
size
,
ã
-
ts
);

2139 
ch¸c
 = 
	`my¸c32
(0,
blockbuf„r
+
off£t
,
size
);

2141 i‡(
off£t
==0) {

2142 
comböed¸c
 = 
	`my¸c32_comböe
(
ch¸c
,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

2144 
comböed¸c
 = 
	`my¸c32_comböe
(
¥e¸c
,
ch¸c
,
size
);

2145 i‡((
off£t
+
size
)<
MFSBLOCKSIZE
) {

2146 
comböed¸c
 = 
	`my¸c32_comböe
(comböed¸c,
po°¸c
,
MFSBLOCKSIZE
-(
off£t
+
size
));

2149 
w¸˝å
 = (
c
->
¸c
)+(4*
blocknum
);

2152 
	`put32bô
(&
w¸˝å
,
comböed¸c
);

2153 
c
->
¸cch™ged
=1;

2155 i‡(
¸c
!=
ch¸c
) {

2156 
î∫o
 = 0;

2157 
	`hdd_îr‹_occuªd
(
c
);

2158 
	`sy¶og
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

2159 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2160 
	`hdd_chunk_ªÀa£
(
c
);

2161  
ERROR_CRC
;

2163 i‡(
ªt
!=()
size
) {

2164 
	`hdd_îr‹_occuªd
(
c
);

2165 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"wrôe_block_to_chunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2166 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2167 
	`hdd_chunk_ªÀa£
(
c
);

2168  
ERROR_IO
;

2171 
	`hdd_chunk_ªÀa£
(
c
);

2172  
STATUS_OK
;

2173 
	}
}

2179 
	$hdd_check_vîsi⁄
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

2180 
chunk
 *
c
;

2181 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2182 i‡(
c
==
NULL
) {

2183  
ERROR_NOCHUNK
;

2185 i‡(
c
->
vîsi⁄
!=version && version>0) {

2186 
	`hdd_chunk_ªÀa£
(
c
);

2187  
ERROR_WRONGVERSION
;

2189 
	`hdd_chunk_ªÀa£
(
c
);

2190  
STATUS_OK
;

2191 
	}
}

2193 
	$hdd_gë_blocks
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 *
blocks
) {

2194 
chunk
 *
c
;

2195 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2196 i‡(
c
==
NULL
) {

2197  
ERROR_NOCHUNK
;

2199 i‡(
c
->
vîsi⁄
!=version && version>0) {

2200 
	`hdd_chunk_ªÀa£
(
c
);

2201  
ERROR_WRONGVERSION
;

2203 *
blocks
 = 
c
->blocks;

2204 
	`hdd_chunk_ªÀa£
(
c
);

2205  
STATUS_OK
;

2206 
	}
}

2208 
	$hdd_gë_checksum
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à*
checksum
) {

2209 
°©us
;

2210 
chunk
 *
c
;

2211 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2212 i‡(
c
==
NULL
) {

2213  
ERROR_NOCHUNK
;

2215 i‡(
c
->
vîsi⁄
!=version && version>0) {

2216 
	`hdd_chunk_ªÀa£
(
c
);

2217  
ERROR_WRONGVERSION
;

2219 
°©us
 = 
	`hdd_io_begö
(
c
,0);

2220 i‡(
°©us
!=
STATUS_OK
) {

2221 
	`hdd_îr‹_occuªd
(
c
);

2222 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2223 
	`hdd_chunk_ªÀa£
(
c
);

2224  
°©us
;

2226 *
checksum
 = 
	`my¸c32
(0,
c
->
¸c
,4096);

2227 
°©us
 = 
	`hdd_io_íd
(
c
);

2228 i‡(
°©us
!=
STATUS_OK
) {

2229 
	`hdd_îr‹_occuªd
(
c
);

2230 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2231 
	`hdd_chunk_ªÀa£
(
c
);

2232  
°©us
;

2234 
	`hdd_chunk_ªÀa£
(
c
);

2235  
STATUS_OK
;

2236 
	}
}

2238 
	$hdd_gë_checksum_èb
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 *
checksum_èb
) {

2239 
°©us
;

2240 
chunk
 *
c
;

2241 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2242 i‡(
c
==
NULL
) {

2243  
ERROR_NOCHUNK
;

2245 i‡(
c
->
vîsi⁄
!=version && version>0) {

2246 
	`hdd_chunk_ªÀa£
(
c
);

2247  
ERROR_WRONGVERSION
;

2249 
°©us
 = 
	`hdd_io_begö
(
c
,0);

2250 i‡(
°©us
!=
STATUS_OK
) {

2251 
	`hdd_îr‹_occuªd
(
c
);

2252 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2253 
	`hdd_chunk_ªÀa£
(
c
);

2254  
°©us
;

2256 
	`mem˝y
(
checksum_èb
,
c
->
¸c
,4096);

2257 
°©us
 = 
	`hdd_io_íd
(
c
);

2258 i‡(
°©us
!=
STATUS_OK
) {

2259 
	`hdd_îr‹_occuªd
(
c
);

2260 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2261 
	`hdd_chunk_ªÀa£
(
c
);

2262  
°©us
;

2264 
	`hdd_chunk_ªÀa£
(
c
);

2265  
STATUS_OK
;

2266 
	}
}

2274 
	$hdd_öt_¸óã
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

2275 
fﬁdî
 *
f
;

2276 
chunk
 *
c
;

2277 
°©us
;

2278 
uöt8_t
 *
±r
;

2279 #ifde‡
PRESERVE_BLOCK


2280 
uöt8_t
 
hdrbuf„r
[
CHUNKHDRSIZE
];

2282 
uöt8_t
 *
hdrbuf„r
;

2285 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

2286 
f
=
	`hdd_gëfﬁdî
();

2287 i‡(
f
==
NULL
) {

2288 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2289  
ERROR_NOSPACE
;

2291 
c
 = 
	`hdd_chunk_¸óã
(
f
,
chunkid
,
vîsi⁄
);

2292 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2293 i‡(
c
==
NULL
) {

2294  
ERROR_CHUNKEXIST
;

2297 #i‚de‡
PRESERVE_BLOCK


2298 
hdrbuf„r
 = 
	`±hªad_gë•ecific
(
hdrbuf„rkey
);

2299 i‡(
hdrbuf„r
==
NULL
) {

2300 
hdrbuf„r
 = 
	`mÆloc
(
CHUNKHDRSIZE
);

2301 
	`∑s£π
(
hdrbuf„r
);

2302 
	`±hªad_£t•ecific
(
hdrbuf„rkey
,
hdrbuf„r
);

2306 
°©us
 = 
	`hdd_io_begö
(
c
,1);

2307 i‡(
°©us
!=
STATUS_OK
) {

2308 
	`hdd_îr‹_occuªd
(
c
);

2309 
	`hdd_chunk_dñëe
(
c
);

2310  
ERROR_IO
;

2312 
	`mem£t
(
hdrbuf„r
,0,
CHUNKHDRSIZE
);

2313 
	`mem˝y
(
hdrbuf„r
,
MFSSIGNATURE
 "C 1.0",8);

2314 
±r
 = 
hdrbuf„r
+8;

2315 
	`put64bô
(&
±r
,
chunkid
);

2316 
	`put32bô
(&
±r
,
vîsi⁄
);

2317 i‡(
	`wrôe
(
c
->
fd
,
hdrbuf„r
,
CHUNKHDRSIZE
)!=CHUNKHDRSIZE) {

2318 
	`hdd_îr‹_occuªd
(
c
);

2319 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"¸óã_√wchunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2320 
	`hdd_io_íd
(
c
);

2321 
	`u∆ök
(
c
->
fûíame
);

2322 
	`hdd_chunk_dñëe
(
c
);

2323  
ERROR_IO
;

2325 
	`hdd_°©s_wrôe
(
CHUNKHDRSIZE
);

2326 
°©us
 = 
	`hdd_io_íd
(
c
);

2327 i‡(
°©us
!=
STATUS_OK
) {

2328 
	`hdd_îr‹_occuªd
(
c
);

2329 
	`u∆ök
(
c
->
fûíame
);

2330 
	`hdd_chunk_dñëe
(
c
);

2331  
°©us
;

2333 
	`hdd_chunk_ªÀa£
(
c
);

2334  
STATUS_OK
;

2335 
	}
}

2337 
	$hdd_öt_ã°
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

2338 c⁄° 
uöt8_t
 *
±r
;

2339 
uöt16_t
 
block
;

2340 
uöt32_t
 
b¸c
;

2341 
öt32_t
 
ªtsize
;

2342 
°©us
;

2343 
chunk
 *
c
;

2344 #i‚de‡
PRESERVE_BLOCK


2345 
uöt8_t
 *
blockbuf„r
;

2346 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

2347 i‡(
blockbuf„r
==
NULL
) {

2348 #ifde‡
MMAP_ALLOC


2349 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

2351 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

2353 
	`∑s£π
(
blockbuf„r
);

2354 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

2357 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2358 i‡(
c
==
NULL
) {

2359  
ERROR_NOCHUNK
;

2361 i‡(
c
->
vîsi⁄
!=version && version>0) {

2362 
	`hdd_chunk_ªÀa£
(
c
);

2363  
ERROR_WRONGVERSION
;

2365 
°©us
 = 
	`hdd_io_begö
(
c
,0);

2366 i‡(
°©us
!=
STATUS_OK
) {

2367 
	`hdd_îr‹_occuªd
(
c
);

2368 
	`hdd_chunk_ªÀa£
(
c
);

2369  
°©us
;

2371 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
,
SEEK_SET
);

2372 
±r
 = 
c
->
¸c
;

2373 
block
=0 ; block<
c
->
blocks
 ; block++) {

2374 #ifde‡
PRESERVE_BLOCK


2375 
ªtsize
 = 
	`ªad
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

2377 
ªtsize
 = 
	`ªad
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

2379 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

2380 
	`hdd_îr‹_occuªd
(
c
);

2381 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"ã°_chunk: fûe:%†- d©®ªadÉº‹",
c
->
fûíame
);

2382 
	`hdd_io_íd
(
c
);

2383 
	`hdd_chunk_ªÀa£
(
c
);

2384  
ERROR_IO
;

2386 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

2387 #ifde‡
PRESERVE_BLOCK


2388 
c
->
blockno
 = 
block
;

2390 
b¸c
 = 
	`gë32bô
(&
±r
);

2391 #ifde‡
PRESERVE_BLOCK


2392 i‡(
b¸c
!=
	`my¸c32
(0,
c
->
block
,
MFSBLOCKSIZE
)) {

2394 i‡(
b¸c
!=
	`my¸c32
(0,
blockbuf„r
,
MFSBLOCKSIZE
)) {

2396 
î∫o
 = 0;

2397 
	`hdd_îr‹_occuªd
(
c
);

2398 
	`sy¶og
(
LOG_WARNING
,"ã°_chunk: fûe:%†- cr¯îr‹",
c
->
fûíame
);

2399 
	`hdd_io_íd
(
c
);

2400 
	`hdd_chunk_ªÀa£
(
c
);

2401  
ERROR_CRC
;

2404 
°©us
 = 
	`hdd_io_íd
(
c
);

2405 i‡(
°©us
!=
STATUS_OK
) {

2406 
	`hdd_îr‹_occuªd
(
c
);

2407 
	`hdd_chunk_ªÀa£
(
c
);

2408  
°©us
;

2410 
	`hdd_chunk_ªÀa£
(
c
);

2411  
STATUS_OK
;

2412 
	}
}

2414 
	$hdd_öt_du∂iˇã
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
) {

2415 
fﬁdî
 *
f
;

2416 
uöt32_t
 
fûíamñíg
;

2417 *
√wfûíame
;

2418 
uöt8_t
 *
±r
,
vbuff
[4];

2419 
uöt16_t
 
block
;

2420 
öt32_t
 
ªtsize
;

2421 
°©us
;

2422 
chunk
 *
c
,*
oc
;

2423 #ifde‡
PRESERVE_BLOCK


2424 
uöt8_t
 
hdrbuf„r
[
CHUNKHDRSIZE
];

2426 
uöt8_t
 *
blockbuf„r
,*
hdrbuf„r
;

2427 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

2428 i‡(
blockbuf„r
==
NULL
) {

2429 #ifde‡
MMAP_ALLOC


2430 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

2432 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

2434 
	`∑s£π
(
blockbuf„r
);

2435 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

2437 
hdrbuf„r
 = 
	`±hªad_gë•ecific
(
hdrbuf„rkey
);

2438 i‡(
hdrbuf„r
==
NULL
) {

2439 
hdrbuf„r
 = 
	`mÆloc
(
CHUNKHDRSIZE
);

2440 
	`∑s£π
(
hdrbuf„r
);

2441 
	`±hªad_£t•ecific
(
hdrbuf„rkey
,
hdrbuf„r
);

2445 
oc
 = 
	`hdd_chunk_föd
(
chunkid
);

2446 i‡(
oc
==
NULL
) {

2447  
ERROR_NOCHUNK
;

2449 i‡(
oc
->
vîsi⁄
!=version && version>0) {

2450 
	`hdd_chunk_ªÀa£
(
oc
);

2451  
ERROR_WRONGVERSION
;

2453 i‡(
c›yvîsi⁄
==0) {

2454 
c›yvîsi⁄
=
√wvîsi⁄
;

2456 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

2457 
f
=
	`hdd_gëfﬁdî
();

2458 i‡(
f
==
NULL
) {

2459 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2460 
	`hdd_chunk_ªÀa£
(
oc
);

2461  
ERROR_NOSPACE
;

2463 
c
 = 
	`hdd_chunk_¸óã
(
f
,
c›ychunkid
,
c›yvîsi⁄
);

2464 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2465 i‡(
c
==
NULL
) {

2466 
	`hdd_chunk_ªÀa£
(
oc
);

2467  
ERROR_CHUNKEXIST
;

2470 i‡(
√wvîsi⁄
!=
vîsi⁄
) {

2471 
fûíamñíg
 = 
	`°æí
(
oc
->
fûíame
);

2472 i‡(
oc
->
fûíame
[
fûíamñíg
-13]=='_') {

2473 
√wfûíame
 = 
	`mÆloc
(
fûíamñíg
+1);

2474 
	`∑s£π
(
√wfûíame
);

2475 
	`mem˝y
(
√wfûíame
,
c
->
fûíame
,
fûíamñíg
+1);

2476 
	`•rötf
(
√wfûíame
+
fûíamñíg
-12,"%08"
PRIX32
".mfs",
√wvîsi⁄
);

2477 i‡(
	`ª«me
(
oc
->
fûíame
,
√wfûíame
)<0) {

2478 
	`hdd_îr‹_occuªd
(
oc
);

2479 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†-Ñíamêîr‹",
oc
->
fûíame
);

2480 
	`‰ì
(
√wfûíame
);

2481 
	`hdd_chunk_dñëe
(
c
);

2482 
	`hdd_chunk_ªÀa£
(
oc
);

2483  
ERROR_IO
;

2485 
	`‰ì
(
oc
->
fûíame
);

2486 
oc
->
fûíame
 = 
√wfûíame
;

2488 
°©us
 = 
	`hdd_io_begö
(
oc
,0);

2489 i‡(
°©us
!=
STATUS_OK
) {

2490 
	`hdd_îr‹_occuªd
(
oc
);

2491 
	`hdd_chunk_dñëe
(
c
);

2492 
	`hdd_chunk_ªÀa£
(
oc
);

2493  
°©us
;

2495 
±r
 = 
vbuff
;

2496 
	`put32bô
(&
±r
,
√wvîsi⁄
);

2497 #ifde‡
USE_PIO


2498 i‡(
	`pwrôe
(
oc
->
fd
,
vbuff
,4,16)!=4) {

2500 
	`l£ek
(
oc
->
fd
,16,
SEEK_SET
);

2501 i‡(
	`wrôe
(
oc
->
fd
,
vbuff
,4)!=4) {

2503 
	`hdd_îr‹_occuªd
(
oc
);

2504 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2505 
	`hdd_chunk_dñëe
(
c
);

2506 
	`hdd_io_íd
(
oc
);

2507 
	`hdd_chunk_ªÀa£
(
oc
);

2508  
ERROR_IO
;

2510 
	`hdd_°©s_wrôe
(4);

2511 
oc
->
vîsi⁄
 = 
√wvîsi⁄
;

2513 
°©us
 = 
	`hdd_io_begö
(
oc
,0);

2514 i‡(
°©us
!=
STATUS_OK
) {

2515 
	`hdd_îr‹_occuªd
(
oc
);

2516 
	`hdd_chunk_dñëe
(
c
);

2517 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2518 
	`hdd_chunk_ªÀa£
(
oc
);

2519  
°©us
;

2522 
°©us
 = 
	`hdd_io_begö
(
c
,1);

2523 i‡(
°©us
!=
STATUS_OK
) {

2524 
	`hdd_îr‹_occuªd
(
c
);

2525 
	`hdd_chunk_dñëe
(
c
);

2526 
	`hdd_io_íd
(
oc
);

2527 
	`hdd_chunk_ªÀa£
(
oc
);

2528  
°©us
;

2530 
	`mem£t
(
hdrbuf„r
,0,
CHUNKHDRSIZE
);

2531 
	`mem˝y
(
hdrbuf„r
,
MFSSIGNATURE
 "C 1.0",8);

2532 
±r
 = 
hdrbuf„r
+8;

2533 
	`put64bô
(&
±r
,
c›ychunkid
);

2534 
	`put32bô
(&
±r
,
c›yvîsi⁄
);

2535 
	`mem˝y
(
c
->
¸c
,
oc
->crc,4096);

2536 
	`mem˝y
(
hdrbuf„r
+1024,
oc
->
¸c
,4096);

2537 i‡(
	`wrôe
(
c
->
fd
,
hdrbuf„r
,
CHUNKHDRSIZE
)!=CHUNKHDRSIZE) {

2538 
	`hdd_îr‹_occuªd
(
c
);

2539 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†- hd∏wrôêîr‹",
c
->
fûíame
);

2540 
	`hdd_io_íd
(
c
);

2541 
	`u∆ök
(
c
->
fûíame
);

2542 
	`hdd_chunk_dñëe
(
c
);

2543 
	`hdd_io_íd
(
oc
);

2544 
	`hdd_chunk_ªÀa£
(
oc
);

2545  
ERROR_IO
;

2547 
	`hdd_°©s_wrôe
(
CHUNKHDRSIZE
);

2548 #i‚de‡
PRESERVE_BLOCK


2549 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
,
SEEK_SET
);

2551 
block
=0 ; block<
oc
->
blocks
 ; block++) {

2552 #ifde‡
PRESERVE_BLOCK


2553 i‡(
oc
->
blockno
==
block
) {

2554 
	`mem˝y
(
c
->
block
,
oc
->block,
MFSBLOCKSIZE
);

2555 
ªtsize
 = 
MFSBLOCKSIZE
;

2557 #ifde‡
USE_PIO


2558 
ªtsize
 = 
	`¥ód
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)block)<<
MFSBLOCKBITS
));

2560 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
block
)<<
MFSBLOCKBITS
),
SEEK_SET
);

2561 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
);

2565 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

2567 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

2568 
	`hdd_îr‹_occuªd
(
oc
);

2569 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†- d©®ªadÉº‹",
oc
->
fûíame
);

2570 
	`hdd_io_íd
(
c
);

2571 
	`u∆ök
(
c
->
fûíame
);

2572 
	`hdd_chunk_dñëe
(
c
);

2573 
	`hdd_io_íd
(
oc
);

2574 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2575 
	`hdd_chunk_ªÀa£
(
oc
);

2576  
ERROR_IO
;

2578 #ifde‡
PRESERVE_BLOCK


2579 i‡(
oc
->
blockno
!=
block
) {

2580 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

2582 
ªtsize
 = 
	`wrôe
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

2584 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

2585 
ªtsize
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

2587 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

2588 
	`hdd_îr‹_occuªd
(
c
);

2589 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†- d©®wrôêîr‹",
c
->
fûíame
);

2590 
	`hdd_io_íd
(
c
);

2591 
	`u∆ök
(
c
->
fûíame
);

2592 
	`hdd_chunk_dñëe
(
c
);

2593 
	`hdd_io_íd
(
oc
);

2594 
	`hdd_chunk_ªÀa£
(
oc
);

2595  
ERROR_IO
;

2597 
	`hdd_°©s_wrôe
(
MFSBLOCKSIZE
);

2598 #ifde‡
PRESERVE_BLOCK


2599 
c
->
blockno
 = 
block
;

2602 
°©us
 = 
	`hdd_io_íd
(
oc
);

2603 i‡(
°©us
!=
STATUS_OK
) {

2604 
	`hdd_îr‹_occuªd
(
oc
);

2605 
	`hdd_io_íd
(
c
);

2606 
	`u∆ök
(
c
->
fûíame
);

2607 
	`hdd_chunk_dñëe
(
c
);

2608 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2609 
	`hdd_chunk_ªÀa£
(
oc
);

2610  
°©us
;

2612 
°©us
 = 
	`hdd_io_íd
(
c
);

2613 i‡(
°©us
!=
STATUS_OK
) {

2614 
	`hdd_îr‹_occuªd
(
c
);

2615 
	`u∆ök
(
c
->
fûíame
);

2616 
	`hdd_chunk_dñëe
(
c
);

2617 
	`hdd_chunk_ªÀa£
(
oc
);

2618  
°©us
;

2620 
c
->
blocks
 = 
oc
->blocks;

2621 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

2622 
c
->
ow√r
->
√edª‰esh
 = 1;

2623 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2624 
	`hdd_chunk_ªÀa£
(
c
);

2625 
	`hdd_chunk_ªÀa£
(
oc
);

2626  
STATUS_OK
;

2627 
	}
}

2629 
	$hdd_öt_vîsi⁄
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
) {

2630 
°©us
;

2631 
uöt32_t
 
fûíamñíg
;

2632 *
√wfûíame
;

2633 
uöt8_t
 *
±r
,
vbuff
[4];

2634 
chunk
 *
c
;

2635 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2636 i‡(
c
==
NULL
) {

2637  
ERROR_NOCHUNK
;

2639 i‡(
c
->
vîsi⁄
!=version && version>0) {

2640 
	`hdd_chunk_ªÀa£
(
c
);

2641  
ERROR_WRONGVERSION
;

2643 
fûíamñíg
 = 
	`°æí
(
c
->
fûíame
);

2644 i‡(
c
->
fûíame
[
fûíamñíg
-13]=='_') {

2645 
√wfûíame
 = 
	`mÆloc
(
fûíamñíg
+1);

2646 
	`∑s£π
(
√wfûíame
);

2647 
	`mem˝y
(
√wfûíame
,
c
->
fûíame
,
fûíamñíg
+1);

2648 
	`•rötf
(
√wfûíame
+
fûíamñíg
-12,"%08"
PRIX32
".mfs",
√wvîsi⁄
);

2649 i‡(
	`ª«me
(
c
->
fûíame
,
√wfûíame
)<0) {

2650 
	`hdd_îr‹_occuªd
(
c
);

2651 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"£t_chunk_vîsi⁄: fûe:%†-Ñíamêîr‹",
c
->
fûíame
);

2652 
	`‰ì
(
√wfûíame
);

2653 
	`hdd_chunk_ªÀa£
(
c
);

2654  
ERROR_IO
;

2656 
	`‰ì
(
c
->
fûíame
);

2657 
c
->
fûíame
 = 
√wfûíame
;

2659 
°©us
 = 
	`hdd_io_begö
(
c
,0);

2660 i‡(
°©us
!=
STATUS_OK
) {

2661 
	`hdd_îr‹_occuªd
(
c
);

2662 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"£t_chunk_vîsi⁄: fûe:%†- o≥¿îr‹",
c
->
fûíame
);

2663 
	`hdd_chunk_ªÀa£
(
c
);

2664  
°©us
;

2666 
±r
 = 
vbuff
;

2667 
	`put32bô
(&
±r
,
√wvîsi⁄
);

2668 #ifde‡
USE_PIO


2669 i‡(
	`pwrôe
(
c
->
fd
,
vbuff
,4,16)!=4) {

2671 
	`l£ek
(
c
->
fd
,16,
SEEK_SET
);

2672 i‡(
	`wrôe
(
c
->
fd
,
vbuff
,4)!=4) {

2674 
	`hdd_îr‹_occuªd
(
c
);

2675 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"£t_chunk_vîsi⁄: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2676 
	`hdd_io_íd
(
c
);

2677 
	`hdd_chunk_ªÀa£
(
c
);

2678  
ERROR_IO
;

2680 
	`hdd_°©s_wrôe
(4);

2681 
c
->
vîsi⁄
 = 
√wvîsi⁄
;

2682 
°©us
 = 
	`hdd_io_íd
(
c
);

2683 i‡(
°©us
!=
STATUS_OK
) {

2684 
	`hdd_îr‹_occuªd
(
c
);

2686 
	`hdd_chunk_ªÀa£
(
c
);

2687  
°©us
;

2688 
	}
}

2690 
	$hdd_öt_åunˇã
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt32_à
Àngth
) {

2691 
°©us
;

2692 
uöt32_t
 
fûíamñíg
;

2693 *
√wfûíame
;

2694 
uöt8_t
 *
±r
,
vbuff
[4];

2695 
chunk
 *
c
;

2696 
uöt32_t
 
blocks
;

2697 
uöt32_t
 
i
;

2698 #i‚de‡
PRESERVE_BLOCK


2699 
uöt8_t
 *
blockbuf„r
;

2700 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

2701 i‡(
blockbuf„r
==
NULL
) {

2702 #ifde‡
MMAP_ALLOC


2703 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

2705 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

2707 
	`∑s£π
(
blockbuf„r
);

2708 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

2711 i‡(
Àngth
>
MFSCHUNKSIZE
) {

2712  
ERROR_WRONGSIZE
;

2714 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

2716 i‡(
c
==
NULL
) {

2717  
ERROR_NOCHUNK
;

2719 i‡(
c
->
vîsi⁄
!=version && version>0) {

2720 
	`hdd_chunk_ªÀa£
(
c
);

2721  
ERROR_WRONGVERSION
;

2723 
fûíamñíg
 = 
	`°æí
(
c
->
fûíame
);

2724 i‡(
c
->
fûíame
[
fûíamñíg
-13]=='_') {

2725 
√wfûíame
 = 
	`mÆloc
(
fûíamñíg
+1);

2726 
	`∑s£π
(
√wfûíame
);

2727 
	`mem˝y
(
√wfûíame
,
c
->
fûíame
,
fûíamñíg
+1);

2728 
	`•rötf
(
√wfûíame
+
fûíamñíg
-12,"%08"
PRIX32
".mfs",
√wvîsi⁄
);

2729 i‡(
	`ª«me
(
c
->
fûíame
,
√wfûíame
)<0) {

2730 
	`hdd_îr‹_occuªd
(
c
);

2731 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†-Ñíamêîr‹",
c
->
fûíame
);

2732 
	`‰ì
(
√wfûíame
);

2733 
	`hdd_chunk_ªÀa£
(
c
);

2734  
ERROR_IO
;

2736 
	`‰ì
(
c
->
fûíame
);

2737 
c
->
fûíame
 = 
√wfûíame
;

2739 
°©us
 = 
	`hdd_io_begö
(
c
,0);

2740 i‡(
°©us
!=
STATUS_OK
) {

2741 
	`hdd_îr‹_occuªd
(
c
);

2742 
	`hdd_chunk_ªÀa£
(
c
);

2743  
°©us
;

2745 
±r
 = 
vbuff
;

2746 
	`put32bô
(&
±r
,
√wvîsi⁄
);

2747 #ifde‡
USE_PIO


2748 i‡(
	`pwrôe
(
c
->
fd
,
vbuff
,4,16)!=4) {

2750 
	`l£ek
(
c
->
fd
,16,
SEEK_SET
);

2751 i‡(
	`wrôe
(
c
->
fd
,
vbuff
,4)!=4) {

2753 
	`hdd_îr‹_occuªd
(
c
);

2754 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2755 
	`hdd_io_íd
(
c
);

2756 
	`hdd_chunk_ªÀa£
(
c
);

2757  
ERROR_IO
;

2759 
	`hdd_°©s_wrôe
(4);

2760 
c
->
vîsi⁄
 = 
√wvîsi⁄
;

2762 
blocks
 = ((
Àngth
+
MFSBLOCKMASK
)>>
MFSBLOCKBITS
);

2763 i‡(
blocks
>
c
->blocks) {

2764 i‡(
	`·runˇã
(
c
->
fd
,
CHUNKHDRSIZE
+(
blocks
<<
MFSBLOCKBITS
))<0) {

2765 
	`hdd_îr‹_occuªd
(
c
);

2766 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†- fåunˇãÉº‹",
c
->
fûíame
);

2767 
	`hdd_io_íd
(
c
);

2768 
	`hdd_chunk_ªÀa£
(
c
);

2769  
ERROR_IO
;

2771 
±r
 = (
c
->
¸c
)+(4*(c->
blocks
));

2772 
i
=
c
->
blocks
 ; i<blocks ; i++) {

2773 
	`put32bô
(&
±r
,
em±yblock¸c
);

2775 
c
->
¸cch™ged
=1;

2777 
uöt32_t
 
blocknum
 = 
Àngth
>>
MFSBLOCKBITS
;

2778 
uöt32_t
 
blockpos
 = 
Àngth
&
MFSCHUNKBLOCKMASK
;

2779 
uöt32_t
 
blocksize
 = 
Àngth
&
MFSBLOCKMASK
;

2780 i‡(
	`·runˇã
(
c
->
fd
,
CHUNKHDRSIZE
+
Àngth
)<0) {

2781 
	`hdd_îr‹_occuªd
(
c
);

2782 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†- fåunˇãÉº‹",
c
->
fûíame
);

2783 
	`hdd_io_íd
(
c
);

2784 
	`hdd_chunk_ªÀa£
(
c
);

2785  
ERROR_IO
;

2787 i‡(
blocksize
>0) {

2788 i‡(
	`·runˇã
(
c
->
fd
,
CHUNKHDRSIZE
+(
blocks
<<
MFSBLOCKBITS
))<0) {

2789 
	`hdd_îr‹_occuªd
(
c
);

2790 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†- fåunˇãÉº‹",
c
->
fûíame
);

2791 
	`hdd_io_íd
(
c
);

2792 
	`hdd_chunk_ªÀa£
(
c
);

2793  
ERROR_IO
;

2795 #ifde‡
PRESERVE_BLOCK


2796 i‡(
c
->
blockno
>=
blocks
) {

2797 
c
->
blockno
=0xFFFF;

2799 i‡(
c
->
blockno
!=(
blockpos
>>
MFSBLOCKBITS
)) {

2801 #ifde‡
USE_PIO


2802 i‡(
	`¥ód
(
c
->
fd
,c->
block
,
blocksize
,
CHUNKHDRSIZE
+
blockpos
)!=(signed)blocksize) {

2804 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+
blockpos
,
SEEK_SET
);

2805 i‡(
	`ªad
(
c
->
fd
,c->
block
,
blocksize
)!=(signed)blocksize) {

2808 #ifde‡
USE_PIO


2809 i‡(
	`¥ód
(
c
->
fd
,
blockbuf„r
,
blocksize
,
CHUNKHDRSIZE
+
blockpos
)!=(signed)blocksize) {

2811 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
+
blockpos
,
SEEK_SET
);

2812 i‡(
	`ªad
(
c
->
fd
,
blockbuf„r
,
blocksize
)!=(signed)blocksize) {

2815 
	`hdd_îr‹_occuªd
(
c
);

2816 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"åunˇã_chunk: fûe:%†-ÑódÉº‹",
c
->
fûíame
);

2817 
	`hdd_io_íd
(
c
);

2818 
	`hdd_chunk_ªÀa£
(
c
);

2819  
ERROR_IO
;

2821 
	`hdd_°©s_ªad
(
blocksize
);

2822 #ifde‡
PRESERVE_BLOCK


2824 
	`mem£t
(
c
->
block
+
blocksize
,0,
MFSBLOCKSIZE
-blocksize);

2825 
c
->
blockno
 = 
blockpos
>>
MFSBLOCKBITS
;

2826 
i
 = 
	`my¸c32_zî€x∑nded
(0,
c
->
block
,
blocksize
,
MFSBLOCKSIZE
-blocksize);

2828 
i
 = 
	`my¸c32_zî€x∑nded
(0,
blockbuf„r
,
blocksize
,
MFSBLOCKSIZE
-blocksize);

2830 
±r
 = (
c
->
¸c
)+(4*
blocknum
);

2831 
	`put32bô
(&
±r
,
i
);

2832 
c
->
¸cch™ged
=1;

2835 i‡(
c
->
blocks
 != blocks) {

2836 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

2837 
c
->
ow√r
->
√edª‰esh
 = 1;

2838 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2840 
c
->
blocks
=blocks;

2841 
°©us
 = 
	`hdd_io_íd
(
c
);

2842 i‡(
°©us
!=
STATUS_OK
) {

2843 
	`hdd_îr‹_occuªd
(
c
);

2845 
	`hdd_chunk_ªÀa£
(
c
);

2846  
°©us
;

2849 
	`hdd_öt_du±runc
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àngth
) {

2850 
fﬁdî
 *
f
;

2851 
uöt32_t
 
fûíamñíg
;

2852 *
√wfûíame
;

2853 
uöt8_t
 *
±r
,
vbuff
[4];

2854 
uöt16_t
 
block
;

2855 
uöt16_t
 
blocks
;

2856 
öt32_t
 
ªtsize
;

2857 
uöt32_t
 
¸c
;

2858 
°©us
;

2859 
chunk
 *
c
,*
oc
;

2860 #ifde‡
PRESERVE_BLOCK


2861 
uöt8_t
 
hdrbuf„r
[
CHUNKHDRSIZE
];

2863 
uöt8_t
 *
blockbuf„r
,*
hdrbuf„r
;

2864 
blockbuf„r
 = 
	`±hªad_gë•ecific
(
blockbuf„rkey
);

2865 i‡(
blockbuf„r
==
NULL
) {

2866 #ifde‡
MMAP_ALLOC


2867 
blockbuf„r
 = 
	`mm≠
(
NULL
,
MFSBLOCKSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

2869 
blockbuf„r
 = 
	`mÆloc
(
MFSBLOCKSIZE
);

2871 
	`∑s£π
(
blockbuf„r
);

2872 
	`±hªad_£t•ecific
(
blockbuf„rkey
,
blockbuf„r
);

2874 
hdrbuf„r
 = 
	`±hªad_gë•ecific
(
hdrbuf„rkey
);

2875 i‡(
hdrbuf„r
==
NULL
) {

2876 
hdrbuf„r
 = 
	`mÆloc
(
CHUNKHDRSIZE
);

2877 
	`∑s£π
(
hdrbuf„r
);

2878 
	`±hªad_£t•ecific
(
hdrbuf„rkey
,
hdrbuf„r
);

2882 i‡(
Àngth
>
MFSCHUNKSIZE
) {

2883  
ERROR_WRONGSIZE
;

2885 
oc
 = 
	`hdd_chunk_föd
(
chunkid
);

2886 i‡(
oc
==
NULL
) {

2887  
ERROR_NOCHUNK
;

2889 i‡(
oc
->
vîsi⁄
!=version && version>0) {

2890 
	`hdd_chunk_ªÀa£
(
oc
);

2891  
ERROR_WRONGVERSION
;

2893 i‡(
c›yvîsi⁄
==0) {

2894 
c›yvîsi⁄
=
√wvîsi⁄
;

2896 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

2897 
f
=
	`hdd_gëfﬁdî
();

2898 i‡(
f
==
NULL
) {

2899 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2900 
	`hdd_chunk_ªÀa£
(
oc
);

2901  
ERROR_NOSPACE
;

2903 
c
 = 
	`hdd_chunk_¸óã
(
f
,
c›ychunkid
,
c›yvîsi⁄
);

2904 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

2905 i‡(
c
==
NULL
) {

2906 
	`hdd_chunk_ªÀa£
(
oc
);

2907  
ERROR_CHUNKEXIST
;

2910 i‡(
√wvîsi⁄
!=
vîsi⁄
) {

2911 
fûíamñíg
 = 
	`°æí
(
oc
->
fûíame
);

2912 i‡(
oc
->
fûíame
[
fûíamñíg
-13]=='_') {

2913 
√wfûíame
 = 
	`mÆloc
(
fûíamñíg
+1);

2914 
	`∑s£π
(
√wfûíame
);

2915 
	`mem˝y
(
√wfûíame
,
c
->
fûíame
,
fûíamñíg
+1);

2916 
	`•rötf
(
√wfûíame
+
fûíamñíg
-12,"%08"
PRIX32
".mfs",
√wvîsi⁄
);

2917 i‡(
	`ª«me
(
oc
->
fûíame
,
√wfûíame
)<0) {

2918 
	`hdd_îr‹_occuªd
(
oc
);

2919 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du∂iˇã_chunk: fûe:%†-Ñíamêîr‹",
oc
->
fûíame
);

2920 
	`‰ì
(
√wfûíame
);

2921 
	`hdd_chunk_dñëe
(
c
);

2922 
	`hdd_chunk_ªÀa£
(
oc
);

2923  
ERROR_IO
;

2925 
	`‰ì
(
oc
->
fûíame
);

2926 
oc
->
fûíame
 = 
√wfûíame
;

2928 
°©us
 = 
	`hdd_io_begö
(
oc
,0);

2929 i‡(
°©us
!=
STATUS_OK
) {

2930 
	`hdd_îr‹_occuªd
(
oc
);

2931 
	`hdd_chunk_dñëe
(
c
);

2932 
	`hdd_chunk_ªÀa£
(
oc
);

2933  
°©us
;

2935 
±r
 = 
vbuff
;

2936 
	`put32bô
(&
±r
,
√wvîsi⁄
);

2937 #ifde‡
USE_PIO


2938 i‡(
	`pwrôe
(
oc
->
fd
,
vbuff
,4,16)!=4) {

2940 
	`l£ek
(
oc
->
fd
,16,
SEEK_SET
);

2941 i‡(
	`wrôe
(
oc
->
fd
,
vbuff
,4)!=4) {

2943 
	`hdd_îr‹_occuªd
(
oc
);

2944 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- wrôêîr‹",
c
->
fûíame
);

2945 
	`hdd_chunk_dñëe
(
c
);

2946 
	`hdd_io_íd
(
oc
);

2947 
	`hdd_chunk_ªÀa£
(
oc
);

2948  
ERROR_IO
;

2950 
	`hdd_°©s_wrôe
(4);

2951 
oc
->
vîsi⁄
 = 
√wvîsi⁄
;

2953 
°©us
 = 
	`hdd_io_begö
(
oc
,0);

2954 i‡(
°©us
!=
STATUS_OK
) {

2955 
	`hdd_îr‹_occuªd
(
oc
);

2956 
	`hdd_chunk_dñëe
(
c
);

2957 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

2958 
	`hdd_chunk_ªÀa£
(
oc
);

2959  
°©us
;

2962 
°©us
 = 
	`hdd_io_begö
(
c
,1);

2963 i‡(
°©us
!=
STATUS_OK
) {

2964 
	`hdd_îr‹_occuªd
(
c
);

2965 
	`hdd_chunk_dñëe
(
c
);

2966 
	`hdd_io_íd
(
oc
);

2967 
	`hdd_chunk_ªÀa£
(
oc
);

2968  
°©us
;

2970 
blocks
 = ((
Àngth
+
MFSBLOCKMASK
)>>
MFSBLOCKBITS
);

2971 
	`mem£t
(
hdrbuf„r
,0,
CHUNKHDRSIZE
);

2972 
	`mem˝y
(
hdrbuf„r
,
MFSSIGNATURE
 "C 1.0",8);

2973 
±r
 = 
hdrbuf„r
+8;

2974 
	`put64bô
(&
±r
,
c›ychunkid
);

2975 
	`put32bô
(&
±r
,
c›yvîsi⁄
);

2976 
	`mem˝y
(
hdrbuf„r
+1024,
oc
->
¸c
,4096);

2978 
	`l£ek
(
c
->
fd
,
CHUNKHDRSIZE
,
SEEK_SET
);

2979 #i‚de‡
PRESERVE_BLOCK


2980 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
,
SEEK_SET
);

2982 i‡(
blocks
>
oc
->blocks) {

2983 
block
=0 ; block<
oc
->
blocks
 ; block++) {

2984 #ifde‡
PRESERVE_BLOCK


2985 i‡(
oc
->
blockno
==
block
) {

2986 
	`mem˝y
(
c
->
block
,
oc
->block,
MFSBLOCKSIZE
);

2987 
ªtsize
 = 
MFSBLOCKSIZE
;

2989 #ifde‡
USE_PIO


2990 
ªtsize
 = 
	`¥ód
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)block)<<
MFSBLOCKBITS
));

2992 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
block
)<<
MFSBLOCKBITS
),
SEEK_SET
);

2993 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
);

2997 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

2999 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3000 
	`hdd_îr‹_occuªd
(
oc
);

3001 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®ªadÉº‹",
oc
->
fûíame
);

3002 
	`hdd_io_íd
(
c
);

3003 
	`u∆ök
(
c
->
fûíame
);

3004 
	`hdd_chunk_dñëe
(
c
);

3005 
	`hdd_io_íd
(
oc
);

3006 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3007 
	`hdd_chunk_ªÀa£
(
oc
);

3008  
ERROR_IO
;

3010 #ifde‡
PRESERVE_BLOCK


3011 i‡(
oc
->
blockno
!=
block
) {

3012 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3014 
ªtsize
 = 
	`wrôe
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

3016 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3017 
ªtsize
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3019 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3020 
	`hdd_îr‹_occuªd
(
c
);

3021 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®wrôêîr‹",
c
->
fûíame
);

3022 
	`hdd_io_íd
(
c
);

3023 
	`u∆ök
(
c
->
fûíame
);

3024 
	`hdd_chunk_dñëe
(
c
);

3025 
	`hdd_io_íd
(
oc
);

3026 
	`hdd_chunk_ªÀa£
(
oc
);

3027  
ERROR_IO
;

3029 
	`hdd_°©s_wrôe
(
MFSBLOCKSIZE
);

3030 #ifde‡
PRESERVE_BLOCK


3031 
c
->
blockno
 = 
block
;

3034 i‡(
	`·runˇã
(
c
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
blocks
)<<
MFSBLOCKBITS
))<0) {

3035 
	`hdd_îr‹_occuªd
(
c
);

3036 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- fåunˇãÉº‹",
c
->
fûíame
);

3037 
	`hdd_io_íd
(
c
);

3038 
	`u∆ök
(
c
->
fûíame
);

3039 
	`hdd_chunk_dñëe
(
c
);

3040 
	`hdd_io_íd
(
oc
);

3041 
	`hdd_chunk_ªÀa£
(
oc
);

3042  
ERROR_IO
;

3044 
±r
 = 
hdrbuf„r
+
CHUNKHDRCRC
+4*(
oc
->
blocks
);

3045 
block
=
oc
->
blocks
 ; block<blocks ; block++) {

3046 
	`put32bô
(&
±r
,
em±yblock¸c
);

3049 
uöt32_t
 
blocksize
 = (
Àngth
&
MFSBLOCKMASK
);

3050 i‡(
blocksize
==0) {

3051 
block
=0 ; block<
blocks
 ; block++) {

3052 #ifde‡
PRESERVE_BLOCK


3053 i‡(
oc
->
blockno
==
block
) {

3054 
	`mem˝y
(
c
->
block
,
oc
->block,
MFSBLOCKSIZE
);

3055 
ªtsize
 = 
MFSBLOCKSIZE
;

3057 #ifde‡
USE_PIO


3058 
ªtsize
 = 
	`¥ód
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)block)<<
MFSBLOCKBITS
));

3060 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
block
)<<
MFSBLOCKBITS
),
SEEK_SET
);

3061 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
);

3065 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3067 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3068 
	`hdd_îr‹_occuªd
(
oc
);

3069 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®ªadÉº‹",
oc
->
fûíame
);

3070 
	`hdd_io_íd
(
c
);

3071 
	`u∆ök
(
c
->
fûíame
);

3072 
	`hdd_chunk_dñëe
(
c
);

3073 
	`hdd_io_íd
(
oc
);

3074 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3075 
	`hdd_chunk_ªÀa£
(
oc
);

3076  
ERROR_IO
;

3078 #ifde‡
PRESERVE_BLOCK


3079 i‡(
oc
->
blockno
!=
block
) {

3080 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3082 
ªtsize
 = 
	`wrôe
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

3084 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3085 
ªtsize
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3087 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3088 
	`hdd_îr‹_occuªd
(
c
);

3089 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®wrôêîr‹",
c
->
fûíame
);

3090 
	`hdd_io_íd
(
c
);

3091 
	`u∆ök
(
c
->
fûíame
);

3092 
	`hdd_chunk_dñëe
(
c
);

3093 
	`hdd_io_íd
(
oc
);

3094 
	`hdd_chunk_ªÀa£
(
oc
);

3095  
ERROR_IO
;

3097 
	`hdd_°©s_wrôe
(
MFSBLOCKSIZE
);

3098 #ifde‡
PRESERVE_BLOCK


3099 
c
->
blockno
 = 
block
;

3103 
block
=0 ; block<
blocks
-1 ; block++) {

3104 #ifde‡
PRESERVE_BLOCK


3105 i‡(
oc
->
blockno
==
block
) {

3106 
	`mem˝y
(
c
->
block
,
oc
->block,
MFSBLOCKSIZE
);

3107 
ªtsize
 = 
MFSBLOCKSIZE
;

3109 #ifde‡
USE_PIO


3110 
ªtsize
 = 
	`¥ód
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
,
CHUNKHDRSIZE
+(((
uöt32_t
)block)<<
MFSBLOCKBITS
));

3112 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
block
)<<
MFSBLOCKBITS
),
SEEK_SET
);

3113 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
c
->
block
,
MFSBLOCKSIZE
);

3117 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3119 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3120 
	`hdd_îr‹_occuªd
(
oc
);

3121 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®ªadÉº‹",
oc
->
fûíame
);

3122 
	`hdd_io_íd
(
c
);

3123 
	`u∆ök
(
c
->
fûíame
);

3124 
	`hdd_chunk_dñëe
(
c
);

3125 
	`hdd_io_íd
(
oc
);

3126 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3127 
	`hdd_chunk_ªÀa£
(
oc
);

3128  
ERROR_IO
;

3130 #ifde‡
PRESERVE_BLOCK


3131 i‡(
oc
->
blockno
!=
block
) {

3132 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3134 
ªtsize
 = 
	`wrôe
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

3136 
	`hdd_°©s_ªad
(
MFSBLOCKSIZE
);

3137 
ªtsize
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3139 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3140 
	`hdd_îr‹_occuªd
(
c
);

3141 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®wrôêîr‹",
c
->
fûíame
);

3142 
	`hdd_io_íd
(
c
);

3143 
	`u∆ök
(
c
->
fûíame
);

3144 
	`hdd_chunk_dñëe
(
c
);

3145 
	`hdd_io_íd
(
oc
);

3146 
	`hdd_chunk_ªÀa£
(
oc
);

3147  
ERROR_IO
;

3149 
	`hdd_°©s_wrôe
(
MFSBLOCKSIZE
);

3151 
block
 = 
blocks
-1;

3152 #ifde‡
PRESERVE_BLOCK


3153 i‡(
oc
->
blockno
==
block
) {

3154 
	`mem˝y
(
c
->
block
,
oc
->block,
blocksize
);

3155 
ªtsize
 = 
blocksize
;

3157 #ifde‡
USE_PIO


3158 
ªtsize
 = 
	`¥ód
(
oc
->
fd
,
c
->
block
,
blocksize
,
CHUNKHDRSIZE
+(((
uöt32_t
)block)<<
MFSBLOCKBITS
));

3160 
	`l£ek
(
oc
->
fd
,
CHUNKHDRSIZE
+(((
uöt32_t
)
block
)<<
MFSBLOCKBITS
),
SEEK_SET
);

3161 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
c
->
block
,
blocksize
);

3165 
ªtsize
 = 
	`ªad
(
oc
->
fd
,
blockbuf„r
,
blocksize
);

3167 i‡(
ªtsize
!=(sig√d)
blocksize
) {

3168 
	`hdd_îr‹_occuªd
(
oc
);

3169 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®ªadÉº‹",
oc
->
fûíame
);

3170 
	`hdd_io_íd
(
c
);

3171 
	`u∆ök
(
c
->
fûíame
);

3172 
	`hdd_chunk_dñëe
(
c
);

3173 
	`hdd_io_íd
(
oc
);

3174 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3175 
	`hdd_chunk_ªÀa£
(
oc
);

3176  
ERROR_IO
;

3178 #ifde‡
PRESERVE_BLOCK


3179 i‡(
oc
->
blockno
!=
block
) {

3180 
	`hdd_°©s_ªad
(
blocksize
);

3182 
	`mem£t
(
c
->
block
+
blocksize
,0,
MFSBLOCKSIZE
-blocksize);

3183 
ªtsize
 = 
	`wrôe
(
c
->
fd
,c->
block
,
MFSBLOCKSIZE
);

3185 
	`hdd_°©s_ªad
(
blocksize
);

3186 
	`mem£t
(
blockbuf„r
+
blocksize
,0,
MFSBLOCKSIZE
-blocksize);

3187 
ªtsize
 = 
	`wrôe
(
c
->
fd
,
blockbuf„r
,
MFSBLOCKSIZE
);

3189 i‡(
ªtsize
!=
MFSBLOCKSIZE
) {

3190 
	`hdd_îr‹_occuªd
(
c
);

3191 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- d©®wrôêîr‹",
c
->
fûíame
);

3192 
	`hdd_io_íd
(
c
);

3193 
	`u∆ök
(
c
->
fûíame
);

3194 
	`hdd_chunk_dñëe
(
c
);

3195 
	`hdd_io_íd
(
oc
);

3196 
	`hdd_chunk_ªÀa£
(
oc
);

3197  
ERROR_IO
;

3199 
	`hdd_°©s_wrôe
(
MFSBLOCKSIZE
);

3200 
±r
 = 
hdrbuf„r
+
CHUNKHDRCRC
+4*(
blocks
-1);

3201 #ifde‡
PRESERVE_BLOCK


3202 
¸c
 = 
	`my¸c32_zî€x∑nded
(0,
c
->
block
,
blocksize
,
MFSBLOCKSIZE
-blocksize);

3204 
¸c
 = 
	`my¸c32_zî€x∑nded
(0,
blockbuf„r
,
blocksize
,
MFSBLOCKSIZE
-blocksize);

3206 
	`put32bô
(&
±r
,
¸c
);

3207 #ifde‡
PRESERVE_BLOCK


3208 
c
->
blockno
 = 
block
;

3213 
	`mem˝y
(
c
->
¸c
,
hdrbuf„r
+1024,4096);

3214 
	`l£ek
(
c
->
fd
,0,
SEEK_SET
);

3215 i‡(
	`wrôe
(
c
->
fd
,
hdrbuf„r
,
CHUNKHDRSIZE
)!=CHUNKHDRSIZE) {

3216 
	`hdd_îr‹_occuªd
(
c
);

3217 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"du±runc_chunk: fûe:%†- hd∏wrôêîr‹",
c
->
fûíame
);

3218 
	`hdd_io_íd
(
c
);

3219 
	`u∆ök
(
c
->
fûíame
);

3220 
	`hdd_chunk_dñëe
(
c
);

3221 
	`hdd_io_íd
(
oc
);

3222 
	`hdd_chunk_ªÀa£
(
oc
);

3223  
ERROR_IO
;

3225 
	`hdd_°©s_wrôe
(
CHUNKHDRSIZE
);

3226 
°©us
 = 
	`hdd_io_íd
(
oc
);

3227 i‡(
°©us
!=
STATUS_OK
) {

3228 
	`hdd_îr‹_occuªd
(
oc
);

3229 
	`hdd_io_íd
(
c
);

3230 
	`u∆ök
(
c
->
fûíame
);

3231 
	`hdd_chunk_dñëe
(
c
);

3232 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3233 
	`hdd_chunk_ªÀa£
(
oc
);

3234  
°©us
;

3236 
°©us
 = 
	`hdd_io_íd
(
c
);

3237 i‡(
°©us
!=
STATUS_OK
) {

3238 
	`hdd_îr‹_occuªd
(
c
);

3239 
	`u∆ök
(
c
->
fûíame
);

3240 
	`hdd_chunk_dñëe
(
c
);

3241 
	`hdd_chunk_ªÀa£
(
oc
);

3242  
°©us
;

3244 
c
->
blocks
 = blocks;

3245 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

3246 
c
->
ow√r
->
√edª‰esh
 = 1;

3247 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

3248 
	`hdd_chunk_ªÀa£
(
c
);

3249 
	`hdd_chunk_ªÀa£
(
oc
);

3250  
STATUS_OK
;

3253 
	`hdd_öt_dñëe
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

3254 
chunk
 *
c
;

3255 
c
 = 
	`hdd_chunk_föd
(
chunkid
);

3256 i‡(
c
==
NULL
) {

3257  
ERROR_NOCHUNK
;

3259 i‡(
c
->
vîsi⁄
!=version && version>0) {

3260 
	`hdd_chunk_ªÀa£
(
c
);

3261  
ERROR_WRONGVERSION
;

3263 i‡(
	`u∆ök
(
c
->
fûíame
)<0) {

3264 
	`hdd_îr‹_occuªd
(
c
);

3265 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"dñëe_chunk: fûe:%†- u∆ökÉº‹",
c
->
fûíame
);

3266 
	`hdd_chunk_ªÀa£
(
c
);

3267  
ERROR_IO
;

3269 
	`hdd_chunk_dñëe
(
c
);

3270  
STATUS_OK
;

3281 
	`hdd_chunk›
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àngth
) {

3282 
	`ós£π
(
	`±hªad_muãx_lock
(&
°©¶ock
)==0);

3283 i‡(
√wvîsi⁄
>0) {

3284 i‡(
Àngth
==0xFFFFFFFF) {

3285 i‡(
c›ychunkid
==0) {

3286 
°©s_vîsi⁄
++;

3288 
°©s_du∂iˇã
++;

3290 } i‡(
Àngth
<=
MFSCHUNKSIZE
) {

3291 i‡(
c›ychunkid
==0) {

3292 
°©s_åunˇã
++;

3294 
°©s_du±runc
++;

3298 i‡(
Àngth
==0) {

3299 
°©s_dñëe
++;

3300 } i‡(
Àngth
==1) {

3301 
°©s_¸óã
++;

3302 } i‡(
Àngth
==2) {

3303 
°©s_ã°
++;

3306 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
°©¶ock
)==0);

3307 i‡(
√wvîsi⁄
>0) {

3308 i‡(
Àngth
==0xFFFFFFFF) {

3309 i‡(
c›ychunkid
==0) {

3310  
	`hdd_öt_vîsi⁄
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
);

3312  
	`hdd_öt_du∂iˇã
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
c›ychunkid
,
c›yvîsi⁄
);

3314 } i‡(
Àngth
<=
MFSCHUNKSIZE
) {

3315 i‡(
c›ychunkid
==0) {

3316  
	`hdd_öt_åunˇã
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
Àngth
);

3318  
	`hdd_öt_du±runc
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
c›ychunkid
,
c›yvîsi⁄
,
Àngth
);

3321  
ERROR_EINVAL
;

3324 i‡(
Àngth
==0) {

3325  
	`hdd_öt_dñëe
(
chunkid
,
vîsi⁄
);

3326 } i‡(
Àngth
==1) {

3327  
	`hdd_öt_¸óã
(
chunkid
,
vîsi⁄
);

3328 } i‡(
Àngth
==2) {

3329  
	`hdd_öt_ã°
(
chunkid
,
vîsi⁄
);

3331  
ERROR_EINVAL
;

3336 * 
	`hdd_ã°î_thªad
(* 
¨g
) {

3337 
fﬁdî
 *
f
,*
of
;

3338 
chunk
 *
c
;

3339 
uöt64_t
 
chunkid
;

3340 
uöt32_t
 
vîsi⁄
;

3341 *
∑th
;

3343 
	`¶ìp
(5);

3344 
f
=
fﬁdîhód
;

3345 i‡(
f
==
NULL
) {

3346  
¨g
;

3349 
∑th
=
NULL
;

3350 
chunkid
=0;

3351 
vîsi⁄
=0;

3352 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

3353 
	`±hªad_muãx_lock
(&
hashlock
);

3354 
	`±hªad_muãx_lock
(&
ã°lock
);

3355 
of
 = 
f
;

3357 
f
 = f->
√xt
;

3358 i‡(
f
==
NULL
) {

3359 
f
=
fﬁdîhód
;

3361 } (
f
->
damaged
 || f->
todñ
Ë&& 
of
!=f);

3362 i‡(
of
==
f
 && (f->
damaged
 || f->
todñ
)) {

3363 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

3364 
	`±hªad_muãx_u∆ock
(&
hashlock
);

3365 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

3366  
¨g
;

3368 
c
 = 
f
->
ã°hód
;

3369 i‡(
c
 && c->
°©e
==
CH_AVAIL
) {

3370 
chunkid
 = 
c
->chunkid;

3371 
vîsi⁄
 = 
c
->version;

3372 
∑th
 = 
	`°rdup
(
c
->
fûíame
);

3373 
	`∑s£π
(
∑th
);

3375 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

3376 
	`±hªad_muãx_u∆ock
(&
hashlock
);

3377 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

3378 i‡(
∑th
) {

3379 
	`sy¶og
(
LOG_NOTICE
,"ã°ög chunk: %s",
∑th
);

3380 i‡(
	`hdd_öt_ã°
(
chunkid
,
vîsi⁄
)!=
STATUS_OK
) {

3381 
	`hdd_ªp‹t_damaged_chunk
(
chunkid
);

3383 
	`‰ì
(
∑th
);

3384 
	`¶ìp
(
HDDTe°Fªq
);

3386 
	`¶ìp
(1);

3388 
	`ós£π
(
	`±hªad_muãx_lock
(&
ãrmlock
)==0);

3389 i‡(
ãrm
) {

3390 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3391  
¨g
;

3393 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3395  
¨g
;

3398 
	`hdd_ã°shufÊe
(
fﬁdî
 *
f
) {

3399 
uöt32_t
 
i
,
j
,
chunk¢o
;

3400 
chunk
 **
cs‹âab
,*
c
;

3401 
	`±hªad_muãx_lock
(&
ã°lock
);

3402 
chunk¢o
=0;

3403 
c
=
f
->
ã°hód
 ; c ; c=c->
ã°√xt
) {

3404 
chunk¢o
++;

3406 i‡(
chunk¢o
>0) {

3407 
cs‹âab
 = 
	`mÆloc
((
chunk
*)*
chunk¢o
);

3408 
	`∑s£π
(
cs‹âab
);

3409 
chunk¢o
=0;

3410 
c
=
f
->
ã°hód
 ; c ; c=c->
ã°√xt
) {

3411 
cs‹âab
[
chunk¢o
++]=
c
;

3413 i‡(
chunk¢o
>1) {

3414 
i
=0 ; i<
chunk¢o
-1 ; i++) {

3415 
j
 = 
i
 + 
	`∫du32_ønged
(
chunk¢o
-i);

3416 i‡(
j
!=
i
) {

3417 
c
 = 
cs‹âab
[
i
];

3418 
cs‹âab
[
i
] = cs‹âab[
j
];

3419 
cs‹âab
[
j
] = 
c
;

3424 
cs‹âab
 = 
NULL
;

3426 
f
->
ã°hód
 = 
NULL
;

3427 
f
->
ã°èû
 = &(f->
ã°hód
);

3428 
i
=0 ; i<
chunk¢o
 ; i++) {

3429 
c
=
cs‹âab
[
i
];

3430 
c
->
ã°√xt
 = 
NULL
;

3431 
c
->
ã°¥ev
 = 
f
->
ã°èû
;

3432 *(
c
->
ã°¥ev
) = c;

3433 
f
->
ã°èû
 = &(
c
->
ã°√xt
);

3435 i‡(
cs‹âab
) {

3436 
	`‰ì
(
cs‹âab
);

3438 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

3485 
ölöe
 
	`hdd_check_fûíame
(c⁄° *
‚ame
,
uöt64_t
 *
chunkid
,
uöt32_t
 *
vîsi⁄
) {

3486 
uöt64_t
 
«mechunkid
;

3487 
uöt32_t
 
«mevîsi⁄
;

3488 
ch
;

3489 
uöt32_t
 
i
;

3491 i‡(
	`°∫cmp
(
‚ame
,"chunk_",6)!=0) {

3494 
«mechunkid
 = 0;

3495 
«mevîsi⁄
 = 0;

3496 
i
=6 ; i<22 ; i++) {

3497 
ch
 = 
‚ame
[
i
];

3498 i‡(
ch
>='0' && ch<='9') {

3499 
ch
-='0';

3500 } i‡(
ch
>='A' && ch<='F') {

3501 
ch
-='A'-10;

3505 
«mechunkid
*=16;

3506 
«mechunkid
+=
ch
;

3508 i‡(
‚ame
[22]!='_') {

3511 
i
=23 ; i<31 ; i++) {

3512 
ch
 = 
‚ame
[
i
];

3513 i‡(
ch
>='0' && ch<='9') {

3514 
ch
-='0';

3515 } i‡(
ch
>='A' && ch<='F') {

3516 
ch
-='A'-10;

3520 
«mevîsi⁄
*=16;

3521 
«mevîsi⁄
+=
ch
;

3523 i‡(
	`°rcmp
(
‚ame
+31,".mfs")!=0) {

3526 *
chunkid
 = 
«mechunkid
;

3527 *
vîsi⁄
 = 
«mevîsi⁄
;

3531 
ölöe
 
	`hdd_add_chunk
(
fﬁdî
 *
f
,c⁄° *
fuŒ«me
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

3533 
fﬁdî
 *
¥evf
;

3534 
chunk
 *
c
;

3558 
¥evf
 = 
NULL
;

3559 
c
 = 
	`hdd_chunk_gë
(
chunkid
,
CH_NEW_AUTO
);

3560 i‡(
c
->
fûíame
!=
NULL
) {

3561 i‡(
vîsi⁄
 <
c
->version) {

3562 i‡(
f
->
todñ
<2) {

3563 
	`u∆ök
(
fuŒ«me
);

3566 
	`u∆ök
(
c
->
fûíame
);

3567 
	`‰ì
(
c
->
fûíame
);

3568 
¥evf
 = 
c
->
ow√r
;

3569 
c
->
fûíame
 = 
	`°rdup
(
fuŒ«me
);

3570 
	`∑s£π
(
c
->
fûíame
);

3571 
c
->
vîsi⁄
 = version;

3572 
c
->
blocks
 = 0;

3573 
c
->
ow√r
 = 
f
;

3575 
	`±hªad_muãx_lock
(&
ã°lock
);

3577 *(
c
->
ã°¥ev
Ëc->
ã°√xt
;

3578 i‡(
c
->
ã°√xt
) {

3579 
c
->
ã°√xt
->
ã°¥ev
 = c->testprev;

3581 
¥evf
->
ã°èû
 = 
c
->
ã°¥ev
;

3584 
c
->
ã°¥ev
 = 
f
->
ã°èû
;

3585 *(
c
->
ã°¥ev
) = c;

3586 
f
->
ã°èû
 = &(
c
->
ã°√xt
);

3587 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

3590 
c
->
fûíame
 = 
	`°rdup
(
fuŒ«me
);

3591 
	`∑s£π
(
c
->
fûíame
);

3592 
c
->
vîsi⁄
 = version;

3593 
c
->
blocks
 = 0;

3594 
c
->
ow√r
 = 
f
;

3596 
	`±hªad_muãx_lock
(&
ã°lock
);

3597 
c
->
ã°¥ev
 = 
f
->
ã°èû
;

3598 *(
c
->
ã°¥ev
) = c;

3599 
f
->
ã°èû
 = &(
c
->
ã°√xt
);

3600 
	`±hªad_muãx_u∆ock
(&
ã°lock
);

3602 
	`hdd_chunk_ªÀa£
(
c
);

3603 
	`±hªad_muãx_lock
(&
fﬁdîlock
);

3604 i‡(
¥evf
) {

3605 
¥evf
->
chunkcou¡
--;

3607 
f
->
chunkcou¡
++;

3608 
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
);

3611 * 
	`hdd_fﬁdî_sˇn
(*
¨g
) {

3612 
fﬁdî
 *
f
 = (fﬁdî*)
¨g
;

3613 
DIR
 *
dd
;

3614 
dúít
 *
de
,*
de°‹age
;

3615 
uöt16_t
 
subf
;

3616 *
fuŒ«me
,*
ﬁdfuŒ«me
;

3617 
uöt8_t
 
∂í
,
ﬁd∂í
;

3618 
uöt64_t
 
«mechunkid
;

3619 
uöt32_t
 
«mevîsi⁄
;

3621 
∂í
 = 
	`°æí
(
f
->
∑th
);

3622 
ﬁd∂í
 = 
∂í
;

3625 
de°‹age
 = (
dúít
*)
	`mÆloc
((dúít)+
	`∑thc⁄f
(
f
->
∑th
,
_PC_NAME_MAX
)+1);

3626 
	`∑s£π
(
de°‹age
);

3628 
fuŒ«me
 = 
	`mÆloc
(
∂í
+39);

3629 
	`∑s£π
(
fuŒ«me
);

3631 
	`mem˝y
(
fuŒ«me
,
f
->
∑th
,
∂í
);

3632 
fuŒ«me
[
∂í
]='\0';

3633 i‡(
f
->
todñ
==0) {

3634 
	`mkdú
(
fuŒ«me
,0755);

3637 
fuŒ«me
[
∂í
++]='_';

3638 
fuŒ«me
[
∂í
++]='_';

3639 
fuŒ«me
[
∂í
++]='/';

3640 
fuŒ«me
[
∂í
]='\0';

3642 i‡(
f
->
todñ
==0) {

3643 
subf
=0 ; subf<256 ; subf++) {

3644 
fuŒ«me
[
∂í
-3]="0123456789ABCDEF"[
subf
>>4];

3645 
fuŒ«me
[
∂í
-2]="0123456789ABCDEF"[
subf
&15];

3646 
	`mkdú
(
fuŒ«me
,0755);

3651 
ﬁdfuŒ«me
 = 
	`mÆloc
(
ﬁd∂í
+38);

3652 
	`∑s£π
(
ﬁdfuŒ«me
);

3653 
	`mem˝y
(
ﬁdfuŒ«me
,
f
->
∑th
,
ﬁd∂í
);

3654 
ﬁdfuŒ«me
[
ﬁd∂í
++]='_';

3655 
ﬁdfuŒ«me
[
ﬁd∂í
++]='/';

3656 
ﬁdfuŒ«me
[
ﬁd∂í
]='\0';

3658 
subf
=0 ; subf<16 ; subf++) {

3659 
ﬁdfuŒ«me
[
ﬁd∂í
-2]="0123456789ABCDEF"[
subf
];

3660 
ﬁdfuŒ«me
[
ﬁd∂í
]='\0';

3661 
dd
 = 
	`›ídú
(
ﬁdfuŒ«me
);

3662 i‡(
dd
==
NULL
) {

3665 
	`ªaddú_r
(
dd
,
de°‹age
,&
de
)==0 && de!=
NULL
) {

3666 i‡(
	`hdd_check_fûíame
(
de
->
d_«me
,&
«mechunkid
,&
«mevîsi⁄
)<0) {

3669 
	`mem˝y
(
ﬁdfuŒ«me
+
ﬁd∂í
,
de
->
d_«me
,36);

3670 
	`mem˝y
(
fuŒ«me
+
∂í
,
de
->
d_«me
,36);

3671 
fuŒ«me
[
∂í
-3]="0123456789ABCDEF"[(
«mechunkid
>>4)&15];

3672 
fuŒ«me
[
∂í
-2]="0123456789ABCDEF"[
«mechunkid
&15];

3673 
	`ª«me
(
ﬁdfuŒ«me
,
fuŒ«me
);

3675 
ﬁdfuŒ«me
[
ﬁd∂í
]='\0';

3676 
	`rmdú
(
ﬁdfuŒ«me
);

3677 
	`˛o£dú
(
dd
);

3679 
	`‰ì
(
ﬁdfuŒ«me
);

3684 
subf
=0 ; subf<256 ; subf++) {

3685 
fuŒ«me
[
∂í
-3]="0123456789ABCDEF"[
subf
>>4];

3686 
fuŒ«me
[
∂í
-2]="0123456789ABCDEF"[
subf
&15];

3687 
fuŒ«me
[
∂í
]='\0';

3689 
dd
 = 
	`›ídú
(
fuŒ«me
);

3690 i‡(
dd
) {

3691 
	`ªaddú_r
(
dd
,
de°‹age
,&
de
)==0 && de!=
NULL
) {

3692 i‡(
	`hdd_check_fûíame
(
de
->
d_«me
,&
«mechunkid
,&
«mevîsi⁄
)<0) {

3695 
	`mem˝y
(
fuŒ«me
+
∂í
,
de
->
d_«me
,36);

3696 
	`hdd_add_chunk
(
f
,
fuŒ«me
,
«mechunkid
,
«mevîsi⁄
);

3698 
	`˛o£dú
(
dd
);

3700 
	`ós£π
(
	`±hªad_muãx_lock
(&
fﬁdîlock
)==0);

3701 
sˇ≈rogªss
++;

3702 i‡(
sˇ≈rogªsswaôög
) {

3703 
	`ós£π
(
	`±hªad_c⁄d_sig«l
(&
sˇ≈rogªssc⁄d
)==0);

3704 
sˇ≈rogªsswaôög
=0;

3706 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
)==0);

3708 
	`‰ì
(
fuŒ«me
);

3709 
	`‰ì
(
de°‹age
);

3713  
NULL
;

3716 * 
	`hdd_fﬁdîs_thªad
(*
¨g
) {

3718 
	`¶ìp
(1);

3719 
	`hdd_check_fﬁdîs
();

3720 
	`ós£π
(
	`±hªad_muãx_lock
(&
ãrmlock
)==0);

3721 i‡(
ãrm
) {

3722 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3723  
¨g
;

3725 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3727  
¨g
;

3730 * 
	`hdd_dñayed_thªad
(*
¨g
) {

3732 
	`¶ìp
(
DELAYEDSTEP
);

3733 
	`hdd_dñayed_›s
();

3734 
	`ós£π
(
	`±hªad_muãx_lock
(&
ãrmlock
)==0);

3735 i‡(
ãrm
) {

3736 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3737  
¨g
;

3739 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3741  
¨g
;

3744 #i‚de‡
PRESERVE_BLOCK


3745 #ifde‡
MMAP_ALLOC


3746 
	`hdd_blockbuf„r_‰ì
(*
addr
) {

3747 
	`munm≠
(
addr
,
MFSBLOCKSIZE
);

3752 
	`hdd_ãrm
() {

3753 
uöt32_t
 
i
;

3754 
fﬁdî
 *
f
,*
‚
;

3755 
chunk
 *
c
,*
˙
;

3756 
d›chunk
 *
dc
,*
d˙
;

3757 
˙tc⁄d
 *
cc
,*
c˙
;

3758 
lo°chunk
 *
lc
,*
l˙
;

3759 
damagedchunk
 *
dmc
,*
dm˙
;

3761 
	`ós£π
(
	`±hªad_muãx_lock
(&
ãrmlock
)==0);

3762 
ãrm
=1;

3763 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
ãrmlock
)==0);

3764 
	`ós£π
(
	`±hªad_joö
(
ã°îthªad
,
NULL
)==0);

3765 
	`ós£π
(
	`±hªad_joö
(
fﬁdî°hªad
,
NULL
)==0);

3766 
	`ós£π
(
	`±hªad_joö
(
dñayedthªad
,
NULL
)==0);

3767 
f
=
fﬁdîhód
 ; f ; f = 
‚
) {

3768 
‚
 = 
f
->
√xt
;

3769 
	`‰ì
(
f
->
∑th
);

3770 
	`‰ì
(
f
);

3772 
i
=0 ; i<
HASHSIZE
 ; i++) {

3773 
c
=
hashèb
[
i
] ; c ; c = 
˙
) {

3774 
˙
 = 
c
->
√xt
;

3775 i‡(
c
->
°©e
==
CH_AVAIL
) {

3776 i‡(
c
->
¸cch™ged
) {

3777 
	`sy¶og
(
LOG_WARNING
,"hdd_term: CRCÇot flushed - writingÇow");

3778 i‡(
	`chunk_wrôe¸c
(
c
)!=
STATUS_OK
) {

3779 
	`mfs_¨g_îæog_sûít
(
LOG_WARNING
,"hdd_ãrm: fûe:%†- wrôêîr‹",
c
->
fûíame
);

3782 i‡(
c
->
fd
>=0) {

3783 
	`˛o£
(
c
->
fd
);

3785 i‡(
c
->
¸c
!=
NULL
) {

3786 #ifde‡
MMAP_ALLOC


3787 
	`munm≠
((*)(
c
->
¸c
),4096);

3789 
	`‰ì
(
c
->
¸c
);

3792 #ifde‡
PRESERVE_BLOCK


3793 i‡(
c
->
block
!=
NULL
) {

3794 #ifde‡
MMAP_ALLOC


3795 
	`munm≠
((*)(
c
->
block
),
MFSBLOCKSIZE
);

3797 
	`‰ì
(
c
->
block
);

3801 i‡(
c
->
fûíame
) {

3802 
	`‰ì
(
c
->
fûíame
);

3804 
	`‰ì
(
c
);

3806 
	`sy¶og
(
LOG_WARNING
,"hdd_term:Üocked chunk !!!");

3810 
i
=0 ; i<
DHASHSIZE
 ; i++) {

3811 
dc
=
d›hashèb
[
i
] ; d¯; d¯
d˙
) {

3812 
d˙
 = 
dc
->
√xt
;

3813 
	`‰ì
(
dc
);

3816 
dc
=
√wd›chunks
 ; d¯; d¯
d˙
) {

3817 
d˙
 = 
dc
->
√xt
;

3818 
	`‰ì
(
dc
);

3820 
cc
=
c˛i°
 ; c¯; c¯
c˙
) {

3821 
c˙
 = 
cc
->
√xt
;

3822 i‡(
cc
->
w˙t
) {

3823 
	`sy¶og
(
LOG_WARNING
,"hddspacemgr (atexit): used cond !!!");

3825 
	`±hªad_c⁄d_de°roy
(&(
cc
->
c⁄d
));

3827 
	`‰ì
(
cc
);

3829 
lc
=
lo°chunks
 ;Ü¯;Ü¯
l˙
) {

3830 
l˙
 = 
lc
->
√xt
;

3831 
	`‰ì
(
lc
);

3833 
dmc
=
damagedchunks
 ; dm¯; dm¯
dm˙
) {

3834 
dm˙
 = 
dmc
->
√xt
;

3835 
	`‰ì
(
dmc
);

3839 
	`hdd_öô
() {

3840 
uöt32_t
 
l
,
p
;

3841 
lÂ
,
td
;

3842 
uöt32_t
 
hp
;

3843 
FILE
 *
fd
;

3844 
buff
[1000];

3845 *
µå
;

3846 *
lock‚ame
;

3847 *
hdd‚ame
;

3848 
°©
 
sb
;

3849 
fﬁdî
 *
f
,*
sf
;

3850 
±hªad_©å_t
 
th©å
;

3853 
hp
=0 ; hp<
HASHSIZE
 ; hp++) {

3854 
hashèb
[
hp
]=
NULL
;

3856 
hp
=0 ; hp<
DHASHSIZE
 ; hp++) {

3857 
d›hashèb
[
hp
]=
NULL
;

3860 #i‚de‡
PRESERVE_BLOCK


3861 
	`±hªad_key_¸óã
(&
hdrbuf„rkey
,
‰ì
);

3862 #ifde‡
MMAP_ALLOC


3863 
	`±hªad_key_¸óã
(&
blockbuf„rkey
,
hdd_blockbuf„r_‰ì
);

3865 
	`±hªad_key_¸óã
(&
blockbuf„rkey
,
‰ì
);

3871 
em±yblock¸c
 = 
	`my¸c32_zîoblock
(0,
MFSBLOCKSIZE
);

3873 
hdd‚ame
 = 
	`cfg_gë°r
("HDD_CONF_FILENAME",
ETC_PATH
 "/mfshdd.cfg");

3875 
fd
 = 
	`f›í
(
hdd‚ame
,"r");

3876 i‡(!
fd
) {

3877 
	`‰ì
(
hdd‚ame
);

3880 
	`fgës
(
buff
,999,
fd
)) {

3881 
buff
[999]=0;

3882 i‡(
buff
[0]=='#') {

3885 
l
 = 
	`°æí
(
buff
);

3886 
l
>0 && (
buff
[l-1]=='\r' || buff[l-1]=='\n' || buff[l-1]==' ' || buff[l-1]=='\t')) {

3887 
l
--;

3889 i‡(
l
>0) {

3890 i‡(
buff
[
l
-1]!='/') {

3891 
buff
[
l
]='/';

3892 
buff
[
l
+1]='\0';

3893 
l
++;

3895 
buff
[
l
]='\0';

3897 i‡(
buff
[0]=='*') {

3898 
td
 = 1;

3899 
µå
 = 
buff
+1;

3900 
l
--;

3902 
td
 = 0;

3903 
µå
 = 
buff
;

3905 
lock‚ame
 = (*)
	`mÆloc
(
l
+6);

3906 
	`∑s£π
(
lock‚ame
);

3907 
	`mem˝y
(
lock‚ame
,
µå
,
l
);

3908 
	`mem˝y
(
lock‚ame
+
l
,".lock",6);

3909 
lÂ
=
	`›í
(
lock‚ame
,
O_RDWR
|
O_CREAT
|
O_TRUNC
,0640);

3910 i‡(
lÂ
<0 && 
î∫o
==
EROFS
 && 
td
) {

3911 
	`‰ì
(
lock‚ame
);

3912 
td
 = 2;

3914 i‡(
lÂ
<0) {

3915 
	`mfs_¨g_îæog
(
LOG_ERR
,"hdd s∑˚ m™agî: c™'à¸óãÜock fûê'%s'",
lock‚ame
);

3916 
	`‰ì
(
lock‚ame
);

3917 
	`‰ì
(
hdd‚ame
);

3918 
	`f˛o£
(
fd
);

3921 i‡(
	`lockf
(
lÂ
,
F_TLOCK
,0)<0) {

3922 i‡(
î∫o
==
EAGAIN
) {

3923 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"hdd s∑˚ m™agî: d©®fﬁdî '%s'áÃódyÜocked (u£d byánŸhîÖro˚ss)",
µå
);

3925 
	`mfs_¨g_îæog
(
LOG_NOTICE
,"hdd s∑˚ m™agî:Üock‡'%s'Éº‹",
lock‚ame
);

3927 
	`‰ì
(
lock‚ame
);

3928 
	`‰ì
(
hdd‚ame
);

3929 
	`f˛o£
(
fd
);

3932 i‡(
	`f°©
(
lÂ
,&
sb
)<0) {

3933 
	`mfs_¨g_îæog
(
LOG_NOTICE
,"hdd s∑˚ m™agî: f°© '%s'Éº‹",
lock‚ame
);

3934 
	`‰ì
(
lock‚ame
);

3935 
	`‰ì
(
hdd‚ame
);

3936 
	`f˛o£
(
fd
);

3939 
	`‰ì
(
lock‚ame
);

3940 
sf
=
fﬁdîhód
 ; s‡; sf=sf->
√xt
) {

3941 i‡(
sf
->
devid
==
sb
.
°_dev
) {

3942 i‡(
sf
->
locköode
==
sb
.
°_öo
) {

3943 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"hdd s∑˚ m™agî: d©®fﬁdî '%s'áÃódyÜocked (u£d byánŸhîÖro˚ss)",
µå
);

3944 
	`‰ì
(
hdd‚ame
);

3945 
	`f˛o£
(
fd
);

3948 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"hdd s∑˚ m™agî: d©®fﬁdî†'%s'ánd '%s'áª o¿thêßmêphysiˇ»devi˚ (couldÜódÅÿu√x≥˘ed behaviours)",
µå
,
sf
->
∑th
);

3953 
f
 = (
fﬁdî
*)
	`mÆloc
((folder));

3954 
	`∑s£π
(
f
);

3955 
f
->
todñ
 = 
td
;

3956 
f
->
damaged
 = 0;

3957 
f
->
∑th
 = 
	`°rdup
(
µå
);

3958 
	`∑s£π
(
f
->
∑th
);

3959 
f
->
Àave‰ì
 = 0x10000000;

3960 
f
->
avaû
 = 0ULL;

3961 
f
->
tŸÆ
 = 0ULL;

3962 
f
->
chunkcou¡
 = 0;

3963 
	`hdd_°©s_˛ór
(&(
f
->
c°©
));

3964 
l
=0 ;Ü<
STATSHISTORY
 ;Ü++) {

3965 
	`hdd_°©s_˛ór
(&(
f
->
°©s
[
l
]));

3967 
f
->
°©•os
=0;

3968 
l
=0 ;Ü<
LASTERRSIZE
 ;Ü++) {

3969 
f
->
œ°îπab
[
l
].
chunkid
 = 0ULL;

3970 
f
->
œ°îπab
[
l
].
time°amp
 = 0;

3972 
f
->
œ°îrödx
 = 0;

3973 
f
->
œ°ª‰esh
 = 0;

3974 
f
->
√edª‰esh
 = 1;

3975 
f
->
devid
 = 
sb
.
°_dev
;

3976 
f
->
locköode
 = 
sb
.
°_öo
;

3977 
f
->
ã°hód
 = 
NULL
;

3978 
f
->
ã°èû
 = &(f->
ã°hód
);

3979 
f
->
ˇºy
 = ()(
	`øndom
()&0x7FFFFFFF)/()(0x7FFFFFFF);

3980 
f
->
√xt
 = 
fﬁdîhód
;

3981 
fﬁdîhód
 = 
f
;

3984 
	`f˛o£
(
fd
);

3986 i‡(
fﬁdîhód
==
NULL
) {

3987 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"hdd s∑˚ m™agî:Çÿhdd s∑˚ deföed i¿%†fûe",
hdd‚ame
);

3988 
	`‰ì
(
hdd‚ame
);

3991 
	`‰ì
(
hdd‚ame
);

3993 
	`ós£π
(
	`±hªad_©å_öô
(&
th©å
)==0);

3994 
	`ós£π
(
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000)==0);

3995 
	`ós£π
(
	`±hªad_©å_£tdëach°©e
(&
th©å
,
PTHREAD_CREATE_JOINABLE
)==0);

3997 
sˇ≈rogªss
=0;

3998 
sˇ≈rogªsswaôög
=0;

3999 
l
=0;

4001 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

4002 
l
++;

4003 
	`Ârötf
(
°dîr
,"hdd s∑˚ m™agî: sˇ¬ög fﬁdî %†...\n",
f
->
∑th
);

4004 
	`ós£π
(
	`±hªad_¸óã
(&(
f
->
sˇ¡hªad
),&
th©å
,
hdd_fﬁdî_sˇn
,f)==0);

4007 
l
*=256;

4008 
p
=0;

4009 
	`ós£π
(
	`±hªad_muãx_lock
(&
fﬁdîlock
)==0);

4010 
sˇ≈rogªss
<
l
) {

4011 
sˇ≈rogªsswaôög
=1;

4012 
	`ós£π
(
	`±hªad_c⁄d_waô
(&
sˇ≈rogªssc⁄d
,&
fﬁdîlock
)==0);

4013 i‡((
sˇ≈rogªss
*100/
l
)>
p
) {

4014 
p
 = (
sˇ≈rogªss
*100/
l
);

4015 
	`Ârötf
(
°dîr
,"hdd s∑˚ m™agî: sˇ¬ög... %"
PRIu32
"%%\r",
p
);

4016 
	`fÊush
(
°dîr
);

4019 
	`Ârötf
(
°dîr
,"hdd space manager: scanning complete\n");

4020 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
)==0);

4022 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

4023 
	`ós£π
(
	`±hªad_joö
(
f
->
sˇ¡hªad
,
NULL
)==0);

4024 
	`ós£π
(
	`±hªad_muãx_lock
(&
fﬁdîlock
)==0);

4025 
	`Ârötf
(
°dîr
,"hdd s∑˚ m™agî: %s: %"
PRIu32
" chunk†found\n",
f
->
∑th
,f->
chunkcou¡
);

4026 
	`hdd_ª‰esh_ußge
(
f
);

4027 
f
->
√edª‰esh
 = 0;

4028 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&
fﬁdîlock
)==0);

4031 
	`Ârötf
(
°dîr
,"hdd space manager: scanning complete\n");

4032 
ãrm
=0;

4033 
HDDTe°Fªq
 = 
	`cfg_gëuöt32
("HDD_TEST_FREQ",10);

4034 i‡(
HDDTe°Fªq
>0) {

4035 
f
=
fﬁdîhód
 ; f ; f=f->
√xt
) {

4037 
	`hdd_ã°shufÊe
(
f
);

4039 
	`ós£π
(
	`±hªad_¸óã
(&
ã°îthªad
,&
th©å
,
hdd_ã°î_thªad
,
NULL
)==0);

4041 
	`hdd_check_fﬁdîs
();

4043 
	`ós£π
(
	`±hªad_¸óã
(&
fﬁdî°hªad
,&
th©å
,
hdd_fﬁdîs_thªad
,
NULL
)==0);

4044 
	`ós£π
(
	`±hªad_¸óã
(&
dñayedthªad
,&
th©å
,
hdd_dñayed_thªad
,
NULL
)==0);

4045 
	`ós£π
(
	`±hªad_©å_de°roy
(&
th©å
)==0);

4048 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
hdd_disköfo_move°©s
);

4049 
	`maö_de°ru˘ªgi°î
(
hdd_ãrm
);

	@mfschunkserver/hddspacemgr.h

19 #i‚de‡
_HDDSPACEMGR_H_


20 
	#_HDDSPACEMGR_H_


	)

22 
	~<öây≥s.h
>

24 
	~"MFSCommuniˇti⁄.h
"

26 
hdd_°©s
(
uöt32_t
 *
br
,uöt32_à*
bw
,uöt32_à*
›r
,uöt32_à*
›w
,uöt32_à*
dbr
,uöt32_à*
dbw
,uöt32_à*
d›r
,uöt32_à*
d›w
,
uöt64_t
 *
πime
,uöt64_à*
wtime
);

27 
hdd_›_°©s
(
uöt32_t
 *
›_¸óã
,uöt32_à*
›_dñëe
,uöt32_à*
›_vîsi⁄
,uöt32_à*
›_du∂iˇã
,uöt32_à*
›_åunˇã
,uöt32_à*
›_du±runc
,uöt32_à*
›_ã°
);

28 
uöt32_t
 
hdd_îr‹cou¡î
();

31 
uöt32_t
 
hdd_gë_damaged_chunk_cou¡
();

32 
hdd_gë_damaged_chunk_d©a
(
uöt8_t
 *
buff
);

34 
uöt32_t
 
hdd_gë_lo°_chunk_cou¡
();

35 
hdd_gë_lo°_chunk_d©a
(
uöt8_t
 *
buff
);

37 
uöt32_t
 
hdd_disköfo_v1_size
();

38 
hdd_disköfo_v1_d©a
(
uöt8_t
 *
buff
);

39 
uöt32_t
 
hdd_disköfo_v2_size
();

40 
hdd_disköfo_v2_d©a
(
uöt8_t
 *
buff
);

42 
hdd_gë_chunks_begö
();

43 
hdd_gë_chunks_íd
();

44 
uöt32_t
 
hdd_gë_chunks_√xt_li°_cou¡
();

45 
hdd_gë_chunks_√xt_li°_d©a
(
uöt8_t
 *
buff
);

51 
hdd_•a˚ch™ged
();

52 
hdd_gë_•a˚
(
uöt64_t
 *
u£d•a˚
,uöt64_à*
tŸÆ•a˚
,
uöt32_t
 *
chunkcou¡
,uöt64_à*
tdu£d•a˚
,uöt64_à*
tdtŸÆ•a˚
,uöt32_à*
tdchunkcou¡
);

55 
hdd_›í
(
uöt64_t
 
chunkid
);

56 
hdd_˛o£
(
uöt64_t
 
chunkid
);

57 
hdd_ªad
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 
blocknum
,
uöt8_t
 *
buf„r
,uöt32_à
off£t
,uöt32_à
size
,uöt8_à*
¸cbuff
);

58 
hdd_wrôe
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 
blocknum
,c⁄° 
uöt8_t
 *
buf„r
,uöt32_à
off£t
,uöt32_à
size
,c⁄° uöt8_à*
¸cbuff
);

61 
hdd_check_vîsi⁄
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
);

62 
hdd_gë_blocks
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt16_t
 *
blocks
);

63 
hdd_gë_checksum
(
uöt64_t
 
chunkid
, 
uöt32_t
 
vîsi⁄
, uöt32_à*
checksum
);

64 
hdd_gë_checksum_èb
(
uöt64_t
 
chunkid
, 
uöt32_t
 
vîsi⁄
, 
uöt8_t
 *
checksum_èb
);

76 
hdd_chunk›
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àngth
);

78 
	#hdd_dñëe
(
_chunkid
,
_vîsi⁄
Ë
	`hdd_chunk›
(_chunkid,_vîsi⁄,0,0,0,0)

	)

79 
	#hdd_¸óã
(
_chunkid
,
_vîsi⁄
Ë
	`hdd_chunk›
(_chunkid,_vîsi⁄,0,0,0,1)

	)

80 
	#hdd_ã°
(
_chunkid
,
_vîsi⁄
Ë
	`hdd_chunk›
(_chunkid,_vîsi⁄,0,0,0,2)

	)

81 
	#hdd_vîsi⁄
(
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
Ë(((_√wvîsi⁄)>0)?
	`hdd_chunk›
(_chunkid,_vîsi⁄,_√wvîsi⁄,0,0,0xFFFFFFFF):
ERROR_EINVAL
)

	)

82 
	#hdd_åunˇã
(
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_Àngth
Ë(((_√wvîsi⁄)>0&&(_Àngth)!=0xFFFFFFFF)?
	`hdd_chunk›
(_chunkid,_vîsi⁄,_√wvîsi⁄,0,0,_Àngth):
ERROR_EINVAL
)

	)

83 
	#hdd_du∂iˇã
(
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_c›ychunkid
,
_c›yvîsi⁄
Ë(((_√wvîsi⁄>0)&&(_c›ychunkid)>0)?
	`hdd_chunk›
(_chunkid,_vîsi⁄,_√wvîsi⁄,_c›ychunkid,_c›yvîsi⁄,0xFFFFFFFF):
ERROR_EINVAL
)

	)

84 
	#hdd_du±runc
(
_chunkid
,
_vîsi⁄
,
_√wvîsi⁄
,
_c›ychunkid
,
_c›yvîsi⁄
,
_Àngth
Ë(((_√wvîsi⁄>0)&&(_c›ychunkid)>0&&(_Àngth)!=0xFFFFFFFF)?
	`hdd_chunk›
(_chunkid,_vîsi⁄,_√wvîsi⁄,_c›ychunkid,_c›yvîsi⁄,_Àngth):
ERROR_EINVAL
)

	)

87 
hdd_öô
();

90 
hdd_ã°_show_chunks
();

91 
hdd_ã°_show_›íedchunks
();

	@mfschunkserver/init.h

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

23 
	~"øndom.h
"

24 
	~"hdd•a˚mgr.h
"

25 
	~"ma°îc⁄n.h
"

26 
	~"cs£rv.h
"

27 
	~"ch¨tsd©a.h
"

29 
	#STR_AUX
(
x
Ë#x

	)

30 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

31 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

34 (*
	trun‚
)();

36 
run‚
 
‚
;

37 *
«me
;

38 } 
RunTab
[]={

39 {
∫d_öô
,"random generator"},

40 {
hdd_öô
,"hdd space manager"},

41 {
cs£rv_öô
,"main server module"},

42 {
ma°îc⁄n_öô
,"master connection module"},

43 {
ch¨tsd©a_öô
,"charts module"},

44 {(
run‚
)0,"****"}

45 
	}
};

	@mfschunkserver/masterconn.c

19 
	~"c⁄fig.h
"

21 
	#BGJOBS
 1

	)

22 
	#BGJOBSCNT
 1000

	)

24 
	~<time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/uio.h
>

27 
	~<uni°d.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sy¶og.h
>

32 
	~<î∫o.h
>

33 
	~<öây≥s.h
>

34 
	~<√töë/ö.h
>

36 
	~"MFSCommuniˇti⁄.h
"

37 
	~"d©≠ack.h
"

38 
	~"ma°îc⁄n.h
"

39 
	~"cfg.h
"

40 
	~"maö.h
"

41 
	~"sockës.h
"

42 
	~"hdd•a˚mgr.h
"

43 
	~"¶oggî.h
"

44 
	~"mas£π.h
"

45 #ifde‡
BGJOBS


46 
	~"bgjobs.h
"

48 
	~"cs£rv.h
"

50 
	#MaxPackëSize
 10000

	)

53 íum {
	mFREE
,
	mCONNECTING
,
	mHEADER
,
	mDATA
,
	mKILL
};

55 
	s∑ckë°ru˘
 {

56 
∑ckë°ru˘
 *
	m√xt
;

57 
uöt8_t
 *
	m°¨çå
;

58 
uöt32_t
 
	mbyã¶e·
;

59 
uöt8_t
 *
	m∑ckë
;

60 } 
	t∑ckë°ru˘
;

62 
	sma°îc⁄n
 {

63 
	mmode
;

64 
	msock
;

65 
öt32_t
 
	mpdes˝os
;

66 
uöt32_t
 
	mœ°ªad
,
	mœ°wrôe
;

67 
uöt8_t
 
	mhdrbuff
[8];

68 
∑ckë°ru˘
 
	möpuçackë
;

69 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

70 
uöt32_t
 
	mbödù
;

71 
uöt32_t
 
	mma°îù
;

72 
uöt16_t
 
	mma°îp‹t
;

73 
uöt8_t
 
	mma°îaddrvÆid
;

74 } 
	tma°îc⁄n
;

76 
ma°îc⁄n
 *
	gma°îc⁄nsögÀt⁄
=
NULL
;

77 #ifde‡
BGJOBS


78 *
	gjpoﬁ
;

79 
	gjobfd
;

80 
öt32_t
 
	gjobfdpdes˝os
;

84 
uöt32_t
 
	gBackLogsNumbî
;

85 *
	gMa°îHo°
;

86 *
	gMa°îP‹t
;

87 *
	gBödHo°
;

88 
uöt32_t
 
	gTimeout
;

90 
uöt32_t
 
	g°©s_byãsout
=0;

91 
uöt32_t
 
	g°©s_byãsö
=0;

92 
uöt32_t
 
	g°©s_maxjobs˙t
=0;

94 
FILE
 *
	glogfd
;

96 
	$ma°îc⁄n_°©s
(
uöt32_t
 *
bö
,uöt32_à*
bout
,uöt32_à*
maxjobs˙t
) {

97 *
bö
 = 
°©s_byãsö
;

98 *
bout
 = 
°©s_byãsout
;

99 *
maxjobs˙t
 = 
°©s_maxjobs˙t
;

100 
°©s_byãsö
 = 0;

101 
°©s_byãsout
 = 0;

102 
°©s_maxjobs˙t
 = 0;

103 
	}
}

105 * 
	$ma°îc⁄n_¸óã_dëached_∑ckë
(
uöt32_t
 
ty≥
,uöt32_à
size
) {

106 
∑ckë°ru˘
 *
ouçackë
;

107 
uöt8_t
 *
±r
;

108 
uöt32_t
 
psize
;

110 
ouçackë
 = (
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

111 
	`∑s£π
(
ouçackë
);

112 
psize
 = 
size
+8;

113 
ouçackë
->
∑ckë
 = 
	`mÆloc
(
psize
);

114 
	`∑s£π
(
ouçackë
->
∑ckë
);

115 
ouçackë
->
byã¶e·
 = 
psize
;

116 
±r
 = 
ouçackë
->
∑ckë
;

117 
	`put32bô
(&
±r
,
ty≥
);

118 
	`put32bô
(&
±r
,
size
);

119 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

120 
ouçackë
->
√xt
 = 
NULL
;

121  
ouçackë
;

122 
	}
}

124 
uöt8_t
* 
	$ma°îc⁄n_gë_∑ckë_d©a
(*
∑ckë
) {

125 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

126  
ouçackë
->
∑ckë
+8;

127 
	}
}

129 
	$ma°îc⁄n_dñëe_∑ckë
(*
∑ckë
) {

130 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

131 
	`‰ì
(
ouçackë
->
∑ckë
);

132 
	`‰ì
(
ouçackë
);

133 
	}
}

135 
	$ma°îc⁄n_©èch_∑ckë
(
ma°îc⁄n
 *
ïå
,*
∑ckë
) {

136 
∑ckë°ru˘
 *
ouçackë
 = (∑ckë°ru˘*)
∑ckë
;

137 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

138 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

139 
	}
}

141 
uöt8_t
* 
	$ma°îc⁄n_¸óã_©èched_∑ckë
(
ma°îc⁄n
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

142 
∑ckë°ru˘
 *
ouçackë
;

143 
uöt8_t
 *
±r
;

144 
uöt32_t
 
psize
;

146 
ouçackë
 = (
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

147 
	`∑s£π
(
ouçackë
);

148 
psize
 = 
size
+8;

149 
ouçackë
->
∑ckë
 = 
	`mÆloc
(
psize
);

150 
	`∑s£π
(
ouçackë
->
∑ckë
);

151 
ouçackë
->
byã¶e·
 = 
psize
;

152 
±r
 = 
ouçackë
->
∑ckë
;

153 
	`put32bô
(&
±r
,
ty≥
);

154 
	`put32bô
(&
±r
,
size
);

155 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

156 
ouçackë
->
√xt
 = 
NULL
;

157 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

158 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

159  
±r
;

160 
	}
}

162 
	$ma°îc⁄n_£ndªgi°î
(
ma°îc⁄n
 *
ïå
) {

163 
uöt8_t
 *
buff
;

164 
uöt32_t
 
chunks
,
myù
;

165 
uöt16_t
 
myp‹t
;

166 
uöt64_t
 
u£d•a˚
,
tŸÆ•a˚
;

167 
uöt64_t
 
tdu£d•a˚
,
tdtŸÆ•a˚
;

168 
uöt32_t
 
chunkcou¡
,
tdchunkcou¡
;

170 
myù
 = 
	`cs£rv_gëli°íù
();

171 
myp‹t
 = 
	`cs£rv_gëli°íp‹t
();

172 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_REGISTER
,1+4+4+2+2);

173 
	`put8bô
(&
buff
,50);

174 
	`put16bô
(&
buff
,
VERSMAJ
);

175 
	`put8bô
(&
buff
,
VERSMID
);

176 
	`put8bô
(&
buff
,
VERSMIN
);

177 
	`put32bô
(&
buff
,
myù
);

178 
	`put16bô
(&
buff
,
myp‹t
);

179 
	`put16bô
(&
buff
,
Timeout
);

180 
	`hdd_gë_chunks_begö
();

181 (
chunks
 = 
	`hdd_gë_chunks_√xt_li°_cou¡
())) {

182 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_REGISTER
,1+
chunks
*(8+4));

183 
	`put8bô
(&
buff
,51);

184 
	`hdd_gë_chunks_√xt_li°_d©a
(
buff
);

186 
	`hdd_gë_chunks_íd
();

187 
	`hdd_gë_•a˚
(&
u£d•a˚
,&
tŸÆ•a˚
,&
chunkcou¡
,&
tdu£d•a˚
,&
tdtŸÆ•a˚
,&
tdchunkcou¡
);

188 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_REGISTER
,1+8+8+4+8+8+4);

189 
	`put8bô
(&
buff
,52);

190 
	`put64bô
(&
buff
,
u£d•a˚
);

191 
	`put64bô
(&
buff
,
tŸÆ•a˚
);

192 
	`put32bô
(&
buff
,
chunkcou¡
);

193 
	`put64bô
(&
buff
,
tdu£d•a˚
);

194 
	`put64bô
(&
buff
,
tdtŸÆ•a˚
);

195 
	`put32bô
(&
buff
,
tdchunkcou¡
);

196 
	}
}

282 
	$ma°îc⁄n_check_hdd_ªp‹ts
() {

283 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

284 
uöt32_t
 
îr‹cou¡î
;

285 
uöt32_t
 
chunkcou¡î
;

286 
uöt8_t
 *
buff
;

287 i‡(
ïå
->
mode
==
DATA
 ||É±r->mode==
HEADER
) {

288 i‡(
	`hdd_•a˚ch™ged
()) {

289 
uöt64_t
 
u£d•a˚
,
tŸÆ•a˚
,
tdu£d•a˚
,
tdtŸÆ•a˚
;

290 
uöt32_t
 
chunkcou¡
,
tdchunkcou¡
;

291 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_SPACE
,8+8+4+8+8+4);

292 
	`hdd_gë_•a˚
(&
u£d•a˚
,&
tŸÆ•a˚
,&
chunkcou¡
,&
tdu£d•a˚
,&
tdtŸÆ•a˚
,&
tdchunkcou¡
);

293 
	`put64bô
(&
buff
,
u£d•a˚
);

294 
	`put64bô
(&
buff
,
tŸÆ•a˚
);

295 
	`put32bô
(&
buff
,
chunkcou¡
);

296 
	`put64bô
(&
buff
,
tdu£d•a˚
);

297 
	`put64bô
(&
buff
,
tdtŸÆ•a˚
);

298 
	`put32bô
(&
buff
,
tdchunkcou¡
);

300 
îr‹cou¡î
 = 
	`hdd_îr‹cou¡î
();

301 
îr‹cou¡î
) {

302 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_ERROR_OCCURRED
,0);

303 
îr‹cou¡î
--;

305 
chunkcou¡î
 = 
	`hdd_gë_damaged_chunk_cou¡
();

306 i‡(
chunkcou¡î
) {

307 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_CHUNK_DAMAGED
,8*
chunkcou¡î
);

308 
	`hdd_gë_damaged_chunk_d©a
(
buff
);

310 
	`hdd_gë_damaged_chunk_d©a
(
NULL
);

312 
chunkcou¡î
 = 
	`hdd_gë_lo°_chunk_cou¡
();

313 i‡(
chunkcou¡î
) {

314 
buff
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_CHUNK_LOST
,8*
chunkcou¡î
);

315 
	`hdd_gë_lo°_chunk_d©a
(
buff
);

317 
	`hdd_gë_lo°_chunk_d©a
(
NULL
);

320 
	}
}

322 #ifde‡
BGJOBS


323 
	$ma°îc⁄n_jobföished
(
uöt8_t
 
°©us
,*
∑ckë
) {

324 
uöt8_t
 *
±r
;

325 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

326 i‡(
ïå
->
mode
==
DATA
 ||É±r->mode==
HEADER
) {

327 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

328 
±r
[8]=
°©us
;

329 
	`ma°îc⁄n_©èch_∑ckë
(
ïå
,
∑ckë
);

331 
	`ma°îc⁄n_dñëe_∑ckë
(
∑ckë
);

333 
	}
}

335 
	$ma°îc⁄n_chunk›föished
(
uöt8_t
 
°©us
,*
∑ckë
) {

336 
uöt8_t
 *
±r
;

337 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

338 i‡(
ïå
->
mode
==
DATA
 ||É±r->mode==
HEADER
) {

339 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

340 
±r
[32]=
°©us
;

341 
	`ma°îc⁄n_©èch_∑ckë
(
ïå
,
∑ckë
);

343 
	`ma°îc⁄n_dñëe_∑ckë
(
∑ckë
);

345 
	}
}

347 
	$ma°îc⁄n_ª∂iˇti⁄föished
(
uöt8_t
 
°©us
,*
∑ckë
) {

348 
uöt8_t
 *
±r
;

349 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

351 i‡(
ïå
->
mode
==
DATA
 ||É±r->mode==
HEADER
) {

352 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

353 
±r
[12]=
°©us
;

354 
	`ma°îc⁄n_©èch_∑ckë
(
ïå
,
∑ckë
);

356 
	`ma°îc⁄n_dñëe_∑ckë
(
∑ckë
);

358 
	}
}

360 
	$ma°îc⁄n_unw™ãdjobföished
(
uöt8_t
 
°©us
,*
∑ckë
) {

361 ()
°©us
;

362 
	`ma°îc⁄n_dñëe_∑ckë
(
∑ckë
);

363 
	}
}

367 
	$ma°îc⁄n_¸óã
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

368 
uöt64_t
 
chunkid
;

369 
uöt32_t
 
vîsi⁄
;

370 
uöt8_t
 *
±r
;

371 #ifde‡
BGJOBS


372 *
∑ckë
;

374 
uöt8_t
 
°©us
;

377 i‡(
Àngth
!=8+4) {

378 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_CREATE - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

379 
ïå
->
mode
 = 
KILL
;

382 
chunkid
 = 
	`gë64bô
(&
d©a
);

383 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

384 #ifde‡
BGJOBS


385 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_CREATE
,8+1);

386 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

387 
	`put64bô
(&
±r
,
chunkid
);

388 
	`job_¸óã
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
);

390 
°©us
 = 
	`hdd_¸óã
(
chunkid
,
vîsi⁄
);

391 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_CREATE
,8+1);

392 
	`put64bô
(&
±r
,
chunkid
);

393 
	`put8bô
(&
±r
,
°©us
);

395 
	}
}

397 
	$ma°îc⁄n_dñëe
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

398 
uöt64_t
 
chunkid
;

399 
uöt32_t
 
vîsi⁄
;

400 
uöt8_t
 *
±r
;

401 #ifde‡
BGJOBS


402 *
∑ckë
;

404 
uöt8_t
 
°©us
;

407 i‡(
Àngth
!=8+4) {

408 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_DELETE - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

409 
ïå
->
mode
 = 
KILL
;

412 
chunkid
 = 
	`gë64bô
(&
d©a
);

413 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

414 #ifde‡
BGJOBS


415 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_DELETE
,8+1);

416 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

417 
	`put64bô
(&
±r
,
chunkid
);

418 
	`job_dñëe
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
);

420 
°©us
 = 
	`hdd_dñëe
(
chunkid
,
vîsi⁄
);

421 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_DELETE
,8+1);

422 
	`put64bô
(&
±r
,
chunkid
);

423 
	`put8bô
(&
±r
,
°©us
);

425 
	}
}

427 
	$ma°îc⁄n_£tvîsi⁄
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

428 
uöt64_t
 
chunkid
;

429 
uöt32_t
 
vîsi⁄
;

430 
uöt32_t
 
√wvîsi⁄
;

431 
uöt8_t
 *
±r
;

432 #ifde‡
BGJOBS


433 *
∑ckë
;

435 
uöt8_t
 
°©us
;

438 i‡(
Àngth
!=8+4+4) {

439 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_SET_VERSION - wr⁄g sizê(%"
PRIu32
"/16)",
Àngth
);

440 
ïå
->
mode
 = 
KILL
;

443 
chunkid
 = 
	`gë64bô
(&
d©a
);

444 
√wvîsi⁄
 = 
	`gë32bô
(&
d©a
);

445 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

446 #ifde‡
BGJOBS


447 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_SET_VERSION
,8+1);

448 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

449 
	`put64bô
(&
±r
,
chunkid
);

450 
	`job_vîsi⁄
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
,
√wvîsi⁄
);

452 
°©us
 = 
	`hdd_vîsi⁄
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
);

453 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_SET_VERSION
,8+1);

454 
	`put64bô
(&
±r
,
chunkid
);

455 
	`put8bô
(&
±r
,
°©us
);

457 
	}
}

459 
	$ma°îc⁄n_du∂iˇã
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

460 
uöt64_t
 
chunkid
;

461 
uöt32_t
 
vîsi⁄
;

462 
uöt64_t
 
c›ychunkid
;

463 
uöt32_t
 
c›yvîsi⁄
;

464 
uöt8_t
 *
±r
;

465 #ifde‡
BGJOBS


466 *
∑ckë
;

468 
uöt8_t
 
°©us
;

471 i‡(
Àngth
!=8+4+8+4) {

472 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_DUPLICATE - wr⁄g sizê(%"
PRIu32
"/24)",
Àngth
);

473 
ïå
->
mode
 = 
KILL
;

476 
c›ychunkid
 = 
	`gë64bô
(&
d©a
);

477 
c›yvîsi⁄
 = 
	`gë32bô
(&
d©a
);

478 
chunkid
 = 
	`gë64bô
(&
d©a
);

479 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

480 #ifde‡
BGJOBS


481 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_DUPLICATE
,8+1);

482 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

483 
	`put64bô
(&
±r
,
c›ychunkid
);

484 
	`job_du∂iˇã
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
,vîsi⁄,
c›ychunkid
,
c›yvîsi⁄
);

486 
°©us
 = 
	`hdd_du∂iˇã
(
chunkid
,
vîsi⁄
,vîsi⁄,
c›ychunkid
,
c›yvîsi⁄
);

487 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_DUPLICATE
,8+1);

488 
	`put64bô
(&
±r
,
c›ychunkid
);

489 
	`put8bô
(&
±r
,
°©us
);

491 
	}
}

493 
	$ma°îc⁄n_åunˇã
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

494 
uöt64_t
 
chunkid
;

495 
uöt32_t
 
vîsi⁄
;

496 
uöt32_t
 
Àng
;

497 
uöt32_t
 
√wvîsi⁄
;

498 
uöt8_t
 *
±r
;

499 #ifde‡
BGJOBS


500 *
∑ckë
;

502 
uöt8_t
 
°©us
;

505 i‡(
Àngth
!=8+4+4+4) {

506 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_TRUNCATE - wr⁄g sizê(%"
PRIu32
"/20)",
Àngth
);

507 
ïå
->
mode
 = 
KILL
;

510 
chunkid
 = 
	`gë64bô
(&
d©a
);

511 
Àng
 = 
	`gë32bô
(&
d©a
);

512 
√wvîsi⁄
 = 
	`gë32bô
(&
d©a
);

513 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

514 #ifde‡
BGJOBS


515 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_TRUNCATE
,8+1);

516 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

517 
	`put64bô
(&
±r
,
chunkid
);

518 
	`job_åunˇã
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
Àng
);

520 
°©us
 = 
	`hdd_åunˇã
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
Àng
);

521 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_TRUNCATE
,8+1);

522 
	`put64bô
(&
±r
,
chunkid
);

523 
	`put8bô
(&
±r
,
°©us
);

525 
	}
}

527 
	$ma°îc⁄n_du±runc
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

528 
uöt64_t
 
chunkid
;

529 
uöt32_t
 
vîsi⁄
;

530 
uöt64_t
 
c›ychunkid
;

531 
uöt32_t
 
c›yvîsi⁄
;

532 
uöt32_t
 
Àng
;

533 
uöt8_t
 *
±r
;

534 #ifde‡
BGJOBS


535 *
∑ckë
;

537 
uöt8_t
 
°©us
;

540 i‡(
Àngth
!=8+4+8+4+4) {

541 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_DUPTRUNC - wr⁄g sizê(%"
PRIu32
"/28)",
Àngth
);

542 
ïå
->
mode
 = 
KILL
;

545 
c›ychunkid
 = 
	`gë64bô
(&
d©a
);

546 
c›yvîsi⁄
 = 
	`gë32bô
(&
d©a
);

547 
chunkid
 = 
	`gë64bô
(&
d©a
);

548 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

549 
Àng
 = 
	`gë32bô
(&
d©a
);

550 #ifde‡
BGJOBS


551 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_DUPTRUNC
,8+1);

552 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

553 
	`put64bô
(&
±r
,
c›ychunkid
);

554 
	`job_du±runc
(
jpoﬁ
,
ma°îc⁄n_jobföished
,
∑ckë
,
chunkid
,
vîsi⁄
,vîsi⁄,
c›ychunkid
,
c›yvîsi⁄
,
Àng
);

556 
°©us
 = 
	`hdd_du±runc
(
chunkid
,
vîsi⁄
,vîsi⁄,
c›ychunkid
,
c›yvîsi⁄
,
Àng
);

557 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_DUPTRUNC
,8+1);

558 
	`put64bô
(&
±r
,
c›ychunkid
);

559 
	`put8bô
(&
±r
,
°©us
);

561 
	}
}

563 
	$ma°îc⁄n_chunk›
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

564 
uöt64_t
 
chunkid
;

565 
uöt32_t
 
vîsi⁄
,
√wvîsi⁄
;

566 
uöt64_t
 
c›ychunkid
;

567 
uöt32_t
 
c›yvîsi⁄
;

568 
uöt32_t
 
Àng
;

569 
uöt8_t
 *
±r
;

570 #ifde‡
BGJOBS


571 *
∑ckë
;

573 
uöt8_t
 
°©us
;

576 i‡(
Àngth
!=8+4+8+4+4+4) {

577 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_CHUNKOP - wr⁄g sizê(%"
PRIu32
"/32)",
Àngth
);

578 
ïå
->
mode
 = 
KILL
;

581 
chunkid
 = 
	`gë64bô
(&
d©a
);

582 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

583 
√wvîsi⁄
 = 
	`gë32bô
(&
d©a
);

584 
c›ychunkid
 = 
	`gë64bô
(&
d©a
);

585 
c›yvîsi⁄
 = 
	`gë32bô
(&
d©a
);

586 
Àng
 = 
	`gë32bô
(&
d©a
);

587 #ifde‡
BGJOBS


588 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_CHUNKOP
,8+4+4+8+4+4+1);

589 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

590 
	`put64bô
(&
±r
,
chunkid
);

591 
	`put32bô
(&
±r
,
vîsi⁄
);

592 
	`put32bô
(&
±r
,
√wvîsi⁄
);

593 
	`put64bô
(&
±r
,
c›ychunkid
);

594 
	`put32bô
(&
±r
,
c›yvîsi⁄
);

595 
	`put32bô
(&
±r
,
Àng
);

596 
	`job_chunk›
(
jpoﬁ
,
ma°îc⁄n_chunk›föished
,
∑ckë
,
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
c›ychunkid
,
c›yvîsi⁄
,
Àng
);

598 
°©us
 = 
	`hdd_chunk›
(
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
c›ychunkid
,
c›yvîsi⁄
,
Àng
);

599 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_CHUNKOP
,8+4+4+8+4+4+1);

600 
	`put64bô
(&
±r
,
chunkid
);

601 
	`put32bô
(&
±r
,
vîsi⁄
);

602 
	`put32bô
(&
±r
,
√wvîsi⁄
);

603 
	`put64bô
(&
±r
,
c›ychunkid
);

604 
	`put32bô
(&
±r
,
c›yvîsi⁄
);

605 
	`put32bô
(&
±r
,
Àng
);

606 
	`put8bô
(&
±r
,
°©us
);

608 
	}
}

610 #ifde‡
BGJOBS


611 
	$ma°îc⁄n_ª∂iˇã
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

612 
uöt64_t
 
chunkid
;

613 
uöt32_t
 
vîsi⁄
;

614 
uöt32_t
 
ù
;

615 
uöt16_t
 
p‹t
;

616 
uöt8_t
 *
±r
;

617 *
∑ckë
;

619 i‡(
Àngth
!=8+4+4+2 && (length<12+18 ||Üength>12+18*100 || (length-12)%18!=0)) {

620 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_REPLICATE - wr⁄g sizê(%"
PRIu32
"/18|12+n*18[n:1..100])",
Àngth
);

621 
ïå
->
mode
 = 
KILL
;

624 
chunkid
 = 
	`gë64bô
(&
d©a
);

625 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

626 
∑ckë
 = 
	`ma°îc⁄n_¸óã_dëached_∑ckë
(
CSTOMA_REPLICATE
,8+4+1);

627 
±r
 = 
	`ma°îc⁄n_gë_∑ckë_d©a
(
∑ckë
);

628 
	`put64bô
(&
±r
,
chunkid
);

629 
	`put32bô
(&
±r
,
vîsi⁄
);

630 i‡(
Àngth
==8+4+4+2) {

631 
ù
 = 
	`gë32bô
(&
d©a
);

632 
p‹t
 = 
	`gë16bô
(&
d©a
);

634 
	`job_ª∂iˇã_sim∂e
(
jpoﬁ
,
ma°îc⁄n_ª∂iˇti⁄föished
,
∑ckë
,
chunkid
,
vîsi⁄
,
ù
,
p‹t
);

636 
	`job_ª∂iˇã
(
jpoﬁ
,
ma°îc⁄n_ª∂iˇti⁄föished
,
∑ckë
,
chunkid
,
vîsi⁄
,(
Àngth
-12)/18,
d©a
);

638 
	}
}

642 
	$ma°îc⁄n_ª∂iˇã
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

643 
uöt64_t
 
chunkid
;

644 
uöt32_t
 
vîsi⁄
;

647 
uöt8_t
 *
±r
;

649 
	`sy¶og
(
LOG_WARNING
,"This version of chunkserver canÖerformÑeplication only in background, but was compiled without bgjobs");

651 i‡(
Àngth
!=8+4+4+2) {

652 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_REPLICATE - wr⁄g sizê(%"
PRIu32
"/18)",
Àngth
);

653 
ïå
->
mode
 = 
KILL
;

656 
chunkid
 = 
	`gë64bô
(&
d©a
);

657 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

661 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOMA_REPLICATE
,8+4+1);

662 
	`put64bô
(&
±r
,
chunkid
);

663 
	`put32bô
(&
±r
,
vîsi⁄
);

664 
	`put8bô
(&
±r
,
ERROR_CANTCONNECT
);

665 
	}
}

668 
	$ma°îc⁄n_°ru˘uª_log
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

669 i‡(
Àngth
<5) {

670 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_STRUCTURE_LOG - wr⁄g sizê(%"
PRIu32
"/4+d©a)",
Àngth
);

671 
ïå
->
mode
 = 
KILL
;

674 i‡(
d©a
[0]==0xFF && 
Àngth
<10) {

675 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_STRUCTURE_LOG - wr⁄g sizê(%"
PRIu32
"/9+d©a)",
Àngth
);

676 
ïå
->
mode
 = 
KILL
;

679 i‡(
d©a
[
Àngth
-1]!='\0') {

680 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_STRUCTURE_LOG - invalid string");

681 
ïå
->
mode
 = 
KILL
;

685 i‡(
logfd
==
NULL
) {

686 
logfd
 = 
	`f›í
("changelog_csback.0.mfs","a");

689 i‡(
d©a
[0]==0xFF) {

690 
uöt64_t
 
vîsi⁄
;

691 
d©a
++;

692 
vîsi⁄
 = 
	`gë64bô
(&
d©a
);

693 i‡(
logfd
) {

694 
	`Ârötf
(
logfd
,"%"
PRIu64
": %s\n",
vîsi⁄
,
d©a
);

696 
	`sy¶og
(
LOG_NOTICE
,"lo° MFS ch™gê%"
PRIu64
": %s",
vîsi⁄
,
d©a
);

699 
uöt32_t
 
vîsi⁄
;

700 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

701 i‡(
logfd
) {

702 
	`Ârötf
(
logfd
,"%"
PRIu32
": %s\n",
vîsi⁄
,
d©a
);

704 
	`sy¶og
(
LOG_NOTICE
,"lo° MFS ch™gê%"
PRIu32
": %s",
vîsi⁄
,
d©a
);

708 
	}
}

710 
	$ma°îc⁄n_°ru˘uª_log_rŸ©e
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

711 
log«me1
[100],
log«me2
[100];

712 
uöt32_t
 
i
;

713 ()
d©a
;

714 i‡(
Àngth
!=0) {

715 
	`sy¶og
(
LOG_NOTICE
,"MATOCS_STRUCTURE_LOG_ROTATE - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

716 
ïå
->
mode
 = 
KILL
;

719 i‡(
logfd
!=
NULL
) {

720 
	`f˛o£
(
logfd
);

721 
logfd
=
NULL
;

723 i‡(
BackLogsNumbî
>0) {

724 
i
=
BackLogsNumbî
 ; i>0 ; i--) {

725 
	`¢¥ötf
(
log«me1
,100,"ch™gñog_csback.%"
PRIu32
".mfs",
i
);

726 
	`¢¥ötf
(
log«me2
,100,"ch™gñog_csback.%"
PRIu32
".mfs",
i
-1);

727 
	`ª«me
(
log«me2
,
log«me1
);

730 
	`u∆ök
("changelog_csback.0.mfs");

732 
	}
}

735 
	$ma°îc⁄n_chunk_checksum
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

736 
uöt64_t
 
chunkid
;

737 
uöt32_t
 
vîsi⁄
;

738 
uöt8_t
 *
±r
;

739 
uöt8_t
 
°©us
;

740 
uöt32_t
 
checksum
;

742 i‡(
Àngth
!=8+4) {

743 
	`sy¶og
(
LOG_NOTICE
,"ANTOCS_CHUNK_CHECKSUM - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

744 
ïå
->
mode
 = 
KILL
;

747 
chunkid
 = 
	`gë64bô
(&
d©a
);

748 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

749 
°©us
 = 
	`hdd_gë_checksum
(
chunkid
,
vîsi⁄
,&
checksum
);

750 i‡(
°©us
!=
STATUS_OK
) {

751 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM
,8+4+1);

753 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM
,8+4+4);

755 
	`put64bô
(&
±r
,
chunkid
);

756 
	`put32bô
(&
±r
,
vîsi⁄
);

757 i‡(
°©us
!=
STATUS_OK
) {

758 
	`put8bô
(&
±r
,
°©us
);

760 
	`put32bô
(&
±r
,
checksum
);

762 
	}
}

764 
	$ma°îc⁄n_chunk_checksum_èb
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

765 
uöt64_t
 
chunkid
;

766 
uöt32_t
 
vîsi⁄
;

767 
uöt8_t
 *
±r
;

768 
uöt8_t
 
°©us
;

769 
uöt8_t
 
¸˘ab
[4096];

771 i‡(
Àngth
!=8+4) {

772 
	`sy¶og
(
LOG_NOTICE
,"ANTOCS_CHUNK_CHECKSUM_TAB - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

773 
ïå
->
mode
 = 
KILL
;

776 
chunkid
 = 
	`gë64bô
(&
d©a
);

777 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

778 
°©us
 = 
	`hdd_gë_checksum_èb
(
chunkid
,
vîsi⁄
,
¸˘ab
);

779 i‡(
°©us
!=
STATUS_OK
) {

780 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM_TAB
,8+4+1);

782 
±r
 = 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
CSTOAN_CHUNK_CHECKSUM_TAB
,8+4+4096);

784 
	`put64bô
(&
±r
,
chunkid
);

785 
	`put32bô
(&
±r
,
vîsi⁄
);

786 i‡(
°©us
!=
STATUS_OK
) {

787 
	`put8bô
(&
±r
,
°©us
);

789 
	`mem˝y
(
±r
,
¸˘ab
,4096);

791 
	}
}

793 
	$ma°îc⁄n_gŸ∑ckë
(
ma°îc⁄n
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

794 
ty≥
) {

795 
ANTOAN_NOP
:

797 
MATOCS_CREATE
:

798 
	`ma°îc⁄n_¸óã
(
ïå
,
d©a
,
Àngth
);

800 
MATOCS_DELETE
:

801 
	`ma°îc⁄n_dñëe
(
ïå
,
d©a
,
Àngth
);

803 
MATOCS_SET_VERSION
:

804 
	`ma°îc⁄n_£tvîsi⁄
(
ïå
,
d©a
,
Àngth
);

806 
MATOCS_DUPLICATE
:

807 
	`ma°îc⁄n_du∂iˇã
(
ïå
,
d©a
,
Àngth
);

809 
MATOCS_REPLICATE
:

810 
	`ma°îc⁄n_ª∂iˇã
(
ïå
,
d©a
,
Àngth
);

812 
MATOCS_CHUNKOP
:

813 
	`ma°îc⁄n_chunk›
(
ïå
,
d©a
,
Àngth
);

815 
MATOCS_TRUNCATE
:

816 
	`ma°îc⁄n_åunˇã
(
ïå
,
d©a
,
Àngth
);

818 
MATOCS_DUPTRUNC
:

819 
	`ma°îc⁄n_du±runc
(
ïå
,
d©a
,
Àngth
);

821 
MATOCS_STRUCTURE_LOG
:

822 
	`ma°îc⁄n_°ru˘uª_log
(
ïå
,
d©a
,
Àngth
);

824 
MATOCS_STRUCTURE_LOG_ROTATE
:

825 
	`ma°îc⁄n_°ru˘uª_log_rŸ©e
(
ïå
,
d©a
,
Àngth
);

827 
ANTOCS_CHUNK_CHECKSUM
:

828 
	`ma°îc⁄n_chunk_checksum
(
ïå
,
d©a
,
Àngth
);

830 
ANTOCS_CHUNK_CHECKSUM_TAB
:

831 
	`ma°îc⁄n_chunk_checksum_èb
(
ïå
,
d©a
,
Àngth
);

834 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

835 
ïå
->
mode
 = 
KILL
;

837 
	}
}

840 
	$ma°îc⁄n_ãrm
() {

841 
∑ckë°ru˘
 *
µå
,*
∑±r
;

843 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

845 i‡(
ïå
->
mode
!=
FREE
 &&É±r->mode!=
CONNECTING
) {

846 
	`t˝˛o£
(
ïå
->
sock
);

848 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

849 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

851 
µå
 = 
ïå
->
ouçuthód
;

852 
µå
) {

853 i‡(
µå
->
∑ckë
) {

854 
	`‰ì
(
µå
->
∑ckë
);

856 
∑±r
 = 
µå
;

857 
µå
 =Ö±r->
√xt
;

858 
	`‰ì
(
∑±r
);

862 
	`‰ì
(
ïå
);

863 
	`job_poﬁ_dñëe
(
jpoﬁ
);

864 
ma°îc⁄nsögÀt⁄
 = 
NULL
;

865 
	`‰ì
(
Ma°îHo°
);

866 
	`‰ì
(
Ma°îP‹t
);

867 
	`‰ì
(
BödHo°
);

868 
	}
}

870 
	$ma°îc⁄n_c⁄√˘ed
(
ma°îc⁄n
 *
ïå
) {

871 
	`t˝nodñay
(
ïå
->
sock
);

872 
ïå
->
mode
=
HEADER
;

873 
ïå
->
öpuçackë
.
√xt
 = 
NULL
;

874 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

875 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

876 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

877 
ïå
->
ouçuthód
 = 
NULL
;

878 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

880 
	`ma°îc⁄n_£ndªgi°î
(
ïå
);

881 
ïå
->
œ°ªad
 =É±r->
œ°wrôe
 = 
	`maö_time
();

882 
	}
}

884 
	$ma°îc⁄n_öôc⁄√˘
(
ma°îc⁄n
 *
ïå
) {

885 
°©us
;

886 i‡(
ïå
->
ma°îaddrvÆid
==0) {

887 
uöt32_t
 
mù
,
bù
;

888 
uöt16_t
 
mp‹t
;

889 i‡(
	`t˝ªsﬁve
(
BödHo°
,
NULL
,&
bù
,NULL,1)>=0) {

890 
ïå
->
bödù
 = 
bù
;

892 
ïå
->
bödù
 = 0;

894 i‡(
	`t˝ªsﬁve
(
Ma°îHo°
,
Ma°îP‹t
,&
mù
,&
mp‹t
,0)>=0) {

895 i‡((
mù
&0xFF000000)!=0x7F000000) {

896 
ïå
->
ma°îù
 = 
mù
;

897 
ïå
->
ma°îp‹t
 = 
mp‹t
;

898 
ïå
->
ma°îaddrvÆid
 = 1;

900 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"ma°î c⁄√˘i⁄ moduÀ:Üoˇlho° (%u.%u.%u.%uËˇn'àbêu£d f‹ c⁄√˘ög wôh ma°î (u£ i∞addªs†o‡√tw‹k c⁄åﬁÀr)",(
mù
>>24)&0xFF,(mip>>16)&0xFF,(mip>>8)&0xFF,mip&0xFF);

904 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"ma°î c⁄√˘i⁄ moduÀ: c™'àªsﬁvêma°î ho°/p‹à(%s:%s)",
Ma°îHo°
,
Ma°îP‹t
);

908 
ïå
->
sock
=
	`t˝sockë
();

909 i‡(
ïå
->
sock
<0) {

910 
	`mfs_îæog
(
LOG_WARNING
,"master connection module: create socketÉrror");

913 i‡(
	`t˝n⁄block
(
ïå
->
sock
)<0) {

914 
	`mfs_îæog
(
LOG_WARNING
,"master connection module: setÇonblockÉrror");

915 
	`t˝˛o£
(
ïå
->
sock
);

916 
ïå
->
sock
 = -1;

919 i‡(
ïå
->
bödù
>0) {

920 i‡(
	`t˝numböd
(
ïå
->
sock
,ïå->
bödù
,0)<0) {

921 
	`mfs_îæog
(
LOG_WARNING
,"master connection module: can't bind socketÅo given ip");

922 
	`t˝˛o£
(
ïå
->
sock
);

923 
ïå
->
sock
 = -1;

927 
°©us
 = 
	`t˝numc⁄√˘
(
ïå
->
sock
,ïå->
ma°îù
,ïå->
ma°îp‹t
);

928 i‡(
°©us
<0) {

929 
	`mfs_îæog
(
LOG_WARNING
,"master connection module: connect failed");

930 
	`t˝˛o£
(
ïå
->
sock
);

931 
ïå
->
sock
 = -1;

932 
ïå
->
ma°îaddrvÆid
 = 0;

935 i‡(
°©us
==0) {

936 
	`sy¶og
(
LOG_NOTICE
,"connectedÅo Master immediately");

937 
	`ma°îc⁄n_c⁄√˘ed
(
ïå
);

939 
ïå
->
mode
 = 
CONNECTING
;

940 
	`sy¶og
(
LOG_NOTICE
,"connecting ...");

943 
	}
}

945 
	$ma°îc⁄n_c⁄√˘ã°
(
ma°îc⁄n
 *
ïå
) {

946 
°©us
;

948 
°©us
 = 
	`t˝gë°©us
(
ïå
->
sock
);

949 i‡(
°©us
) {

950 
	`mfs_îæog_sûít
(
LOG_WARNING
,"connection failed,Érror");

951 
	`t˝˛o£
(
ïå
->
sock
);

952 
ïå
->
sock
 = -1;

953 
ïå
->
mode
 = 
FREE
;

954 
ïå
->
ma°îaddrvÆid
 = 0;

956 
	`sy¶og
(
LOG_NOTICE
,"connectedÅo Master");

957 
	`ma°îc⁄n_c⁄√˘ed
(
ïå
);

959 
	}
}

961 
	$ma°îc⁄n_ªad
(
ma°îc⁄n
 *
ïå
) {

962 
öt32_t
 
i
;

963 
uöt32_t
 
ty≥
,
size
;

964 c⁄° 
uöt8_t
 *
±r
;

966 #ifde‡
BGJOBS


967 i‡(
	`job_poﬁ_jobs_cou¡
(
jpoﬁ
)>=(
BGJOBSCNT
*9)/10) {

971 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

972 i‡(
i
==0) {

973 
	`sy¶og
(
LOG_NOTICE
,"connectionÑeset by Master");

974 
ïå
->
mode
 = 
KILL
;

977 i‡(
i
<0) {

978 i‡(
î∫o
!=
EAGAIN
) {

979 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"read from MasterÉrror");

980 
ïå
->
mode
 = 
KILL
;

984 
°©s_byãsö
+=
i
;

985 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

986 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

988 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

992 i‡(
ïå
->
mode
==
HEADER
) {

993 
±r
 = 
ïå
->
hdrbuff
+4;

994 
size
 = 
	`gë32bô
(&
±r
);

996 i‡(
size
>0) {

997 i‡(
size
>
MaxPackëSize
) {

998 
	`sy¶og
(
LOG_WARNING
,"Ma°îÖackëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

999 
ïå
->
mode
 = 
KILL
;

1002 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

1003 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

1004 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

1005 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

1006 
ïå
->
mode
 = 
DATA
;

1009 
ïå
->
mode
 = 
DATA
;

1012 i‡(
ïå
->
mode
==
DATA
) {

1013 
±r
 = 
ïå
->
hdrbuff
;

1014 
ty≥
 = 
	`gë32bô
(&
±r
);

1015 
size
 = 
	`gë32bô
(&
±r
);

1017 
ïå
->
mode
=
HEADER
;

1018 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1019 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1021 
	`ma°îc⁄n_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

1023 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1024 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1026 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1029 
	}
}

1031 
	$ma°îc⁄n_wrôe
(
ma°îc⁄n
 *
ïå
) {

1032 
∑ckë°ru˘
 *
∑ck
;

1033 
öt32_t
 
i
;

1035 
∑ck
 = 
ïå
->
ouçuthód
;

1036 i‡(
∑ck
==
NULL
) {

1039 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

1040 i‡(
i
<0) {

1041 i‡(
î∫o
!=
EAGAIN
) {

1042 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"writeÅo MasterÉrror");

1043 
ïå
->
mode
 = 
KILL
;

1047 
°©s_byãsout
+=
i
;

1048 
∑ck
->
°¨çå
+=
i
;

1049 
∑ck
->
byã¶e·
-=
i
;

1050 i‡(
∑ck
->
byã¶e·
>0) {

1053 
	`‰ì
(
∑ck
->
∑ckë
);

1054 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

1055 i‡(
ïå
->
ouçuthód
==
NULL
) {

1056 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

1058 
	`‰ì
(
∑ck
);

1060 
	}
}

1063 
	$ma°îc⁄n_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

1064 
uöt32_t
 
pos
 = *
ndesc
;

1065 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

1067 
ïå
->
pdes˝os
 = -1;

1068 
jobfdpdes˝os
 = -1;

1070 i‡(
ïå
->
mode
==
FREE
 ||É±r->
sock
<0) {

1073 i‡(
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
) {

1074 #ifde‡
BGJOBS


1075 
pdesc
[
pos
].
fd
 = 
jobfd
;

1076 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1077 
jobfdpdes˝os
 = 
pos
;

1078 
pos
++;

1081 i‡(
	`job_poﬁ_jobs_cou¡
(
jpoﬁ
)<(
BGJOBSCNT
*9)/10) {

1082 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1083 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1084 
ïå
->
pdes˝os
 = 
pos
;

1085 
pos
++;

1092 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1093 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1094 
ïå
->
pdes˝os
 = 
pos
;

1095 
pos
++;

1100 i‡(((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
ouçuthód
!=
NULL
Ë||É±r->mode==
CONNECTING
) {

1101 i‡(
ïå
->
pdes˝os
>=0) {

1102 
pdesc
[
ïå
->
pdes˝os
].
evíts
 |
POLLOUT
;

1104 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1105 
pdesc
[
pos
].
evíts
 = 
POLLOUT
;

1106 
ïå
->
pdes˝os
 = 
pos
;

1107 
pos
++;

1118 *
ndesc
 = 
pos
;

1120 
	}
}

1122 
	$ma°îc⁄n_£rve
(
pﬁlfd
 *
pdesc
) {

1123 
uöt32_t
 
now
=
	`maö_time
();

1124 
∑ckë°ru˘
 *
µå
,*
∑±r
;

1125 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

1127 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & (
POLLHUP
 | 
POLLERR
))) {

1128 i‡(
ïå
->
mode
==
CONNECTING
) {

1129 
	`ma°îc⁄n_c⁄√˘ã°
(
ïå
);

1131 
ïå
->
mode
 = 
KILL
;

1134 i‡(
ïå
->
mode
==
CONNECTING
) {

1135 i‡(
ïå
->
sock
>=0 &&É±r->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLOUT
)) {

1136 
	`ma°îc⁄n_c⁄√˘ã°
(
ïå
);

1139 #ifde‡
BGJOBS


1140 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&& 
jobfdpdes˝os
>=0 && (
pdesc
[jobfdpdes˝os].
ªvíts
 & 
POLLIN
)) {

1141 
	`job_poﬁ_check_jobs
(
jpoﬁ
);

1144 i‡(
ïå
->
pdes˝os
>=0) {

1145 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&& (
pdesc
[ïå->
pdes˝os
].
ªvíts
 & 
POLLIN
)) {

1146 
ïå
->
œ°ªad
 = 
now
;

1147 
	`ma°îc⁄n_ªad
(
ïå
);

1149 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&& (
pdesc
[ïå->
pdes˝os
].
ªvíts
 & 
POLLOUT
)) {

1150 
ïå
->
œ°wrôe
 = 
now
;

1151 
	`ma°îc⁄n_wrôe
(
ïå
);

1153 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
œ°ªad
+
Timeout
<
now
) {

1154 
ïå
->
mode
 = 
KILL
;

1156 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
œ°wrôe
+(
Timeout
/3)<
now
 &&É±r->
ouçuthód
==
NULL
) {

1157 
	`ma°îc⁄n_¸óã_©èched_∑ckë
(
ïå
,
ANTOAN_NOP
,0);

1161 #ifde‡
BGJOBS


1162 i‡(
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
) {

1163 
uöt32_t
 
jobs˙t
 = 
	`job_poﬁ_jobs_cou¡
(
jpoﬁ
);

1164 i‡(
jobs˙t
>=
°©s_maxjobs˙t
) {

1165 
°©s_maxjobs˙t
=
jobs˙t
;

1169 i‡(
ïå
->
mode
 =
KILL
) {

1170 #ifde‡
BGJOBS


1171 
	`job_poﬁ_dißbÀ_™d_ch™ge_ˇŒback_Æl
(
jpoﬁ
,
ma°îc⁄n_unw™ãdjobföished
);

1173 
	`t˝˛o£
(
ïå
->
sock
);

1174 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1175 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1177 
µå
 = 
ïå
->
ouçuthód
;

1178 
µå
) {

1179 i‡(
µå
->
∑ckë
) {

1180 
	`‰ì
(
µå
->
∑ckë
);

1182 
∑±r
 = 
µå
;

1183 
µå
 =Ö±r->
√xt
;

1184 
	`‰ì
(
∑±r
);

1186 
ïå
->
mode
 = 
FREE
;

1188 
	}
}

1190 
	$ma°îc⁄n_ªc⁄√˘
() {

1191 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

1192 i‡(
ïå
->
mode
==
FREE
) {

1193 
	`ma°îc⁄n_öôc⁄√˘
(
ïå
);

1195 
	}
}

1197 
	$ma°îc⁄n_ªlﬂd
() {

1198 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

1199 
ïå
->
ma°îaddrvÆid
 = 0;

1200 i‡(
ïå
->
mode
!=
FREE
) {

1201 
ïå
->
mode
 = 
KILL
;

1203 
	}
}

1205 
	$ma°îc⁄n_öô
() {

1206 
uöt32_t
 
Rec⁄√˘i⁄Dñay
;

1207 
ma°îc⁄n
 *
ïå
;

1209 
Rec⁄√˘i⁄Dñay
 = 
	`cfg_gëuöt32
("MASTER_RECONNECTION_DELAY",5);

1210 
Ma°îHo°
 = 
	`cfg_gë°r
("MASTER_HOST","mfsmaster");

1211 
Ma°îP‹t
 = 
	`cfg_gë°r
("MASTER_PORT","9420");

1212 
BödHo°
 = 
	`cfg_gë°r
("BIND_HOST","*");

1213 
Timeout
 = 
	`cfg_gëuöt32
("MASTER_TIMEOUT",60);

1214 
BackLogsNumbî
 = 
	`cfg_gëuöt32
("BACK_LOGS",50);

1216 i‡(
Timeout
>65536) {

1217 
Timeout
=65535;

1219 i‡(
Timeout
<10) {

1220 
Timeout
=10;

1222 
ïå
 = 
ma°îc⁄nsögÀt⁄
 = 
	`mÆloc
((
ma°îc⁄n
));

1223 
	`∑s£π
(
ïå
);

1225 
ïå
->
ma°îaddrvÆid
 = 0;

1226 
ïå
->
mode
 = 
FREE
;

1227 
ïå
->
pdes˝os
 = -1;

1229 i‡(
	`ma°îc⁄n_öôc⁄√˘
(
ïå
)<0) {

1233 #ifde‡
BGJOBS


1234 
jpoﬁ
 = 
	`job_poﬁ_√w
(10,
BGJOBSCNT
,&
jobfd
);

1235 i‡(
jpoﬁ
==
NULL
) {

1240 
	`maö_óchlo›ªgi°î
(
ma°îc⁄n_check_hdd_ªp‹ts
);

1241 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,
Rec⁄√˘i⁄Dñay
,0,
ma°îc⁄n_ªc⁄√˘
);

1242 
	`maö_de°ru˘ªgi°î
(
ma°îc⁄n_ãrm
);

1243 
	`maö_pﬁÃegi°î
(
ma°îc⁄n_desc
,
ma°îc⁄n_£rve
);

1244 
	`maö_ªlﬂdªgi°î
(
ma°îc⁄n_ªlﬂd
);

1246 
logfd
 = 
NULL
;

1248 
	}
}

	@mfschunkserver/masterconn.h

19 #i‚de‡
_MASTERCONN_H_


20 
	#_MASTERCONN_H_


	)

22 
	~<öây≥s.h
>

24 
ma°îc⁄n_°©s
(
uöt32_t
 *
bö
,uöt32_à*
bout
,uöt32_à*
maxjobs˙t
);

25 
ma°îc⁄n_ª∂iˇã_°©us
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
°©us
);

30 
ma°îc⁄n_öô
();

	@mfschunkserver/replicator.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/uio.h
>

25 
	~<uni°d.h
>

26 
	~<pﬁl.h
>

27 
	~<sys/time.h
>

28 
	~<sy¶og.h
>

29 
	~<î∫o.h
>

30 
	~<öây≥s.h
>

31 
	~<±hªad.h
>

33 
	~"MFSCommuniˇti⁄.h
"

34 
	~"hdd•a˚mgr.h
"

35 
	~"sockës.h
"

36 
	~"¸c.h
"

37 
	~"¶oggî.h
"

38 
	~"d©≠ack.h
"

39 
	~"mas£π.h
"

41 
	~"ª∂iˇt‹.h
"

43 
	#CONNMSECTO
 5000

	)

44 
	#SENDMSECTO
 5000

	)

45 
	#RECVMSECTO
 5000

	)

47 
	#MAX_RECV_PACKET_SIZE
 (20+
MFSBLOCKSIZE
)

	)

49 íum {
	mIDLE
,
	mCONNECTING
,
	mHEADER
,
	mDATA
} 
	tmodëy≥
;

51 
	s_ªp§c
 {

52 
	msock
;

53 
modëy≥
 
	mmode
;

54 
uöt8_t
 
	mhdrbuff
[8];

55 
uöt8_t
 *
	m∑ckë
;

56 
uöt8_t
 *
	m°¨çå
;

57 
uöt32_t
 
	mbyã¶e·
;

59 
uöt64_t
 
	mchunkid
;

60 
uöt32_t
 
	mvîsi⁄
;

61 
uöt16_t
 
	mblocks
;

63 
uöt32_t
 
	mù
;

64 
uöt16_t
 
	mp‹t
;

65 } 
	tªp§c
;

67 
	s_ª∂iˇti⁄
 {

68 
uöt64_t
 
	mchunkid
;

69 
uöt32_t
 
	mvîsi⁄
;

71 
uöt8_t
 *
	mx‹buff
;

73 
uöt8_t
 
	m¸óãd
,
	m›íed
;

74 
uöt8_t
 
	m§c˙t
;

75 
pﬁlfd
 *
	mfds
;

76 
ªp§c
 *
	mªpsour˚s
;

77 } 
	tª∂iˇti⁄
;

79 
uöt32_t
 
	g°©s_ª∂
=0;

80 
±hªad_muãx_t
 
	g°©¶ock
 = 
PTHREAD_MUTEX_INITIALIZER
;

82 
	$ª∂iˇt‹_°©s
(
uöt32_t
 *
ª∂
) {

83 
	`±hªad_muãx_lock
(&
°©¶ock
);

84 *
ª∂
 = 
°©s_ª∂
;

85 
°©s_ª∂
=0;

86 
	`±hªad_muãx_u∆ock
(&
°©¶ock
);

87 
	}
}

89 
	$x‹d©a
(
uöt8_t
 *
d°
,c⁄° uöt8_à*
§c
,
uöt32_t
 
Àng
) {

90 
uöt32_t
 *
d°4
;

91 c⁄° 
uöt32_t
 *
§c4
;

92 
	#XOR_ONE_BYTE
 (*
d°
++)^=(*
§c
++)

	)

93 
	#XOR_FOUR_BYTES
 (*
d°4
++)^=(*
§c4
++)

	)

94 i‡((()
d°
&3)==(()
§c
&3)) {

95 
Àng
 && (()
§c
 & 3)) {

96 
XOR_ONE_BYTE
;

97 
Àng
--;

99 
d°4
 = (
uöt32_t
*)
d°
;

100 
§c4
 = (c⁄° 
uöt32_t
*)
§c
;

101 
Àng
>=32) {

102 
XOR_FOUR_BYTES
;

103 
XOR_FOUR_BYTES
;

104 
XOR_FOUR_BYTES
;

105 
XOR_FOUR_BYTES
;

106 
XOR_FOUR_BYTES
;

107 
XOR_FOUR_BYTES
;

108 
XOR_FOUR_BYTES
;

109 
XOR_FOUR_BYTES
;

110 
Àng
-=32;

112 
Àng
>=4) {

113 
XOR_FOUR_BYTES
;

114 
Àng
-=4;

116 
§c
 = (c⁄° 
uöt8_t
*)
§c4
;

117 
d°
 = (
uöt8_t
*)
d°4
;

118 i‡(
Àng
) do {

119 
XOR_ONE_BYTE
;

120 } --
Àng
);

122 
Àng
>=8) {

123 
XOR_ONE_BYTE
;

124 
XOR_ONE_BYTE
;

125 
XOR_ONE_BYTE
;

126 
XOR_ONE_BYTE
;

127 
XOR_ONE_BYTE
;

128 
XOR_ONE_BYTE
;

129 
XOR_ONE_BYTE
;

130 
XOR_ONE_BYTE
;

131 
Àng
-=8;

133 i‡(
Àng
>0) do {

134 
XOR_ONE_BYTE
;

135 } --
Àng
);

137 
	}
}

139 
	$ªp_ªad
(
ªp§c
 *
rs
) {

140 
öt32_t
 
i
;

141 
uöt32_t
 
size
;

142 c⁄° 
uöt8_t
 *
±r
;

143 
rs
->
byã¶e·
>0) {

144 
i
=
	`ªad
(
rs
->
sock
,rs->
°¨çå
,rs->
byã¶e·
);

145 i‡(
i
==0) {

146 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectionÜost");

149 i‡(
i
<0) {

150 i‡(
î∫o
!=
EAGAIN
) {

151 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator:ÑeadÉrror");

157 
rs
->
°¨çå
+=
i
;

158 
rs
->
byã¶e·
-=
i
;

160 i‡(
rs
->
byã¶e·
>0) {

164 i‡(
rs
->
mode
==
HEADER
) {

165 
±r
 = 
rs
->
hdrbuff
+4;

166 
size
 = 
	`gë32bô
(&
±r
);

168 i‡(
rs
->
∑ckë
) {

169 
	`‰ì
(
rs
->
∑ckë
);

171 i‡(
size
>0) {

172 i‡(
size
>
MAX_RECV_PACKET_SIZE
) {

173 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹:ÖackëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MAX_RECV_PACKET_SIZE
);

176 
rs
->
∑ckë
 = 
	`mÆloc
(
size
);

177 
	`∑s£π
(
rs
->
∑ckë
);

178 
rs
->
°¨çå
 =Ñs->
∑ckë
;

180 
rs
->
∑ckë
 = 
NULL
;

182 
rs
->
byã¶e·
 = 
size
;

183 
rs
->
mode
 = 
DATA
;

187 
	}
}

189 
	$ªp_ª˚ive_Æl_∑ckës
(
ª∂iˇti⁄
 *
r
,
uöt32_t
 
m£˘o
) {

190 
uöt8_t
 
i
,
l
;

191 
timevÆ
 
tvb
,
tv
;

192 
uöt32_t
 
m£c
;

193 
	`gëtimeofday
(&
tvb
,
NULL
);

195 
l
=1;

196 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

197 i‡(
r
->
ªpsour˚s
[
i
].
byã¶e·
>0) {

198 
r
->
fds
[
i
].
evíts
 = 
POLLIN
;

199 
l
=0;

201 
r
->
fds
[
i
].
evíts
 = 0;

204 i‡(
l
) {

207 
	`gëtimeofday
(&
tv
,
NULL
);

208 i‡(
tv
.
tv_u£c
 < 
tvb
.tv_usec) {

209 
tv
.
tv_u£c
+=1000000;

210 
tv
.
tv_£c
--;

212 
tv
.
tv_£c
-=
tvb
.tv_sec;

213 
tv
.
tv_u£c
-=
tvb
.tv_usec;

214 
m£c
 = 
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
 / 1000;

215 i‡(
m£c
>=
m£˘o
) {

216 
	`sy¶og
(
LOG_NOTICE
,"replicator:ÑeceiveÅimed out");

219 i‡(
	`pﬁl
(
r
->
fds
,r->
§c˙t
,
m£˘o
-
m£c
)<0) {

220 i‡(
î∫o
!=
EINTR
 &&Éºno!=
EAGAIN
) {

221 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator:ÖollÉrror");

226 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

227 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLHUP
) {

228 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectionÜost");

231 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLIN
) {

232 i‡(
	`ªp_ªad
(
r
->
ªpsour˚s
+
i
)<0) {

238 
	}
}

240 
uöt8_t
* 
	$ªp_¸óã_∑ckë
(
ªp§c
 *
rs
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

241 
uöt8_t
 *
±r
;

242 i‡(
rs
->
∑ckë
) {

243 
	`‰ì
(
rs
->
∑ckë
);

245 
rs
->
∑ckë
 = 
	`mÆloc
(
size
+8);

246 
	`∑s£π
(
rs
->
∑ckë
);

247 
±r
 = 
rs
->
∑ckë
;

248 
	`put32bô
(&
±r
,
ty≥
);

249 
	`put32bô
(&
±r
,
size
);

250 
rs
->
°¨çå
 =Ñs->
∑ckë
;

251 
rs
->
byã¶e·
 = 8+
size
;

252  
±r
;

253 
	}
}

255 
	$ªp_no_∑ckë
(
ªp§c
 *
rs
) {

256 i‡(
rs
->
∑ckë
) {

257 
	`‰ì
(
rs
->
∑ckë
);

259 
rs
->
∑ckë
=
NULL
;

260 
rs
->
°¨çå
=
NULL
;

261 
rs
->
byã¶e·
=0;

262 
	}
}

264 
	$ªp_wrôe
(
ªp§c
 *
rs
) {

265 
i
;

266 
i
 = 
	`wrôe
(
rs
->
sock
,rs->
°¨çå
,rs->
byã¶e·
);

267 i‡(
i
==0) {

268 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectionÜost");

271 i‡(
i
<0) {

272 i‡(
î∫o
!=
EAGAIN
) {

273 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator: writeÉrror");

279 
rs
->
°¨çå
+=
i
;

280 
rs
->
byã¶e·
-=
i
;

282 
	}
}

284 
	$ªp_£nd_Æl_∑ckës
(
ª∂iˇti⁄
 *
r
,
uöt32_t
 
m£˘o
) {

285 
uöt8_t
 
i
,
l
;

286 
timevÆ
 
tvb
,
tv
;

287 
uöt32_t
 
m£c
;

288 
	`gëtimeofday
(&
tvb
,
NULL
);

290 
l
=1;

291 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

292 i‡(
r
->
ªpsour˚s
[
i
].
byã¶e·
>0) {

293 
r
->
fds
[
i
].
evíts
 = 
POLLOUT
;

294 
l
=0;

296 
r
->
fds
[
i
].
evíts
 = 0;

299 i‡(
l
) {

302 
	`gëtimeofday
(&
tv
,
NULL
);

303 i‡(
tv
.
tv_u£c
 < 
tvb
.tv_usec) {

304 
tv
.
tv_u£c
+=1000000;

305 
tv
.
tv_£c
--;

307 
tv
.
tv_£c
-=
tvb
.tv_sec;

308 
tv
.
tv_u£c
-=
tvb
.tv_usec;

309 
m£c
 = 
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
 / 1000;

310 i‡(
m£c
>=
m£˘o
) {

311 
	`sy¶og
(
LOG_NOTICE
,"replicator: sendÅimed out");

314 i‡(
	`pﬁl
(
r
->
fds
,r->
§c˙t
,
m£˘o
-
m£c
)<0) {

315 i‡(
î∫o
!=
EINTR
 &&Éºno!=
EAGAIN
) {

316 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator:ÖollÉrror");

321 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

322 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLHUP
) {

323 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectionÜost");

326 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLOUT
) {

327 i‡(
	`ªp_wrôe
(
r
->
ªpsour˚s
+
i
)<0) {

333 
	}
}

335 
	$ªp_waô_f‹_c⁄√˘i⁄
(
ª∂iˇti⁄
 *
r
,
uöt32_t
 
m£˘o
) {

336 
uöt8_t
 
i
,
l
;

337 
timevÆ
 
tvb
,
tv
;

338 
uöt32_t
 
m£c
;

339 
	`gëtimeofday
(&
tvb
,
NULL
);

341 
l
=1;

342 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

343 i‡(
r
->
ªpsour˚s
[
i
].
mode
==
CONNECTING
) {

344 
r
->
fds
[
i
].
evíts
 = 
POLLOUT
;

345 
l
=0;

347 
r
->
fds
[
i
].
evíts
 = 0;

350 i‡(
l
) {

353 
	`gëtimeofday
(&
tv
,
NULL
);

354 i‡(
tv
.
tv_u£c
 < 
tvb
.tv_usec) {

355 
tv
.
tv_u£c
+=1000000;

356 
tv
.
tv_£c
--;

358 
tv
.
tv_£c
-=
tvb
.tv_sec;

359 
tv
.
tv_u£c
-=
tvb
.tv_usec;

360 
m£c
 = 
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
 / 1000;

361 i‡(
m£c
>=
m£˘o
) {

362 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectÅimed out");

365 i‡(
	`pﬁl
(
r
->
fds
,r->
§c˙t
,
m£˘o
-
m£c
)<0) {

366 i‡(
î∫o
!=
EINTR
 &&Éºno!=
EAGAIN
) {

367 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator:ÖollÉrror");

372 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

373 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLHUP
) {

374 
	`sy¶og
(
LOG_NOTICE
,"replicator: connectionÜost");

377 i‡(
r
->
fds
[
i
].
ªvíts
 & 
POLLOUT
) {

378 i‡(
	`t˝gë°©us
(
r
->
ªpsour˚s
[
i
].
sock
)<0) {

379 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator: connectÉrror");

382 
r
->
ªpsour˚s
[
i
].
mode
=
IDLE
;

386 
	}
}

388 
	$ªp_˛ónup
(
ª∂iˇti⁄
 *
r
) {

389 
i
;

390 i‡(
r
->
›íed
) {

391 
	`hdd_˛o£
(
r
->
chunkid
);

393 i‡(
r
->
¸óãd
) {

394 
	`hdd_dñëe
(
r
->
chunkid
,0);

396 
i
=0 ; i<
r
->
§c˙t
 ; i++) {

397 i‡(
r
->
ªpsour˚s
[
i
].
sock
>=0) {

398 
	`t˝˛o£
(
r
->
ªpsour˚s
[
i
].
sock
);

400 i‡(
r
->
ªpsour˚s
[
i
].
∑ckë
) {

401 
	`‰ì
(
r
->
ªpsour˚s
[
i
].
∑ckë
);

404 i‡(
r
->
fds
) {

405 
	`‰ì
(
r
->
fds
);

407 i‡(
r
->
ªpsour˚s
) {

408 
	`‰ì
(
r
->
ªpsour˚s
);

410 i‡(
r
->
x‹buff
) {

411 
	`‰ì
(
r
->
x‹buff
);

413 
	}
}

416 
uöt8_t
 
	$ª∂iˇã
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
§c˙t
,c⁄° uöt8_à*
§cs
) {

417 
ª∂iˇti⁄
 
r
;

418 
uöt8_t
 
°©us
,
i
,
vbuffs
,
fú°
;

419 
uöt16_t
 
b
,
blocks
;

420 
uöt32_t
 
x¸c
,
¸c
;

421 
uöt8_t
 *
w±r
;

422 c⁄° 
uöt8_t
 *
Ωå
;

423 
s
;

425 i‡(
§c˙t
==0) {

426  
ERROR_EINVAL
;

431 
	`±hªad_muãx_lock
(&
°©¶ock
);

432 
°©s_ª∂
++;

433 
	`±hªad_muãx_u∆ock
(&
°©¶ock
);

436 
r
.
chunkid
 = chunkid;

437 
r
.
vîsi⁄
 = version;

438 
r
.
§c˙t
 = 0;

439 
r
.
¸óãd
 = 0;

440 
r
.
›íed
 = 0;

441 
r
.
fds
 = 
	`mÆloc
((
pﬁlfd
)*
§c˙t
);

442 
	`∑s£π
(
r
.
fds
);

443 
r
.
ªpsour˚s
 = 
	`mÆloc
((
ªp§c
)*
§c˙t
);

444 
	`∑s£π
(
r
.
ªpsour˚s
);

445 i‡(
§c˙t
>1) {

446 
r
.
x‹buff
 = 
	`mÆloc
(
MFSBLOCKSIZE
+4);

447 
	`∑s£π
(
r
.
x‹buff
);

449 
r
.
x‹buff
 = 
NULL
;

452 
°©us
 = 
	`hdd_¸óã
(
chunkid
,0);

453 i‡(
°©us
!=
STATUS_OK
) {

454 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: hdd_¸óã sètus: %u",
°©us
);

455 
	`ªp_˛ónup
(&
r
);

456  
°©us
;

458 
r
.
¸óãd
 = 1;

460 
r
.
§c˙t
 = srccnt;

461 
i
=0 ; i<
§c˙t
 ; i++) {

462 
r
.
ªpsour˚s
[
i
].
chunkid
 = 
	`gë64bô
(&
§cs
);

463 
r
.
ªpsour˚s
[
i
].
vîsi⁄
 = 
	`gë32bô
(&
§cs
);

464 
r
.
ªpsour˚s
[
i
].
ù
 = 
	`gë32bô
(&
§cs
);

465 
r
.
ªpsour˚s
[
i
].
p‹t
 = 
	`gë16bô
(&
§cs
);

466 
r
.
ªpsour˚s
[
i
].
sock
 = -1;

467 
r
.
ªpsour˚s
[
i
].
∑ckë
 = 
NULL
;

470 
i
=0 ; i<
§c˙t
 ; i++) {

471 
s
 = 
	`t˝sockë
();

472 i‡(
s
<0) {

473 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator: socketÉrror");

474 
	`ªp_˛ónup
(&
r
);

475  
ERROR_CANTCONNECT
;

477 
r
.
ªpsour˚s
[
i
].
sock
 = 
s
;

478 
r
.
fds
[
i
].
fd
 = 
s
;

479 i‡(
	`t˝n⁄block
(
s
)<0) {

480 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator:ÇonblockÉrror");

481 
	`ªp_˛ónup
(&
r
);

482  
ERROR_CANTCONNECT
;

484 
s
 = 
	`t˝numc⁄√˘
(s,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

485 i‡(
s
<0) {

486 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"replicator: connectÉrror");

487 
	`ªp_˛ónup
(&
r
);

488  
ERROR_CANTCONNECT
;

490 i‡(
s
==0) {

491 
r
.
ªpsour˚s
[
i
].
mode
 = 
IDLE
;

493 
r
.
ªpsour˚s
[
i
].
mode
 = 
CONNECTING
;

496 i‡(
	`ªp_waô_f‹_c⁄√˘i⁄
(&
r
,
CONNMSECTO
)<0) {

497 
	`ªp_˛ónup
(&
r
);

498  
ERROR_CANTCONNECT
;

501 
°©us
 = 
	`hdd_›í
(
chunkid
);

502 i‡(
°©us
!=
STATUS_OK
) {

503 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: hdd_›í sètus: %u",
°©us
);

504 
	`ªp_˛ónup
(&
r
);

505  
°©us
;

507 
r
.
›íed
 = 1;

509 
i
=0 ; i<
§c˙t
 ; i++) {

510 
w±r
 = 
	`ªp_¸óã_∑ckë
(
r
.
ªpsour˚s
+
i
,
CSTOCS_GET_CHUNK_BLOCKS
,8+4);

511 i‡(
w±r
==
NULL
) {

512 
	`sy¶og
(
LOG_NOTICE
,"replicator: out of memory");

513 
	`ªp_˛ónup
(&
r
);

514  
ERROR_OUTOFMEMORY
;

516 
	`put64bô
(&
w±r
,
r
.
ªpsour˚s
[
i
].
chunkid
);

517 
	`put32bô
(&
w±r
,
r
.
ªpsour˚s
[
i
].
vîsi⁄
);

520 i‡(
	`ªp_£nd_Æl_∑ckës
(&
r
,
SENDMSECTO
)<0) {

521 
	`ªp_˛ónup
(&
r
);

522  
ERROR_DISCONNECTED
;

525 
i
=0 ; i<
§c˙t
 ; i++) {

526 
r
.
ªpsour˚s
[
i
].
mode
 = 
HEADER
;

527 
r
.
ªpsour˚s
[
i
].
°¨çå
 =Ñ.ªpsour˚s[i].
hdrbuff
;

528 
r
.
ªpsour˚s
[
i
].
byã¶e·
 = 8;

530 i‡(
	`ªp_ª˚ive_Æl_∑ckës
(&
r
,
RECVMSECTO
)<0) {

531 
	`ªp_˛ónup
(&
r
);

532  
ERROR_DISCONNECTED
;

535 
blocks
 = 0;

536 
i
=0 ; i<
§c˙t
 ; i++) {

537 
uöt32_t
 
ty≥
,
size
;

538 
uöt64_t
 
pchid
;

539 
uöt32_t
 
pvî
;

540 
uöt16_t
 
pblocks
;

541 
uöt8_t
 
p°©us
;

542 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
hdrbuff
;

543 
ty≥
 = 
	`gë32bô
(&
Ωå
);

544 
size
 = 
	`gë32bô
(&
Ωå
);

545 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
∑ckë
;

546 i‡(
Ωå
==
NULL
 || 
ty≥
!=
CSTOCS_GET_CHUNK_BLOCKS_STATUS
 || 
size
!=15) {

547 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ty≥/sizeË‰om (%08"
PRIX32
":%04"
PRIX16
")",
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

548 
	`ªp_˛ónup
(&
r
);

549  
ERROR_DISCONNECTED
;

551 
pchid
 = 
	`gë64bô
(&
Ωå
);

552 
pvî
 = 
	`gë32bô
(&
Ωå
);

553 
pblocks
 = 
	`gë16bô
(&
Ωå
);

554 
p°©us
 = 
	`gë8bô
(&
Ωå
);

555 i‡(
pchid
!=
r
.
ªpsour˚s
[
i
].
chunkid
) {

556 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (chunk_°©us:chunkid:%"
PRIX64
"/%"PRIX64"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
pchid
,
r
.
ªpsour˚s
[
i
].
chunkid
,r.ªpsour˚s[i].
ù
,r.ªpsour˚s[i].
p‹t
);

557 
	`ªp_˛ónup
(&
r
);

558  
ERROR_WRONGCHUNKID
;

560 i‡(
pvî
!=
r
.
ªpsour˚s
[
i
].
vîsi⁄
) {

561 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (chunk_°©us:vîsi⁄:%"
PRIX32
"/%"PRIX32"Ë‰om (%08"PRIX32":%04"
PRIX16
")",
pvî
,
r
.
ªpsour˚s
[
i
].
vîsi⁄
,r.ªpsour˚s[i].
ù
,r.ªpsour˚s[i].
p‹t
);

562 
	`ªp_˛ónup
(&
r
);

563  
ERROR_WRONGVERSION
;

565 i‡(
p°©us
!=
STATUS_OK
) {

566 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: gŸ sètus: %u from (%08"
PRIX32
":%04"
PRIX16
")",
p°©us
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

567 
	`ªp_˛ónup
(&
r
);

568  
p°©us
;

570 
r
.
ªpsour˚s
[
i
].
blocks
 = 
pblocks
;

571 i‡(
pblocks
>
blocks
) {

572 
blocks
=
pblocks
;

576 
i
=0 ; i<
§c˙t
 ; i++) {

577 i‡(
r
.
ªpsour˚s
[
i
].
blocks
>0) {

578 
uöt32_t
 
Àng
;

579 
w±r
 = 
	`ªp_¸óã_∑ckë
(
r
.
ªpsour˚s
+
i
,
CLTOCS_READ
,8+4+4+4);

580 i‡(
w±r
==
NULL
) {

581 
	`sy¶og
(
LOG_NOTICE
,"replicator: out of memory");

582 
	`ªp_˛ónup
(&
r
);

583  
ERROR_OUTOFMEMORY
;

585 
Àng
 = 
r
.
ªpsour˚s
[
i
].
blocks
*
MFSBLOCKSIZE
;

586 
	`put64bô
(&
w±r
,
r
.
ªpsour˚s
[
i
].
chunkid
);

587 
	`put32bô
(&
w±r
,
r
.
ªpsour˚s
[
i
].
vîsi⁄
);

588 
	`put32bô
(&
w±r
,0);

589 
	`put32bô
(&
w±r
,
Àng
);

591 
	`ªp_no_∑ckë
(
r
.
ªpsour˚s
+
i
);

595 i‡(
	`ªp_£nd_Æl_∑ckës
(&
r
,
SENDMSECTO
)<0) {

596 
	`ªp_˛ónup
(&
r
);

597  
ERROR_DISCONNECTED
;

600 
b
=0 ; b<
blocks
 ; b++) {

602 
i
=0 ; i<
§c˙t
 ; i++) {

603 i‡(
b
<
r
.
ªpsour˚s
[
i
].
blocks
) {

604 
r
.
ªpsour˚s
[
i
].
mode
 = 
HEADER
;

605 
r
.
ªpsour˚s
[
i
].
°¨çå
 =Ñ.ªpsour˚s[i].
hdrbuff
;

606 
r
.
ªpsour˚s
[
i
].
byã¶e·
 = 8;

608 
r
.
ªpsour˚s
[
i
].
mode
 = 
IDLE
;

609 
r
.
ªpsour˚s
[
i
].
byã¶e·
 = 0;

613 i‡(
	`ªp_ª˚ive_Æl_∑ckës
(&
r
,
RECVMSECTO
)<0) {

614 
	`ªp_˛ónup
(&
r
);

615  
ERROR_DISCONNECTED
;

618 
vbuffs
 = 0;

619 
i
=0 ; i<
§c˙t
 ; i++) {

620 i‡(
r
.
ªpsour˚s
[
i
].
mode
!=
IDLE
) {

621 
uöt32_t
 
ty≥
,
size
;

622 
uöt64_t
 
pchid
;

623 
uöt16_t
 
pblocknum
;

624 
uöt16_t
 
poff£t
;

625 
uöt32_t
 
psize
;

626 
uöt8_t
 
p°©us
;

627 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
hdrbuff
;

628 
ty≥
 = 
	`gë32bô
(&
Ωå
);

629 
size
 = 
	`gë32bô
(&
Ωå
);

630 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
∑ckë
;

631 i‡(
Ωå
==
NULL
) {

632 
	`ªp_˛ónup
(&
r
);

633  
ERROR_DISCONNECTED
;

635 i‡(
ty≥
==
CSTOCL_READ_STATUS
 && 
size
==9) {

636 
pchid
 = 
	`gë64bô
(&
Ωå
);

637 
p°©us
 = 
	`gë8bô
(&
Ωå
);

638 
	`ªp_˛ónup
(&
r
);

639 i‡(
pchid
!=
r
.
ªpsour˚s
[
i
].
chunkid
) {

640 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_°©us:chunkid:%"
PRIX64
"/%"PRIX64"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
pchid
,
r
.
ªpsour˚s
[
i
].
chunkid
,r.ªpsour˚s[i].
ù
,r.ªpsour˚s[i].
p‹t
);

641  
ERROR_WRONGCHUNKID
;

643 i‡(
p°©us
==
STATUS_OK
) {

644 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ u√x≥˘ed ok sètu†‰om (%08"
PRIX32
":%04"
PRIX16
")",
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

645  
ERROR_DISCONNECTED
;

647 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: gŸ sètus: %u from (%08"
PRIX32
":%04"
PRIX16
")",
p°©us
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

648  
p°©us
;

649 } i‡(
ty≥
==
CSTOCL_READ_DATA
 && 
size
==20+
MFSBLOCKSIZE
) {

650 
pchid
 = 
	`gë64bô
(&
Ωå
);

651 
pblocknum
 = 
	`gë16bô
(&
Ωå
);

652 
poff£t
 = 
	`gë16bô
(&
Ωå
);

653 
psize
 = 
	`gë32bô
(&
Ωå
);

654 i‡(
pchid
!=
r
.
ªpsour˚s
[
i
].
chunkid
) {

655 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_d©a:chunkid:%"
PRIX64
"/%"PRIX64"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
pchid
,
r
.
ªpsour˚s
[
i
].
chunkid
,r.ªpsour˚s[i].
ù
,r.ªpsour˚s[i].
p‹t
);

656 
	`ªp_˛ónup
(&
r
);

657  
ERROR_WRONGCHUNKID
;

659 i‡(
pblocknum
!=
b
) {

660 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_d©a:blocknum:%"
PRIu16
"/%"PRIu16"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
pblocknum
,
b
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

661 
	`ªp_˛ónup
(&
r
);

662  
ERROR_DISCONNECTED
;

664 i‡(
poff£t
!=0) {

665 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_d©a:off£t:%"
PRIu16
"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
poff£t
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

666 
	`ªp_˛ónup
(&
r
);

667  
ERROR_WRONGOFFSET
;

669 i‡(
psize
!=
MFSBLOCKSIZE
) {

670 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_d©a:size:%"
PRIu32
"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
psize
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

671 
	`ªp_˛ónup
(&
r
);

672  
ERROR_WRONGSIZE
;

675 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ty≥/sizeË‰om (%08"
PRIX32
":%04"
PRIX16
")",
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

676 
	`ªp_˛ónup
(&
r
);

677  
ERROR_DISCONNECTED
;

679 
vbuffs
++;

683 i‡(
vbuffs
==0) {

684 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹:Çÿd©®ª˚ived f‹ block: %"
PRIu16
,
b
);

685 
	`ªp_˛ónup
(&
r
);

686  
ERROR_DISCONNECTED
;

687 } i‡(
vbuffs
==1) {

688 
i
=0 ; i<
§c˙t
 ; i++) {

689 i‡(
r
.
ªpsour˚s
[
i
].
mode
!=
IDLE
) {

690 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
∑ckë
;

691 
°©us
 = 
	`hdd_wrôe
(
chunkid
,0,
b
,
Ωå
+20,0,
MFSBLOCKSIZE
,rptr+16);

692 i‡(
°©us
!=
STATUS_OK
) {

693 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: wrôê°©us: %u",
°©us
);

694 
	`ªp_˛ónup
(&
r
);

695  
°©us
;

700 
fú°
=1;

701 i‡(
vbuffs
&1) {

702 
x¸c
 = 0;

704 
x¸c
 = 
MFSCRCEMPTY
;

706 
i
=0 ; i<
§c˙t
 ; i++) {

707 i‡(
r
.
ªpsour˚s
[
i
].
mode
!=
IDLE
) {

708 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
∑ckë
;

709 
Ωå
+=16;

710 i‡(
fú°
) {

711 
	`mem˝y
(
r
.
x‹buff
+4,
Ωå
+4,
MFSBLOCKSIZE
);

712 
fú°
=0;

714 
	`x‹d©a
(
r
.
x‹buff
+4,
Ωå
+4,
MFSBLOCKSIZE
);

716 
¸c
 = 
	`gë32bô
(&
Ωå
);

717 i‡(
¸c
!=
	`my¸c32
(0,
Ωå
,
MFSBLOCKSIZE
)) {

718 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹:Ñe˚ived d©®wôh wr⁄g checksum from (%08"
PRIX32
":%04"
PRIX16
")",
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

719 
	`ªp_˛ónup
(&
r
);

720  
ERROR_CRC
;

722 
x¸c
^=
¸c
;

725 
w±r
 = 
r
.
x‹buff
;

726 
	`put32bô
(&
w±r
,
x¸c
);

727 
°©us
 = 
	`hdd_wrôe
(
chunkid
,0,
b
,
r
.
x‹buff
+4,0,
MFSBLOCKSIZE
,r.xorbuff);

728 i‡(
°©us
!=
STATUS_OK
) {

729 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: x‹ wrôê°©us: %u",
°©us
);

730 
	`ªp_˛ónup
(&
r
);

731  
°©us
;

736 
i
=0 ; i<
§c˙t
 ; i++) {

737 i‡(
r
.
ªpsour˚s
[
i
].
blocks
>0) {

742 
r
.
ªpsour˚s
[
i
].
mode
 = 
HEADER
;

743 
r
.
ªpsour˚s
[
i
].
°¨çå
 =Ñ.ªpsour˚s[i].
hdrbuff
;

744 
r
.
ªpsour˚s
[
i
].
byã¶e·
 = 8;

746 
r
.
ªpsour˚s
[
i
].
mode
 = 
IDLE
;

747 
r
.
ªpsour˚s
[
i
].
byã¶e·
 = 0;

750 i‡(
	`ªp_ª˚ive_Æl_∑ckës
(&
r
,
RECVMSECTO
)<0) {

751 
	`ªp_˛ónup
(&
r
);

752  
ERROR_DISCONNECTED
;

754 
i
=0 ; i<
§c˙t
 ; i++) {

755 i‡(
r
.
ªpsour˚s
[
i
].
blocks
>0) {

756 
uöt32_t
 
ty≥
,
size
;

757 
uöt64_t
 
pchid
;

758 
uöt8_t
 
p°©us
;

759 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
hdrbuff
;

760 
ty≥
 = 
	`gë32bô
(&
Ωå
);

761 
size
 = 
	`gë32bô
(&
Ωå
);

762 
Ωå
 = 
r
.
ªpsour˚s
[
i
].
∑ckë
;

763 i‡(
Ωå
==
NULL
 || 
ty≥
!=
CSTOCL_READ_STATUS
 || 
size
!=9) {

764 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ty≥/sizeË‰om (%08"
PRIX32
":%04"
PRIX16
")",
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

765 
	`ªp_˛ónup
(&
r
);

766  
ERROR_DISCONNECTED
;

768 
pchid
 = 
	`gë64bô
(&
Ωå
);

769 
p°©us
 = 
	`gë8bô
(&
Ωå
);

770 i‡(
pchid
!=
r
.
ªpsour˚s
[
i
].
chunkid
) {

771 
	`sy¶og
(
LOG_WARNING
,"ª∂iˇt‹: gŸ wr⁄gánswî (ªad_°©us:chunkid:%"
PRIX64
"/%"PRIX64"Ë‰om (%08"
PRIX32
":%04"
PRIX16
")",
pchid
,
r
.
ªpsour˚s
[
i
].
chunkid
,r.ªpsour˚s[i].
ù
,r.ªpsour˚s[i].
p‹t
);

772 
	`ªp_˛ónup
(&
r
);

773  
ERROR_WRONGCHUNKID
;

775 i‡(
p°©us
!=
STATUS_OK
) {

776 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: gŸ sètus: %u from (%08"
PRIX32
":%04"
PRIX16
")",
p°©us
,
r
.
ªpsour˚s
[
i
].
ù
,r.ªpsour˚s[i].
p‹t
);

777 
	`ªp_˛ónup
(&
r
);

778  
p°©us
;

783 
°©us
 = 
	`hdd_˛o£
(
chunkid
);

784 i‡(
°©us
!=
STATUS_OK
) {

785 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: hdd_˛o£ sètus: %u",
°©us
);

786 
	`ªp_˛ónup
(&
r
);

787  
°©us
;

789 
r
.
›íed
 = 0;

790 
°©us
 = 
	`hdd_vîsi⁄
(
chunkid
,0,
vîsi⁄
);

791 i‡(
°©us
!=
STATUS_OK
) {

792 
	`sy¶og
(
LOG_NOTICE
,"ª∂iˇt‹: hdd_vîsi⁄ sètus: %u",
°©us
);

793 
	`ªp_˛ónup
(&
r
);

794  
°©us
;

796 
r
.
¸óãd
 = 0;

797 
	`ªp_˛ónup
(&
r
);

798  
STATUS_OK
;

799 
	}
}

	@mfschunkserver/replicator.h

19 #i‚de‡
_REPLICATOR_H_


20 
	#_REPLICATOR_H_


	)

22 
	~<öây≥s.h
>

24 
ª∂iˇt‹_°©s
(
uöt32_t
 *
ª∂
);

26 
uöt8_t
 
ª∂iˇã
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt8_à
§c˙t
,c⁄° uöt8_à*
§cs
);

	@mfscommon/MFSCommunication.h

19 #i‚de‡
_MFS_COMMUNICATION_H_


20 
	#_MFS_COMMUNICATION_H_


	)

27 #i‚de‡
PROTO_BASE


28 
	~"c⁄fig.h
"

31 
	#MFSBLOCKSINCHUNK
 0x400

	)

32 #i‡
LIGHT_MFS
 == 1

33 
	#MFSSIGNATURE
 "LFS"

	)

34 
	#MFSCHUNKSIZE
 0x00400000

	)

35 
	#MFSCHUNKMASK
 0x003FFFFF

	)

36 
	#MFSCHUNKBITS
 22

	)

37 
	#MFSCHUNKBLOCKMASK
 0x003FF000

	)

38 
	#MFSBLOCKSIZE
 0x1000

	)

39 
	#MFSBLOCKMASK
 0x0FFF

	)

40 
	#MFSBLOCKNEGMASK
 0x7FFFF000

	)

41 
	#MFSBLOCKBITS
 12

	)

42 
	#MFSCRCEMPTY
 0xC71C0011U

	)

43 
	#MFSHDRSIZE
 0x1080

	)

45 
	#MFSSIGNATURE
 "MFS"

	)

46 
	#MFSCHUNKSIZE
 0x04000000

	)

47 
	#MFSCHUNKMASK
 0x03FFFFFF

	)

48 
	#MFSCHUNKBITS
 26

	)

49 
	#MFSCHUNKBLOCKMASK
 0x03FF0000

	)

50 
	#MFSBLOCKSIZE
 0x10000

	)

51 
	#MFSBLOCKMASK
 0x0FFFF

	)

52 
	#MFSBLOCKNEGMASK
 0x7FFF0000

	)

53 
	#MFSBLOCKBITS
 16

	)

54 
	#MFSCRCEMPTY
 0xD7978EEBU

	)

55 
	#MFSHDRSIZE
 0x1400

	)

59 
	#VERSION_ANY
 0

	)

61 
	#CRC_POLY
 0xEDB88320U

	)

63 
	#MFS_ROOT_ID
 1

	)

65 
	#MFS_NAME_MAX
 255

	)

66 
	#MFS_MAX_FILE_SIZE
 (((
uöt64_t
)(
MFSCHUNKSIZE
))<<31)

	)

68 
	#MFS_INODE_REUSE_DELAY
 86400

	)

70 
	#STATUS_OK
 0

71 

	)

72 
	#ERROR_EPERM
 1

73 
	#ERROR_ENOTDIR
 2

74 
	#ERROR_ENOENT
 3

75 
	#ERROR_EACCES
 4

76 
	#ERROR_EEXIST
 5

77 
	#ERROR_EINVAL
 6

78 
	#ERROR_ENOTEMPTY
 7

79 
	#ERROR_CHUNKLOST
 8

80 
	#ERROR_OUTOFMEMORY
 9

81 

	)

82 
	#ERROR_INDEXTOOBIG
 10

83 
	#ERROR_LOCKED
 11

84 
	#ERROR_NOCHUNKSERVERS
 12

85 
	#ERROR_NOCHUNK
 13

86 
	#ERROR_CHUNKBUSY
 14

87 
	#ERROR_REGISTER
 15

88 
	#ERROR_NOTDONE
 16

89 
	#ERROR_NOTOPENED
 17

90 
	#ERROR_NOTSTARTED
 18

91 

	)

92 
	#ERROR_WRONGVERSION
 19

93 
	#ERROR_CHUNKEXIST
 20

94 
	#ERROR_NOSPACE
 21

95 
	#ERROR_IO
 22

96 
	#ERROR_BNUMTOOBIG
 23

97 
	#ERROR_WRONGSIZE
 24

98 
	#ERROR_WRONGOFFSET
 25

99 
	#ERROR_CANTCONNECT
 26

100 
	#ERROR_WRONGCHUNKID
 27

101 
	#ERROR_DISCONNECTED
 28

102 
	#ERROR_CRC
 29

103 
	#ERROR_DELAYED
 30

104 
	#ERROR_CANTCREATEPATH
 31

105 

	)

106 
	#ERROR_MISMATCH
 32

107 

	)

108 
	#ERROR_EROFS
 33

109 
	#ERROR_QUOTA
 34

110 
	#ERROR_BADSESSIONID
 35

111 
	#ERROR_NOPASSWORD
 36

112 
	#ERROR_BADPASSWORD
 37

113 

	)

114 
	#ERROR_ENOATTR
 38

115 

	)

116 
	#ERROR_MAX
 39

	)

118 
	#ERROR_STRINGS
 \

158 "Unknow¿MFSÉº‹"

	)

161 
	#TYPE_FILE
 'f'

	)

162 
	#TYPE_DIRECTORY
 'd'

	)

163 
	#TYPE_SYMLINK
 'l'

	)

164 
	#TYPE_FIFO
 'q'

	)

165 
	#TYPE_BLOCKDEV
 'b'

	)

166 
	#TYPE_CHARDEV
 'c'

	)

167 
	#TYPE_SOCKET
 's'

	)

169 
	#TYPE_TRASH
 't'

	)

170 
	#TYPE_RESERVED
 'r'

	)

171 
	#TYPE_UNKNOWN
 '?'

	)

174 
	#MODE_MASK_R
 4

	)

175 
	#MODE_MASK_W
 2

	)

176 
	#MODE_MASK_X
 1

	)

184 
	#SET_GOAL_FLAG
 0x0001

	)

185 
	#SET_MODE_FLAG
 0x0002

	)

186 
	#SET_UID_FLAG
 0x0004

	)

187 
	#SET_GID_FLAG
 0x0008

	)

188 
	#SET_LENGTH_FLAG
 0x0010

	)

189 
	#SET_MTIME_FLAG
 0x0020

	)

190 
	#SET_ATIME_FLAG
 0x0040

	)

191 
	#SET_OPENED_FLAG
 0x0080

	)

192 
	#SET_DELETE_FLAG
 0x0100

	)

195 
	#DTYPE_UNKNOWN
 0

	)

196 
	#DTYPE_TRASH
 1

	)

197 
	#DTYPE_RESERVED
 2

	)

198 
	#DTYPE_ISVALID
(
x
Ë(((
uöt32_t
)(x))<=2)

	)

201 
	#SMODE_SET
 0

	)

202 
	#SMODE_INCREASE
 1

	)

203 
	#SMODE_DECREASE
 2

	)

204 
	#SMODE_RSET
 4

	)

205 
	#SMODE_RINCREASE
 5

	)

206 
	#SMODE_RDECREASE
 6

	)

207 
	#SMODE_TMASK
 3

	)

208 
	#SMODE_RMASK
 4

	)

209 
	#SMODE_ISVALID
(
x
Ë(((x)&
SMODE_TMASK
)!=3 && ((
uöt32_t
)(x))<=7)

	)

212 
	#GMODE_NORMAL
 0

	)

213 
	#GMODE_RECURSIVE
 1

	)

214 
	#GMODE_ISVALID
(
x
Ë(((
uöt32_t
)(x))<=1)

	)

218 
	#EATTR_BITS
 4

	)

220 
	#EATTR_NOOWNER
 0x01

	)

221 
	#EATTR_NOACACHE
 0x02

	)

222 
	#EATTR_NOECACHE
 0x04

	)

223 
	#EATTR_NODATACACHE
 0x08

	)

225 
	#EATTR_STRINGS
 \

229 "nod©aˇche"

	)

231 
	#EATTR_DESCRIPTIONS
 \

235 "¥evíàfûêd©®‰om beög kïàö kî√»ˇche"

	)

238 
	#MATTR_NOACACHE
 0x01

	)

239 
	#MATTR_NOECACHE
 0x02

	)

240 
	#MATTR_ALLOWDATACACHE
 0x04

	)

241 
	#MATTR_UNDEFINED
 0x08

	)

244 
	#QUOTA_FLAG_SINODES
 0x01

	)

245 
	#QUOTA_FLAG_SLENGTH
 0x02

	)

246 
	#QUOTA_FLAG_SSIZE
 0x04

	)

247 
	#QUOTA_FLAG_SREALSIZE
 0x08

	)

248 
	#QUOTA_FLAG_SALL
 0x0F

	)

249 
	#QUOTA_FLAG_HINODES
 0x10

	)

250 
	#QUOTA_FLAG_HLENGTH
 0x20

	)

251 
	#QUOTA_FLAG_HSIZE
 0x40

	)

252 
	#QUOTA_FLAG_HREALSIZE
 0x80

	)

253 
	#QUOTA_FLAG_HALL
 0xF0

	)

256 
	#GETDIR_FLAG_WITHATTR
 0x01

	)

257 
	#GETDIR_FLAG_ADDTOCACHE
 0x02

	)

260 
	#SESFLAG_READONLY
 0x01

261 
	#SESFLAG_DYNAMICIP
 0x02

262 
	#SESFLAG_IGNOREGID
 0x04

263 
	#SESFLAG_CANCHANGEQUOTA
 0x08

264 
	#SESFLAG_MAPALL
 0x10

265 

	)

266 
	#SESFLAG_POS_STRINGS
 \

274 "undeföed_Êag_7"

	)

276 
	#SESFLAG_NEG_STRINGS
 \

279 
NULL
, \

280 
NULL
, \

281 
NULL
, \

282 
NULL
, \

283 
NULL
, \

284 
NULL


	)

287 
	#SUGID_CLEAR_MODE_NEVER
 0

	)

288 
	#SUGID_CLEAR_MODE_ALWAYS
 1

	)

289 
	#SUGID_CLEAR_MODE_OSX
 2

	)

290 
	#SUGID_CLEAR_MODE_BSD
 3

	)

291 
	#SUGID_CLEAR_MODE_EXT
 4

	)

292 
	#SUGID_CLEAR_MODE_XFS
 5

	)

294 
	#SUGID_CLEAR_MODE_OPTIONS
 6

	)

296 
	#SUGID_CLEAR_MODE_STRINGS
 \

302 "xfs"

	)

306 
	#WANT_READ
 1

	)

307 
	#WANT_WRITE
 2

	)

308 
	#AFTER_CREATE
 4

	)

315 
	#ANTOAN_NOP
 0

	)

323 
	#MLTOMA_REGISTER
 (
PROTO_BASE
+50)

	)

329 
	#MATOML_METACHANGES_LOG
 (
PROTO_BASE
+51)

	)

334 
	#MLTOMA_DOWNLOAD_START
 (
PROTO_BASE
+60)

	)

338 
	#MATOML_DOWNLOAD_START
 (
PROTO_BASE
+61)

	)

343 
	#MLTOMA_DOWNLOAD_DATA
 (
PROTO_BASE
+62)

	)

347 
	#MATOML_DOWNLOAD_DATA
 (
PROTO_BASE
+63)

	)

351 
	#MLTOMA_DOWNLOAD_END
 (
PROTO_BASE
+64)

	)

361 
	#CSTOMA_REGISTER
 (
PROTO_BASE
+100)

	)

383 
	#CSTOMA_SPACE
 (
PROTO_BASE
+101)

	)

389 
	#CSTOMA_CHUNK_DAMAGED
 (
PROTO_BASE
+102)

	)

393 
	#MATOCS_STRUCTURE_LOG
 (
PROTO_BASE
+103)

	)

398 
	#MATOCS_STRUCTURE_LOG_ROTATE
 (
PROTO_BASE
+104)

	)

402 
	#CSTOMA_CHUNK_LOST
 (
PROTO_BASE
+105)

	)

406 
	#CSTOMA_ERROR_OCCURRED
 (
PROTO_BASE
+106)

	)

410 
	#MATOCS_CREATE
 (
PROTO_BASE
+110)

	)

414 
	#CSTOMA_CREATE
 (
PROTO_BASE
+111)

	)

418 
	#MATOCS_DELETE
 (
PROTO_BASE
+120)

	)

422 
	#CSTOMA_DELETE
 (
PROTO_BASE
+121)

	)

426 
	#MATOCS_DUPLICATE
 (
PROTO_BASE
+130)

	)

430 
	#CSTOMA_DUPLICATE
 (
PROTO_BASE
+131)

	)

434 
	#MATOCS_SET_VERSION
 (
PROTO_BASE
+140)

	)

438 
	#CSTOMA_SET_VERSION
 (
PROTO_BASE
+141)

	)

442 
	#MATOCS_REPLICATE
 (
PROTO_BASE
+150)

	)

449 
	#CSTOMA_REPLICATE
 (
PROTO_BASE
+151)

	)

453 
	#MATOCS_CHUNKOP
 (
PROTO_BASE
+152)

	)

465 
	#CSTOMA_CHUNKOP
 (
PROTO_BASE
+153)

	)

469 
	#MATOCS_TRUNCATE
 (
PROTO_BASE
+160)

	)

473 
	#CSTOMA_TRUNCATE
 (
PROTO_BASE
+161)

	)

477 
	#MATOCS_DUPTRUNC
 (
PROTO_BASE
+170)

	)

481 
	#CSTOMA_DUPTRUNC
 (
PROTO_BASE
+171)

	)

491 
	#CLTOCS_READ
 (
PROTO_BASE
+200)

	)

495 
	#CSTOCL_READ_STATUS
 (
PROTO_BASE
+201)

	)

499 
	#CSTOCL_READ_DATA
 (
PROTO_BASE
+202)

	)

503 
	#CLTOCS_WRITE
 (
PROTO_BASE
+210)

	)

507 
	#CSTOCL_WRITE_STATUS
 (
PROTO_BASE
+211)

	)

511 
	#CLTOCS_WRITE_DATA
 (
PROTO_BASE
+212)

	)

515 
	#CLTOCS_WRITE_FINISH
 (
PROTO_BASE
+213)

	)

521 
	#CSTOCS_GET_CHUNK_BLOCKS
 (
PROTO_BASE
+250)

	)

525 
	#CSTOCS_GET_CHUNK_BLOCKS_STATUS
 (
PROTO_BASE
+251)

	)

531 
	#ANTOCS_CHUNK_CHECKSUM
 (
PROTO_BASE
+300)

	)

535 
	#CSTOAN_CHUNK_CHECKSUM
 (
PROTO_BASE
+301)

	)

540 
	#ANTOCS_CHUNK_CHECKSUM_TAB
 (
PROTO_BASE
+302)

	)

544 
	#CSTOAN_CHUNK_CHECKSUM_TAB
 (
PROTO_BASE
+303)

	)

579 
	#FUSE_REGISTER_BLOB_NOACL
 "kFh9mdZsR84l5e675v8bi54VfXaXSYozaU3DSz9AsLLtOtKùzb9aQNkxeOISx64"

	)

586 
	#FUSE_REGISTER_BLOB_TOOLS_NOACL
 "kFh9mdZsR84l5e675v8bi54VfXaXSYozaU3DSz9AsLLtOtKùzb9aQNkxeOISx63"

	)

592 
	#FUSE_REGISTER_BLOB_ACL
 "DjI1GAQDULI5d2YjA26ypc3ovkhjvhciTQVx3CS4nYgtBoUc¶jiVpsErJENHaw0"

	)

594 
	#REGISTER_GETRANDOM
 1

	)

601 
	#REGISTER_NEWSESSION
 2

	)

609 
	#REGISTER_RECONNECT
 3

	)

616 
	#REGISTER_TOOLS
 4

	)

623 
	#REGISTER_NEWMETASESSION
 5

	)

631 
	#REGISTER_CLOSESESSION
 6

	)

638 
	#CLTOMA_FUSE_REGISTER
 (
PROTO_BASE
+400)

	)

642 
	#MATOCL_FUSE_REGISTER
 (
PROTO_BASE
+401)

	)

646 
	#CLTOMA_FUSE_STATFS
 (
PROTO_BASE
+402)

	)

650 
	#MATOCL_FUSE_STATFS
 (
PROTO_BASE
+403)

	)

654 
	#CLTOMA_FUSE_ACCESS
 (
PROTO_BASE
+404)

	)

658 
	#MATOCL_FUSE_ACCESS
 (
PROTO_BASE
+405)

	)

662 
	#CLTOMA_FUSE_LOOKUP
 (
PROTO_BASE
+406)

	)

666 
	#MATOCL_FUSE_LOOKUP
 (
PROTO_BASE
+407)

	)

671 
	#CLTOMA_FUSE_GETATTR
 (
PROTO_BASE
+408)

	)

676 
	#MATOCL_FUSE_GETATTR
 (
PROTO_BASE
+409)

	)

681 
	#CLTOMA_FUSE_SETATTR
 (
PROTO_BASE
+410)

	)

688 
	#MATOCL_FUSE_SETATTR
 (
PROTO_BASE
+411)

	)

693 
	#CLTOMA_FUSE_READLINK
 (
PROTO_BASE
+412)

	)

697 
	#MATOCL_FUSE_READLINK
 (
PROTO_BASE
+413)

	)

702 
	#CLTOMA_FUSE_SYMLINK
 (
PROTO_BASE
+414)

	)

706 
	#MATOCL_FUSE_SYMLINK
 (
PROTO_BASE
+415)

	)

711 
	#CLTOMA_FUSE_MKNOD
 (
PROTO_BASE
+416)

	)

715 
	#MATOCL_FUSE_MKNOD
 (
PROTO_BASE
+417)

	)

720 
	#CLTOMA_FUSE_MKDIR
 (
PROTO_BASE
+418)

	)

725 
	#MATOCL_FUSE_MKDIR
 (
PROTO_BASE
+419)

	)

730 
	#CLTOMA_FUSE_UNLINK
 (
PROTO_BASE
+420)

	)

734 
	#MATOCL_FUSE_UNLINK
 (
PROTO_BASE
+421)

	)

738 
	#CLTOMA_FUSE_RMDIR
 (
PROTO_BASE
+422)

	)

742 
	#MATOCL_FUSE_RMDIR
 (
PROTO_BASE
+423)

	)

746 
	#CLTOMA_FUSE_RENAME
 (
PROTO_BASE
+424)

	)

750 
	#MATOCL_FUSE_RENAME
 (
PROTO_BASE
+425)

	)

756 
	#CLTOMA_FUSE_LINK
 (
PROTO_BASE
+426)

	)

760 
	#MATOCL_FUSE_LINK
 (
PROTO_BASE
+427)

	)

765 
	#CLTOMA_FUSE_GETDIR
 (
PROTO_BASE
+428)

	)

770 
	#MATOCL_FUSE_GETDIR
 (
PROTO_BASE
+429)

	)

777 
	#CLTOMA_FUSE_OPEN
 (
PROTO_BASE
+430)

	)

781 
	#MATOCL_FUSE_OPEN
 (
PROTO_BASE
+431)

	)

788 
	#CLTOMA_FUSE_READ_CHUNK
 (
PROTO_BASE
+432)

	)

792 
	#MATOCL_FUSE_READ_CHUNK
 (
PROTO_BASE
+433)

	)

798 
	#CLTOMA_FUSE_WRITE_CHUNK
 (
PROTO_BASE
+434Ë

	)

802 
	#MATOCL_FUSE_WRITE_CHUNK
 (
PROTO_BASE
+435)

	)

807 
	#CLTOMA_FUSE_WRITE_CHUNK_END
 (
PROTO_BASE
+436)

	)

811 
	#MATOCL_FUSE_WRITE_CHUNK_END
 (
PROTO_BASE
+437)

	)

817 
	#CLTOMA_FUSE_APPEND
 (
PROTO_BASE
+438)

	)

821 
	#MATOCL_FUSE_APPEND
 (
PROTO_BASE
+439)

	)

826 
	#CLTOMA_FUSE_CHECK
 (
PROTO_BASE
+440)

	)

830 
	#MATOCL_FUSE_CHECK
 (
PROTO_BASE
+441)

	)

839 
	#CLTOMA_FUSE_GETTRASHTIME
 (
PROTO_BASE
+442)

	)

843 
	#MATOCL_FUSE_GETTRASHTIME
 (
PROTO_BASE
+443)

	)

849 
	#CLTOMA_FUSE_SETTRASHTIME
 (
PROTO_BASE
+444)

	)

853 
	#MATOCL_FUSE_SETTRASHTIME
 (
PROTO_BASE
+445)

	)

859 
	#CLTOMA_FUSE_GETGOAL
 (
PROTO_BASE
+446)

	)

863 
	#MATOCL_FUSE_GETGOAL
 (
PROTO_BASE
+447)

	)

869 
	#CLTOMA_FUSE_SETGOAL
 (
PROTO_BASE
+448)

	)

873 
	#MATOCL_FUSE_SETGOAL
 (
PROTO_BASE
+449)

	)

879 
	#CLTOMA_FUSE_GETTRASH
 (
PROTO_BASE
+450)

	)

883 
	#MATOCL_FUSE_GETTRASH
 (
PROTO_BASE
+451)

	)

889 
	#CLTOMA_FUSE_GETDETACHEDATTR
 (
PROTO_BASE
+452)

	)

893 
	#MATOCL_FUSE_GETDETACHEDATTR
 (
PROTO_BASE
+453)

	)

899 
	#CLTOMA_FUSE_GETTRASHPATH
 (
PROTO_BASE
+454)

	)

903 
	#MATOCL_FUSE_GETTRASHPATH
 (
PROTO_BASE
+455)

	)

909 
	#CLTOMA_FUSE_SETTRASHPATH
 (
PROTO_BASE
+456)

	)

913 
	#MATOCL_FUSE_SETTRASHPATH
 (
PROTO_BASE
+457)

	)

918 
	#CLTOMA_FUSE_UNDEL
 (
PROTO_BASE
+458)

	)

922 
	#MATOCL_FUSE_UNDEL
 (
PROTO_BASE
+459)

	)

927 
	#CLTOMA_FUSE_PURGE
 (
PROTO_BASE
+460)

	)

931 
	#MATOCL_FUSE_PURGE
 (
PROTO_BASE
+461)

	)

936 
	#CLTOMA_FUSE_GETDIRSTATS
 (
PROTO_BASE
+462)

	)

940 
	#MATOCL_FUSE_GETDIRSTATS
 (
PROTO_BASE
+463)

	)

946 
	#CLTOMA_FUSE_TRUNCATE
 (
PROTO_BASE
+464)

	)

950 
	#MATOCL_FUSE_TRUNCATE
 (
PROTO_BASE
+465)

	)

956 
	#CLTOMA_FUSE_REPAIR
 (
PROTO_BASE
+466)

	)

960 
	#MATOCL_FUSE_REPAIR
 (
PROTO_BASE
+467)

	)

966 
	#CLTOMA_FUSE_SNAPSHOT
 (
PROTO_BASE
+468)

	)

970 
	#MATOCL_FUSE_SNAPSHOT
 (
PROTO_BASE
+469)

	)

975 
	#CLTOMA_FUSE_GETRESERVED
 (
PROTO_BASE
+470)

	)

979 
	#MATOCL_FUSE_GETRESERVED
 (
PROTO_BASE
+471)

	)

985 
	#CLTOMA_FUSE_GETEATTR
 (
PROTO_BASE
+472)

	)

989 
	#MATOCL_FUSE_GETEATTR
 (
PROTO_BASE
+473)

	)

995 
	#CLTOMA_FUSE_SETEATTR
 (
PROTO_BASE
+474)

	)

999 
	#MATOCL_FUSE_SETEATTR
 (
PROTO_BASE
+475)

	)

1005 
	#CLTOMA_FUSE_QUOTACONTROL
 (
PROTO_BASE
+476)

	)

1010 
	#MATOCL_FUSE_QUOTACONTROL
 (
PROTO_BASE
+477)

	)

1016 
	#CLTOMA_FUSE_SETXATTR
 (
PROTO_BASE
+478)

	)

1021 
	#MATOCL_FUSE_SETXATTR
 (
PROTO_BASE
+479)

	)

1025 
	#CLTOMA_FUSE_GETXATTR
 (
PROTO_BASE
+480)

	)

1030 
	#MATOCL_FUSE_GETXATTR
 (
PROTO_BASE
+481)

	)

1075 
	#CLTOMA_FUSE_RESERVED_INODES
 (
PROTO_BASE
+499)

	)

1085 
	#CLTOMA_CSERV_LIST
 (
PROTO_BASE
+500)

	)

1089 
	#MATOCL_CSERV_LIST
 (
PROTO_BASE
+501)

	)

1096 
	#CLTOCS_HDD_LIST_V1
 (
PROTO_BASE
+502)

	)

1100 
	#CSTOCL_HDD_LIST_V1
 (
PROTO_BASE
+503)

	)

1105 
	#CLTOAN_CHART
 (
PROTO_BASE
+504)

	)

1109 
	#ANTOCL_CHART
 (
PROTO_BASE
+505)

	)

1114 
	#CLTOAN_CHART_DATA
 (
PROTO_BASE
+506)

	)

1118 
	#ANTOCL_CHART_DATA
 (
PROTO_BASE
+507)

	)

1123 
	#CLTOMA_SESSION_LIST
 (
PROTO_BASE
+508)

	)

1127 
	#MATOCL_SESSION_LIST
 (
PROTO_BASE
+509)

	)

1132 
	#CLTOMA_INFO
 (
PROTO_BASE
+510)

	)

1136 
	#MATOCL_INFO
 (
PROTO_BASE
+511)

	)

1143 
	#CLTOMA_FSTEST_INFO
 (
PROTO_BASE
+512)

	)

1147 
	#MATOCL_FSTEST_INFO
 (
PROTO_BASE
+513)

	)

1154 
	#CLTOMA_CHUNKSTEST_INFO
 (
PROTO_BASE
+514)

	)

1158 
	#MATOCL_CHUNKSTEST_INFO
 (
PROTO_BASE
+515)

	)

1163 
	#CLTOMA_CHUNKS_MATRIX
 (
PROTO_BASE
+516)

	)

1167 
	#MATOCL_CHUNKS_MATRIX
 (
PROTO_BASE
+517)

	)

1172 
	#CLTOMA_QUOTA_INFO
 (
PROTO_BASE
+518)

	)

1176 
	#MATOCL_QUOTA_INFO
 (
PROTO_BASE
+519)

	)

1181 
	#CLTOMA_EXPORTS_INFO
 (
PROTO_BASE
+520)

	)

1185 
	#MATOCL_EXPORTS_INFO
 (
PROTO_BASE
+521)

	)

1190 
	#CLTOMA_MLOG_LIST
 (
PROTO_BASE
+522)

	)

1194 
	#MATOCL_MLOG_LIST
 (
PROTO_BASE
+523)

	)

1202 
	#CLTOCS_HDD_LIST_V2
 (
PROTO_BASE
+600)

	)

1206 
	#CSTOCL_HDD_LIST_V2
 (
PROTO_BASE
+601)

	)

	@mfscommon/cfg.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<sy¶og.h
>

26 
	~"cfg.h
"

27 
	~"mas£π.h
"

28 
	~"¶oggî.h
"

30 
	s∑øms°r
 {

31 *
	m«me
;

32 *
	mvÆue
;

33 
∑øms°r
 *
	m√xt
;

34 } 
	t∑øm°r
;

36 
∑øm°r
 *
	g∑ømhód
=
NULL
;

37 
	glogundeföed
=0;

39 
	$cfg_lﬂd
 (c⁄° *
c⁄fig‚ame
,
_lu
) {

40 
FILE
 *
fd
;

41 
löebuff
[1000];

42 
uöt32_t
 
≈s
,
≈e
,
vps
,
v≥
,
i
;

44 
∑øm°r
 *
tmp
;

45 
∑ømhód
 = 
NULL
;

46 
logundeföed
 = 
_lu
;

48 
fd
 = 
	`f›í
(
c⁄fig‚ame
,"r");

49 i‡(
fd
==
NULL
) {

50 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"ˇ¬ŸÜﬂd c⁄fig fûe: %s",
c⁄fig‚ame
);

53 
	`fgës
(
löebuff
,999,
fd
)!=
NULL
) {

54 
löebuff
[999]=0;

55 i‡(
löebuff
[0]=='#') {

58 
i
 = 0;

59 
löebuff
[
i
]==' ' ||Üinebuff[i]=='\t') i++;

60 
≈s
 = 
i
;

61 
löebuff
[
i
]>32 &&Üinebuff[i]<127) {

62 
i
++;

64 
≈e
 = 
i
;

65 
löebuff
[
i
]==' ' ||Üinebuff[i]=='\t') i++;

66 i‡(
löebuff
[
i
]!='=' || 
≈e
==
≈s
) {

69 
i
++;

70 
löebuff
[
i
]==' ' ||Üinebuff[i]=='\t') i++;

71 
vps
 = 
i
;

72 
löebuff
[
i
]>=32 &&Üinebuff[i]<127) {

73 
i
++;

75 
i
>
vps
 && 
löebuff
[i-1]==32) {

76 
i
--;

78 
v≥
 = 
i
;

79 
löebuff
[
i
]==' ' ||Üinebuff[i]=='\t') i++;

80 i‡(
löebuff
[
i
]!='\0' &&Üinebuff[i]!='\r' &&Üinebuff[i]!='\n' &&Üinebuff[i]!='#') {

83 
tmp
 = (
∑øm°r
*)
	`mÆloc
((paramstr));

84 
	`∑s£π
(
tmp
);

85 
tmp
->
«me
 = (*)
	`mÆloc
(
≈e
-
≈s
+1);

86 
	`∑s£π
(
tmp
->
«me
);

87 
tmp
->
vÆue
 = (*)
	`mÆloc
(
v≥
-
vps
+1);

88 
	`∑s£π
(
tmp
->
vÆue
);

89 
	`mem˝y
(
tmp
->
«me
,
löebuff
+
≈s
,
≈e
-nps);

90 i‡(
v≥
>
vps
) {

91 
	`mem˝y
(
tmp
->
vÆue
,
löebuff
+
vps
,
v≥
-vps);

93 
tmp
->
«me
[
≈e
-
≈s
]=0;

94 
tmp
->
vÆue
[
v≥
-
vps
]=0;

95 
tmp
->
√xt
 = 
∑ømhód
;

96 
∑ømhód
 = 
tmp
;

98 
	`f˛o£
(
fd
);

100 
	}
}

102 
	$cfg_isdeföed
(c⁄° *
«me
) {

103 
∑øm°r
 *
_cfg_tmp
;

104 
_cfg_tmp
 = 
∑ømhód
 ; _cfg_tm∞; _cfg_tmp=_cfg_tmp->
√xt
) {

105 i‡(
	`°rcmp
(
«me
,
_cfg_tmp
->name)==0) {

110 
	}
}

112 
	$cfg_ãrm
() {

113 
∑øm°r
 *
i
,*
ö
;

114 
i
 = 
∑ømhód
 ; i ; i = 
ö
) {

115 
ö
 = 
i
->
√xt
;

116 
	`‰ì
(
i
->
vÆue
);

117 
	`‰ì
(
i
->
«me
);

118 
	`‰ì
(
i
);

120 
	}
}

122 
	#STR_TO_öt
(
x
Ë 
	`°πﬁ
(x,
NULL
,0)

	)

123 
	#STR_TO_öt32
(
x
Ë 
	`°πﬁ
(x,
NULL
,0)

	)

124 
	#STR_TO_uöt32
(
x
Ë 
	`°πoul
(x,
NULL
,0)

	)

125 
	#STR_TO_öt64
(
x
Ë 
	`°πﬁl
(x,
NULL
,0)

	)

126 
	#STR_TO_uöt64
(
x
Ë 
	`°πouŒ
(x,
NULL
,0)

	)

127 
	#STR_TO_doubÀ
(
x
Ë 
	`°πod
(x,
NULL
)

	)

128 
	#STR_TO_ch¨±r
(
x
) { \

129 * 
_cfg_ªt_tmp
 = 
	`°rdup
(
x
); \

130 
	`∑s£π
(
_cfg_ªt_tmp
); \

131  
_cfg_ªt_tmp
; \

132 }

	)

134 
	#COPY_öt
(
x
Ë 
	)
x

135 
	#COPY_öt32
(
x
Ë 
	)
x

136 
	#COPY_uöt32
(
x
Ë 
	)
x

137 
	#COPY_öt64
(
x
Ë 
	)
x

138 
	#COPY_uöt64
(
x
Ë 
	)
x

139 
	#COPY_doubÀ
(
x
Ë 
	)
x

140 
	#COPY_ch¨±r
(
x
) { \

141 * 
_cfg_ªt_tmp
 = 
	`°rdup
(
x
); \

142 
	`∑s£π
(
_cfg_ªt_tmp
); \

143  
_cfg_ªt_tmp
; \

144 }

	)

146 
	#_CONFIG_GEN_FUNCTION
(
‚ame
,
ty≥
,
c⁄v«me
,
f‹m©
) \

147 
ty≥
 
cfg_gë
##
	`‚ame
(c⁄° *
«me
,ty≥ 
def
) { \

148 
∑øm°r
 *
_cfg_tmp
; \

149 
_cfg_tmp
 = 
∑ømhód
 ; _cfg_tm∞; _cfg_tmp=_cfg_tmp->
√xt
) { \

150 i‡(
	`°rcmp
(
«me
,
_cfg_tmp
->name)==0) { \

151 
STR_TO_
##
	`c⁄v«me
(
_cfg_tmp
->
vÆue
); \

154 i‡(
logundeföed
) { \

155 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"c⁄fig: usög deÁu… vÆuêf‹ o±i⁄ '%s' - '" 
f‹m©
 "'",
«me
,
def
); \

157 
COPY_
##
	`c⁄v«me
(
def
); \

158 }

	)

160 
_CONFIG_GEN_FUNCTION
(
°r
,*,
ch¨±r
,"%s")

161 
_CONFIG_GEN_FUNCTION
(
num
,,,"%d")

162 
_CONFIG_GEN_FUNCTION
(
öt8
,
öt8_t
,
öt32
,"%"
PRId8
)

163 
_CONFIG_GEN_FUNCTION
(
uöt8
,
uöt8_t
,
uöt32
,"%"
PRIu8
)

164 
_CONFIG_GEN_FUNCTION
(
öt16
,
öt16_t
,
öt32
,"%"
PRId16
)

165 
_CONFIG_GEN_FUNCTION
(
uöt16
,
uöt16_t
,
uöt32
,"%"
PRIu16
)

166 
_CONFIG_GEN_FUNCTION
(
öt32
,
öt32_t
,öt32,"%"
PRId32
)

167 
_CONFIG_GEN_FUNCTION
(
uöt32
,
uöt32_t
,uöt32,"%"
PRIu32
)

168 
_CONFIG_GEN_FUNCTION
(
öt64
,
öt64_t
,öt64,"%"
PRId64
)

169 
_CONFIG_GEN_FUNCTION
(
uöt64
,
uöt64_t
,uöt64,"%"
PRIu64
)

170 
_CONFIG_GEN_FUNCTION
(,,,"%lf")

	@mfscommon/cfg.h

19 #i‚de‡
_CFG_H_


20 
	#_CFG_H_


	)

22 
	~<öây≥s.h
>

24 
	#_CONFIG_MAKE_PROTOTYPE
(
‚ame
,
ty≥
Ëty≥ 
cfg_gë
##
	`‚ame
(c⁄° *
«me
,ty≥ 
def
)

	)

26 
cfg_lﬂd
 (c⁄° *
‚ame
,
logundeföed
);

27 
cfg_ãrm
 ();

29 
cfg_isdeföed
(c⁄° *
«me
);

31 
_CONFIG_MAKE_PROTOTYPE
(
°r
,*);

32 
_CONFIG_MAKE_PROTOTYPE
(
num
,);

33 
_CONFIG_MAKE_PROTOTYPE
(
uöt8
,
uöt8_t
);

34 
_CONFIG_MAKE_PROTOTYPE
(
öt8
,
öt8_t
);

35 
_CONFIG_MAKE_PROTOTYPE
(
uöt16
,
uöt16_t
);

36 
_CONFIG_MAKE_PROTOTYPE
(
öt16
,
öt16_t
);

37 
_CONFIG_MAKE_PROTOTYPE
(
uöt32
,
uöt32_t
);

38 
_CONFIG_MAKE_PROTOTYPE
(
öt32
,
öt32_t
);

39 
_CONFIG_MAKE_PROTOTYPE
(
uöt64
,
uöt64_t
);

40 
_CONFIG_MAKE_PROTOTYPE
(
öt64
,
öt64_t
);

41 
_CONFIG_MAKE_PROTOTYPE
(,);

	@mfscommon/charts.c

19 #ifde‡
HAVE_CONFIG_H


20 
	~"c⁄fig.h
"

22 
	#HAVE_ZLIB_H
 1

	)

23 
	#HAVE_STRUCT_TM_TM_GMTOFF
 1

	)

26 
	~<time.h
>

27 
	~<°dlib.h
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<sys/time.h
>

33 
	~<î∫o.h
>

34 
	~<öây≥s.h
>

35 #ifde‡
HAVE_ZLIB_H


36 
	~<zlib.h
>

39 
	~"ch¨ts.h
"

40 
	~"¸c.h
"

41 
	~"d©≠ack.h
"

42 
	~"mas£π.h
"

43 
	~"¶oggî.h
"

45 
	#USE_NET_ORDER
 1

	)

47 
	#LENG
 950

	)

48 
	#DATA
 100

	)

49 
	#XPOS
 43

	)

50 
	#YPOS
 6

	)

51 
	#XSIZE
 (
LENG
+50)

	)

52 
	#YSIZE
 (
DATA
+20)

	)

55 
	#SHORTRANGE
 0

	)

56 
	#MEDIUMRANGE
 1

	)

57 
	#LONGRANGE
 2

	)

58 
	#VERYLONGRANGE
 3

	)

60 
	#RANGES
 4

	)

62 
	#CHARTS_DEF_IS_DIRECT
(
x
Ë((x)>=
CHARTS_DIRECT_START
 && (x)<CHARTS_DIRECT_START+
°©defscou¡
)

	)

63 
	#CHARTS_DIRECT_POS
(
x
Ë((x)-
CHARTS_DIRECT_START
)

	)

64 
	#CHARTS_DEF_IS_CALC
(
x
Ë((x)>=
CHARTS_CALC_START
 && (x)<CHARTS_CALC_START+
ˇlcdefscou¡
)

	)

65 
	#CHARTS_CALC_POS
(
x
Ë((x)-
CHARTS_CALC_START
)

	)

67 
	#CHARTS_IS_DIRECT_STAT
(
x
Ë((x)<
°©defscou¡
)

	)

68 
	#CHARTS_EXTENDED_START
 100

	)

69 
	#CHARTS_IS_EXTENDED_STAT
(
x
Ë((x)>=
CHARTS_EXTENDED_START
 && (x)<CHARTS_EXTENDED_START+
e°©defscou¡
)

	)

70 
	#CHARTS_EXTENDED_POS
(
x
Ë((x)-
CHARTS_EXTENDED_START
)

	)

72 
uöt32_t
 *
	gˇlcdefs
;

73 
uöt32_t
 **
	gˇlc°¨ços
;

74 
uöt32_t
 
	gˇlcdefscou¡
;

75 
°©def
 *
	g°©defs
;

76 
uöt32_t
 
	g°©defscou¡
;

77 
e°©def
 *
	ge°©defs
;

78 
uöt32_t
 
	ge°©defscou¡
;

79 * 
	g°©sfûíame
;

81 
uöt64_t
 
	t°©_ªc‹d
[
RANGES
][
LENG
];

83 
°©_ªc‹d
 *
	g£rõs
;

84 
uöt32_t
 
	gpoöãrs
[
RANGES
];

85 
uöt32_t
 
	gtimïoöt
[
RANGES
];

88 
uöt32_t
 
	gshhour
,
	gshmö
;

89 
uöt32_t
 
	gmedhour
,
	gmedmö
;

90 
uöt32_t
 
	g ghÆfhour
,
	g gmday
,
	g gm⁄th
,
	g gyór
;

91 
uöt32_t
 
	gv gmday
,
	gv gm⁄th
,
	gv gyór
;

93 
	#RAWSIZE
 ((1+(((
XSIZE
)+1)>>1))*(
YSIZE
))

	)

94 
	#CBUFFSIZE
 (((
RAWSIZE
)*1001)/1000+16)

	)

96 
uöt8_t
 
	gch¨t
[(
XSIZE
)*(
YSIZE
)];

97 
uöt8_t
 
	gøwch¨t
[
RAWSIZE
];

98 
uöt8_t
 
	gcompbuff
[
CBUFFSIZE
];

99 
uöt32_t
 
	gcompsize
=0;

100 #ifde‡
HAVE_ZLIB_H


101 
z_°ªam
 
	gz°r
;

103 
uöt8_t
 
	gw¨nög
[50] = {

112 
	#COLOR_TRANSPARENT
 0

	)

113 
	#COLOR_BKG
 1

	)

114 
	#COLOR_AXIS
 2

	)

115 
	#COLOR_AUX
 3

	)

116 
	#COLOR_TEXT
 4

	)

117 
	#COLOR_DATA1
 5

	)

118 
	#COLOR_DATA2
 6

	)

119 
	#COLOR_DATA3
 7

	)

120 
	#COLOR_NODATA
 8

	)

122 
uöt8_t
 
	g≤g_hódî
[] = {

126 ((
XSIZE
)>>24)&0xFF, ((XSIZE)>>16)&0xFF, ((XSIZE)>>8)&0xFF, (XSIZE)&0xFF,

127 ((
YSIZE
)>>24)&0xFF, ((YSIZE)>>16)&0xFF, ((YSIZE)>>8)&0xFF, (YSIZE)&0xFF,

154 
uöt8_t
 
	g≤g_èûî
[] = {

160 
uöt8_t
 
	g≤g_1x1
[] = {

178 
uöt8_t
 
	gf⁄t
[25][9]={

431 
	#FDOT
 10

	)

432 
	#COLON
 11

	)

433 
	#KILO
 12

	)

434 
	#MEGA
 13

	)

435 
	#GIGA
 14

	)

436 
	#TERA
 15

	)

437 
	#PETA
 16

	)

438 
	#EXA
 17

	)

439 
	#ZETTA
 18

	)

440 
	#YOTTA
 19

	)

441 
	#MILI
 20

	)

442 
	#MICRO
 21

	)

443 
	#PERCENT
 22

	)

444 
	#SPACE
 23

	)

445 
	#SQUARE
 24

	)

447 
uöt32_t
 
	$gëm⁄Àng
(
uöt32_t
 
yór
,uöt32_à
m⁄th
) {

448 
m⁄th
) {

463 i‡(
yór
%4)  28;

464 i‡(
yór
%100)  29;

465 i‡(
yór
%400)  29;

469 
	}
}

471 
	#CHARTS_FILE_VERSION
 0x00010000

	)

473 
	$ch¨ts_°‹e
 () {

474 
fd
;

475 
uöt32_t
 
s
,
i
,
j
,
p
;

476 
uöt64_t
 *
èb
;

477 #ifde‡
USE_NET_ORDER


478 
uöt8_t
 *
±r
;

479 
uöt8_t
 
hdr
[16];

480 
uöt8_t
 
d©a
[8*
LENG
];

482 
uöt32_t
 
hdr
[4];

484 
«mehdr
[100];

486 
fd
 = 
	`›í
(
°©sfûíame
,
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,0666);

487 i‡(
fd
<0) {

488 
	`mfs_îæog
(
LOG_WARNING
,"error creating charts data file");

491 #ifde‡
USE_NET_ORDER


492 
±r
 = 
hdr
;

493 
	`put32bô
(&
±r
,
CHARTS_FILE_VERSION
);

494 
	`put32bô
(&
±r
,
LENG
);

495 
	`put32bô
(&
±r
,
°©defscou¡
);

496 
	`put32bô
(&
±r
,
timïoöt
[
SHORTRANGE
]);

497 i‡(
	`wrôe
(
fd
,(*)
hdr
,16)!=16) {

498 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

499 
	`˛o£
(
fd
);

503 
hdr
[0]=
CHARTS_FILE_VERSION
;

504 
hdr
[1]=
LENG
;

505 
hdr
[2]=
°©defscou¡
;

506 
hdr
[3]=
timïoöt
[
SHORTRANGE
];

507 i‡(
	`wrôe
(
fd
,(*)
hdr
,(
uöt32_t
)*4)!=(uint32_t)*4) {

508 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

509 
	`˛o£
(
fd
);

513 
i
=0 ; i<
°©defscou¡
 ; i++) {

514 
s
 = 
	`°æí
(
°©defs
[
i
].
«me
);

515 
	`mem£t
(
«mehdr
,0,100);

516 
	`mem˝y
(
«mehdr
,
°©defs
[
i
].
«me
,(
s
>100)?100:s);

517 i‡(
	`wrôe
(
fd
,(*)
«mehdr
,100)!=100) {

518 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

519 
	`˛o£
(
fd
);

522 
j
=0 ; j<
RANGES
 ; j++) {

523 
èb
 = 
£rõs
[
i
][
j
];

524 
p
 = 
poöãrs
[
j
]+1;

525 #ifde‡
USE_NET_ORDER


526 
±r
 = 
d©a
;

527 
s
=0 ; s<
LENG
 ; s++) {

528 
	`put64bô
(&
±r
,
èb
[(
p
+
s
)%
LENG
]);

530 i‡(
	`wrôe
(
fd
,(*)
d©a
,8*
LENG
)!=(
ssize_t
)(8*LENG)) {

531 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

532 
	`˛o£
(
fd
);

536 i‡(
p
<
LENG
) {

537 i‡(
	`wrôe
(
fd
,(*)(
èb
+
p
),(
uöt64_t
)*(
LENG
-p))!=(
ssize_t
)((uint64_t)*(LENG-p))) {

538 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

539 
	`˛o£
(
fd
);

543 i‡(
	`wrôe
(
fd
,(*)
èb
,(
uöt64_t
)*
p
)!=(
ssize_t
)((uint64_t)*p)) {

544 
	`mfs_îæog
(
LOG_WARNING
,"error writing charts data file");

545 
	`˛o£
(
fd
);

551 
	`˛o£
(
fd
);

552 
	}
}

554 
	$ch¨ts_imp‹t_‰om_ﬁd_4ønges_f‹m©
(
fd
) {

555 
uöt32_t
 
hdr
[21];

556 
uöt32_t
 
i
,
j
,
p
,
Êíg
,
fch¨ts
;

557 
uöt64_t
 *
èb
;

558 i‡(
	`ªad
(
fd
,(*)
hdr
,(
uöt32_t
)*21)!=(
ssize_t
)((uint32_t)*21)) {

582 
fch¨ts
 = 
hdr
[0];

583 
Êíg
 = 
hdr
[1];

584 
timïoöt
[
SHORTRANGE
]=
hdr
[17];

588 
poöãrs
[
SHORTRANGE
]=
LENG
-1;

589 
poöãrs
[
MEDIUMRANGE
]=
LENG
-1;

590 
poöãrs
[
LONGRANGE
]=
LENG
-1;

591 
poöãrs
[
VERYLONGRANGE
]=
LENG
-1;

592 
j
=0 ; j<
RANGES
 ; j++) {

593 
p
 = 
hdr
[13+
j
];

594 
i
=0 ; i<
fch¨ts
 ; i++) {

595 i‡(
i
<
°©defscou¡
) {

596 
èb
 = 
£rõs
[
i
][
j
];

597 i‡(
Êíg
>=
LENG
) {

598 i‡(
p
>=
LENG
-1) {

599 i‡(
p
>
LENG
-1) {

600 
	`l£ek
(
fd
,(
p
-(
LENG
-1))*(
uöt64_t
),
SEEK_CUR
);

602 i‡(
	`ªad
(
fd
,(*)
èb
,(
uöt64_t
)*
LENG
)!=(
ssize_t
)((uint64_t)*LENG)) {

605 i‡(
Êíg
-1>
p
) {

606 
	`l£ek
(
fd
,((
Êíg
-1-
p
))*(
uöt64_t
),
SEEK_CUR
);

609 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-1-
p
)),(
uöt64_t
)*’+1))!=(
ssize_t
)((uint64_t)*(p+1))) {

612 i‡(
LENG
>
Êíg
) {

613 
	`l£ek
(
fd
,(
Êíg
-
LENG
)*(
uöt64_t
),
SEEK_CUR
);

615 i‡(
	`ªad
(
fd
,(*)
èb
,(
LENG
-1-
p
)*(
uöt64_t
))!=(
ssize_t
)((LENG-1-p)*(uint64_t))) {

620 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-1-
p
)),(
uöt64_t
)*’+1))!=(
ssize_t
)((uint64_t)*(p+1))) {

623 i‡(
p
+1<
Êíg
) {

624 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-
Êíg
)),(Êíg-1-
p
)*(
uöt64_t
))!=(
ssize_t
)((fleng-1-p)*(uint64_t))) {

630 
	`l£ek
(
fd
,
Êíg
*(
uöt64_t
),
SEEK_CUR
);

635 
	}
}

637 
	$ch¨ts_imp‹t_‰om_ﬁd_3ønges_f‹m©
(
fd
) {

638 
uöt32_t
 
hdr
[15];

639 
uöt32_t
 
i
,
j
,
p
,
Êíg
,
fch¨ts
;

640 
uöt64_t
 *
èb
;

641 i‡(
	`ªad
(
fd
,(*)
hdr
,(
uöt32_t
)*15)!=(
ssize_t
)((uint32_t)*15)) {

659 
fch¨ts
 = 
hdr
[0];

660 
Êíg
 = 
hdr
[1];

661 
timïoöt
[
SHORTRANGE
]=
hdr
[12];

665 
poöãrs
[
SHORTRANGE
]=
LENG
-1;

666 
poöãrs
[
MEDIUMRANGE
]=
LENG
-1;

667 
poöãrs
[
LONGRANGE
]=
LENG
-1;

668 
poöãrs
[
VERYLONGRANGE
]=
LENG
-1;

669 
j
=0 ; j<
RANGES
 ; j++) {

670 i‡(
j
==2) {

673 i‡(
j
<2) {

674 
p
 = 
hdr
[9+
j
];

676 
p
 = 
hdr
[11];

678 
i
=0 ; i<
fch¨ts
 ; i++) {

679 i‡(
i
<
°©defscou¡
) {

680 
èb
 = 
£rõs
[
i
][
j
];

681 i‡(
Êíg
>=
LENG
) {

682 i‡(
p
>=
LENG
-1) {

683 i‡(
p
>
LENG
-1) {

684 
	`l£ek
(
fd
,(
p
-(
LENG
-1))*(
uöt64_t
),
SEEK_CUR
);

686 i‡(
	`ªad
(
fd
,(*)
èb
,(
uöt64_t
)*
LENG
)!=(
ssize_t
)((uint64_t)*LENG)) {

689 i‡(
Êíg
-1>
p
) {

690 
	`l£ek
(
fd
,((
Êíg
-1-
p
))*(
uöt64_t
),
SEEK_CUR
);

693 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-1-
p
)),(
uöt64_t
)*’+1))!=(
ssize_t
)((uint64_t)*(p+1))) {

696 i‡(
LENG
>
Êíg
) {

697 
	`l£ek
(
fd
,(
Êíg
-
LENG
)*(
uöt64_t
),
SEEK_CUR
);

699 i‡(
	`ªad
(
fd
,(*)
èb
,(
LENG
-1-
p
)*(
uöt64_t
))!=(
ssize_t
)((LENG-1-p)*(uint64_t))) {

704 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-1-
p
)),(
uöt64_t
)*’+1))!=(
ssize_t
)((uint64_t)*(p+1))) {

707 i‡(
p
+1<
Êíg
) {

708 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-
Êíg
)),(Êíg-1-
p
)*(
uöt64_t
))!=(
ssize_t
)((fleng-1-p)*(uint64_t))) {

714 
	`l£ek
(
fd
,
Êíg
*(
uöt64_t
),
SEEK_CUR
);

719 
	}
}

721 
	$ch¨ts_lﬂd
() {

722 
fd
;

723 
uöt32_t
 
i
,
j
,
k
,
Êíg
,
fch¨ts
;

724 
uöt64_t
 *
èb
;

725 #ifde‡
USE_NET_ORDER


726 
uöt32_t
 
l
;

727 c⁄° 
uöt8_t
 *
±r
;

728 
uöt8_t
 
hdr
[16];

729 
uöt8_t
 
d©a
[8*
LENG
];

731 
uöt32_t
 
hdr
[3];

733 
«mehdr
[101];

735 
fd
 = 
	`›í
(
°©sfûíame
,
O_RDONLY
);

736 i‡(
fd
<0) {

737 i‡(
î∫o
!=
ENOENT
) {

738 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

740 
	`mfs_sy¶og
(
LOG_NOTICE
,"no charts data file - initializingÉmpty charts");

744 #ifde‡
USE_NET_ORDER


745 i‡(
	`ªad
(
fd
,(*)
hdr
,16)!=16) {

746 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

747 
	`˛o£
(
fd
);

750 
±r
 = 
hdr
;

751 
i
 = 
	`gë32bô
(&
±r
);

752 i‡(
i
!=
CHARTS_FILE_VERSION
) {

753 
	`l£ek
(
fd
,4,
SEEK_SET
);

754 
	`mem˝y
((*)&
j
,
hdr
,4);

755 i‡(
j
==4) {

756 i‡(
	`ch¨ts_imp‹t_‰om_ﬁd_4ønges_f‹m©
(
fd
)<0) {

757 
	`mfs_sy¶og
(
LOG_WARNING
,"error importing charts data from 4-ranges format");

759 } i‡(
j
==3) {

760 i‡(
	`ch¨ts_imp‹t_‰om_ﬁd_3ønges_f‹m©
(
fd
)<0) {

761 
	`mfs_sy¶og
(
LOG_WARNING
,"error importing charts data from 3-ranges format");

764 
	`mfs_sy¶og
(
LOG_WARNING
,"unrecognized charts data file format - initializingÉmpty charts");

766 
	`˛o£
(
fd
);

769 
Êíg
 = 
	`gë32bô
(&
±r
);

770 
fch¨ts
 = 
	`gë32bô
(&
±r
);

771 
i
 = 
	`gë32bô
(&
±r
);

772 
timïoöt
[
SHORTRANGE
]=
i
;

777 i‡(
	`ªad
(
fd
,(*)
hdr
,(
uöt32_t
))!=(uint32_t)) {

778 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

779 
	`˛o£
(
fd
);

782 i‡(
hdr
[0]!=
CHARTS_FILE_VERSION
) {

783 i‡(
hdr
[0]==4) {

784 i‡(
	`ch¨ts_imp‹t_‰om_ﬁd_4ønges_f‹m©
(
fd
)<0) {

785 
	`mfs_sy¶og
(
LOG_WARNING
,"error importing charts data from 4-ranges format");

787 } i‡(
hdr
[0]==3) {

788 i‡(
	`ch¨ts_imp‹t_‰om_ﬁd_3ønges_f‹m©
(
fd
)<0) {

789 
	`mfs_sy¶og
(
LOG_WARNING
,"error importing charts data from 3-ranges format");

792 
	`mfs_sy¶og
(
LOG_WARNING
,"unrecognized charts data file format - initializingÉmpty charts");

794 
	`˛o£
(
fd
);

797 i‡(
	`ªad
(
fd
,(*)
hdr
,(
uöt32_t
)*3)!=(uint32_t)*3) {

798 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

799 
	`˛o£
(
fd
);

802 
Êíg
 = 
hdr
[0];

803 
fch¨ts
 = 
hdr
[1];

804 
timïoöt
[
SHORTRANGE
]=
hdr
[2];

809 
poöãrs
[
SHORTRANGE
]=
LENG
-1;

810 
poöãrs
[
MEDIUMRANGE
]=
LENG
-1;

811 
poöãrs
[
LONGRANGE
]=
LENG
-1;

812 
poöãrs
[
VERYLONGRANGE
]=
LENG
-1;

813 
i
=0 ; i<
fch¨ts
 ; i++) {

814 i‡(
	`ªad
(
fd
,
«mehdr
,100)!=100) {

815 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

816 
	`˛o£
(
fd
);

819 
«mehdr
[100]=0;

820 
j
=0 ; j<
°©defscou¡
 && 
	`°rcmp
(
°©defs
[j].
«me
,
«mehdr
)!=0 ; j++) {}

821 i‡(
j
>=
°©defscou¡
) {

822 
	`l£ek
(
fd
,
RANGES
*
Êíg
*8,
SEEK_CUR
);

825 
k
=0 ; k<
RANGES
 ; k++) {

826 
èb
 = 
£rõs
[
j
][
k
];

827 i‡(
Êíg
>
LENG
) {

828 
	`l£ek
(
fd
,(
Êíg
-
LENG
)*(
uöt64_t
),
SEEK_CUR
);

830 #ifde‡
USE_NET_ORDER


831 i‡(
Êíg
<
LENG
) {

832 i‡(
	`ªad
(
fd
,(*)
d©a
,8*
Êíg
)!=(
ssize_t
)(8*fleng)) {

833 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

834 
	`˛o£
(
fd
);

837 
±r
 = 
d©a
;

838 
l
=
LENG
-
Êíg
 ;Ü<LENG ;Ü++) {

839 
èb
[
l
] = 
	`gë64bô
(&
±r
);

842 i‡(
	`ªad
(
fd
,(*)
d©a
,8*
LENG
)!=(
ssize_t
)(8*LENG)) {

843 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

844 
	`˛o£
(
fd
);

847 
±r
 = 
d©a
;

848 
l
=0 ;Ü<
LENG
 ;Ü++) {

849 
èb
[
l
] = 
	`gë64bô
(&
±r
);

853 i‡(
Êíg
<
LENG
) {

854 i‡(
	`ªad
(
fd
,(*)(
èb
+(
LENG
-
Êíg
)),(
uöt64_t
)*Êíg)!=(
ssize_t
)((uint64_t)*fleng)) {

855 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

856 
	`˛o£
(
fd
);

860 i‡(
	`ªad
(
fd
,(*)
èb
,(
uöt64_t
)*
LENG
)!=(
ssize_t
)((uint64_t)*LENG)) {

861 
	`mfs_îæog
(
LOG_WARNING
,"errorÑeading charts data file");

862 
	`˛o£
(
fd
);

870 
	`˛o£
(
fd
);

871 
	`mfs_sy¶og
(
LOG_NOTICE
,"stats file has beenÜoaded");

873 
	}
}

875 
	$ch¨ts_fû…ab
(
uöt64_t
 *
d©©ab
,
uöt32_t
 
ønge
,uöt32_à
ty≥
,uöt32_à
˙o
) {

876 #i‡
	`deföed
(
INT64_MIN
)

877 
	#STACK_NODATA
 
INT64_MIN


	)

878 #ñi‡
	`deföed
(
INT64_C
)

879 
	#STACK_NODATA
 (-
	`INT64_C
(9223372036854775807)-1)

	)

881 
	#STACK_NODATA
 (-9223372036854775807LL-1)

	)

884 
uöt32_t
 
i
;

885 
uöt32_t
 
§c
,*
›s
;

886 
öt64_t
 
°ack
[50];

887 
uöt32_t
 
•
;

888 i‡(
ønge
>=
RANGES
 || 
˙o
==0 || cno>3) {

889 
i
=0 ; i<
LENG
 ; i++) {

890 
d©©ab
[
i
] = 
CHARTS_NODATA
;

894 i‡(
	`CHARTS_IS_DIRECT_STAT
(
ty≥
)) {

895 i‡(
˙o
==1) {

896 
i
=0 ; i<
LENG
 ; i++) {

897 
d©©ab
[
i
] = 
£rõs
[
ty≥
][
ønge
][i];

900 
i
=0 ; i<
LENG
 ; i++) {

901 
d©©ab
[
i
] = 
CHARTS_NODATA
;

904 } i‡(
	`CHARTS_IS_EXTENDED_STAT
(
ty≥
)) {

905 i‡(
˙o
==1) {

906 
§c
 = 
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
c1§c
;

907 } i‡(
˙o
==2) {

908 
§c
 = 
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
c2§c
;

910 
§c
 = 
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
c3§c
;

912 i‡(
	`CHARTS_DEF_IS_DIRECT
(
§c
)) {

913 
i
=0 ; i<
LENG
 ; i++) {

914 
d©©ab
[
i
] = 
£rõs
[
	`CHARTS_DIRECT_POS
(
§c
)][
ønge
][i];

916 } i‡(
	`CHARTS_DEF_IS_CALC
(
§c
)) {

917 
i
=0 ; i<
LENG
 ; i++) {

918 
•
=0;

919 
›s
 = 
ˇlc°¨ços
[
	`CHARTS_CALC_POS
(
§c
)];

920 *
›s
!=
CHARTS_OP_END
) {

921 i‡(
	`CHARTS_IS_DIRECT_STAT
(*
›s
)) {

922 i‡(
•
<50) {

923 i‡(
£rõs
[*
›s
][
ønge
][
i
]==
CHARTS_NODATA
) {

924 
°ack
[
•
]=
STACK_NODATA
;

926 
°ack
[
•
]=
£rõs
[*
›s
][
ønge
][
i
];

928 
•
++;

930 } i‡(*
›s
==
CHARTS_OP_ADD
) {

931 i‡(
•
>=2) {

932 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA) {

933 
°ack
[
•
-2]=
STACK_NODATA
;

935 
°ack
[
•
-2]+=stack[sp-1];

937 
•
--;

939 } i‡(*
›s
==
CHARTS_OP_SUB
) {

940 i‡(
•
>=2) {

941 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA) {

942 
°ack
[
•
-2]=
STACK_NODATA
;

944 
°ack
[
•
-2]-=stack[sp-1];

946 
•
--;

948 } i‡(*
›s
==
CHARTS_OP_MIN
) {

949 i‡(
•
>=2) {

950 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA) {

951 
°ack
[
•
-2]=
STACK_NODATA
;

952 } i‡(
°ack
[
•
-1]<stack[sp-2]) {

953 
°ack
[
•
-2]=stack[sp-1];

955 
•
--;

957 } i‡(*
›s
==
CHARTS_OP_MAX
) {

958 i‡(
•
>=2) {

959 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA) {

960 
°ack
[
•
-2]=
STACK_NODATA
;

961 } i‡(
°ack
[
•
-1]>stack[sp-2]) {

962 
°ack
[
•
-2]=stack[sp-1];

964 
•
--;

966 } i‡(*
›s
==
CHARTS_OP_MUL
) {

967 i‡(
•
>=2) {

968 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA) {

969 
°ack
[
•
-2]=
STACK_NODATA
;

971 
°ack
[
•
-2]*=stack[sp-1];

973 
•
--;

975 } i‡(*
›s
==
CHARTS_OP_DIV
) {

976 i‡(
•
>=2) {

977 i‡(
°ack
[
•
-1]==
STACK_NODATA
 || stack[sp-2]==STACK_NODATA || stack[sp-1]==0) {

978 
°ack
[
•
-2]=
STACK_NODATA
;

980 
°ack
[
•
-2]/=stack[sp-1];

982 
•
--;

984 } i‡(*
›s
==
CHARTS_OP_NEG
) {

985 i‡(
•
>=1) {

986 i‡(
°ack
[
•
-1]!=
STACK_NODATA
) {

987 
°ack
[
•
-1]=-stack[sp-1];

990 } i‡(*
›s
==
CHARTS_OP_CONST
) {

991 
›s
++;

992 i‡(
•
<50) {

993 
°ack
[
•
]=*
›s
;

994 
•
++;

997 
›s
++;

999 i‡(
•
>=1 && 
°ack
[sp-1]>=0) {

1000 
d©©ab
[
i
]=
°ack
[
•
-1];

1002 
d©©ab
[
i
]=
CHARTS_NODATA
;

1006 
i
=0 ; i<
LENG
 ; i++) {

1007 
d©©ab
[
i
] = 
CHARTS_NODATA
;

1011 
i
=0 ; i<
LENG
 ; i++) {

1012 
d©©ab
[
i
] = 
CHARTS_NODATA
;

1015 
	}
}

1017 
uöt64_t
 
	$ch¨ts_gë
 (
uöt32_t
 
ty≥
,uöt32_à
numb
) {

1018 
uöt64_t
 
ªsu…
=0,
˙t
;

1019 
uöt64_t
 *
èb
;

1020 
uöt32_t
 
i
,
±r
;

1022 i‡(
numb
==0 ||Çumb>
LENG
Ë 
ªsu…
;

1023 i‡(
	`CHARTS_IS_DIRECT_STAT
(
ty≥
)) {

1024 
èb
 = 
£rõs
[
ty≥
][
SHORTRANGE
];

1025 
±r
 = 
poöãrs
[
SHORTRANGE
];

1026 i‡(
°©defs
[
ty≥
].
mode
 =
CHARTS_MODE_ADD
) {

1027 
˙t
=0;

1028 
i
=0 ; i<
numb
 ; i++) {

1029 i‡(
èb
[(
LENG
+
±r
-
i
)%LENG]!=
CHARTS_NODATA
) {

1030 
ªsu…
 +
èb
[(
LENG
+
±r
-
i
)%LENG];

1031 
˙t
++;

1034 i‡(
˙t
>0) {

1035 
ªsu…
 /
˙t
;

1038 
i
=0 ; i<
numb
 ; i++) {

1039 i‡(
èb
[(
LENG
+
±r
-
i
)%LENG]!=
CHARTS_NODATA
 &&Åab[(LENG+±r-i)%LENG]>
ªsu…
) {

1040 
ªsu…
 = 
èb
[(
LENG
+
±r
-
i
)%LENG];

1045  
ªsu…
;

1046 
	}
}

1048 
	$ch¨ts_öôtimïoöãrs
 () {

1049 
time_t
 
now
;

1050 
öt32_t
 
loˇl
;

1051 
tm
 *
ts
;

1053 i‡(
timïoöt
[
SHORTRANGE
]==0) {

1054 
now
 = 
	`time
(
NULL
);

1055 
ts
 = 
	`loˇ…ime
(&
now
);

1056 #ifde‡
HAVE_STRUCT_TM_TM_GMTOFF


1057 
loˇl
 = 
now
+
ts
->
tm_gmtoff
;

1059 
loˇl
 = 
now
;

1062 
now
 = 
timïoöt
[
SHORTRANGE
]*60;

1063 
ts
 = 
	`gmtime
(&
now
);

1064 
loˇl
 = 
now
;

1067 
timïoöt
[
SHORTRANGE
] = 
loˇl
 / 60;

1068 
shmö
 = 
ts
->
tm_mö
;

1069 
shhour
 = 
ts
->
tm_hour
;

1070 
timïoöt
[
MEDIUMRANGE
] = 
loˇl
 / (60 * 6);

1071 
medmö
 = 
ts
->
tm_mö
;

1072 
medhour
 = 
ts
->
tm_hour
;

1073 
timïoöt
[
LONGRANGE
] = 
loˇl
 / (60 * 30);

1074 
 ghÆfhour
 = 
ts
->
tm_hour
*2;

1075 i‡(
ts
->
tm_mö
>=30) {

1076 
 ghÆfhour
++;

1078 
 gmday
 = 
ts
->
tm_mday
;

1079 
 gm⁄th
 = 
ts
->
tm_m⁄
 + 1;

1080 
 gyór
 = 
ts
->
tm_yór
 + 1900;

1081 
timïoöt
[
VERYLONGRANGE
] = 
loˇl
 / (60 * 60 * 24);

1082 
v gmday
 = 
ts
->
tm_mday
;

1083 
v gm⁄th
 = 
ts
->
tm_m⁄
 + 1;

1084 
v gyór
 = 
ts
->
tm_yór
 + 1900;

1085 
	}
}

1087 
	$ch¨ts_add
 (
uöt64_t
 *
d©a
,
uöt32_t
 
d©©s
) {

1088 
uöt32_t
 
i
,
j
;

1089 
tm
 *
ts
;

1090 
time_t
 
now
 = 
d©©s
;

1091 
öt32_t
 
loˇl
;

1093 
öt32_t
 
nowtime
,
dñè
;

1095 
ts
 = 
	`loˇ…ime
(&
now
);

1096 #ifde‡
HAVE_STRUCT_TM_TM_GMTOFF


1097 
loˇl
 = 
now
+
ts
->
tm_gmtoff
;

1099 
loˇl
 = 
now
;

1104 
nowtime
 = 
loˇl
 / 60;

1106 
dñè
 = 
nowtime
 - 
timïoöt
[
SHORTRANGE
];

1108 i‡(
dñè
>0) {

1109 i‡(
dñè
>
LENG
) delta=LENG;

1110 
dñè
>0) {

1111 
poöãrs
[
SHORTRANGE
]++;

1112 
poöãrs
[
SHORTRANGE
]%=
LENG
;

1113 
i
=0 ; i<
°©defscou¡
 ; i++) {

1114 
£rõs
[
i
][
SHORTRANGE
][
poöãrs
[SHORTRANGE]] = 
CHARTS_NODATA
;

1116 
dñè
--;

1118 
timïoöt
[
SHORTRANGE
] = 
nowtime
;

1119 
shmö
 = 
ts
->
tm_mö
;

1120 
shhour
 = 
ts
->
tm_hour
;

1122 i‡(
dñè
<=0 && dñè>-
LENG
 && 
d©a
) {

1123 
i
 = (
poöãrs
[
SHORTRANGE
] + 
LENG
 + 
dñè
) % LENG;

1124 
j
=0 ; j<
°©defscou¡
 ; j++) {

1125 i‡(
£rõs
[
j
][
SHORTRANGE
][
i
]==
CHARTS_NODATA
) {

1126 
£rõs
[
j
][
SHORTRANGE
][
i
] = 
d©a
[j];

1127 } i‡(
°©defs
[
j
].
mode
==
CHARTS_MODE_ADD
) {

1128 
£rõs
[
j
][
SHORTRANGE
][
i
] +
d©a
[j];

1129 } i‡(
d©a
[
j
]>
£rõs
[j][
SHORTRANGE
][
i
]) {

1130 
£rõs
[
j
][
SHORTRANGE
][
i
] = 
d©a
[j];

1137 
nowtime
 = 
loˇl
 / (60 * 6);

1139 
dñè
 = 
nowtime
 - 
timïoöt
[
MEDIUMRANGE
];

1141 i‡(
dñè
>0) {

1142 i‡(
dñè
>
LENG
) delta=LENG;

1143 
dñè
>0) {

1144 
poöãrs
[
MEDIUMRANGE
]++;

1145 
poöãrs
[
MEDIUMRANGE
]%=
LENG
;

1146 
i
=0 ; i<
°©defscou¡
 ; i++) {

1147 
£rõs
[
i
][
MEDIUMRANGE
][
poöãrs
[MEDIUMRANGE]] = 
CHARTS_NODATA
;

1149 
dñè
--;

1151 
timïoöt
[
MEDIUMRANGE
] = 
nowtime
;

1152 
medmö
 = 
ts
->
tm_mö
;

1153 
medhour
 = 
ts
->
tm_hour
;

1155 i‡(
dñè
<=0 && dñè>-
LENG
 && 
d©a
) {

1156 
i
 = (
poöãrs
[
MEDIUMRANGE
] + 
LENG
 + 
dñè
) % LENG;

1157 
j
=0 ; j<
°©defscou¡
 ; j++) {

1158 i‡(
£rõs
[
j
][
MEDIUMRANGE
][
i
]==
CHARTS_NODATA
) {

1159 
£rõs
[
j
][
MEDIUMRANGE
][
i
] = 
d©a
[j];

1160 } i‡(
°©defs
[
j
].
mode
==
CHARTS_MODE_ADD
) {

1161 
£rõs
[
j
][
MEDIUMRANGE
][
i
] +
d©a
[j];

1162 } i‡(
d©a
[
j
]>
£rõs
[j][
MEDIUMRANGE
][
i
]) {

1163 
£rõs
[
j
][
MEDIUMRANGE
][
i
] = 
d©a
[j];

1171 
nowtime
 = 
loˇl
 / (60 * 30);

1173 
dñè
 = 
nowtime
 - 
timïoöt
[
LONGRANGE
];

1175 i‡(
dñè
>0) {

1176 i‡(
dñè
>
LENG
) delta=LENG;

1177 
dñè
>0) {

1178 
poöãrs
[
LONGRANGE
]++;

1179 
poöãrs
[
LONGRANGE
]%=
LENG
;

1180 
i
=0 ; i<
°©defscou¡
 ; i++) {

1181 
£rõs
[
i
][
LONGRANGE
][
poöãrs
[LONGRANGE]] = 
CHARTS_NODATA
;

1183 
dñè
--;

1185 
timïoöt
[
LONGRANGE
] = 
nowtime
;

1186 
 ghÆfhour
 = 
ts
->
tm_hour
*2;

1187 i‡(
ts
->
tm_mö
>=30) {

1188 
 ghÆfhour
++;

1190 
 gmday
 = 
ts
->
tm_mday
;

1191 
 gm⁄th
 = 
ts
->
tm_m⁄
 + 1;

1192 
 gyór
 = 
ts
->
tm_yór
 + 1900;

1194 i‡(
dñè
<=0 && dñè>-
LENG
 && 
d©a
) {

1195 
i
 = (
poöãrs
[
LONGRANGE
] + 
LENG
 + 
dñè
) % LENG;

1196 
j
=0 ; j<
°©defscou¡
 ; j++) {

1197 i‡(
£rõs
[
j
][
LONGRANGE
][
i
]==
CHARTS_NODATA
) {

1198 
£rõs
[
j
][
LONGRANGE
][
i
] = 
d©a
[j];

1199 } i‡(
°©defs
[
j
].
mode
==
CHARTS_MODE_ADD
) {

1200 
£rõs
[
j
][
LONGRANGE
][
i
] +
d©a
[j];

1201 } i‡(
d©a
[
j
]>
£rõs
[j][
LONGRANGE
][
i
]) {

1202 
£rõs
[
j
][
LONGRANGE
][
i
] = 
d©a
[j];

1208 
nowtime
 = 
loˇl
 / (60 * 60 * 24);

1210 
dñè
 = 
nowtime
 - 
timïoöt
[
VERYLONGRANGE
];

1212 i‡(
dñè
>0) {

1213 i‡(
dñè
>
LENG
) delta=LENG;

1214 
dñè
>0) {

1215 
poöãrs
[
VERYLONGRANGE
]++;

1216 
poöãrs
[
VERYLONGRANGE
]%=
LENG
;

1217 
i
=0 ; i<
°©defscou¡
 ; i++) {

1218 
£rõs
[
i
][
VERYLONGRANGE
][
poöãrs
[VERYLONGRANGE]] = 
CHARTS_NODATA
;

1220 
dñè
--;

1222 
timïoöt
[
VERYLONGRANGE
] = 
nowtime
;

1223 
v gmday
 = 
ts
->
tm_mday
;

1224 
v gm⁄th
 = 
ts
->
tm_m⁄
 + 1;

1225 
v gyór
 = 
ts
->
tm_yór
 + 1900;

1227 i‡(
dñè
<=0 && dñè>-
LENG
 && 
d©a
) {

1228 
i
 = (
poöãrs
[
VERYLONGRANGE
] + 
LENG
 + 
dñè
) % LENG;

1229 
j
=0 ; j<
°©defscou¡
 ; j++) {

1230 i‡(
£rõs
[
j
][
VERYLONGRANGE
][
i
]==
CHARTS_NODATA
) {

1231 
£rõs
[
j
][
VERYLONGRANGE
][
i
] = 
d©a
[j];

1232 } i‡(
°©defs
[
j
].
mode
==
CHARTS_MODE_ADD
) {

1233 
£rõs
[
j
][
VERYLONGRANGE
][
i
] +
d©a
[j];

1234 } i‡(
d©a
[
j
]>
£rõs
[j][
VERYLONGRANGE
][
i
]) {

1235 
£rõs
[
j
][
VERYLONGRANGE
][
i
] = 
d©a
[j];

1239 
	}
}

1241 
	$ch¨ts_ãrm
 () {

1242 
uöt32_t
 
i
;

1243 
	`‰ì
(
°©sfûíame
);

1244 i‡(
ˇlcdefs
) {

1245 
	`‰ì
(
ˇlcdefs
);

1247 i‡(
ˇlc°¨ços
) {

1248 
	`‰ì
(
ˇlc°¨ços
);

1250 i‡(
e°©defs
) {

1251 
	`‰ì
(
e°©defs
);

1253 
i
=0 ; i<
°©defscou¡
 ; i++) {

1254 
	`‰ì
(
°©defs
[
i
].
«me
);

1256 i‡(
°©defs
) {

1257 
	`‰ì
(
°©defs
);

1259 i‡(
£rõs
) {

1260 
	`‰ì
(
£rõs
);

1262 #ifde‡
HAVE_ZLIB_H


1263 
	`deÊ©eEnd
(&
z°r
);

1265 
	}
}

1267 
	$ch¨ts_öô
 (c⁄° 
uöt32_t
 *
ˇlcs
,c⁄° 
°©def
 *
°©s
,c⁄° 
e°©def
 *
e°©s
,c⁄° *
fûíame
) {

1268 
uöt32_t
 
i
,
j
;

1270 
°©sfûíame
 = 
	`°rdup
(
fûíame
);

1271 
	`∑s£π
(
°©sfûíame
);

1273 
i
=0,
ˇlcdefscou¡
=0 ; 
ˇlcs
[i]!=
CHARTS_DEFS_END
 ; i++) {

1274 i‡(
ˇlcs
[
i
]==
CHARTS_OP_END
) {

1275 
ˇlcdefscou¡
++;

1278 i‡(
i
>0) {

1279 
ˇlcdefs
 = (
uöt32_t
*)
	`mÆloc
((uöt32_t)*
i
);

1280 
	`∑s£π
(
ˇlcdefs
);

1281 
ˇlc°¨ços
 = (
uöt32_t
**)
	`mÆloc
((uöt32_t*)*
ˇlcdefscou¡
);

1282 
	`∑s£π
(
ˇlc°¨ços
);

1283 
j
=0;

1284 
ˇlc°¨ços
[
j
]=
ˇlcdefs
;

1285 
j
++;

1286 
i
=0 ; 
ˇlcs
[i]!=
CHARTS_DEFS_END
 ; i++) {

1287 
ˇlcdefs
[
i
] = 
ˇlcs
[i];

1288 i‡(
ˇlcs
[
i
]==
CHARTS_OP_END
) {

1289 i‡(
j
<
ˇlcdefscou¡
) {

1290 
ˇlc°¨ços
[
j
]=
ˇlcdefs
+
i
+1;

1291 
j
++;

1296 
ˇlcdefs
 = 
NULL
;

1297 
ˇlc°¨ços
 = 
NULL
;

1299 
°©defscou¡
=0 ; 
°©s
[°©defscou¡].
divis‹
 ; statdefscount++) {}

1300 i‡(
°©defscou¡
>0) {

1301 
°©defs
 = (
°©def
*)
	`mÆloc
((°©def)*
°©defscou¡
);

1302 
	`∑s£π
(
°©defs
);

1304 
°©defs
 = 
NULL
;

1306 
i
=0 ; i<
°©defscou¡
 ; i++) {

1307 
°©defs
[
i
].
«me
 = 
	`°rdup
(
°©s
[i].name);

1308 
	`∑s£π
(
°©defs
[
i
].
«me
);

1309 
°©defs
[
i
].
mode
 = 
°©s
[i].mode;

1310 
°©defs
[
i
].
≥r˚¡
 = 
°©s
[i].percent;

1311 
°©defs
[
i
].
sˇÀ
 = 
°©s
[i].scale;

1312 
°©defs
[
i
].
mu…ùlõr
 = 
°©s
[i].multiplier;

1313 
°©defs
[
i
].
divis‹
 = 
°©s
[i].divisor;

1315 
e°©defscou¡
=0 ; 
e°©s
[e°©defscou¡].
divis‹
 ;Éstatdefscount++) {}

1316 i‡(
e°©defscou¡
>0) {

1317 
e°©defs
 = (
e°©def
*)
	`mÆloc
(”°©def)*
e°©defscou¡
);

1318 
	`∑s£π
(
e°©defs
);

1320 
e°©defs
 = 
NULL
;

1322 
i
=0 ; i<
e°©defscou¡
 ; i++) {

1323 
e°©defs
[
i
].
c1§c
 = 
e°©s
[i].c1src;

1324 
e°©defs
[
i
].
c2§c
 = 
e°©s
[i].c2src;

1325 
e°©defs
[
i
].
c3§c
 = 
e°©s
[i].c3src;

1326 
e°©defs
[
i
].
mode
 = 
e°©s
[i].mode;

1327 
e°©defs
[
i
].
≥r˚¡
 = 
e°©s
[i].percent;

1328 
e°©defs
[
i
].
sˇÀ
 = 
e°©s
[i].scale;

1329 
e°©defs
[
i
].
mu…ùlõr
 = 
e°©s
[i].multiplier;

1330 
e°©defs
[
i
].
divis‹
 = 
e°©s
[i].divisor;

1333 i‡(
°©defscou¡
>0) {

1334 
£rõs
 = (
°©_ªc‹d
*)
	`mÆloc
((°©_ªc‹d)*
°©defscou¡
);

1335 
	`∑s£π
(
£rõs
);

1337 
£rõs
 = 
NULL
;

1339 
i
=0 ; i<
°©defscou¡
 ; i++) {

1340 
	`mem£t
(
£rõs
+
i
,0xFF,(
°©_ªc‹d
));

1343 
i
=0 ; i<
RANGES
 ; i++) {

1344 
poöãrs
[
i
]=0;

1345 
timïoöt
[
i
]=0;

1348 
	`ch¨ts_lﬂd
();

1349 
	`ch¨ts_öôtimïoöãrs
();

1350 
	`ch¨ts_add
(
NULL
,
	`time
(NULL));

1352 #ifde‡
HAVE_ZLIB_H


1353 
z°r
.
zÆloc
 = 
NULL
;

1354 
z°r
.
z‰ì
 = 
NULL
;

1355 
z°r
.
›aque
 = 
NULL
;

1356 i‡(
	`deÊ©eInô
(&
z°r
,
Z_DEFAULT_COMPRESSION
)!=
Z_OK
) {

1361 
	}
}

1363 #i‚de‡
HAVE_ZLIB_H


1364 
ölöe
 
	$ch¨ts_putw¨nög
(
uöt32_t
 
posx
,uöt32_à
posy
,
uöt8_t
 
cﬁ‹
) {

1365 
uöt8_t
 *
w
,
c
,
fx
,
fy
,
b
;

1366 
uöt32_t
 
x
,
y
;

1367 
w
 = 
w¨nög
;

1368 
y
 = 
posy
;

1369 
fy
=0 ; fy<5 ; fy++) {

1370 
x
 = 
posx
;

1371 
b
=0 ; b<10 ; b++) {

1372 
c
 = *
w
;

1373 
w
++;

1374 
fx
=0 ; fx<8 ; fx++) {

1375 i‡(
c
&0x80 && 
x
<
XSIZE
 && 
y
<
YSIZE
) {

1376 
ch¨t
[(
XSIZE
)*
y
+
x
] = 
cﬁ‹
;

1378 
c
<<=1;

1379 
x
++;

1382 
y
++;

1384 
	}
}

1387 
ölöe
 
	$ch¨ts_puâext
(
öt32_t
 
posx
,öt32_à
posy
,
uöt8_t
 
cﬁ‹
,uöt8_à*
d©a
,
uöt32_t
 
Àng
,öt32_à
möx
,öt32_à
maxx
,öt32_à
möy
,öt32_à
maxy
) {

1388 
uöt32_t
 
i
,
fx
,
fy
;

1389 
uöt8_t
 
Â
,
fbôs
;

1390 
öt32_t
 
px
,
x
,
y
;

1391 
i
=0 ; i<
Àng
 ; i++) {

1392 
px
 = 
i
*6+
posx
;

1393 
Â
 = 
d©a
[
i
];

1394 i‡(
Â
>
SQUARE
) {

1395 
Â
=
SQUARE
;

1397 
fy
=0 ; fy<9 ; fy++) {

1398 
fbôs
 = 
f⁄t
[
Â
][
fy
];

1399 i‡(
fbôs
) {

1400 
fx
=0 ; fx<5 ; fx++) {

1401 
x
 = 
px
+
fx
;

1402 
y
 = 
posy
+
fy
;

1403 i‡(
fbôs
&0x10 && 
x
>=
möx
 && x<=
maxx
 && 
y
>=
möy
 && y<=
maxy
) {

1404 
ch¨t
[(
XSIZE
)*
y
+
x
] = 
cﬁ‹
;

1406 
fbôs
<<=1;

1411 
	}
}

1413 
	$ch¨ts_fixmax
(
uöt64_t
 
max
,
uöt8_t
 *
sˇÀ
,uöt8_à*
mode
,
uöt16_t
 *
ba£
) {

1414 
rmax
;

1415 i‡(
max
>995000000000000000ULL) {

1416 (*
ba£
Ë(
max
+499999999999999999ULL)/500000000000000000ULL;

1417 
rmax
 = (*
ba£
)*500000000000000000ULL;

1418 (*
mode
) = 1;

1419 (*
sˇÀ
) += 6;

1420 } i‡(
max
>99500000000000000ULL) {

1421 (*
ba£
Ë(
max
+4999999999999999ULL)/5000000000000000ULL;

1422 
rmax
 = (*
ba£
)*5000000000000000ULL;

1423 (*
mode
) = 0;

1424 (*
sˇÀ
) += 5;

1425 } i‡(
max
>995000000000000ULL) {

1426 (*
ba£
Ë(
max
+499999999999999ULL)/500000000000000ULL;

1427 
rmax
 = (*
ba£
)*500000000000000ULL;

1428 (*
mode
) = 1;

1429 (*
sˇÀ
) += 5;

1430 } i‡(
max
>99500000000000ULL) {

1431 (*
ba£
Ë(
max
+4999999999999ULL)/5000000000000ULL;

1432 
rmax
 = (*
ba£
)*5000000000000ULL;

1433 (*
mode
) = 0;

1434 (*
sˇÀ
) += 4;

1435 } i‡(
max
>995000000000ULL) {

1436 (*
ba£
Ë(
max
+499999999999ULL)/500000000000ULL;

1437 
rmax
 = (*
ba£
)*500000000000ULL;

1438 (*
mode
) = 1;

1439 (*
sˇÀ
) += 4;

1440 } i‡(
max
>99500000000ULL) {

1441 (*
ba£
Ë(
max
+4999999999ULL)/5000000000ULL;

1442 
rmax
 = (*
ba£
)*5000000000ULL;

1443 (*
mode
) = 0;

1444 (*
sˇÀ
) += 3;

1445 } i‡(
max
>995000000ULL) {

1446 (*
ba£
Ë(
max
+499999999ULL)/500000000ULL;

1447 
rmax
 = (*
ba£
)*500000000ULL;

1448 (*
mode
) = 1;

1449 (*
sˇÀ
) += 3;

1450 } i‡(
max
>99500000ULL) {

1451 (*
ba£
Ë(
max
+4999999ULL)/5000000ULL;

1452 
rmax
 = (*
ba£
)*5000000ULL;

1453 (*
mode
) = 0;

1454 (*
sˇÀ
) += 2;

1455 } i‡(
max
>995000ULL) {

1456 (*
ba£
Ë(
max
+499999ULL)/500000ULL;

1457 
rmax
 = (*
ba£
)*500000ULL;

1458 (*
mode
) = 1;

1459 (*
sˇÀ
) += 2;

1460 } i‡(
max
>99500ULL) {

1461 (*
ba£
Ë(
max
+4999ULL)/5000ULL;

1462 
rmax
 = (*
ba£
)*5000ULL;

1463 (*
mode
) = 0;

1464 (*
sˇÀ
) += 1;

1465 } i‡(
max
>995ULL) {

1466 (*
ba£
Ë(
max
+499ULL)/500ULL;

1467 
rmax
 = (*
ba£
)*500ULL;

1468 (*
mode
) = 1;

1469 (*
sˇÀ
) += 1;

1470 } i‡(
max
>99ULL) {

1471 (*
ba£
Ë(
max
+4ULL)/5ULL;

1472 
rmax
 = (*
ba£
)*5ULL;

1473 (*
mode
) = 0;

1475 i‡(
max
==0) {

1476 
max
=1;

1478 (*
ba£
Ë
max
*2;

1479 
rmax
 = ((*
ba£
)*5)/10.0;

1480 (*
mode
) = 1;

1482  
rmax
;

1483 
	}
}

1485 
	$ch¨ts_makech¨t
(
uöt32_t
 
ty≥
,uöt32_à
ønge
) {

1486 c⁄° 
uöt8_t
 
jèb
[11]={
MICRO
,
MILI
,
SPACE
,
KILO
,
MEGA
,
GIGA
,
TERA
,
PETA
,
EXA
,
ZETTA
,
YOTTA
};

1487 
öt32_t
 
i
,
j
;

1488 
uöt32_t
 
xy
,
xm
,
xd
,
xh
,
xs
,
xoff
,
xbﬁd
,
ys
;

1489 
uöt64_t
 
max
;

1490 
dmax
;

1491 
uöt64_t
 
d
,
c1d
,
c2d
,
c3d
;

1492 
uöt64_t
 
c1di•d©a
[
LENG
];

1493 
uöt64_t
 
c2di•d©a
[
LENG
];

1494 
uöt64_t
 
c3di•d©a
[
LENG
];

1495 
uöt8_t
 
sˇÀ
,
mode
=0,
≥r˚¡
=0;

1496 
uöt16_t
 
ba£
=0;

1497 
uöt32_t
 
poöãr
;

1498 
uöt8_t
 
ãxt
[6];

1500 
	`mem£t
(
ch¨t
,
COLOR_TRANSPARENT
,(
XSIZE
)*(
YSIZE
));

1502 
	`ch¨ts_fû…ab
(
c1di•d©a
,
ønge
,
ty≥
,1);

1503 
	`ch¨ts_fû…ab
(
c2di•d©a
,
ønge
,
ty≥
,2);

1504 
	`ch¨ts_fû…ab
(
c3di•d©a
,
ønge
,
ty≥
,3);

1506 
poöãr
 = 
poöãrs
[
ønge
];

1508 
max
 = 0;

1509 
i
=0 ; i<
LENG
 ; i++) {

1510 
d
 = 0;

1511 i‡(
c1di•d©a
[
i
]!=
CHARTS_NODATA
) {

1512 
d
 +
c1di•d©a
[
i
];

1514 i‡(
c2di•d©a
[
i
]!=
CHARTS_NODATA
) {

1515 
d
 +
c2di•d©a
[
i
];

1517 i‡(
c3di•d©a
[
i
]!=
CHARTS_NODATA
) {

1518 
d
 +
c3di•d©a
[
i
];

1520 i‡(
d
>
max
) {

1521 
max
=
d
;

1524 i‡(
max
>1000000000000000000ULL) {

1525 
i
=0 ; i<
LENG
 ; i++) {

1526 i‡(
c1di•d©a
[
i
]!=
CHARTS_NODATA
) {

1527 
c1di•d©a
[
i
]/=1000;

1529 i‡(
c2di•d©a
[
i
]!=
CHARTS_NODATA
) {

1530 
c2di•d©a
[
i
]/=1000;

1532 i‡(
c3di•d©a
[
i
]!=
CHARTS_NODATA
) {

1533 
c3di•d©a
[
i
]/=1000;

1536 
max
/=1000;

1537 
sˇÀ
=1;

1539 
sˇÀ
=0;

1543 i‡((
	`CHARTS_IS_DIRECT_STAT
(
ty≥
Ë&& 
°©defs
[ty≥].
mode
==
CHARTS_MODE_ADD
Ë|| (
	`CHARTS_IS_EXTENDED_STAT
—y≥Ë&& 
e°©defs
[
	`CHARTS_EXTENDED_POS
(type)].mode==CHARTS_MODE_ADD)) {

1544 
ønge
) {

1545 
MEDIUMRANGE
:

1546 
max
 = (max+5)/6;

1548 
LONGRANGE
:

1549 
max
 = (max+29)/30;

1551 
VERYLONGRANGE
:

1552 
max
 = (max+1439)/(24*60);

1557 i‡(
	`CHARTS_IS_DIRECT_STAT
(
ty≥
)) {

1558 
sˇÀ
 +
°©defs
[
ty≥
].scale;

1559 
≥r˚¡
 = 
°©defs
[
ty≥
].percent;

1560 
max
 *
°©defs
[
ty≥
].
mu…ùlõr
;

1561 
max
 /
°©defs
[
ty≥
].
divis‹
;

1562 } i‡(
	`CHARTS_IS_EXTENDED_STAT
(
ty≥
)) {

1563 
sˇÀ
 +
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].scale;

1564 
≥r˚¡
 = 
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].percent;

1565 
max
 *
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
mu…ùlõr
;

1566 
max
 /
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
divis‹
;

1569 
dmax
 = 
	`ch¨ts_fixmax
(
max
,&
sˇÀ
,&
mode
,&
ba£
);

1571 i‡(
	`CHARTS_IS_DIRECT_STAT
(
ty≥
)) {

1572 
dmax
 *
°©defs
[
ty≥
].
divis‹
;

1573 
dmax
 /
°©defs
[
ty≥
].
mu…ùlõr
;

1574 } i‡(
	`CHARTS_IS_EXTENDED_STAT
(
ty≥
)) {

1575 
dmax
 *
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
divis‹
;

1576 
dmax
 /
e°©defs
[
	`CHARTS_EXTENDED_POS
(
ty≥
)].
mu…ùlõr
;

1580 i‡((
	`CHARTS_IS_DIRECT_STAT
(
ty≥
Ë&& 
°©defs
[ty≥].
mode
==
CHARTS_MODE_ADD
Ë|| (
	`CHARTS_IS_EXTENDED_STAT
—y≥Ë&& 
e°©defs
[
	`CHARTS_EXTENDED_POS
(type)].mode==CHARTS_MODE_ADD)) {

1581 
ønge
) {

1582 
MEDIUMRANGE
:

1583 
dmax
 *= 6;

1585 
LONGRANGE
:

1586 
dmax
 *= 30;

1588 
VERYLONGRANGE
:

1589 
dmax
 *= (24*60);

1595 
i
=0 ; i<
LENG
 ; i++) {

1596 
j
 = (
LENG
+1+
poöãr
+
i
)%LENG;

1597 i‡((
c1di•d©a
[
j
]&
c2di•d©a
[j]&
c3di•d©a
[j])==
CHARTS_NODATA
) {

1598 
j
=0 ; j<
DATA
 ; j++) {

1599 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = ((j+i)%3)?
COLOR_BKG
:
COLOR_NODATA
;

1602 i‡(
c3di•d©a
[
j
]!=
CHARTS_NODATA
) {

1603 
c3d
 = 
c3di•d©a
[
j
];

1605 
c3d
 = 0;

1607 i‡(
c2di•d©a
[
j
]!=
CHARTS_NODATA
) {

1608 
c2d
 = 
c3d
 + 
c2di•d©a
[
j
];

1610 
c2d
 = 
c3d
;

1612 i‡(
c1di•d©a
[
j
]!=
CHARTS_NODATA
) {

1613 
c1d
 = 
c2d
 + 
c1di•d©a
[
j
];

1615 
c1d
 = 
c2d
;

1617 
c1d
 *
DATA
;

1618 
c1d
 /
dmax
;

1619 
c2d
 *
DATA
;

1620 
c2d
 /
dmax
;

1621 
c3d
 *
DATA
;

1622 
c3d
 /
dmax
;

1624 
j
=0;

1625 
DATA
>=
c1d
+
j
) {

1626 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_BKG
;

1627 
j
++;

1629 
DATA
>=
c2d
+
j
) {

1630 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_DATA1
;

1631 
j
++;

1633 
DATA
>=
c3d
+
j
) {

1634 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_DATA2
;

1635 
j
++;

1637 
DATA
>
j
) {

1638 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_DATA3
;

1639 
j
++;

1644 
i
=-3 ; i<
LENG
+3 ; i++) {

1645 
ch¨t
[(
XSIZE
)*(
DATA
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_AXIS
;

1647 
i
=-2 ; i<
DATA
+5 ; i++) {

1648 
ch¨t
[(
XSIZE
)*(
DATA
-
i
+
YPOS
)+(
XPOS
-1)] = 
COLOR_AXIS
;

1649 
ch¨t
[(
XSIZE
)*(
DATA
-
i
+
YPOS
)+(
XPOS
+
LENG
)] = 
COLOR_AXIS
;

1652 
xy
 = 
xm
 = 
xd
 = 
xh
 = 
xs
 = 0;

1653 i‡(
ønge
<3) {

1654 i‡(
ønge
==2) {

1655 
xs
 = 12;

1656 
xoff
 = 
 ghÆfhour
%12;

1657 
xbﬁd
 = 4;

1658 
xh
 = 
 ghÆfhour
/12;

1659 
xd
 = 
 gmday
;

1660 
xm
 = 
 gm⁄th
;

1661 
xy
 = 
 gyór
;

1662 } i‡(
ønge
==1) {

1663 
xs
 = 10;

1664 
xoff
 = 
medmö
/6;

1665 
xbﬁd
 = 6;

1666 
xh
 = 
medhour
;

1668 
xs
 = 60;

1669 
xoff
 = 
shmö
;

1670 
xbﬁd
 = 1;

1671 
xh
 = 
shhour
;

1674 
i
=
LENG
-
xoff
-1 ; i>=0 ; i-=
xs
) {

1675 i‡(
xh
%
xbﬁd
==0) {

1676 
ys
=2;

1677 i‡((
ønge
==0 && 
xh
%6==0Ë|| (ønge==1 && xh==0Ë|| (ønge==2 && 
xd
==1)) {

1678 
ys
=1;

1680 i‡(
ønge
<2) {

1681 
ãxt
[0]=
xh
/10;

1682 
ãxt
[1]=
xh
%10;

1683 
ãxt
[2]=
COLON
;

1684 
ãxt
[3]=0;

1685 
ãxt
[4]=0;

1686 
	`ch¨ts_puâext
(
XPOS
+
i
-14,(
YPOS
+
DATA
)+4,
COLOR_TEXT
,
ãxt
,5,XPOS-1,XPOS+
LENG
,0,
YSIZE
-1);

1688 
ãxt
[0]=
xm
/10;

1689 
ãxt
[1]=
xm
%10;

1690 
ãxt
[2]=
FDOT
;

1691 
ãxt
[3]=
xd
/10;

1692 
ãxt
[4]=
xd
%10;

1693 
	`ch¨ts_puâext
(
XPOS
+
i
+10,(
YPOS
+
DATA
)+4,
COLOR_TEXT
,
ãxt
,5,XPOS-1,XPOS+
LENG
,0,
YSIZE
-1);

1694 
xd
--;

1695 i‡(
xd
==0) {

1696 
xm
--;

1697 i‡(
xm
==0) {

1698 
xm
=12;

1699 
xy
--;

1701 
xd
 = 
	`gëm⁄Àng
(
xy
,
xm
);

1704 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
+1)+(
i
+
XPOS
)] = 
COLOR_AXIS
;

1705 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
+2)+(
i
+
XPOS
)] = 
COLOR_AXIS
;

1707 
ys
=4;

1709 
j
=0 ; j<
DATA
 ; j+=
ys
) {

1710 i‡(
ys
>1 || (
j
%4)!=0) {

1711 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_AUX
;

1714 i‡(
ønge
<2) {

1715 i‡(
xh
==0) {

1716 
xh
=23;

1718 
xh
--;

1721 i‡(
xh
==0) {

1722 
xh
=3;

1724 
xh
--;

1728 i‡(
ønge
==2) {

1729 
i
 -
xs
*
xh
;

1730 
ãxt
[0]=
xm
/10;

1731 
ãxt
[1]=
xm
%10;

1732 
ãxt
[2]=
FDOT
;

1733 
ãxt
[3]=
xd
/10;

1734 
ãxt
[4]=
xd
%10;

1735 
	`ch¨ts_puâext
(
XPOS
+
i
+10,(
YPOS
+
DATA
)+4,
COLOR_TEXT
,
ãxt
,5,XPOS-1,XPOS+
LENG
,0,
YSIZE
-1);

1738 
xy
 = 
 gyór
;

1739 
xm
 = 
 gm⁄th
;

1741 
i
=
LENG
-
 gmday
 ; i>=0 ; ) {

1742 
ãxt
[0]=
xm
/10;

1743 
ãxt
[1]=
xm
%10;

1744 
	`ch¨ts_puâext
(
XPOS
+
i
+(
	`gëm⁄Àng
(
xy
,
xm
)-11)/2+1,(
YPOS
+
DATA
)+4,
COLOR_TEXT
,
ãxt
,2,XPOS-1,XPOS+
LENG
,0,
YSIZE
-1);

1745 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
+1)+(
i
+
XPOS
)] = 
COLOR_AXIS
;

1746 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
+2)+(
i
+
XPOS
)] = 
COLOR_AXIS
;

1747 i‡(
xm
!=1) {

1748 
j
=0 ; j<
DATA
 ; j+=2) {

1749 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_AUX
;

1752 
j
=0 ; j<
DATA
 ; j++) {

1753 i‡((
j
%4)!=0) {

1754 
ch¨t
[(
XSIZE
)*(
j
+
YPOS
)+(
i
+
XPOS
)] = 
COLOR_AUX
;

1758 
xm
--;

1759 i‡(
xm
==0) {

1760 
xm
=12;

1761 
xy
--;

1763 
i
-=
	`gëm⁄Àng
(
xy
,
xm
);

1766 
ãxt
[0]=
xm
/10;

1767 
ãxt
[1]=
xm
%10;

1768 
	`ch¨ts_puâext
(
XPOS
+
i
+(
	`gëm⁄Àng
(
xy
,
xm
)-11)/2+1,(
YPOS
+
DATA
)+4,
COLOR_TEXT
,
ãxt
,2,XPOS-1,XPOS+
LENG
,0,
YSIZE
-1);

1814 
i
=0 ; i<=5 ; i++) {

1815 
d
 = 
ba£
*
i
;

1816 
j
=0;

1817 i‡(
mode
==0) {

1818 i‡(
d
>=10) {

1819 i‡(
d
>=100) {

1820 
ãxt
[
j
++]=
d
/100;

1821 
d
%=100;

1823 
ãxt
[
j
++]=
d
/10;

1825 
ãxt
[
j
++]=
d
%10;

1827 i‡(
d
>=100) {

1828 
ãxt
[
j
++]=
d
/100;

1829 
d
%=100;

1831 
ãxt
[
j
++]=
d
/10;

1832 
ãxt
[
j
++]=
FDOT
;

1833 
ãxt
[
j
++]=
d
%10;

1835 i‡(
sˇÀ
<11) {

1836 i‡(
jèb
[
sˇÀ
]!=
SPACE
) {

1837 
ãxt
[
j
++]=
jèb
[
sˇÀ
];

1840 
ãxt
[
j
++]=
SQUARE
;

1842 i‡(
≥r˚¡
) {

1843 
ãxt
[
j
++]=
PERCENT
;

1845 
	`ch¨ts_puâext
(
XPOS
 - 4 - (
j
*6),(
YPOS
+
DATA
-(20*
i
))-3,
COLOR_TEXT
,
ãxt
,j,0,
XSIZE
-1,0,
YSIZE
-1);

1846 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
-20*
i
)+(
XPOS
-2)] = 
COLOR_AXIS
;

1847 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
-20*
i
)+(
XPOS
-3)] = 
COLOR_AXIS
;

1848 i‡(
i
>0) {

1849 
j
=1 ; j<
LENG
 ; j+=2) {

1850 
ch¨t
[(
XSIZE
)*(
YPOS
+
DATA
-20*
i
)+(
XPOS
+
j
)] = 
COLOR_AUX
;

1854 
	}
}

1856 
uöt32_t
 
	$ch¨ts_d©asize
(
uöt32_t
 
numbî
) {

1857 
uöt32_t
 
chty≥
,
chønge
;

1859 
chty≥
 = 
numbî
 / 10;

1860 
chønge
 = 
numbî
 % 10;

1861  (
chønge
<
RANGES
 && 
	`CHARTS_IS_DIRECT_STAT
(
chty≥
))?
LENG
*8+4:0;

1862 
	}
}

1864 
	$ch¨ts_maked©a
(
uöt8_t
 *
buff
,
uöt32_t
 
numbî
) {

1865 
uöt32_t
 
i
,
j
,
ts
,
poöãr
,
chty≥
,
chønge
;

1866 
uöt64_t
 *
èb
;

1868 
chty≥
 = 
numbî
 / 10;

1869 
chønge
 = 
numbî
 % 10;

1870 i‡(
chønge
<
RANGES
 && 
	`CHARTS_IS_DIRECT_STAT
(
chty≥
)) {

1871 
èb
 = 
£rõs
[
chty≥
][
chønge
];

1872 
poöãr
 = 
poöãrs
[
chønge
];

1873 
ts
 = 
timïoöt
[
chønge
];

1874 
chønge
) {

1875 
SHORTRANGE
:

1876 
ts
 *= 60;

1878 
MEDIUMRANGE
:

1879 
ts
 *= 60*6;

1881 
LONGRANGE
:

1882 
ts
 *= 60*30;

1884 
VERYLONGRANGE
:

1885 
ts
 *= 60*60*24;

1888 
	`put32bô
(&
buff
,
ts
);

1889 
i
=0 ; i<
LENG
 ; i++) {

1890 
j
 = (
LENG
+1+
poöãr
+
i
)%LENG;

1891 
	`put64bô
(&
buff
,
èb
[
j
]);

1894 
	}
}

1896 
	$ch¨ts_ch¨t_to_øwch¨t
() {

1897 
uöt32_t
 
y
;

1898 
uöt32_t
 
x
;

1899 
uöt8_t
 *
˝
,*
Ω
;

1900 
˝
 = 
ch¨t
;

1901 
Ω
 = 
øwch¨t
;

1902 
y
=0 ; y<(
YSIZE
) ; y++) {

1903 *
Ω
=0;

1904 
Ω
++;

1905 
x
=0 ; x<(
XSIZE
) ; x+=2) {

1906 i‡(
x
+1<(
XSIZE
)) {

1907 *
Ω
 = ((*
˝
)<<4) | ((cp[1])&0x0F);

1909 *
Ω
 = ((*
˝
)<<4);

1911 
Ω
++;

1912 
˝
+=2;

1915 
	}
}

1917 
	$ch¨ts_fûl_¸c
(
uöt8_t
 *
buff
,
uöt32_t
 
Àng
) {

1918 
uöt8_t
 *
±r
,*
ïå
;

1919 
uöt32_t
 
¸c
,
chÀng
;

1920 
±r
 = 
buff
+8;

1921 
ïå
 = 
buff
+
Àng
;

1922 
±r
+4<=
ïå
) {

1923 
chÀng
 = 
	`gë32bô
((c⁄° 
uöt8_t
 **)&
±r
);

1924 i‡(
±r
+8+
chÀng
<=
ïå
) {

1925 
¸c
 = 
	`my¸c32
(0,
±r
,
chÀng
+4);

1926 
±r
 +
chÀng
+4;

1927 i‡(
	`memcmp
(
±r
,"CRC#",4)==0) {

1928 
	`put32bô
(&
±r
,
¸c
);

1930 
	`sy¶og
(
LOG_WARNING
,"charts: unexpected data in generatedÖng stream");

1934 
	}
}

1936 #i‚de‡
HAVE_ZLIB_H


1938 
	#MOD_ADLER
 65521

	)

1940 
uöt32_t
 
	$ch¨ts_adÀr32
(
uöt8_t
 *
d©a
,
uöt32_t
 
Àn
) {

1941 
uöt32_t
 
a
 = 1, 
b
 = 0;

1942 
uöt32_t
 
i
;

1944 
i
=0 ; i<
Àn
 ; i++) {

1945 
a
 = (®+ 
d©a
[
i
]Ë% 
MOD_ADLER
;

1946 
b
 = (b + 
a
Ë% 
MOD_ADLER
;

1949  (
b
 << 16Ë| 
a
;

1950 
	}
}

1952 
	$ch¨ts_Áke_com¥ess
(
uöt8_t
 *
§c
,
uöt32_t
 
§csize
,uöt8_à*
d°
,uöt32_à*
d°size
) {

1953 
uöt32_t
 
ed°size
,
adÀr
;

1954 
ed°size
 = 6+(65535+5)*(
§csize
/65535);

1955 i‡(
§csize
%65535) {

1956 
ed°size
+=5+(
§csize
%65535);

1958 i‡(
ed°size
>*
d°size
) {

1961 
adÀr
 = 
	`ch¨ts_adÀr32
(
§c
,
§csize
);

1962 *
d°
++=0x78;

1963 *
d°
++=0x9C;

1964 
§csize
>65535) {

1965 *
d°
++ = 0x00;

1966 *
d°
++ = 0xFF;

1967 *
d°
++ = 0xFF;

1968 *
d°
++ = 0x00;

1969 *
d°
++ = 0x00;

1970 
	`mem˝y
(
d°
,
§c
,65535);

1971 
d°
+=65535;

1972 
§c
+=65535;

1973 
§csize
-=65535;

1975 i‡(
§csize
>0) {

1976 *
d°
++ = 0x01;

1977 *
d°
++ = 
§csize
&0xFF;

1978 *
d°
++ = 
§csize
>>8;

1979 *
d°
++ = (
§csize
&0xFF)^0xFF;

1980 *
d°
++ = (
§csize
>>8)^0xFF;

1981 
	`mem˝y
(
d°
,
§c
,
§csize
);

1982 
d°
+=
§csize
;

1984 *
d°
++ = (
adÀr
>>24) & 0xFF;

1985 *
d°
++ = (
adÀr
>>16) & 0xFF;

1986 *
d°
++ = (
adÀr
>>8) & 0xFF;

1987 *
d°
++ = 
adÀr
 & 0xFF;

1988 *
d°size
 = 
ed°size
;

1990 
	}
}

1993 
uöt32_t
 
	$ch¨ts_make_≤g
(
uöt32_t
 
numbî
) {

1994 
uöt32_t
 
chty≥
,
chønge
;

1995 
chty≥
 = 
numbî
 / 10;

1996 
chønge
 = 
numbî
 % 10;

1997 i‡(
chønge
>=
RANGES
) {

1998 
compsize
 = 0;

1999  (
≤g_1x1
);

2001 i‡(!(
	`CHARTS_IS_DIRECT_STAT
(
chty≥
Ë|| 
	`CHARTS_IS_EXTENDED_STAT
(chtype))) {

2002 
compsize
 = 0;

2003  (
≤g_1x1
);

2006 
	`ch¨ts_makech¨t
(
chty≥
,
chønge
);

2007 #i‚de‡
HAVE_ZLIB_H


2008 
	`ch¨ts_putw¨nög
(47,0,
COLOR_TEXT
);

2011 
	`ch¨ts_ch¨t_to_øwch¨t
();

2013 #ifde‡
HAVE_ZLIB_H


2014 i‡(
	`deÊ©eRe£t
(&
z°r
)!=
Z_OK
) {

2015 
compsize
 = 0;

2016  (
≤g_1x1
);

2018 
z°r
.
√xt_ö
 = 
øwch¨t
;

2019 
z°r
.
avaû_ö
 = 
RAWSIZE
;

2020 
z°r
.
tŸÆ_ö
 = 0;

2021 
z°r
.
√xt_out
 = 
compbuff
;

2022 
z°r
.
avaû_out
 = 
CBUFFSIZE
;

2023 
z°r
.
tŸÆ_out
 = 0;

2025 i‡(
	`deÊ©e
(&
z°r
,
Z_FINISH
)!=
Z_STREAM_END
) {

2026 
compsize
 = 0;

2027  (
≤g_1x1
);

2030 
compsize
 = 
z°r
.
tŸÆ_out
;

2032 
compsize
 = 
CBUFFSIZE
;

2033 i‡(
	`ch¨ts_Áke_com¥ess
(
øwch¨t
,
RAWSIZE
,
compbuff
,&
compsize
)<0) {

2034 
compsize
 = 0;

2035  (
≤g_1x1
);

2039  (
≤g_hódî
)+
compsize
+(
≤g_èûî
);

2040 
	}
}

2042 
	$ch¨ts_gë_≤g
(
uöt8_t
 *
buff
) {

2043 
uöt8_t
 *
±r
;

2044 i‡(
compsize
==0) {

2045 
	`mem˝y
(
buff
,
≤g_1x1
,(png_1x1));

2047 
	`mem˝y
(
buff
,
≤g_hódî
,(png_header));

2048 
±r
 = 
buff
+((
≤g_hódî
)-8);

2049 
	`put32bô
(&
±r
,
compsize
);

2050 
	`mem˝y
(
buff
+(
≤g_hódî
),
compbuff
,
compsize
);

2051 
	`mem˝y
(
buff
+(
≤g_hódî
)+
compsize
,
≤g_èûî
,(png_tailer));

2052 
	`ch¨ts_fûl_¸c
(
buff
,(
≤g_hódî
)+
compsize
+(
≤g_èûî
));

2054 
compsize
=0;

2055 
	}
}

	@mfscommon/charts.h

19 #i‚de‡
_CHARTS_H_


20 
	#_CHARTS_H_


	)

22 
	~<°dio.h
>

23 
	~<öây≥s.h
>

25 
	#CHARTS_MODE_ADD
 0

	)

26 
	#CHARTS_MODE_MAX
 1

	)

28 
	#CHARTS_SCALE_MICRO
 0

	)

29 
	#CHARTS_SCALE_MILI
 1

	)

30 
	#CHARTS_SCALE_NONE
 2

	)

31 
	#CHARTS_SCALE_KILO
 3

	)

32 
	#CHARTS_SCALE_MEGA
 4

	)

33 
	#CHARTS_SCALE_GIGA
 5

	)

35 
	#CHARTS_OP_CONST
 1000

	)

36 
	#CHARTS_OP_ADD
 1001

	)

37 
	#CHARTS_OP_SUB
 1002

	)

38 
	#CHARTS_OP_MIN
 1003

	)

39 
	#CHARTS_OP_MAX
 1004

	)

40 
	#CHARTS_OP_MUL
 1005

	)

41 
	#CHARTS_OP_DIV
 1006

	)

42 
	#CHARTS_OP_NEG
 1007

	)

44 
	#CHARTS_OP_END
 1999

	)

45 
	#CHARTS_DEFS_END
 2000

	)

47 
	#CHARTS_CONST
(
x
Ë
CHARTS_OP_CONST
, 
	)
x

48 
	#CHARTS_ADD
(
x
,
y
Ëx, y, 
CHARTS_OP_ADD


	)

49 
	#CHARTS_SUB
(
x
,
y
Ëx, y, 
CHARTS_OP_ADD


	)

50 
	#CHARTS_MIN
(
x
,
y
Ëx, y, 
CHARTS_OP_MIN


	)

51 
	#CHARTS_MAX
(
x
,
y
Ëx, y, 
CHARTS_OP_MAX


	)

52 
	#CHARTS_MUL
(
x
,
y
Ëx, y, 
CHARTS_OP_MUL


	)

53 
	#CHARTS_DIV
(
x
,
y
Ëx, y, 
CHARTS_OP_DIV


	)

54 
	#CHARTS_NEG
(
x
Ëx, 
CHARTS_OP_NEG


	)

55 
	#CHARTS_CALCDEF
(
x
Ëx, 
CHARTS_OP_END


	)

57 
	#CHARTS_NONE
 0

	)

58 
	#CHARTS_DIRECT_START
 1

	)

59 
	#CHARTS_DIRECT
(
x
Ë((x)+
CHARTS_DIRECT_START
)

	)

60 
	#CHARTS_CALC_START
 1000

	)

61 
	#CHARTS_CALC
(
x
Ë((x)+
CHARTS_CALC_START
)

	)

63 #i‡
deföed
(
UINT64_C
)

64 
	#CHARTS_NODATA
 
	`UINT64_C
(0xFFFFFFFFFFFFFFFF)

	)

65 #ñi‡
deföed
(
UINT64_MAX
)

66 
	#CHARTS_NODATA
 
UINT64_MAX


	)

68 
	#CHARTS_NODATA
 0xFFFFFFFFFFFFFFFFULL

	)

71 
	s_°©def
 {

72 *
	m«me
;

73 
uöt8_t
 
	mmode
;

74 
uöt8_t
 
	m≥r˚¡
;

75 
uöt8_t
 
	msˇÀ
;

76 
uöt16_t
 
	mmu…ùlõr
;

77 
uöt16_t
 
	mdivis‹
;

78 } 
	t°©def
;

80 
	s_e°©def
 {

81 
uöt32_t
 
	mc1§c
;

82 
uöt32_t
 
	mc2§c
;

83 
uöt32_t
 
	mc3§c
;

84 
uöt8_t
 
	mmode
;

85 
uöt8_t
 
	m≥r˚¡
;

86 
uöt8_t
 
	msˇÀ
;

87 
uöt16_t
 
	mmu…ùlõr
;

88 
uöt16_t
 
	mdivis‹
;

89 } 
	te°©def
;

97 
	#STATDEFS
 { \

98 {"˝u_time_cou¡î" ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

99 {"√tw‹k_d©a_ö_bôs_≥r_£c⁄d" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

100 {"cou¡_≥r_£c⁄d" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

101 {"cou¡_≥r_möuã" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

102 {"mi¸o_time_≥r_£c⁄d" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MICRO
, 1,60}, \

103 {
NULL
 ,0 ,0,0 , 0, 0} \

104 };

	)

106 
	#CALCDEFS
 { \

107 
	`CHARTS_CALCDEF
(
	`CHARTS_ADD
(
CHARTS_TOADD1
,
CHARTS_TOADD2
)), \

108 
	`CHARTS_CALCDEF
(
	`CHARTS_ADD
(
CHARTS_TOADD1
,CHARTS_ADD(
CHARTS_TOADD2
,
CHARTS_TOADD3
))), \

109 
	`CHARTS_CALCDEF
(
	`CHARTS_DIV
(
CHARTS_TODIVIDE
,
CHARTS_DIVISOR
)), \

110 
	`CHARTS_CALCDEF
(
	`CHARTS_ADD
(
CHARTS_TOADD
,
	`CHARTS_MUL
(
	`CHARTS_CONST
(300),
CHARTS_TOADDMULTIPLIED
))), \

111 
CHARTS_DEFS_END
 \

112 };

	)

121 
	#ESTATDEFS
 { \

122 {
	`CHARTS_DIRECT
(
CHARTS_UCPU
Ë,CHARTS_DIRECT(
CHARTS_SCPU
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

123 {
	`CHARTS_CALC
(0Ë,
	`CHARTS_DIRECT
(
CHARTS_SOMETHING
Ë,CHARTS_CALC(1Ë,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

124 {
CHARTS_NONE
 ,
	`CHARTS_CALC
(1Ë,CHARTS_NONE ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

125 {
CHARTS_NONE
 ,CHARTS_NONE ,CHARTS_NONE ,0 ,0,0 , 0, 0} \

126 };

	)

130 
uöt64_t
 
ch¨ts_gë
 (
uöt32_t
 
ch¨äumbî
,uöt32_à
cou¡
);

132 
uöt32_t
 
ch¨ts_d©asize
(uöt32_à
ch¨tid
);

133 
ch¨ts_maked©a
(
uöt8_t
 *
buff
,
uöt32_t
 
ch¨tid
);

134 
uöt32_t
 
ch¨ts_make_≤g
(uöt32_à
ch¨tid
);

135 
ch¨ts_gë_≤g
(
uöt8_t
 *
buff
);

137 
ch¨ts_add
 (
uöt64_t
 *
d©a
,
uöt32_t
 
d©©s
);

138 
ch¨ts_°‹e
 ();

139 
ch¨ts_öô
 (c⁄° 
uöt32_t
 *
ˇlcs
,c⁄° 
°©def
 *
°©s
,c⁄° 
e°©def
 *
e°©s
,c⁄° *
fûíame
);

140 
ch¨ts_ãrm
 ();

	@mfscommon/crc.c

19 
	~"c⁄fig.h
"

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

23 
	~"MFSCommuniˇti⁄.h
"

64 
	#FASTCRC
 1

	)

66 #ifde‡
FASTCRC


67 
	#BYTEREV
(
w
Ë(((w)>>24)+(((w)>>8)&0xff00)+(((w)&0xff00)<<8)+(((w)&0xff)<<24))

	)

68 
uöt32_t
 
	g¸c_èbÀ
[4][256];

70 
uöt32_t
 
	g¸c_èbÀ
[256];

73 
	$¸c_gíî©e_maö_èbÀs
() {

74 
uöt32_t
 
c
,
pﬁy
,
i
;

76 
pﬁy
 = 
CRC_POLY
;

77 
i
=0; i<256; i++) {

78 
c
=
i
;

79 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

80 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

81 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

82 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

83 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

84 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

85 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

86 
c
 = (c&1Ë? (
pﬁy
^(c>>1)) : (c>>1);

87 #ifde‡
FASTCRC


88 #ifde‡
WORDS_BIGENDIAN


89 
¸c_èbÀ
[0][
i
] = 
	`BYTEREV
(
c
);

91 
¸c_èbÀ
[0][
i
] = 
c
;

94 
¸c_èbÀ
[
i
]=
c
;

98 #ifde‡
FASTCRC


99 
i
=0; i<256; i++) {

100 #ifde‡
WORDS_BIGENDIAN


101 
c
 = 
¸c_èbÀ
[0][
i
];

102 
c
 = 
¸c_èbÀ
[0][(c>>24)]^(c<<8);

103 
¸c_èbÀ
[1][
i
] = 
c
;

104 
c
 = 
¸c_èbÀ
[0][(c>>24)]^(c<<8);

105 
¸c_èbÀ
[2][
i
] = 
c
;

106 
c
 = 
¸c_èbÀ
[0][(c>>24)]^(c<<8);

107 
¸c_èbÀ
[3][
i
] = 
c
;

109 
c
 = 
¸c_èbÀ
[0][
i
];

110 
c
 = 
¸c_èbÀ
[0][c&0xff]^(c>>8);

111 
¸c_èbÀ
[1][
i
] = 
c
;

112 
c
 = 
¸c_èbÀ
[0][c&0xff]^(c>>8);

113 
¸c_èbÀ
[2][
i
] = 
c
;

114 
c
 = 
¸c_èbÀ
[0][c&0xff]^(c>>8);

115 
¸c_èbÀ
[3][
i
] = 
c
;

132 
	}
}

134 
uöt32_t
 
	$my¸c32
(
uöt32_t
 
¸c
,c⁄° 
uöt8_t
 *
block
,uöt32_à
Àng
) {

135 #ifde‡
FASTCRC


136 c⁄° 
uöt32_t
 *
block4
;

139 #ifde‡
FASTCRC


140 #ifde‡
WORDS_BIGENDIAN


141 
	#CRC_REORDER
 
¸c
=(
	`BYTEREV
(¸c))^0xFFFFFFFF

	)

142 
	#CRC_ONE_BYTE
 
¸c
 = 
¸c_èbÀ
[0][(¸¯>> 24Ë^ *
block
++] ^ (¸¯<< 8)

	)

143 
	#CRC_FOUR_BYTES
 
¸c
 ^*
block4
++; cr¯
¸c_èbÀ
[0][¸¯& 0xff] ^ crc_èbÀ[1][(¸¯>> 8Ë& 0xff] ^ crc_èbÀ[2][(¸¯>> 16Ë& 0xff] ^ crc_èbÀ[3][¸¯>> 24]

	)

145 
	#CRC_REORDER
 
¸c
^=0xFFFFFFFF

	)

146 
	#CRC_ONE_BYTE
 
¸c
 = 
¸c_èbÀ
[0][(¸¯^ *
block
++Ë& 0xFF] ^ (¸¯>> 8)

	)

147 
	#CRC_FOUR_BYTES
 
¸c
 ^*
block4
++; cr¯
¸c_èbÀ
[3][¸¯& 0xff] ^ crc_èbÀ[2][(¸¯>> 8Ë& 0xff] ^ crc_èbÀ[1][(¸¯>> 16Ë& 0xff] ^ crc_èbÀ[0][¸¯>> 24]

	)

149 
CRC_REORDER
;

150 
Àng
 && (()
block
 & 3)) {

151 
CRC_ONE_BYTE
;

152 
Àng
--;

154 
block4
 = (c⁄° 
uöt32_t
*)
block
;

155 
Àng
>=32) {

156 
CRC_FOUR_BYTES
;

157 
CRC_FOUR_BYTES
;

158 
CRC_FOUR_BYTES
;

159 
CRC_FOUR_BYTES
;

160 
CRC_FOUR_BYTES
;

161 
CRC_FOUR_BYTES
;

162 
CRC_FOUR_BYTES
;

163 
CRC_FOUR_BYTES
;

164 
Àng
-=32;

166 
Àng
>=4) {

167 
CRC_FOUR_BYTES
;

168 
Àng
-=4;

170 
block
 = (c⁄° 
uöt8_t
*)
block4
;

171 i‡(
Àng
) do {

172 
CRC_ONE_BYTE
;

173 } --
Àng
);

174 
CRC_REORDER
;

175  
¸c
;

177 
	#CRC_ONE_BYTE
 
¸c
 = (¸c>>8)^
¸c_èbÀ
[(¸c^(*
block
++))&0xff]

	)

178 
¸c
^=0xFFFFFFFF;

179 
Àng
>=8) {

180 
CRC_ONE_BYTE
;

181 
CRC_ONE_BYTE
;

182 
CRC_ONE_BYTE
;

183 
CRC_ONE_BYTE
;

184 
CRC_ONE_BYTE
;

185 
CRC_ONE_BYTE
;

186 
CRC_ONE_BYTE
;

187 
CRC_ONE_BYTE
;

188 
Àng
-=8;

190 i‡(
Àng
>0) do {

191 
CRC_ONE_BYTE
;

192 } --
Àng
);

193  
¸c
^0xFFFFFFFF;

195 
	}
}

199 
uöt32_t
 
	g¸c_comböe_èbÀ
[32][4][256];

201 
	$¸c_m©rix_squ¨e
(
uöt32_t
 
sqr
[32], uöt32_à
m
[32]) {

202 
uöt32_t
 
i
,
j
,
s
,
v
;

203 
i
=0; i<32; i++) {

204 
j
=0,
s
=0,
v
=
m
[
i
] ; v && j<32 ; j++, v>>=1) {

205 i‡(
v
&1) {

206 
s
^=
m
[
j
];

209 
sqr
[
i
] = 
s
;

211 
	}
}

213 
	$¸c_gíî©e_comböe_èbÀs
() {

214 
uöt32_t
 
i
,
j
,
k
,
l
,
sum
;

215 
uöt32_t
 
m1
[32],
m2
[32],*
mc
,*
m
;

216 
m1
[0]=
CRC_POLY
;

217 
j
=1;

218 
i
=1 ; i<32 ; i++) {

219 
m1
[
i
]=
j
;

220 
j
<<=1;

222 
	`¸c_m©rix_squ¨e
(
m2
,
m1
);

223 
	`¸c_m©rix_squ¨e
(
m1
,
m2
);

225 
i
=0 ; i<32 ; i++) {

226 i‡(
i
&1) {

227 
	`¸c_m©rix_squ¨e
(
m1
,
m2
);

228 
mc
 = 
m1
;

230 
	`¸c_m©rix_squ¨e
(
m2
,
m1
);

231 
mc
 = 
m2
;

233 
j
=0 ; j<4 ; j++) {

234 
k
=0 ; k<256 ; k++) {

235 
sum
 = 0;

236 
l
=
k
;

237 
m
=
mc
+(
j
*8);

238 
l
) {

239 i‡(
l
&1) {

240 
sum
 ^*
m
;

242 
l
>>=1;

243 
m
++;

245 
¸c_comböe_èbÀ
[
i
][
j
][
k
]=
sum
;

249 
	}
}

251 
uöt32_t
 
	$my¸c32_comböe
(
uöt32_t
 
¸c1
, uöt32_à
¸c2
, uöt32_à
Àng2
) {

252 
uöt8_t
 
i
;

255 
i
=0;

256 
Àng2
) {

257 i‡(
Àng2
&1) {

258 
¸c1
 = 
¸c_comböe_èbÀ
[
i
][3][(crc1>>24)] \

259 ^ 
¸c_comböe_èbÀ
[
i
][2][(
¸c1
>>16)&0xFF] \

260 ^ 
¸c_comböe_èbÀ
[
i
][1][(
¸c1
>>8)&0xFF] \

261 ^ 
¸c_comböe_èbÀ
[
i
][0][
¸c1
&0xFF];

263 
i
++;

264 
Àng2
>>=1;

267  
¸c1
^
¸c2
;

268 
	}
}

270 
	$my¸c32_öô
() {

271 
	`¸c_gíî©e_maö_èbÀs
();

272 
	`¸c_gíî©e_comböe_èbÀs
();

273 
	}
}

	@mfscommon/crc.h

19 #i‚de‡
_CRC_H_


20 
	#_CRC_H_


	)

21 
	~<öây≥s.h
>

23 
uöt32_t
 
my¸c32
(uöt32_à
¸c
,c⁄° 
uöt8_t
 *
block
,uöt32_à
Àng
);

24 
uöt32_t
 
my¸c32_comböe
(uöt32_à
¸c1
, uöt32_à
¸c2
, uöt32_à
Àng2
);

25 
	#my¸c32_zîoblock
(
¸c
,
zîos
Ë
	`my¸c32_comböe
((¸c)^0xFFFFFFFF,0xFFFFFFFF,(zîos))

	)

26 
	#my¸c32_zî€x∑nded
(
¸c
,
block
,
Àng
,
zîos
Ë
	`my¸c32_zîoblock
(
	`my¸c32
((¸c),(block),÷íg)),(zîos))

	)

27 
	#my¸c32_x‹blocks
(
¸c
,
¸cblock1
,
¸cblock2
,
Àng
Ë((¸cblock1)^(¸cblock2)^
	`my¸c32_zîoblock
(¸c,Àng))

	)

29 
my¸c32_öô
();

	@mfscommon/datapack.h

19 #i‚de‡
_DATAPACK_H_


20 
	#_DATAPACK_H_


	)

22 
	~<öây≥s.h
>

26 
ölöe
 
	$put64bô
(
uöt8_t
 **
±r
,
uöt64_t
 
vÆ
) {

27 (*
±r
)[0]=((
vÆ
)>>56)&0xFF;

28 (*
±r
)[1]=((
vÆ
)>>48)&0xFF;

29 (*
±r
)[2]=((
vÆ
)>>40)&0xFF;

30 (*
±r
)[3]=((
vÆ
)>>32)&0xFF;

31 (*
±r
)[4]=((
vÆ
)>>24)&0xFF;

32 (*
±r
)[5]=((
vÆ
)>>16)&0xFF;

33 (*
±r
)[6]=((
vÆ
)>>8)&0xFF;

34 (*
±r
)[7]=(
vÆ
)&0xFF;

35 (*
±r
)+=8;

36 
	}
}

38 
ölöe
 
	$put32bô
(
uöt8_t
 **
±r
,
uöt32_t
 
vÆ
) {

39 (*
±r
)[0]=((
vÆ
)>>24)&0xFF;

40 (*
±r
)[1]=((
vÆ
)>>16)&0xFF;

41 (*
±r
)[2]=((
vÆ
)>>8)&0xFF;

42 (*
±r
)[3]=(
vÆ
)&0xFF;

43 (*
±r
)+=4;

44 
	}
}

46 
ölöe
 
	$put16bô
(
uöt8_t
 **
±r
,
uöt16_t
 
vÆ
) {

47 (*
±r
)[0]=((
vÆ
)>>8)&0xFF;

48 (*
±r
)[1]=(
vÆ
)&0xFF;

49 (*
±r
)+=2;

50 
	}
}

52 
ölöe
 
	$put8bô
(
uöt8_t
 **
±r
,uöt8_à
vÆ
) {

53 (*
±r
)[0]=(
vÆ
)&0xFF;

54 (*
±r
)++;

55 
	}
}

57 
ölöe
 
uöt64_t
 
	$gë64bô
(c⁄° 
uöt8_t
 **
±r
) {

58 
uöt64_t
 
t64
;

59 
t64
=((*
±r
)[3]+256*((*ptr)[2]+256*((*ptr)[1]+256*(*ptr)[0])));

60 
t64
<<=32;

61 
t64
|=(((*
±r
)[7]+256*((*ptr)[6]+256*((*ptr)[5]+256*(*ptr)[4]))))&0xffffffffU;

62 (*
±r
)+=8;

63  
t64
;

64 
	}
}

66 
ölöe
 
uöt32_t
 
	$gë32bô
(c⁄° 
uöt8_t
 **
±r
) {

67 
uöt32_t
 
t32
;

68 
t32
=((*
±r
)[3]+256*((*ptr)[2]+256*((*ptr)[1]+256*(*ptr)[0])));

69 (*
±r
)+=4;

70  
t32
;

71 
	}
}

73 
ölöe
 
uöt16_t
 
	$gë16bô
(c⁄° 
uöt8_t
 **
±r
) {

74 
uöt32_t
 
t16
;

75 
t16
=(*
±r
)[1]+256*(*ptr)[0];

76 (*
±r
)+=2;

77  
t16
;

78 
	}
}

80 
ölöe
 
uöt8_t
 
	$gë8bô
(c⁄° 
uöt8_t
 **
±r
) {

81 
uöt32_t
 
t8
;

82 
t8
=(*
±r
)[0];

83 (*
±r
)++;

84  
t8
;

85 
	}
}

	@mfscommon/main.c

19 
	~"c⁄fig.h
"

21 #i‚de‡
MFSMAXFILES


22 
	#MFSMAXFILES
 5000

	)

25 #i‡
deföed
(
HAVE_MLOCKALL
)

26 #i‡
deföed
(
HAVE_SYS_MMAN_H
)

27 
	~<sys/mm™.h
>

29 #i‡
deföed
(
HAVE_SYS_RESOURCE_H
)

30 
	~<sys/ªsour˚.h
>

32 #i‡
deföed
(
RLIMIT_MEMLOCK
Ë&& deföed(
MCL_CURRENT
Ë&& deföed(
MCL_FUTURE
)

33 
	#MFS_USE_MEMLOCK
 1

	)

37 #i‡
deföed
(
_THREAD_SAFE
Ë|| deföed(
_REENTRANT
Ë|| deföed(
_USE_PTHREADS
)

38 
	#USE_PTHREADS
 1

	)

41 
	~<sys/°©.h
>

42 
	~<sys/waô.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/time.h
>

46 
	~<sig«l.h
>

47 
	~<f˙é.h
>

48 
	~<uni°d.h
>

49 
	~<î∫o.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<sy¶og.h
>

53 
	~<°rög.h
>

54 
	~<°rögs.h
>

55 
	~<time.h
>

56 
	~<sys/ªsour˚.h
>

57 
	~<gΩ.h
>

58 
	~<pwd.h
>

59 #ifde‡
USE_PTHREADS


60 
	~<±hªad.h
>

63 
	#STR_AUX
(
x
Ë#x

	)

64 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

67 
	~"cfg.h
"

68 
	~"maö.h
"

69 
	~"°ªº.h
"

70 
	~"¸c.h
"

71 
	~"öô.h
"

72 
	~"mas£π.h
"

73 
	~"¶oggî.h
"

75 
	#RM_RESTART
 0

	)

76 
	#RM_START
 1

	)

77 
	#RM_STOP
 2

	)

78 
	#RM_RELOAD
 3

	)

79 
	#RM_TEST
 4

	)

81 
	sdì¡ry
 {

82 (*
	mfun
)();

83 
dì¡ry
 *
	m√xt
;

84 } 
	tdì¡ry
;

86 
dì¡ry
 *
	gdehód
=
NULL
;

89 
	swì¡ry
 {

90 (*
	mfun
)();

91 
wì¡ry
 *
	m√xt
;

92 } 
	twì¡ry
;

94 
wì¡ry
 *
	gwehód
=
NULL
;

97 
	s˚íåy
 {

98 (*
	mfun
)();

99 
˚íåy
 *
	m√xt
;

100 } 
	t˚íåy
;

102 
˚íåy
 *
	g˚hód
=
NULL
;

105 
	sæíåy
 {

106 (*
	mfun
)();

107 
æíåy
 *
	m√xt
;

108 } 
	tæíåy
;

110 
æíåy
 *
	gæhód
=
NULL
;

113 
	spﬁÀ¡ry
 {

114 (*
	mdesc
)(
	mpﬁlfd
 *,
	muöt32_t
 *);

115 (*
	m£rve
)(
	mpﬁlfd
 *);

116 
pﬁÀ¡ry
 *
	m√xt
;

117 } 
	tpﬁÀ¡ry
;

119 
pﬁÀ¡ry
 *
	gpﬁlhód
=
NULL
;

122 
	sño›íåy
 {

123 (*
	mfun
)();

124 
ño›íåy
 *
	m√xt
;

125 } 
	tño›íåy
;

127 
ño›íåy
 *
	gño›hód
=
NULL
;

130 
	stimì¡ry
 {

131 
uöt32_t
 
	m√xãvít
;

132 
uöt32_t
 
	m£c⁄ds
;

133 
uöt32_t
 
	moff£t
;

134 
	mmode
;

136 (*
	mfun
)();

137 
timì¡ry
 *
	m√xt
;

138 } 
	ttimì¡ry
;

140 
timì¡ry
 *
	gtimehód
=
NULL
;

142 
uöt32_t
 
	gnow
;

143 
uöt64_t
 
	gu£˙ow
;

146 #ifde‡
USE_PTHREADS


147 
±hªad_muãx_t
 
	gsig«l_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

149 
	gãrmö©e
=0;

150 
	gªlﬂd
=0;

154 
maö_de°ru˘ªgi°î
 ((*
fun
)()) {

155 
dì¡ry
 *
aux
=(dì¡ry*)
	`mÆloc
((deentry));

156 
	`∑s£π
(
aux
);

157 
aux
->
fun
 = fun;

158 
aux
->
√xt
 = 
dehód
;

159 
dehód
 = 
aux
;

160 
	}
}

162 
maö_ˇ√xôªgi°î
 ((*
fun
)()) {

163 
˚íåy
 *
aux
=(˚íåy*)
	`mÆloc
((ceentry));

164 
	`∑s£π
(
aux
);

165 
aux
->
fun
 = fun;

166 
aux
->
√xt
 = 
˚hód
;

167 
˚hód
 = 
aux
;

168 
	}
}

170 
maö_w™ãxôªgi°î
 ((*
fun
)()) {

171 
wì¡ry
 *
aux
=(wì¡ry*)
	`mÆloc
((weentry));

172 
	`∑s£π
(
aux
);

173 
aux
->
fun
 = fun;

174 
aux
->
√xt
 = 
wehód
;

175 
wehód
 = 
aux
;

176 
	}
}

178 
maö_ªlﬂdªgi°î
 ((*
fun
)()) {

179 
æíåy
 *
aux
=‘À¡ry*)
	`mÆloc
((rlentry));

180 
	`∑s£π
(
aux
);

181 
aux
->
fun
 = fun;

182 
aux
->
√xt
 = 
æhód
;

183 
æhód
 = 
aux
;

184 
	}
}

186 
maö_pﬁÃegi°î
 ((*
desc
)(
pﬁlfd
 *,
uöt32_t
 *),(*
£rve
)(pollfd *)) {

187 
pﬁÀ¡ry
 *
aux
=’ﬁÀ¡ry*)
	`mÆloc
((pollentry));

188 
	`∑s£π
(
aux
);

189 
aux
->
desc
 = desc;

190 
aux
->
£rve
 = serve;

191 
aux
->
√xt
 = 
pﬁlhód
;

192 
pﬁlhód
 = 
aux
;

193 
	}
}

195 
maö_óchlo›ªgi°î
 ((*
fun
)()) {

196 
ño›íåy
 *
aux
=”lo›íåy*)
	`mÆloc
((eloopentry));

197 
	`∑s£π
(
aux
);

198 
aux
->
fun
 = fun;

199 
aux
->
√xt
 = 
ño›hód
;

200 
ño›hód
 = 
aux
;

201 
	}
}

203 
maö_timîegi°î
 (
mode
,
uöt32_t
 
£c⁄ds
,uöt32_à
off£t
,(*
fun
)()) {

204 
timì¡ry
 *
aux
;

205 i‡(
£c⁄ds
==0 || 
off£t
>=seconds) ;

206 
aux
 = (
timì¡ry
*)
	`mÆloc
((timeentry));

207 
	`∑s£π
(
aux
);

208 
aux
->
√xãvít
 = ((
now
 / 
£c⁄ds
Ë* sec⁄dsË+ 
off£t
;

209 
aux
->
√xãvít
<
now
) {

210 
aux
->
√xãvít
+=
£c⁄ds
;

212 
aux
->
£c⁄ds
 = seconds;

213 
aux
->
off£t
 = offset;

214 
aux
->
mode
 = mode;

215 
aux
->
fun
 = fun;

216 
aux
->
√xt
 = 
timehód
;

217 
timehód
 = 
aux
;

218 
	}
}

222 
	$‰ì_Æl_ªgi°îed_íåõs
() {

223 
dì¡ry
 *
de
,*
dí
;

224 
˚íåy
 *
˚
,*
˚n
;

225 
wì¡ry
 *
we
,*
wí
;

226 
æíåy
 *
ª
,*
ªn
;

227 
pﬁÀ¡ry
 *
≥
,*
≥n
;

228 
ño›íåy
 *
ì
,*
ìn
;

229 
timì¡ry
 *
ã
,*
ãn
;

231 
de
 = 
dehód
 ; dê; dê
dí
) {

232 
dí
 = 
de
->
√xt
;

233 
	`‰ì
(
de
);

236 
˚
 = 
˚hód
 ; cê; cê
˚n
) {

237 
˚n
 = 
˚
->
√xt
;

238 
	`‰ì
(
˚
);

241 
we
 = 
wehód
 ; wê; wê
wí
) {

242 
wí
 = 
we
->
√xt
;

243 
	`‰ì
(
we
);

246 
ª
 = 
æhód
 ;Ñê;Ñê
ªn
) {

247 
ªn
 = 
ª
->
√xt
;

248 
	`‰ì
(
ª
);

251 
≥
 = 
pﬁlhód
 ;Öê;Öê
≥n
) {

252 
≥n
 = 
≥
->
√xt
;

253 
	`‰ì
(
≥
);

256 
ì
 = 
ño›hód
 ;Éê;Éê
ìn
) {

257 
ìn
 = 
ì
->
√xt
;

258 
	`‰ì
(
ì
);

261 
ã
 = 
timehód
 ;Åê;Åê
ãn
) {

262 
ãn
 = 
ã
->
√xt
;

263 
	`‰ì
(
ã
);

265 
	}
}

267 
	$ˇ√xô
() {

268 
˚íåy
 *
aux
;

269 
aux
 = 
˚hód
 ;áux!=
NULL
 ;áux˜ux->
√xt
 ) {

270 i‡(
aux
->
	`fun
()==0) {

275 
	}
}

277 
	$ãrmh™dÀ
(
signo
) {

278 ()
signo
;

279 #ifde‡
USE_PTHREADS


280 
	`±hªad_muãx_lock
(&
sig«l_lock
);

282 i‡(
ãrmö©e
==0) {

283 
ãrmö©e
=1;

285 #ifde‡
USE_PTHREADS


286 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

288 
	}
}

290 
	$ªlﬂdh™dÀ
(
signo
) {

291 ()
signo
;

292 #ifde‡
USE_PTHREADS


293 
	`±hªad_muãx_lock
(&
sig«l_lock
);

295 
ªlﬂd
=1;

296 #ifde‡
USE_PTHREADS


297 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

299 
	}
}

301 
uöt32_t
 
	$maö_time
() {

302  
now
;

303 
	}
}

305 
uöt64_t
 
	$maö_utime
() {

306  
u£˙ow
;

307 
	}
}

309 
	$de°ru˘
() {

310 
dì¡ry
 *
deô
;

311 
deô
 = 
dehód
 ; deô!=
NULL
 ; deô=deô->
√xt
 ) {

312 
deô
->
	`fun
();

314 
	}
}

316 
	$maölo›
() {

317 
uöt32_t
 
¥evtime
 = 0;

318 
timevÆ
 
tv
;

319 
pﬁÀ¡ry
 *
pﬁlô
;

320 
ño›íåy
 *
ño›ô
;

321 
timì¡ry
 *
timeô
;

322 
˚íåy
 *
˚ô
;

323 
wì¡ry
 *
weô
;

324 
æíåy
 *
æô
;

325 
pﬁlfd
 
pdesc
[
MFSMAXFILES
];

326 
uöt32_t
 
ndesc
;

327 
i
;

328 
t
,
r
;

330 
t
 = 0;

331 
t
!=3) {

332 
tv
.
tv_£c
=0;

333 
tv
.
tv_u£c
=300000;

334 
ndesc
=0;

335 
pﬁlô
 = 
pﬁlhód
 ;Öﬁlô !
NULL
 ;Öﬁlô =Öﬁlô->
√xt
) {

336 
pﬁlô
->
	`desc
(
pdesc
,&
ndesc
);

338 
i
 = 
	`pﬁl
(
pdesc
,
ndesc
,50);

339 
	`gëtimeofday
(&
tv
,
NULL
);

340 
u£˙ow
 = 
tv
.
tv_£c
;

341 
u£˙ow
 *= 1000000;

342 
u£˙ow
 +
tv
.
tv_u£c
;

343 
now
 = 
tv
.
tv_£c
;

344 i‡(
i
<0) {

345 i‡(
î∫o
==
EAGAIN
) {

346 
	`sy¶og
(
LOG_WARNING
,"pollÑeturned EAGAIN");

347 
	`u¶ìp
(100000);

350 i‡(
î∫o
!=
EINTR
) {

351 
	`sy¶og
(
LOG_WARNING
,"pﬁ»îr‹: %s",
	`°ªº
(
î∫o
));

355 
pﬁlô
 = 
pﬁlhód
 ;Öﬁlô !
NULL
 ;Öﬁlô =Öﬁlô->
√xt
) {

356 
pﬁlô
->
	`£rve
(
pdesc
);

359 
ño›ô
 = 
ño›hód
 ;Élo›ô !
NULL
 ;Élo›ô =Élo›ô->
√xt
) {

360 
ño›ô
->
	`fun
();

362 i‡(
now
<
¥evtime
) {

365 
timeô
 = 
timehód
 ;Åimeô !
NULL
 ;Åimeô =Åimeô->
√xt
) {

366 
uöt32_t
 
¥evious_time_to_run
 = 
timeô
->
√xãvít
 - 
¥evtime
;

367 i‡(
¥evious_time_to_run
 > 
timeô
->
£c⁄ds
) {

368 
¥evious_time_to_run
 = 
timeô
->
£c⁄ds
;

370 
timeô
->
√xãvít
 = ((
now
 /Åimeô->
£c⁄ds
Ë*Åimeô->£c⁄dsË+Åimeô->
off£t
;

371 
timeô
->
√xãvít
 <
now
+
¥evious_time_to_run
) {

372 
timeô
->
√xãvít
 +timeô->
£c⁄ds
;

375 } i‡(
now
>
¥evtime
+3600) {

377 
timeô
 = 
timehód
 ;Åimeô !
NULL
 ;Åimeô =Åimeô->
√xt
) {

378 
timeô
->
√xãvít
 = ((
now
 /Åimeô->
£c⁄ds
Ë*Åimeô->£c⁄dsË+Åimeô->
off£t
;

379 
now
 >
timeô
->
√xãvít
) {

380 
timeô
->
√xãvít
 +timeô->
£c⁄ds
;

384 
timeô
 = 
timehód
 ;Åimeô !
NULL
 ;Åimeô =Åimeô->
√xt
) {

385 i‡(
now
 >
timeô
->
√xãvít
) {

386 i‡(
timeô
->
mode
 =
TIMEMODE_RUN_LATE
) {

387 
now
 >
timeô
->
√xãvít
) {

388 
timeô
->
√xãvít
 +timeô->
£c⁄ds
;

390 
timeô
->
	`fun
();

392 i‡(
now
 =
timeô
->
√xãvít
) {

393 
timeô
->
	`fun
();

395 
now
 >
timeô
->
√xãvít
) {

396 
timeô
->
√xãvít
 +timeô->
£c⁄ds
;

401 
¥evtime
 = 
now
;

402 #ifde‡
USE_PTHREADS


403 
	`±hªad_muãx_lock
(&
sig«l_lock
);

405 
t
 = 
ãrmö©e
;

406 
r
 = 
ªlﬂd
;

407 #ifde‡
USE_PTHREADS


408 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

410 i‡(
t
==0 && 
r
) {

411 
æô
 = 
æhód
 ;Ñlô!=
NULL
 ;ÑlôÙlô->
√xt
 ) {

412 
æô
->
	`fun
();

414 #ifde‡
USE_PTHREADS


415 
	`±hªad_muãx_lock
(&
sig«l_lock
);

417 
r
 = 
ªlﬂd
 = 0;

418 #ifde‡
USE_PTHREADS


419 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

422 i‡(
t
==1) {

423 
weô
 = 
wehód
 ; weô!=
NULL
 ; weô=weô->
√xt
 ) {

424 
weô
->
	`fun
();

426 #ifde‡
USE_PTHREADS


427 
	`±hªad_muãx_lock
(&
sig«l_lock
);

429 
t
 = 
ãrmö©e
 = 2;

430 #ifde‡
USE_PTHREADS


431 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

434 i‡(
t
==2) {

435 
i
 = 1;

436 
˚ô
 = 
˚hód
 ; ceô!=
NULL
 && 
i
 ; ceô=˚ô->
√xt
 ) {

437 i‡(
˚ô
->
	`fun
()==0) {

438 
i
=0;

441 i‡(
i
) {

442 #ifde‡
USE_PTHREADS


443 
	`±hªad_muãx_lock
(&
sig«l_lock
);

445 
t
 = 
ãrmö©e
 = 3;

446 #ifde‡
USE_PTHREADS


447 
	`±hªad_muãx_u∆ock
(&
sig«l_lock
);

452 
	}
}

454 
	$öôülize
() {

455 
uöt32_t
 
i
;

456 
ok
;

457 
ok
 = 1;

458 
now
 = 
	`time
(
NULL
);

459 
i
=0 ; ()(
RunTab
[i].
‚
)!=0 && 
ok
 ; i++) {

460 i‡(
RunTab
[
i
].
	`‚
()<0) {

461 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"öô: %†Áûed !!!",
RunTab
[
i
].
«me
);

462 
ok
=0;

465  
ok
;

466 
	}
}

468 
	gãrmsig«l
[]={

469 
SIGTERM
,

473 
	gªlﬂdsig«l
[]={

474 
SIGHUP
,

478 
	gign‹esig«l
[]={

479 
SIGQUIT
,

480 #ifde‡
SIGPIPE


481 
SIGPIPE
,

483 #ifde‡
SIGTSTP


484 
SIGTSTP
,

486 #ifde‡
SIGTTIN


487 
SIGTTIN
,

489 #ifde‡
SIGTTOU


490 
SIGTTOU
,

492 #ifde‡
SIGINFO


493 
SIGINFO
,

495 #ifde‡
SIGUSR1


496 
SIGUSR1
,

498 #ifde‡
SIGUSR2


499 
SIGUSR2
,

501 #ifde‡
SIGCHLD


502 
SIGCHLD
,

504 #ifde‡
SIGCLD


505 
SIGCLD
,

510 
	gd´m⁄ign‹esig«l
[]={

511 
SIGINT
,

515 
	$£t_sig«l_h™dÀrs
(
d´m⁄Êag
) {

516 
siga˘i⁄
 
ß
;

517 
uöt32_t
 
i
;

519 #ifde‡
SA_RESTART


520 
ß
.
ß_Êags
 = 
SA_RESTART
;

522 
ß
.
ß_Êags
 = 0;

524 
	`sigem±y£t
(&
ß
.
ß_mask
);

526 
ß
.
ß_h™dÀr
 = 
ãrmh™dÀ
;

527 
i
=0 ; 
ãrmsig«l
[i]>0 ; i++) {

528 
	`siga˘i⁄
(
ãrmsig«l
[
i
],&
ß
,(
siga˘i⁄
 *)0);

530 
ß
.
ß_h™dÀr
 = 
ªlﬂdh™dÀ
;

531 
i
=0 ; 
ªlﬂdsig«l
[i]>0 ; i++) {

532 
	`siga˘i⁄
(
ªlﬂdsig«l
[
i
],&
ß
,(
siga˘i⁄
 *)0);

534 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

535 
i
=0 ; 
ign‹esig«l
[i]>0 ; i++) {

536 
	`siga˘i⁄
(
ign‹esig«l
[
i
],&
ß
,(
siga˘i⁄
 *)0);

538 
ß
.
ß_h™dÀr
 = 
d´m⁄Êag
?
SIG_IGN
:
ãrmh™dÀ
;

539 
i
=0 ; 
d´m⁄ign‹esig«l
[i]>0 ; i++) {

540 
	`siga˘i⁄
(
d´m⁄ign‹esig«l
[
i
],&
ß
,(
siga˘i⁄
 *)0);

542 
	}
}

544 
	$ch™geugid
() {

545 
pwdgΩbuff
[16384];

546 
∑sswd
 
pwd
,*
pw
;

547 
group
 
gΩ
,*
gr
;

548 *
wu£r
;

549 *
wgroup
;

550 
uid_t
 
wrk_uid
;

551 
gid_t
 
wrk_gid
;

552 
gidok
;

554 i‡(
	`gëeuid
()==0) {

555 
wu£r
 = 
	`cfg_gë°r
("WORKING_USER",
DEFAULT_USER
);

556 
wgroup
 = 
	`cfg_gë°r
("WORKING_GROUP",
DEFAULT_GROUP
);

558 
gidok
 = 0;

559 
wrk_gid
 = -1;

560 i‡(
wgroup
[0]=='#') {

561 
wrk_gid
 = 
	`°πﬁ
(
wgroup
+1,
NULL
,10);

562 
gidok
 = 1;

563 } i‡(
wgroup
[0]) {

564 
	`gëg∫am_r
(
wgroup
,&
gΩ
,
pwdgΩbuff
,16384,&
gr
);

565 i‡(
gr
==
NULL
) {

566 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"%s:Çÿsuch grou∞!!!",
wgroup
);

567 
	`exô
(1);

569 
wrk_gid
 = 
gr
->
gr_gid
;

570 
gidok
 = 1;

574 i‡(
wu£r
[0]=='#') {

575 
wrk_uid
 = 
	`°πﬁ
(
wu£r
+1,
NULL
,10);

576 i‡(
gidok
==0) {

577 
	`gëpwuid_r
(
wrk_uid
,&
pwd
,
pwdgΩbuff
,16384,&
pw
);

578 i‡(
pw
==
NULL
) {

579 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"%s:Çÿsuch u£∏id - c™'àobèö grou∞id",
wu£r
+1);

580 
	`exô
(1);

582 
wrk_gid
 = 
pw
->
pw_gid
;

585 
	`gëpw«m_r
(
wu£r
,&
pwd
,
pwdgΩbuff
,16384,&
pw
);

586 i‡(
pw
==
NULL
) {

587 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"%s:Çÿsuch u£∏!!!",
wu£r
);

588 
	`exô
(1);

590 
wrk_uid
 = 
pw
->
pw_uid
;

591 i‡(
gidok
==0) {

592 
wrk_gid
 = 
pw
->
pw_gid
;

595 
	`‰ì
(
wu£r
);

596 
	`‰ì
(
wgroup
);

598 
	`£tgid
(
wrk_gid
);

599 
	`sy¶og
(
LOG_NOTICE
,"£àgidÅÿ%d",()
wrk_gid
);

600 
	`£tuid
(
wrk_uid
);

601 
	`sy¶og
(
LOG_NOTICE
,"£àuidÅÿ%d",()
wrk_uid
);

603 
	}
}

605 
pid_t
 
	$mylock
(
fd
) {

606 
Êock
 
Ê
;

607 
Ê
.
l_°¨t
 = 0;

608 
Ê
.
l_Àn
 = 0;

609 
Ê
.
l_pid
 = 
	`gëpid
();

610 
Ê
.
l_ty≥
 = 
F_WRLCK
;

611 
Ê
.
l_whí˚
 = 
SEEK_SET
;

613 i‡(
	`f˙é
(
fd
,
F_SETLK
,&
Ê
)>=0) {

616 i‡(
î∫o
!=
EAGAIN
) {

619 i‡(
	`f˙é
(
fd
,
F_GETLK
,&
Ê
)<0) {

622 i‡(
Ê
.
l_ty≥
!=
F_UNLCK
) {

623  
Ê
.
l_pid
;

627 
	}
}

629 
	$wdlock
(
uöt8_t
 
runmode
,
uöt32_t
 
timeout
) {

630 
pid_t
 
ow√Ωid
;

631 
pid_t
 
√wow√Ωid
;

632 
lÂ
;

633 
uöt32_t
 
l
;

635 
lÂ
 = 
	`›í
("." 
	`STR
(
APPNAME
Ë".lock",
O_WRONLY
|
O_CREAT
,0666);

636 i‡(
lÂ
<0) {

637 
	`mfs_îæog
(
LOG_ERR
,"can't createÜockfile in working directory");

640 
ow√Ωid
 = 
	`mylock
(
lÂ
);

641 i‡(
ow√Ωid
<0) {

642 
	`mfs_îæog
(
LOG_ERR
,"fcntlÉrror");

645 i‡(
ow√Ωid
>0) {

646 i‡(
runmode
==
RM_TEST
) {

647 
	`Ârötf
(
°dîr
,
	`STR
(
APPNAME
Ë"Öid: %ld\n",()
ow√Ωid
);

650 i‡(
runmode
==
RM_START
) {

651 
	`Ârötf
(
°dîr
,"can't start:Üockfile isálreadyÜocked byánotherÖrocess\n");

654 i‡(
runmode
==
RM_RELOAD
) {

655 i‡(
	`kûl
(
ow√Ωid
,
SIGHUP
)<0) {

656 
	`mfs_îæog
(
LOG_WARNING
,"can't sendÑeload signalÅoÜock owner");

659 
	`Ârötf
(
°dîr
,"reload signal has beed sent\n");

662 
	`Ârötf
(
°dîr
,"£ndög SIGTERMÅÿlock ow√∏’id:%ld)\n",()
ow√Ωid
);

663 i‡(
	`kûl
(
ow√Ωid
,
SIGTERM
)<0) {

664 
	`mfs_îæog
(
LOG_WARNING
,"can't killÜock owner");

667 
l
=0;

668 
	`Ârötf
(
°dîr
,"waiting forÅermination ... ");

669 
	`fÊush
(
°dîr
);

671 
√wow√Ωid
 = 
	`mylock
(
lÂ
);

672 i‡(
√wow√Ωid
<0) {

673 
	`mfs_îæog
(
LOG_ERR
,"fcntlÉrror");

676 i‡(
√wow√Ωid
>0) {

677 
l
++;

678 i‡(
l
>=
timeout
) {

679 
	`sy¶og
(
LOG_ERR
,"abouà%"
PRIu32
" sec⁄d†∑s£dándÜockfûêi†°û»locked - givög up",
l
);

680 
	`Ârötf
(
°dîr
,"giving up\n");

683 i‡(
l
%10==0) {

684 
	`sy¶og
(
LOG_WARNING
,"abouà%"
PRIu32
" sec⁄d†∑s£dándÜock stû»exi°s",
l
);

685 
	`Ârötf
(
°dîr
,"%"
PRIu32
"†",
l
);

686 
	`fÊush
(
°dîr
);

688 i‡(
√wow√Ωid
!=
ow√Ωid
) {

689 
	`Ârötf
(
°dîr
,"\nnewÜock owner detected\n");

690 
	`Ârötf
(
°dîr
,"£ndög SIGTERMÅÿlock ow√∏’id:%ldË... ",()
√wow√Ωid
);

691 
	`fÊush
(
°dîr
);

692 i‡(
	`kûl
(
√wow√Ωid
,
SIGTERM
)<0) {

693 
	`mfs_îæog
(
LOG_WARNING
,"can't killÜock owner");

696 
ow√Ωid
 = 
√wow√Ωid
;

699 
	`¶ìp
(1);

700 } 
√wow√Ωid
!=0);

701 
	`Ârötf
(
°dîr
,"terminated\n");

704 i‡(
runmode
==
RM_START
 ||Ñunmode==
RM_RESTART
) {

705 
	`Ârötf
(
°dîr
,"lockfile createdándÜocked\n");

706 } i‡(
runmode
==
RM_STOP
) {

707 
	`Ârötf
(
°dîr
,"can't findÖrocessÅoÅerminate\n");

709 } i‡(
runmode
==
RM_RELOAD
) {

710 
	`Ârötf
(
°dîr
,"can't findÖrocessÅo sendÑeload signal\n");

712 } i‡(
runmode
==
RM_TEST
) {

713 
	`Ârötf
(
°dîr
,
	`STR
(
APPNAME
) " isÇotÑunning\n");

716 
	}
}

718 
	$check_ﬁd_locks
(
uöt8_t
 
runmode
,
uöt32_t
 
timeout
) {

719 
lÂ
;

720 
°r
[13];

721 
uöt32_t
 
l
;

722 
pid_t
 
±k
;

723 *
lock‚ame
;

725 
lock‚ame
 = 
	`cfg_gë°r
("LOCK_FILE",
RUN_PATH
 "/" 
	`STR
(
APPNAME
) ".lock");

726 
lÂ
=
	`›í
(
lock‚ame
,
O_RDWR
);

727 i‡(
lÂ
<0) {

728 i‡(
î∫o
==
ENOENT
) {

729 
	`‰ì
(
lock‚ame
);

732 
	`mfs_¨g_îæog
(
LOG_ERR
,"›í %†îr‹",
lock‚ame
);

733 
	`‰ì
(
lock‚ame
);

736 i‡(
	`lockf
(
lÂ
,
F_TLOCK
,0)<0) {

737 i‡(
î∫o
!=
EAGAIN
) {

738 
	`mfs_¨g_îæog
(
LOG_ERR
,"lock %†îr‹",
lock‚ame
);

739 
	`‰ì
(
lock‚ame
);

742 i‡(
runmode
==
RM_START
) {

743 
	`mfs_sy¶og
(
LOG_ERR
,"oldÜockfile isÜocked - can't start");

744 
	`‰ì
(
lock‚ame
);

747 i‡(
runmode
==
RM_STOP
 ||Ñunmode==
RM_RESTART
) {

748 
	`Ârötf
(
°dîr
,"oldÜockfile found -ÅryingÅo killÖrevious instance using data from oldÜockfile\n");

749 } i‡(
runmode
==
RM_RELOAD
) {

750 
	`Ârötf
(
°dîr
,"oldÜockfile found - sendingÑeload signal using data from oldÜockfile\n");

752 
l
=
	`ªad
(
lÂ
,
°r
,13);

753 i‡(
l
==0 ||Ü>=13) {

754 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"wr⁄gÖid i¿ﬁdÜockfûê%s",
lock‚ame
);

755 
	`‰ì
(
lock‚ame
);

758 
°r
[
l
]=0;

759 
±k
 = 
	`°πﬁ
(
°r
,
NULL
,10);

760 i‡(
runmode
==
RM_RELOAD
) {

761 i‡(
	`kûl
(
±k
,
SIGHUP
)<0) {

762 
	`mfs_îæog
(
LOG_WARNING
,"can't sendÑeload signal");

763 
	`‰ì
(
lock‚ame
);

766 
	`Ârötf
(
°dîr
,"reload signal has beed sent\n");

769 
	`Ârötf
(
°dîr
,"£ndög SIGTERMÅÿ¥eviou†ö°™˚ (pid:%ld)\n",()
±k
);

770 i‡(
	`kûl
(
±k
,
SIGTERM
)<0) {

771 
	`mfs_îæog
(
LOG_WARNING
,"can't killÖreviousÖrocess");

772 
	`‰ì
(
lock‚ame
);

775 
l
=0;

776 
	`Ârötf
(
°dîr
,"waiting forÅermination ...\n");

777 
	`lockf
(
lÂ
,
F_TLOCK
,0)<0) {

778 i‡(
î∫o
!=
EAGAIN
) {

779 
	`mfs_¨g_îæog
(
LOG_ERR
,"lock %†îr‹",
lock‚ame
);

780 
	`‰ì
(
lock‚ame
);

783 
	`¶ìp
(1);

784 
l
++;

785 i‡(
l
>=
timeout
) {

786 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"abouà%"
PRIu32
" sec⁄d†∑s£dánd oldÜockfûêi†°û»locked - givög up",
l
);

787 
	`‰ì
(
lock‚ame
);

790 i‡(
l
%10==0) {

791 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"abouà%"
PRIu32
" sec⁄d†∑s£dánd oldÜockfûêi†°û»locked",
l
);

794 
	`Ârötf
(
°dîr
,"terminated\n");

796 
	`Ârötf
(
°dîr
,"found unlocked oldÜockfile\n");

797 i‡(
runmode
==
RM_RELOAD
) {

798 
	`Ârötf
(
°dîr
,"can't obtainÖrocess id using oldÜockfile\n");

802 
	`Ârötf
(
°dîr
,"removing oldÜockfile\n");

803 
	`˛o£
(
lÂ
);

804 
	`u∆ök
(
lock‚ame
);

805 
	`‰ì
(
lock‚ame
);

807 
	}
}

809 
	$ªmove_ﬁd_wdlock
() {

810 
	`u∆ök
(".lock_" 
	`STR
(
APPNAME
));

811 
	}
}

813 
	$maked´m⁄
() {

814 
f
;

815 
uöt8_t
 
pùebuff
[1000];

816 
ssize_t
 
r
;

817 
size_t
 
h≠py
;

818 
pùed
[2];

820 
	`fÊush
(
°dout
);

821 
	`fÊush
(
°dîr
);

822 i‡(
	`pùe
(
pùed
)<0) {

823 
	`Ârötf
(
°dîr
,"pipeÉrror\n");

824 
	`exô
(1);

826 
f
 = 
	`f‹k
();

827 i‡(
f
<0) {

828 
	`sy¶og
(
LOG_ERR
,"fú° f‹kÉº‹: %s",
	`°ªº
(
î∫o
));

829 
	`exô
(1);

831 i‡(
f
>0) {

832 
	`waô
(&
f
);

833 i‡(
f
) {

834 
	`Ârötf
(
°dîr
,"Chûd sètus: %d\n",
f
);

835 
	`exô
(1);

837 
	`˛o£
(
pùed
[1]);

839 (
r
=
	`ªad
(
pùed
[0],
pùebuff
,1000))) {

840 i‡(
r
>0) {

841 i‡(
pùebuff
[
r
-1]==0) {

842 i‡(
r
>1) {

843 
h≠py
 = 
	`fwrôe
(
pùebuff
,1,
r
-1,
°dîr
);

845 
	`exô
(1);

847 
h≠py
 = 
	`fwrôe
(
pùebuff
,1,
r
,
°dîr
);

849 
	`Ârötf
(
°dîr
,"Eº‹ÑódögÖùe: %s\n",
	`°ªº
(
î∫o
));

850 
	`exô
(1);

853 
	`exô
(0);

855 
	`£tsid
();

856 
	`£çgid
(0,
	`gëpid
());

857 
f
 = 
	`f‹k
();

858 i‡(
f
<0) {

859 
	`sy¶og
(
LOG_ERR
,"£c⁄d f‹kÉº‹: %s",
	`°ªº
(
î∫o
));

860 i‡(
	`wrôe
(
pùed
[1],"forkÉrror\n",11)!=11) {

861 
	`sy¶og
(
LOG_ERR
,"pùêwrôêîr‹: %s",
	`°ªº
(
î∫o
));

863 
	`˛o£
(
pùed
[1]);

864 
	`exô
(1);

866 i‡(
f
>0) {

867 
	`exô
(0);

869 
	`£t_sig«l_h™dÀrs
(1);

871 
	`˛o£
(
STDIN_FILENO
);

872 
	`ßs£π
(
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)==
STDIN_FILENO
);

873 
	`˛o£
(
STDOUT_FILENO
);

874 
	`ßs£π
(
	`dup
(
STDIN_FILENO
)==
STDOUT_FILENO
);

875 
	`˛o£
(
STDERR_FILENO
);

876 
	`ßs£π
(
	`dup
(
pùed
[1])==
STDERR_FILENO
);

877 
	`˛o£
(
pùed
[1]);

879 
	}
}

881 
	$˛o£_msg_ch™√l
() {

882 
	`fÊush
(
°dîr
);

883 
	`˛o£
(
STDERR_FILENO
);

884 
	`ßs£π
(
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)==
STDERR_FILENO
);

885 
	}
}

887 
	$¸óã∑th
(c⁄° *
fûíame
) {

888 
∑thbuff
[1024];

889 c⁄° *
§c
 = 
fûíame
;

890 *
d°
 = 
∑thbuff
;

891 i‡(*
§c
=='/'Ë*
d°
++=*src++;

893 *
§c
) {

894 *
§c
!='/' && *src) {

895 *
d°
++=*
§c
++;

897 i‡(*
§c
=='/') {

898 *
d°
='\0';

899 i‡(
	`mkdú
(
∑thbuff
,(
mode_t
)0777)<0) {

900 i‡(
î∫o
!=
EEXIST
) {

901 
	`mfs_¨g_îæog
(
LOG_NOTICE
,"¸ótög dúe˘‹y %s",
∑thbuff
);

904 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"dúe˘‹y %†ha†bì¿¸óãd",
∑thbuff
);

906 *
d°
++=*
§c
++;

909 
	}
}

911 
	$ußge
(c⁄° *
≠≤ame
) {

912 
	`¥ötf
(

920 ,
≠≤ame
);

921 
	`exô
(1);

922 
	}
}

924 
	$maö
(
¨gc
,**
¨gv
) {

925 *
log≠≤ame
;

927 *
wrkdú
;

928 *
cfgfûe
;

929 *
≠≤ame
;

930 
ch
;

931 
uöt8_t
 
runmode
;

932 
rund´m⁄
,
logundeföed
;

933 
lockmem‹y
;

934 
öt32_t
 
ni˚Àvñ
;

935 
uöt32_t
 
locktimeout
;

936 
æimô
 
æs
;

938 
	`°ªº_öô
();

939 
	`my¸c32_öô
();

941 
cfgfûe
=
	`°rdup
(
ETC_PATH
 "/" 
	`STR
(
APPNAME
) ".cfg");

942 
	`∑s£π
(
cfgfûe
);

943 
locktimeout
 = 60;

944 
rund´m⁄
 = 1;

945 
runmode
 = 
RM_RESTART
;

946 
logundeföed
 = 0;

947 
lockmem‹y
 = 0;

948 
≠≤ame
 = 
¨gv
[0];

950 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "uvdfsc:t:h?")) != -1) {

951 
ch
) {

953 
	`¥ötf
("vîsi⁄: %u.%u.%u\n",
VERSMAJ
,
VERSMID
,
VERSMIN
);

956 
rund´m⁄
=0;

959 
runmode
=
RM_START
;

962 
runmode
=
RM_STOP
;

965 
locktimeout
=
	`°πoul
(
›èrg
,
NULL
,10);

968 
	`‰ì
(
cfgfûe
);

969 
cfgfûe
 = 
	`°rdup
(
›èrg
);

970 
	`∑s£π
(
cfgfûe
);

973 
logundeföed
=1;

976 
	`ußge
(
≠≤ame
);

980 
¨gc
 -
›töd
;

981 
¨gv
 +
›töd
;

982 i‡(
¨gc
==1) {

983 i‡(
	`°rˇ£cmp
(
¨gv
[0],"start")==0) {

984 
runmode
 = 
RM_START
;

985 } i‡(
	`°rˇ£cmp
(
¨gv
[0],"stop")==0) {

986 
runmode
 = 
RM_STOP
;

987 } i‡(
	`°rˇ£cmp
(
¨gv
[0],"restart")==0) {

988 
runmode
 = 
RM_RESTART
;

989 } i‡(
	`°rˇ£cmp
(
¨gv
[0],"reload")==0) {

990 
runmode
 = 
RM_RELOAD
;

991 } i‡(
	`°rˇ£cmp
(
¨gv
[0],"test")==0) {

992 
runmode
 = 
RM_TEST
;

994 
	`ußge
(
≠≤ame
);

997 } i‡(
¨gc
!=0) {

998 
	`ußge
(
≠≤ame
);

1002 i‡((
runmode
==
RM_START
 ||Ñunmode==
RM_RESTART
Ë&& 
rund´m⁄
) {

1003 
	`maked´m⁄
();

1005 i‡(
runmode
==
RM_START
 ||Ñunmode==
RM_RESTART
) {

1006 
	`£t_sig«l_h™dÀrs
(0);

1010 i‡(
	`cfg_lﬂd
(
cfgfûe
,
logundeföed
)==0) {

1011 
	`Ârötf
(
°dîr
,"ˇn'àlﬂd c⁄fig fûe: %†- usög deÁu…s\n",
cfgfûe
);

1013 
	`‰ì
(
cfgfûe
);

1015 
log≠≤ame
 = 
	`cfg_gë°r
("SYSLOG_IDENT",
	`STR
(
APPNAME
));

1017 i‡(
rund´m⁄
) {

1018 i‡(
log≠≤ame
[0]) {

1019 
	`›ílog
(
log≠≤ame
, 
LOG_PID
 | 
LOG_NDELAY
 , 
LOG_DAEMON
);

1021 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
 , 
LOG_DAEMON
);

1024 #i‡
	`deföed
(
LOG_PERROR
)

1025 i‡(
log≠≤ame
[0]) {

1026 
	`›ílog
(
log≠≤ame
, 
LOG_PID
 | 
LOG_NDELAY
 | 
LOG_PERROR
, 
LOG_USER
);

1028 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
 | 
LOG_PERROR
, 
LOG_USER
);

1031 i‡(
log≠≤ame
[0]) {

1032 
	`›ílog
(
log≠≤ame
, 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_USER
);

1034 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_USER
);

1039 i‡(
runmode
==
RM_START
 ||Ñunmode==
RM_RESTART
) {

1040 
æs
.
æim_cur
 = 
MFSMAXFILES
;

1041 
æs
.
æim_max
 = 
MFSMAXFILES
;

1042 i‡(
	`£ålimô
(
RLIMIT_NOFILE
,&
æs
)<0) {

1043 
	`sy¶og
(
LOG_NOTICE
,"ˇn'àch™gê›í fûe†limôÅÿ%u",
MFSMAXFILES
);

1046 
lockmem‹y
 = 
	`cfg_gënum
("LOCK_MEMORY",0);

1047 #ifde‡
MFS_USE_MEMLOCK


1048 i‡(
lockmem‹y
) {

1049 
æs
.
æim_cur
 = 
RLIM_INFINITY
;

1050 
æs
.
æim_max
 = 
RLIM_INFINITY
;

1051 
	`£ålimô
(
RLIMIT_MEMLOCK
,&
æs
);

1054 
ni˚Àvñ
 = 
	`cfg_gëöt32
("NICE_LEVEL",-19);

1055 
	`£çri‹ôy
(
PRIO_PROCESS
,
	`gëpid
(),
ni˚Àvñ
);

1058 
	`ch™geugid
();

1060 
wrkdú
 = 
	`cfg_gë°r
("DATA_PATH",
DATA_PATH
);

1061 i‡(
runmode
==
RM_START
 ||Ñunmode==
RM_RESTART
) {

1062 
	`Ârötf
(
°dîr
,"w‹kög dúe˘‹y: %s\n",
wrkdú
);

1065 i‡(
	`chdú
(
wrkdú
)<0) {

1066 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"ˇn'à£àw‹kög dúe˘‹yÅÿ%s",
wrkdú
);

1067 i‡(
rund´m⁄
) {

1068 
	`Âutc
(0,
°dîr
);

1069 
	`˛o£_msg_ch™√l
();

1071 
	`˛o£log
();

1072 
	`‰ì
(
log≠≤ame
);

1075 
	`‰ì
(
wrkdú
);

1077 
	`umask
(
	`cfg_gëuöt32
("FILE_UMASK",027)&077);

1080 i‡(
	`check_ﬁd_locks
(
runmode
,
locktimeout
)<0) {

1081 i‡(
rund´m⁄
) {

1082 
	`Âutc
(0,
°dîr
);

1083 
	`˛o£_msg_ch™√l
();

1085 
	`˛o£log
();

1086 
	`‰ì
(
log≠≤ame
);

1090 i‡(
	`wdlock
(
runmode
,
locktimeout
)<0) {

1091 i‡(
rund´m⁄
) {

1092 
	`Âutc
(0,
°dîr
);

1093 
	`˛o£_msg_ch™√l
();

1095 
	`˛o£log
();

1096 
	`‰ì
(
log≠≤ame
);

1100 
	`ªmove_ﬁd_wdlock
();

1102 i‡(
runmode
==
RM_STOP
 ||Ñunmode==
RM_RELOAD
 ||Ñunmode==
RM_TEST
) {

1103 i‡(
rund´m⁄
) {

1104 
	`˛o£_msg_ch™√l
();

1106 
	`˛o£log
();

1107 
	`‰ì
(
log≠≤ame
);

1111 #ifde‡
MFS_USE_MEMLOCK


1112 i‡(
lockmem‹y
) {

1113 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
,&
æs
)<0) {

1114 
	`mfs_îæog
(
LOG_WARNING
,"error getting memoryÜockÜimits");

1116 i‡(
æs
.
æim_cur
!=
RLIM_INFINITY
 &&Ñls.
æim_max
==RLIM_INFINITY) {

1117 
æs
.
æim_cur
 = 
RLIM_INFINITY
;

1118 
æs
.
æim_max
 = 
RLIM_INFINITY
;

1119 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
,&
æs
)<0) {

1120 
	`mfs_îæog
(
LOG_WARNING
,"error setting memoryÜockÜimitÅo unlimited");

1123 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
,&
æs
)<0) {

1124 
	`mfs_îæog
(
LOG_WARNING
,"error getting memoryÜockÜimits");

1126 i‡(
æs
.
æim_cur
!=
RLIM_INFINITY
) {

1127 
	`mfs_îæog
(
LOG_WARNING
,"can't set memoryÜockÜimitÅo unlimited");

1129 i‡(
	`mlockÆl
(
MCL_CURRENT
|
MCL_FUTURE
)<0) {

1130 
	`mfs_îæog
(
LOG_WARNING
,"memoryÜockÉrror");

1132 
	`mfs_sy¶og
(
LOG_NOTICE
,"process memory was successfullyÜocked in RAM");

1138 i‡(
lockmem‹y
) {

1139 
	`mfs_sy¶og
(
LOG_WARNING
,"memoryÜockÇot supported !!!");

1142 
	`Ârötf
(
°dîr
,"öôülizög %†moduÀ†...\n",
log≠≤ame
);

1144 i‡(
	`öôülize
()) {

1145 i‡(
	`gëæimô
(
RLIMIT_NOFILE
,&
æs
)==0) {

1146 
	`sy¶og
(
LOG_NOTICE
,"›í fûe†limô: %lu",()(
æs
.
æim_cur
));

1148 
	`Ârötf
(
°dîr
,"%†d´m⁄ inôülizedÖr›îly\n",
log≠≤ame
);

1149 i‡(
rund´m⁄
) {

1150 
	`˛o£_msg_ch™√l
();

1152 
	`maölo›
();

1153 
ch
=0;

1155 
	`Ârötf
(
°dîr
,"error occured during initialization -Éxiting\n");

1156 i‡(
rund´m⁄
) {

1157 
	`Âutc
(0,
°dîr
);

1158 
	`˛o£_msg_ch™√l
();

1160 
ch
=1;

1162 
	`de°ru˘
();

1163 
	`‰ì_Æl_ªgi°îed_íåõs
();

1164 
	`cfg_ãrm
();

1165 
	`°ªº_ãrm
();

1166 
	`˛o£log
();

1167 
	`‰ì
(
log≠≤ame
);

1168  
ch
;

1169 
	}
}

	@mfscommon/main.h

19 #i‚de‡
_MAIN_H_


20 
	#_MAIN_H_


	)

22 
	~<pﬁl.h
>

23 
	~<öây≥s.h
>

25 
	#TIMEMODE_SKIP_LATE
 0

	)

26 
	#TIMEMODE_RUN_LATE
 1

	)

28 
maö_de°ru˘ªgi°î
 ((*
fun
)());

29 
	`maö_ˇ√xôªgi°î
 ((*
fun
)());

30 
	`maö_w™ãxôªgi°î
 ((*
fun
)());

31 
	`maö_ªlﬂdªgi°î
 ((*
fun
)());

32 
	`maö_pﬁÃegi°î
 ((*
desc
)(
pﬁlfd
 *,
uöt32_t
 *),(*
£rve
)(pollfd *));

33 
	`maö_óchlo›ªgi°î
 ((*
fun
)());

34 
	`maö_timîegi°î
 (
mode
,
uöt32_t
 
£c⁄ds
,uöt32_à
off£t
,(*
fun
)());

35 
uöt32_t
 
	`maö_time
();

36 
uöt64_t
 
	`maö_utime
();

	@mfscommon/massert.h

19 #i‚de‡
_MASSERT_H_


20 
	#_MASSERT_H_


	)

22 
	~<°dio.h
>

23 
	~<sy¶og.h
>

24 
	~<°dlib.h
>

26 
	~"°ªº.h
"

28 
	#mas£π
(
e
,
msg
Ë(”Ë? ()0 : (
	`Ârötf
(
°dîr
,"Áûedás£πi⁄ '%s' : %s\n",#e,(msg)),
	`sy¶og
(
LOG_ERR
,"Áûedás£πi⁄ '%s' : %s",#e,(msg)),
	`ab‹t
()))

	)

29 
	#∑s£π
(
±r
Ë(’å!=
NULL
Ë? ()0 : (
	`Ârötf
(
°dîr
,"ouào‡mem‹y: %†i†NULL\n",#±r),
	`sy¶og
(
LOG_ERR
,"ouào‡mem‹y: %†i†NULL",#±r),
	`ab‹t
()))

	)

30 
	#ßs£π
(
e
Ë(”Ë? ()0 : (
	`Ârötf
(
°dîr
,"Áûedás£πi⁄ '%s'\n",#e),
	`sy¶og
(
LOG_ERR
,"Áûedás£πi⁄ '%s'",#e),
	`ab‹t
()))

	)

31 
	#ós£π
(
e
) if (!(e)) { \

32 c⁄° *
_mfs_îr‹°rög
 = 
	`°ªº
(
î∫o
); \

33 
	`sy¶og
(
LOG_ERR
,"Áûedás£πi⁄ '%s',Éº‹: %s",#e,
_mfs_îr‹°rög
); \

34 
	`Ârötf
(
°dîr
,"Áûedás£πi⁄ '%s',Éº‹: %s\n",#e,
_mfs_îr‹°rög
); \

35 
	`ab‹t
(); \

36 }

	)

	@mfscommon/md5.c

19 
	~<°rög.h
>

20 
	~<öây≥s.h
>

21 
	~"md5.h
"

23 
	#S11
 7

	)

24 
	#S12
 12

	)

25 
	#S13
 17

	)

26 
	#S14
 22

	)

27 
	#S21
 5

	)

28 
	#S22
 9

	)

29 
	#S23
 14

	)

30 
	#S24
 20

	)

31 
	#S31
 4

	)

32 
	#S32
 11

	)

33 
	#S33
 16

	)

34 
	#S34
 23

	)

35 
	#S41
 6

	)

36 
	#S42
 10

	)

37 
	#S43
 15

	)

38 
	#S44
 21

	)

40 c⁄° 
uöt8_t
 
	g∑ddög
[64] = {

46 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

47 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

48 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

49 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

51 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

53 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

54 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
uöt32_t
)(
ac
); \

55 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

56 (
a
Ë+(
b
); \

57 }

	)

58 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

59 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
uöt32_t
)(
ac
); \

60 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

61 (
a
Ë+(
b
); \

62 }

	)

63 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

64 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
uöt32_t
)(
ac
); \

65 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

66 (
a
Ë+(
b
); \

67 }

	)

68 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

69 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
uöt32_t
)(
ac
); \

70 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

71 (
a
Ë+(
b
); \

72 }

	)

74 
	$md5_ícode
 (
uöt8_t
 *
ouçut
,c⁄° 
uöt32_t
 *
öput
,uöt32_à
Àn
) {

75 
uöt32_t
 
i
,
j
;

77 
i
=0,
j
=0 ; i<
Àn
 ; i++,j+=4) {

78 
ouçut
[
j
] = (
uöt8_t
)(
öput
[
i
]&0xff);

79 
ouçut
[
j
+1] = (
uöt8_t
)((
öput
[
i
]>>8)&0xff);

80 
ouçut
[
j
+2] = (
uöt8_t
)((
öput
[
i
]>>16)&0xff);

81 
ouçut
[
j
+3] = (
uöt8_t
)((
öput
[
i
]>>24)&0xff);

83 
	}
}

85 
	$md5_decode
 (
uöt32_t
 *
ouçut
,c⁄° 
uöt8_t
 *
öput
,uöt32_à
Àn
) {

86 
uöt32_t
 
i
,
j
;

88 
i
=0,
j
=0 ; i<
Àn
 ; i++,j+=4) {

89 
ouçut
[
i
] = ((
uöt32_t
)
öput
[
j
]) | (((uint32_t)input[j+1])<<8) | (((uint32_t)input[j+2])<<16) | (((uint32_t)input[j+3])<<24);

91 
	}
}

93 
	$md5_å™sf‹m
 (
uöt32_t
 
°©e
[4],c⁄° 
uöt8_t
 
block
[64]) {

94 
uöt32_t
 
a
=
°©e
[0], 
b
=°©e[1], 
c
=°©e[2], 
d
=°©e[3], 
x
[16];

96 
	`md5_decode
(
x
,
block
,16);

98 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S11
, 0xd76aa478);

99 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 1], 
S12
, 0xe8c7b756);

100 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S13
, 0x242070db);

101 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 3], 
S14
, 0xc1bdceee);

102 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S11
, 0xf57c0faf);

103 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 5], 
S12
, 0x4787c62a);

104 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S13
, 0xa8304613);

105 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[ 7], 
S14
, 0xfd469501);

106 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S11
, 0x698098d8);

107 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[ 9], 
S12
, 0x8b44f7af);

108 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

109 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

110 
	`FF
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

111 
	`FF
 (
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

112 
	`FF
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

113 
	`FF
 (
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

115 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S21
, 0xf61e2562);

116 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 6], 
S22
, 0xc040b340);

117 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

118 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 0], 
S24
, 0xe9b6c7aa);

119 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S21
, 0xd62f105d);

120 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

121 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

122 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 4], 
S24
, 0xe7d3fbc8);

123 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S21
, 0x21e1cde6);

124 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

125 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S23
, 0xf4d50d87);

126 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[ 8], 
S24
, 0x455a14ed);

127 
	`GG
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

128 
	`GG
 (
d
, 
a
, 
b
, 
c
, 
x
[ 2], 
S22
, 0xfcefa3f8);

129 
	`GG
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S23
, 0x676f02d9);

130 
	`GG
 (
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

132 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 5], 
S31
, 0xfffa3942);

133 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 8], 
S32
, 0x8771f681);

134 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

135 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

136 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 1], 
S31
, 0xa4beea44);

137 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 4], 
S32
, 0x4bdecfa9);

138 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 7], 
S33
, 0xf6bb4b60);

139 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

140 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

141 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[ 0], 
S32
, 0xeaa127fa);

142 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[ 3], 
S33
, 0xd4ef3085);

143 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 6], 
S34
, 0x4881d05);

144 
	`HH
 (
a
, 
b
, 
c
, 
d
, 
x
[ 9], 
S31
, 0xd9d4d039);

145 
	`HH
 (
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

146 
	`HH
 (
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

147 
	`HH
 (
b
, 
c
, 
d
, 
a
, 
x
[ 2], 
S34
, 0xc4ac5665);

149 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 0], 
S41
, 0xf4292244);

150 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 7], 
S42
, 0x432aff97);

151 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

152 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 5], 
S44
, 0xfc93a039);

153 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

154 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[ 3], 
S42
, 0x8f0ccc92);

155 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

156 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 1], 
S44
, 0x85845dd1);

157 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 8], 
S41
, 0x6fa87e4f);

158 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

159 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 6], 
S43
, 0xa3014314);

160 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

161 
	`II
 (
a
, 
b
, 
c
, 
d
, 
x
[ 4], 
S41
, 0xf7537e82);

162 
	`II
 (
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

163 
	`II
 (
c
, 
d
, 
a
, 
b
, 
x
[ 2], 
S43
, 0x2ad7d2bb);

164 
	`II
 (
b
, 
c
, 
d
, 
a
, 
x
[ 9], 
S44
, 0xeb86d391);

166 
°©e
[0] +
a
;

167 
°©e
[1] +
b
;

168 
°©e
[2] +
c
;

169 
°©e
[3] +
d
;

171 
	`mem£t
((*)
x
,0,(x));

172 
	}
}

176 
	$md5_öô
 (
md5˘x
 *
˘x
) {

177 
˘x
->
cou¡
[0] = ctx->count[1] = 0;

178 
˘x
->
°©e
[0] = 0x67452301U;

179 
˘x
->
°©e
[1] = 0xefcdab89U;

180 
˘x
->
°©e
[2] = 0x98badcfeU;

181 
˘x
->
°©e
[3] = 0x10325476U;

182 
	}
}

184 
	$md5_upd©e
 (
md5˘x
 *
˘x
,c⁄° 
uöt8_t
 *
buff
,
uöt32_t
 
Àng
) {

185 
uöt32_t
 
i
,
ödx
,
∑πÀng
;

187 
ödx
 = (
uöt32_t
)((
˘x
->
cou¡
[0]>>3)&0x3F);

189 i‡((
˘x
->
cou¡
[0]+=((
uöt32_t
)
Àng
<<3)) < ((uint32_t)leng<<3)) {

190 
˘x
->
cou¡
[1]++;

192 
˘x
->
cou¡
[1] +((
uöt32_t
)
Àng
>>29);

194 
∑πÀng
 = 64-
ödx
;

196 i‡(
Àng
>=
∑πÀng
) {

197 
	`mem˝y
((*)(
˘x
->
buf„r
+
ödx
),(c⁄° *)
buff
,
∑πÀng
);

198 
	`md5_å™sf‹m
(
˘x
->
°©e
,˘x->
buf„r
);

200 
i
=
∑πÀng
 ; i+63<
Àng
 ; i+=64) {

201 
	`md5_å™sf‹m
(
˘x
->
°©e
,
buff
+
i
);

203 
ödx
 = 0;

205 
i
 = 0;

208 
	`mem˝y
((*)(
˘x
->
buf„r
+
ödx
),(c⁄° *)(
buff
+
i
),
Àng
-i);

209 
	}
}

211 
	$md5_föÆ
 (
uöt8_t
 
dige°
[16],
md5˘x
 *
˘x
) {

212 
uöt8_t
 
bôs
[8];

213 
uöt32_t
 
ödx
,
∑dÀng
;

215 
	`md5_ícode
(
bôs
,
˘x
->
cou¡
,2);

216 
ödx
 = (
uöt32_t
)((
˘x
->
cou¡
[0]>>3)&0x3f);

217 
∑dÀng
 = (
ödx
<56)?(56-indx):(120-indx);

218 
	`md5_upd©e
 (
˘x
,
∑ddög
,
∑dÀng
);

219 
	`md5_upd©e
(
˘x
,
bôs
,8);

220 
	`md5_ícode
(
dige°
,
˘x
->
°©e
,4);

221 
	`mem£t
((*)
˘x
,0,(
md5˘x
));

222 
	}
}

	@mfscommon/md5.h

19 #i‚de‡
_MD5_H_


20 
	#_MD5_H_


	)

22 
	~<öây≥s.h
>

24 
	s_md5˘x
 {

25 
uöt32_t
 
	m°©e
[4];

26 
uöt32_t
 
	mcou¡
[2];

27 
uöt8_t
 
	mbuf„r
[64];

28 } 
	tmd5˘x
;

30 
md5_öô
(
md5˘x
 *
˘x
);

31 
md5_upd©e
(
md5˘x
 *
˘x
,c⁄° 
uöt8_t
 *
buff
,
uöt32_t
 
Àng
);

32 
md5_föÆ
(
uöt8_t
 
dige°
[16],
md5˘x
 *
˘x
);

	@mfscommon/pcqueue.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<±hªad.h
>

23 
	~<öây≥s.h
>

24 
	~<î∫o.h
>

26 
	~"mas£π.h
"

28 
	s_qíåy
 {

29 
uöt32_t
 
	mid
;

30 
uöt32_t
 
	m›
;

31 
uöt8_t
 *
	md©a
;

32 
uöt32_t
 
	mÀng
;

33 
_qíåy
 *
	m√xt
;

34 } 
	tqíåy
;

36 
	s_queue
 {

37 
qíåy
 *
	mhód
,**
	mèû
;

38 
uöt32_t
 
	mñemíts
;

39 
uöt32_t
 
	msize
;

40 
uöt32_t
 
	mmaxsize
;

41 
uöt32_t
 
	m‰ìwaôög
;

42 
uöt32_t
 
	mfuŒwaôög
;

43 
±hªad_c⁄d_t
 
	mwaô‰ì
,
	mwaôfuŒ
;

44 
±hªad_muãx_t
 
	mlock
;

45 } 
	tqueue
;

47 * 
	$queue_√w
(
uöt32_t
 
size
) {

48 
queue
 *
q
;

49 
q
 = (
queue
*)
	`mÆloc
((queue));

50 
	`∑s£π
(
q
);

51 
q
->
hód
 = 
NULL
;

52 
q
->
èû
 = &(q->
hód
);

53 
q
->
ñemíts
 = 0;

54 
q
->
size
 = 0;

55 
q
->
maxsize
 = 
size
;

56 
q
->
‰ìwaôög
 = 0;

57 
q
->
fuŒwaôög
 = 0;

58 i‡(
size
) {

59 
	`ós£π
(
	`±hªad_c⁄d_öô
(&(
q
->
waôfuŒ
),
NULL
)==0);

61 
	`ós£π
(
	`±hªad_c⁄d_öô
(&(
q
->
waô‰ì
),
NULL
)==0);

62 
	`ós£π
(
	`±hªad_muãx_öô
(&(
q
->
lock
),
NULL
)==0);

63  
q
;

64 
	}
}

66 
	$queue_dñëe
(*
que
) {

67 
queue
 *
q
 = (queue*)
que
;

68 
qíåy
 *
qe
,*
qí
;

69 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

70 
	`ßs£π
(
q
->
‰ìwaôög
==0);

71 
	`ßs£π
(
q
->
fuŒwaôög
==0);

72 
qe
 = 
q
->
hód
 ; qê; qê
qí
) {

73 
qí
 = 
qe
->
√xt
;

74 
	`‰ì
(
qe
->
d©a
);

75 
	`‰ì
(
qe
);

77 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

78 
	`ós£π
(
	`±hªad_muãx_de°roy
(&(
q
->
lock
))==0);

79 
	`ós£π
(
	`±hªad_c⁄d_de°roy
(&(
q
->
waô‰ì
))==0);

80 i‡(
q
->
maxsize
) {

81 
	`ós£π
(
	`±hªad_c⁄d_de°roy
(&(
q
->
waôfuŒ
))==0);

83 
	`‰ì
(
q
);

84 
	}
}

86 
	$queue_i£m±y
(*
que
) {

87 
queue
 *
q
 = (queue*)
que
;

88 
r
;

89 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

90 
r
=(
q
->
ñemíts
==0)?1:0;

91 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

92  
r
;

93 
	}
}

95 
uöt32_t
 
	$queue_ñemíts
(*
que
) {

96 
queue
 *
q
 = (queue*)
que
;

97 
uöt32_t
 
r
;

98 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

99 
r
=
q
->
ñemíts
;

100 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

101  
r
;

102 
	}
}

104 
	$queue_isfuŒ
(*
que
) {

105 
queue
 *
q
 = (queue*)
que
;

106 
r
;

107 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

108 
r
 = (
q
->
maxsize
>0 && q->maxsize<=q->
size
)?1:0;

109 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

110  
r
;

111 
	}
}

113 
uöt32_t
 
	$queue_sizñe·
(*
que
) {

114 
queue
 *
q
 = (queue*)
que
;

115 
uöt32_t
 
r
;

116 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

117 i‡(
q
->
maxsize
>0) {

118 
r
 = 
q
->
maxsize
-q->
size
;

120 
r
 = 0xFFFFFFFF;

122 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

123  
r
;

124 
	}
}

126 
	$queue_put
(*
que
,
uöt32_t
 
id
,uöt32_à
›
,
uöt8_t
 *
d©a
,uöt32_à
Àng
) {

127 
queue
 *
q
 = (queue*)
que
;

128 
qíåy
 *
qe
;

129 
qe
 = 
	`mÆloc
((
qíåy
));

130 
	`∑s£π
(
qe
);

131 
qe
->
id
 = id;

132 
qe
->
›
 = op;

133 
qe
->
d©a
 = data;

134 
qe
->
Àng
 =Üeng;

135 
qe
->
√xt
 = 
NULL
;

136 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

137 i‡(
q
->
maxsize
) {

138 i‡(
Àng
>
q
->
maxsize
) {

139 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

140 
î∫o
 = 
EDEADLK
;

143 
q
->
size
+
Àng
>q->
maxsize
) {

144 
q
->
fuŒwaôög
++;

145 
	`ós£π
(
	`±hªad_c⁄d_waô
(&(
q
->
waôfuŒ
),&(q->
lock
))==0);

148 
q
->
ñemíts
++;

149 
q
->
size
 +
Àng
;

150 *(
q
->
èû
Ë
qe
;

151 
q
->
èû
 = &(
qe
->
√xt
);

152 i‡(
q
->
‰ìwaôög
>0) {

153 
	`ós£π
(
	`±hªad_c⁄d_sig«l
(&(
q
->
waô‰ì
))==0);

154 
q
->
‰ìwaôög
--;

156 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

158 
	}
}

160 
	$queue_åyput
(*
que
,
uöt32_t
 
id
,uöt32_à
›
,
uöt8_t
 *
d©a
,uöt32_à
Àng
) {

161 
queue
 *
q
 = (queue*)
que
;

162 
qíåy
 *
qe
;

163 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

164 i‡(
q
->
maxsize
) {

165 i‡(
Àng
>
q
->
maxsize
) {

166 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

167 
î∫o
 = 
EDEADLK
;

170 i‡(
q
->
size
+
Àng
>q->
maxsize
) {

171 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

172 
î∫o
 = 
EBUSY
;

176 
qe
 = 
	`mÆloc
((
qíåy
));

177 
	`∑s£π
(
qe
);

178 
qe
->
id
 = id;

179 
qe
->
›
 = op;

180 
qe
->
d©a
 = data;

181 
qe
->
Àng
 =Üeng;

182 
qe
->
√xt
 = 
NULL
;

183 
q
->
ñemíts
++;

184 
q
->
size
 +
Àng
;

185 *(
q
->
èû
Ë
qe
;

186 
q
->
èû
 = &(
qe
->
√xt
);

187 i‡(
q
->
‰ìwaôög
>0) {

188 
	`ós£π
(
	`±hªad_c⁄d_sig«l
(&(
q
->
waô‰ì
))==0);

189 
q
->
‰ìwaôög
--;

191 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

193 
	}
}

195 
	$queue_gë
(*
que
,
uöt32_t
 *
id
,uöt32_à*
›
,
uöt8_t
 **
d©a
,uöt32_à*
Àng
) {

196 
queue
 *
q
 = (queue*)
que
;

197 
qíåy
 *
qe
;

198 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

199 
q
->
ñemíts
==0) {

200 
q
->
‰ìwaôög
++;

201 
	`ós£π
(
	`±hªad_c⁄d_waô
(&(
q
->
waô‰ì
),&(q->
lock
))==0);

203 
qe
 = 
q
->
hód
;

204 
q
->
hód
 = 
qe
->
√xt
;

205 i‡(
q
->
hód
==
NULL
) {

206 
q
->
èû
 = &(q->
hód
);

208 
q
->
ñemíts
--;

209 
q
->
size
 -
qe
->
Àng
;

210 i‡(
q
->
fuŒwaôög
>0) {

211 
	`ós£π
(
	`±hªad_c⁄d_sig«l
(&(
q
->
waôfuŒ
))==0);

212 
q
->
fuŒwaôög
--;

214 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

215 i‡(
id
) {

216 *
id
 = 
qe
->id;

218 i‡(
›
) {

219 *
›
 = 
qe
->op;

221 i‡(
d©a
) {

222 *
d©a
 = 
qe
->data;

224 i‡(
Àng
) {

225 *
Àng
 = 
qe
->leng;

227 
	`‰ì
(
qe
);

229 
	}
}

231 
	$queue_åygë
(*
que
,
uöt32_t
 *
id
,uöt32_à*
›
,
uöt8_t
 **
d©a
,uöt32_à*
Àng
) {

232 
queue
 *
q
 = (queue*)
que
;

233 
qíåy
 *
qe
;

234 
	`ós£π
(
	`±hªad_muãx_lock
(&(
q
->
lock
))==0);

235 i‡(
q
->
ñemíts
==0) {

236 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

237 i‡(
id
) {

238 *
id
=0;

240 i‡(
›
) {

241 *
›
=0;

243 i‡(
d©a
) {

244 *
d©a
=
NULL
;

246 i‡(
Àng
) {

247 *
Àng
=0;

249 
î∫o
 = 
EBUSY
;

252 
qe
 = 
q
->
hód
;

253 
q
->
hód
 = 
qe
->
√xt
;

254 i‡(
q
->
hód
==
NULL
) {

255 
q
->
èû
 = &(q->
hód
);

257 
q
->
ñemíts
--;

258 
q
->
size
 -
qe
->
Àng
;

259 i‡(
q
->
fuŒwaôög
>0) {

260 
	`ós£π
(
	`±hªad_c⁄d_sig«l
(&(
q
->
waôfuŒ
))==0);

261 
q
->
fuŒwaôög
--;

263 
	`ós£π
(
	`±hªad_muãx_u∆ock
(&(
q
->
lock
))==0);

264 i‡(
id
) {

265 *
id
 = 
qe
->id;

267 i‡(
›
) {

268 *
›
 = 
qe
->op;

270 i‡(
d©a
) {

271 *
d©a
 = 
qe
->data;

273 i‡(
Àng
) {

274 *
Àng
 = 
qe
->leng;

276 
	`‰ì
(
qe
);

278 
	}
}

	@mfscommon/pcqueue.h

19 #i‚de‡
_PCQUEUE_H_


20 
	#_PCQUEUE_H_


	)

22 
	~<öây≥s.h
>

24 * 
queue_√w
(
uöt32_t
 
size
);

25 
queue_dñëe
(*
que
);

26 
queue_i£m±y
(*
que
);

27 
uöt32_t
 
queue_ñemíts
(*
que
);

28 
queue_isfuŒ
(*
que
);

29 
uöt32_t
 
queue_sizñe·
(*
que
);

30 
queue_put
(*
que
,
uöt32_t
 
id
,uöt32_à
›
,
uöt8_t
 *
d©a
,uöt32_à
Àng
);

31 
queue_åyput
(*
que
,
uöt32_t
 
id
,uöt32_à
›
,
uöt8_t
 *
d©a
,uöt32_à
Àng
);

32 
queue_gë
(*
que
,
uöt32_t
 *
id
,uöt32_à*
›
,
uöt8_t
 **
d©a
,uöt32_à*
Àng
);

33 
queue_åygë
(*
que
,
uöt32_t
 *
id
,uöt32_à*
›
,
uöt8_t
 **
d©a
,uöt32_à*
Àng
);

	@mfscommon/random.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<time.h
>

23 
	~<°dlib.h
>

24 
	~<öây≥s.h
>

26 
uöt8_t
 
	gi
,
	gj
;

27 
uöt8_t
 
	gp
[256];

29 
	$∫d_öô
() {

30 
uöt8_t
 
key
[64],
vkey
[64];

31 
uöt8_t
 
x
;

32 
uöt16_t
 
l
;

34 
	`§™dom
(
	`time
(
NULL
));

35 
l
=0 ;Ü<64 ;Ü++) {

36 
key
[
l
] = 
	`øndom
();

37 
vkey
[
l
] = 
	`øndom
();

39 
l
=0 ;Ü<256 ;Ü++) {

40 
p
[
l
]=l;

42 
l
=0 ;Ü<768 ;Ü++) {

43 
i
 = 
l
;

44 
x
 = 
j
+
p
[
i
]+
key
[
l
%64];

45 
j
 = 
p
[
x
];

46 
x
 = 
p
[
i
];

47 
p
[
i
] =Ö[
j
];

48 
p
[
j
] = 
x
;

50 
l
=0 ;Ü<768 ;Ü++) {

51 
i
 = 
l
;

52 
x
 = 
j
+
p
[
i
]+
vkey
[
l
%64];

53 
j
 = 
p
[
x
];

54 
x
 = 
p
[
i
];

55 
p
[
i
] =Ö[
j
];

56 
p
[
j
] = 
x
;

58 
i
 = 0;

60 
	}
}

62 
	#RND_RC4_STEP
(
ªsu…
) { \

63 
uöt8_t
 
x
; \

64 
x
 = 
j
+
p
[
i
]; \

65 
j
 = 
p
[
x
]; \

66 
x
 = 
p
[
j
]; \

67 
x
 = 
p
[x]+1; \

68 
ªsu…
 = 
p
[
x
]; \

69 
x
 = 
p
[
i
]; \

70 
p
[
i
] =Ö[
j
]; \

71 
p
[
j
] = 
x
; \

72 
i
++; \

73 }

	)

75 
uöt8_t
 
	$∫du8
() {

76 
uöt8_t
 
r
;

77 
	`RND_RC4_STEP
(
r
);

78  
r
;

79 
	}
}

81 
uöt32_t
 
	$∫du32
() {

82 
uöt32_t
 
ªs
;

83 
uöt8_t
 *
r
 = (uöt8_t*)&
ªs
;

84 
	`RND_RC4_STEP
(
r
[0]);

85 
	`RND_RC4_STEP
(
r
[1]);

86 
	`RND_RC4_STEP
(
r
[2]);

87 
	`RND_RC4_STEP
(
r
[3]);

88  
ªs
;

89 
	}
}

91 
uöt64_t
 
	$∫du64
() {

92 
uöt64_t
 
ªs
;

93 
uöt8_t
 *
r
 = (uöt8_t*)&
ªs
;

94 
	`RND_RC4_STEP
(
r
[0]);

95 
	`RND_RC4_STEP
(
r
[1]);

96 
	`RND_RC4_STEP
(
r
[2]);

97 
	`RND_RC4_STEP
(
r
[3]);

98 
	`RND_RC4_STEP
(
r
[4]);

99 
	`RND_RC4_STEP
(
r
[5]);

100 
	`RND_RC4_STEP
(
r
[6]);

101 
	`RND_RC4_STEP
(
r
[7]);

102  
ªs
;

103 
	}
}

105 
uöt64_t
 
	$∫du64_ønged
(
uöt64_t
 
ønge
) {

106 
uöt64_t
 
max
,
r
;

107 
r
 = 
	`∫du64
();

108 i‡(
ønge
==0) {

109  
r
;

111 
max
 = -(((
uöt64_t
)-
ønge
) %Ñange);

112 i‡(
max
) {

113 
r
>=
max
) {

114 
r
 = 
	`∫du64
();

117  
r
%
ønge
;

118 
	}
}

120 
uöt32_t
 
	$∫du32_ønged
(
uöt32_t
 
ønge
) {

121 
uöt32_t
 
max
,
r
;

122 
r
 = 
	`∫du32
();

123 i‡(
ønge
==0) {

124  
r
;

126 
max
 = -(((
uöt32_t
)-
ønge
) %Ñange);

127 i‡(
max
) {

128 
r
>=
max
) {

129 
r
 = 
	`∫du32
();

132  
r
%
ønge
;

133 
	}
}

	@mfscommon/random.h

19 #i‚de‡
_RC4RANDOM_H_


20 
	#_RC4RANDOM_H_


	)

22 
	~<öây≥s.h
>

24 
∫d_öô
();

25 
uöt8_t
 
∫du8
();

26 
uöt32_t
 
∫du32
();

27 
uöt64_t
 
∫du64
();

29 
uöt64_t
 
∫du64_ønged
(uöt64_à
ønge
);

30 
uöt32_t
 
∫du32_ønged
(uöt32_à
ønge
);

	@mfscommon/slogger.h

1 #i‚de‡
_SLOGGER_H_


2 
	#_SLOGGER_H_


	)

4 
	~<°dio.h
>

5 
	~<sy¶og.h
>

6 
	~<°d¨g.h
>

7 
	~<î∫o.h
>

9 
	~"°ªº.h
"

11 
	#mfs_sy¶og
(
¥i‹ôy
,
msg
) {\

12 
	`sy¶og
((
¥i‹ôy
),"%s",(
msg
)); \

13 
	`Ârötf
(
°dîr
,"%s\n",(
msg
)); \

14 }

	)

16 
	#mfs_¨g_sy¶og
(
¥i‹ôy
,
f‹m©
, ...) {\

17 
	`sy¶og
((
¥i‹ôy
),(
f‹m©
), 
__VA_ARGS__
); \

18 
	`Ârötf
(
°dîr
,
f‹m©
 "\n", 
__VA_ARGS__
); \

19 }

	)

21 
	#mfs_îæog
(
¥i‹ôy
,
msg
) {\

22 c⁄° *
_mfs_îr°rög
 = 
	`°ªº
(
î∫o
); \

23 
	`sy¶og
((
¥i‹ôy
),"%s: %s", (
msg
Ë, 
_mfs_îr°rög
); \

24 
	`Ârötf
(
°dîr
,"%s: %s\n", (
msg
), 
_mfs_îr°rög
); \

25 }

	)

27 
	#mfs_¨g_îæog
(
¥i‹ôy
,
f‹m©
, ...) {\

28 c⁄° *
_mfs_îr°rög
 = 
	`°ªº
(
î∫o
); \

29 
	`sy¶og
((
¥i‹ôy
),
f‹m©
 ": %s", 
__VA_ARGS__
 , 
_mfs_îr°rög
); \

30 
	`Ârötf
(
°dîr
,
f‹m©
 ": %s\n", 
__VA_ARGS__
 , 
_mfs_îr°rög
); \

31 }

	)

33 
	#mfs_îæog_sûít
(
¥i‹ôy
,
msg
Ë
	`sy¶og
(’ri‹ôy),"%s: %s", msg, 
	`°ªº
(
î∫o
));

	)

34 
	#mfs_¨g_îæog_sûít
(
¥i‹ôy
,
f‹m©
, ...Ë
	`sy¶og
(’ri‹ôy),f‹m© ": %s", 
__VA_ARGS__
 , 
	`°ªº
(
î∫o
));

	)

	@mfscommon/sockets.c

19 
	~"c⁄fig.h
"

21 
	~<sys/ty≥s.h
>

22 
	~<sys/sockë.h
>

23 
	~<sys/pﬁl.h
>

24 
	~<√töë/ö.h
>

25 
	~<√töë/t˝.h
>

26 
	~<¨∑/öë.h
>

27 
	~<√tdb.h
>

28 
	~<uni°d.h
>

29 
	~<öây≥s.h
>

30 
	~<°rög.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<f˙é.h
>

34 
	~<î∫o.h
>

36 
	~"sockës.h
"

41 
ölöe
 
	$sockadd∫umfûl
(
sockaddr_ö
 *
ß
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

42 
	`mem£t
(
ß
,0,(
sockaddr_ö
));

43 
ß
->
sö_Ámûy
 = 
AF_INET
;

44 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

45 
ß
->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
ù
);

47 
	}
}

49 
ölöe
 
	$sockaddrfûl
(
sockaddr_ö
 *
ß
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
Ámûy
,
sockty≥
,
∑ssive
) {

50 
addröfo
 
höts
, *
ªs
, *
ªshód
;

51 
	`mem£t
(&
höts
, 0, (hints));

52 
höts
.
ai_Ámûy
 = 
Ámûy
;

53 
höts
.
ai_sockty≥
 = 
sockty≥
;

54 i‡(
∑ssive
) {

55 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

57 i‡(
ho°«me
 && hostname[0]=='*') {

58 
ho°«me
=
NULL
;

60 i‡(
£rvi˚
 && service[0]=='*') {

61 
£rvi˚
=
NULL
;

63 i‡(
	`gëaddröfo
(
ho°«me
,
£rvi˚
,&
höts
,&
ªshód
)) {

66 
ªs
 = 
ªshód
 ;Ñe†;ÑesÙes->
ai_√xt
) {

67 i‡(
ªs
->
ai_Ámûy
==
Ámûy
 &&Ñes->
ai_sockty≥
==
sockty≥
 &&Ñes->
ai_addæí
==(
sockaddr_ö
)) {

68 *
ß
 = *((
sockaddr_ö
*)(
ªs
->
ai_addr
));

69 
	`‰ìaddröfo
(
ªshód
);

73 
	`‰ìaddröfo
(
ªshód
);

75 
	}
}

77 
ölöe
 
	$sockªsﬁve
(c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,
Ámûy
,
sockty≥
,
∑ssive
) {

78 
sockaddr_ö
 
ß
;

79 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
Ámûy
,
sockty≥
,
∑ssive
)<0) {

82 i‡(
ù
!=(*)0) {

83 *
ù
 = 
	`¡ohl
(
ß
.
sö_addr
.
s_addr
);

85 i‡(
p‹t
!=(*)0) {

86 *
p‹t
 = 
	`¡ohs
(
ß
.
sö_p‹t
);

89 
	}
}

91 
ölöe
 
	$sockn⁄block
(
sock
) {

92 #ifde‡
O_NONBLOCK


93 
Êags
 = 
	`f˙é
(
sock
, 
F_GETFL
, 0);

94 i‡(
Êags
 == -1) {

97  
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

99 
yes
 = 1;

100  
	`io˘l
(
sock
, 
FIONBIO
, &
yes
);

102 
	}
}

106 
	$t˝£èc˚±fûãr
(
sock
) {

107 #ifde‡
SO_ACCEPTFILTER


108 
ac˚±_fûãr_¨g
 
aÁ
;

110 
	`bzîo
(&
aÁ
, (afa));

111 
	`°r˝y
(
aÁ
.
af_«me
, "dataready");

112  
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
aÁ
, (afa));

113 #ñi‡
TCP_DEFER_ACCEPT


114 
v
 = 1;

116  
	`£tsock›t
(
sock
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
v
, (v));

118 ()
sock
;

119 
î∫o
=
ENOTSUP
;

122 
	}
}

124 
	$t˝sockë
() {

125  
	`sockë
(
AF_INET
,
SOCK_STREAM
,0);

126 
	}
}

128 
	$t˝n⁄block
(
sock
) {

129  
	`sockn⁄block
(
sock
);

130 
	}
}

132 
	$t˝ªsﬁve
(c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,
∑ssive
) {

133  
	`sockªsﬁve
(
ho°«me
,
£rvi˚
,
ù
,
p‹t
,
AF_INET
,
SOCK_STREAM
,
∑ssive
);

134 
	}
}

136 
	$t˝ªu£addr
(
sock
) {

137 
yes
=1;

138  
	`£tsock›t
(
sock
,
SOL_SOCKET
,
SO_REUSEADDR
,(*)&
yes
,());

139 
	}
}

141 
	$t˝nodñay
(
sock
) {

142 
yes
=1;

143  
	`£tsock›t
(
sock
,
IPPROTO_TCP
,
TCP_NODELAY
,(*)&
yes
,());

144 
	}
}

146 
	$t˝accfhâp
(
sock
) {

147 #ifde‡
SO_ACCEPTFILTER


148 
ac˚±_fûãr_¨g
 
aÁ
;

150 
	`bzîo
(&
aÁ
, (afa));

151 
	`°r˝y
(
aÁ
.
af_«me
, "httpready");

152  
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
aÁ
, (afa));

154 ()
sock
;

155 
î∫o
=
EINVAL
;

158 
	}
}

160 
	$t˝accfd©a
(
sock
) {

161 #ifde‡
SO_ACCEPTFILTER


162 
ac˚±_fûãr_¨g
 
aÁ
;

164 
	`bzîo
(&
aÁ
, (afa));

165 
	`°r˝y
(
aÁ
.
af_«me
, "dataready");

166  
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
aÁ
, (afa));

168 ()
sock
;

169 
î∫o
=
EINVAL
;

172 
	}
}

174 
	$t˝°rböd
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
) {

175 
sockaddr_ö
 
ß
;

176 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
AF_INET
,
SOCK_STREAM
,1)<0) {

179 i‡(
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) < 0) {

183 
	}
}

185 
	$t˝numböd
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

186 
sockaddr_ö
 
ß
;

187 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

188 i‡(
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) < 0) {

192 
	}
}

194 
	$t˝°rc⁄√˘
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
) {

195 
sockaddr_ö
 
ß
;

196 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
AF_INET
,
SOCK_STREAM
,0)<0) {

199 i‡(
	`c⁄√˘
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) >= 0) {

202 i‡(
î∫o
 =
EINPROGRESS
) {

206 
	}
}

208 
	$t˝numc⁄√˘
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

209 
sockaddr_ö
 
ß
;

210 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

211 i‡(
	`c⁄√˘
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) >= 0) {

214 i‡(
î∫o
 =
EINPROGRESS
) {

218 
	}
}

220 
	$t˝°πoc⁄√˘
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 
m£˘o
) {

221 
sockaddr_ö
 
ß
;

222 i‡(
	`sockn⁄block
(
sock
)<0) {

225 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
AF_INET
,
SOCK_STREAM
,0)<0) {

228 i‡(
	`c⁄√˘
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) >= 0) {

231 i‡(
î∫o
 =
EINPROGRESS
) {

232 
pﬁlfd
 
pfd
;

233 
pfd
.
fd
 = 
sock
;

234 
pfd
.
evíts
 = 
POLLOUT
;

235 
pfd
.
ªvíts
 = 0;

236 i‡(
	`pﬁl
(&
pfd
,1,
m£˘o
)<0) {

239 i‡(
pfd
.
ªvíts
 & 
POLLOUT
) {

240  
	`t˝gë°©us
(
sock
);

242 
î∫o
=
ETIMEDOUT
;

245 
	}
}

247 
	$t˝numtoc⁄√˘
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,uöt32_à
m£˘o
) {

248 
sockaddr_ö
 
ß
;

249 i‡(
	`sockn⁄block
(
sock
)<0) {

252 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

253 i‡(
	`c⁄√˘
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) >= 0) {

256 i‡(
î∫o
 =
EINPROGRESS
) {

257 
pﬁlfd
 
pfd
;

258 
pfd
.
fd
 = 
sock
;

259 
pfd
.
evíts
 = 
POLLOUT
;

260 
pfd
.
ªvíts
 = 0;

261 i‡(
	`pﬁl
(&
pfd
,1,
m£˘o
)<0) {

264 i‡(
pfd
.
ªvíts
 & 
POLLOUT
) {

265  
	`t˝gë°©us
(
sock
);

267 
î∫o
=
ETIMEDOUT
;

270 
	}
}

272 
	$t˝gë°©us
(
sock
) {

273 
sockÀn_t
 
¨gÀn
 = ();

274 
rc
 = 0;

275 i‡(
	`gësock›t
(
sock
,
SOL_SOCKET
,
SO_ERROR
,(*)&
rc
,&
¨gÀn
) < 0) {

276 
rc
=
î∫o
;

278 
î∫o
=
rc
;

279  
rc
;

280 
	}
}

282 
	$t˝°æi°í
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt16_t
 
queue
) {

283 
sockaddr_ö
 
ß
;

284 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
AF_INET
,
SOCK_STREAM
,1)<0) {

287 i‡(
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) < 0) {

290 i‡(
	`li°í
(
sock
,
queue
)<0) {

294 
	}
}

296 
	$t˝numli°í
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,uöt16_à
queue
) {

297 
sockaddr_ö
 
ß
;

298 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

299 i‡(
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
)) < 0) {

302 i‡(
	`li°í
(
sock
,
queue
)<0) {

306 
	}
}

308 
	$t˝ac˚±
(
lsock
) {

309 
sock
;

310 
sock
=
	`ac˚±
(
lsock
,(
sockaddr
 *)
NULL
,0);

311 i‡(
sock
<0) {

314  
sock
;

315 
	}
}

317 
	$t˝gë≥î
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
) {

318 
sockaddr_ö
 
ß
;

319 
sockÀn_t
 
Àng
;

320 
Àng
=(
ß
);

321 i‡(
	`gë≥î«me
(
sock
,(
sockaddr
 *)&
ß
,&
Àng
)<0) {

324 i‡(
ù
!=(*)0) {

325 *
ù
 = 
	`¡ohl
(
ß
.
sö_addr
.
s_addr
);

327 i‡(
p‹t
!=(*)0) {

328 *
p‹t
 = 
	`¡ohs
(
ß
.
sö_p‹t
);

331 
	}
}

333 
	$t˝gëmyaddr
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
) {

334 
sockaddr_ö
 
ß
;

335 
sockÀn_t
 
Àng
;

336 
Àng
=(
ß
);

337 i‡(
	`gësock«me
(
sock
,(
sockaddr
 *)&
ß
,&
Àng
)<0) {

340 i‡(
ù
!=(*)0) {

341 *
ù
 = 
	`¡ohl
(
ß
.
sö_addr
.
s_addr
);

343 i‡(
p‹t
!=(*)0) {

344 *
p‹t
 = 
	`¡ohs
(
ß
.
sö_p‹t
);

347 
	}
}

349 
	$t˝˛o£
(
sock
) {

351 
	`shutdown
(
sock
,
SHUT_WR
);

352  
	`˛o£
(
sock
);

353 
	}
}

383 
öt32_t
 
	$t˝t‹ód
(
sock
,*
buff
,
uöt32_t
 
Àng
,uöt32_à
m£˘o
) {

384 
uöt32_t
 
rcvd
=0;

385 
i
;

386 
pﬁlfd
 
pfd
;

387 
pfd
.
fd
 = 
sock
;

388 
pfd
.
evíts
 = 
POLLIN
;

389 
rcvd
<
Àng
) {

390 
pfd
.
ªvíts
 = 0;

391 i‡(
	`pﬁl
(&
pfd
,1,
m£˘o
)<0) {

394 i‡(
pfd
.
ªvíts
 & 
POLLIN
) {

395 
i
 = 
	`ªad
(
sock
,((
uöt8_t
*)
buff
)+
rcvd
,
Àng
-rcvd);

396 i‡(
i
<=0) {

397  
i
;

399 
rcvd
+=
i
;

401 
î∫o
 = 
ETIMEDOUT
;

405  
rcvd
;

406 
	}
}

408 
öt32_t
 
	$t˝towrôe
(
sock
,c⁄° *
buff
,
uöt32_t
 
Àng
,uöt32_à
m£˘o
) {

409 
uöt32_t
 
£¡
=0;

410 
i
;

411 
pﬁlfd
 
pfd
;

412 
pfd
.
fd
 = 
sock
;

413 
pfd
.
evíts
 = 
POLLOUT
;

414 
£¡
<
Àng
) {

415 
pfd
.
ªvíts
 = 0;

416 i‡(
	`pﬁl
(&
pfd
,1,
m£˘o
)<0) {

419 i‡(
pfd
.
ªvíts
 & 
POLLOUT
) {

420 
i
 = 
	`wrôe
(
sock
,((
uöt8_t
*)
buff
)+
£¡
,
Àng
-sent);

421 i‡(
i
<=0) {

422  
i
;

424 
£¡
+=
i
;

426 
î∫o
 = 
ETIMEDOUT
;

430  
£¡
;

431 
	}
}

433 
	$t˝tﬂc˚±
(
sock
,
uöt32_t
 
m£˘o
) {

434 
pﬁlfd
 
pfd
;

435 
pfd
.
fd
 = 
sock
;

436 
pfd
.
evíts
 = 
POLLIN
;

437 
pfd
.
ªvíts
 = 0;

438 i‡(
	`pﬁl
(&
pfd
,1,
m£˘o
)<0) {

441 i‡(
pfd
.
ªvíts
 & 
POLLIN
) {

442  
	`ac˚±
(
sock
,(
sockaddr
 *)
NULL
,0);

444 
î∫o
 = 
ETIMEDOUT
;

446 
	}
}

450 
	$udpsockë
() {

451  
	`sockë
(
AF_INET
,
SOCK_DGRAM
,0);

452 
	}
}

454 
	$ud≤⁄block
(
sock
) {

455  
	`sockn⁄block
(
sock
);

456 
	}
}

458 
	$ud¥esﬁve
(c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,
∑ssive
) {

459  
	`sockªsﬁve
(
ho°«me
,
£rvi˚
,
ù
,
p‹t
,
AF_INET
,
SOCK_DGRAM
,
∑ssive
);

460 
	}
}

462 
	$ud≤umli°í
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

463 
sockaddr_ö
 
ß
;

464 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

465  
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
));

466 
	}
}

468 
	$udp°æi°í
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
) {

469 
sockaddr_ö
 
ß
;

470 i‡(
	`sockaddrfûl
(&
ß
,
ho°«me
,
£rvi˚
,
AF_INET
,
SOCK_DGRAM
,1)<0) {

473  
	`böd
(
sock
,(
sockaddr
 *)&
ß
,(
sockaddr_ö
));

474 
	}
}

476 
	$udpwrôe
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,c⁄° *
buff
,uöt16_à
Àng
) {

477 
sockaddr_ö
 
ß
;

478 i‡(
Àng
>512) {

481 
	`sockadd∫umfûl
(&
ß
,
ù
,
p‹t
);

482  
	`£ndto
(
sock
,
buff
,
Àng
,0,(
sockaddr
 *)&
ß
,(
sockaddr_ö
));

483 
	}
}

485 
	$ud¥ód
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,*
buff
,uöt16_à
Àng
) {

486 
sockÀn_t
 
ãm∂íg
;

487 
sockaddr
 
ãm∑ddr
;

488 
sockaddr_ö
 *
ß±r
;

489 
ªt
;

490 
ªt
 = 
	`ªcv‰om
(
sock
,
buff
,
Àng
,0,&
ãm∑ddr
,&
ãm∂íg
);

491 i‡(
ãm∂íg
==(
sockaddr_ö
)) {

492 
ß±r
 = ((
sockaddr_ö
*)&
ãm∑ddr
);

493 i‡(
ù
!=(*)0) {

494 *
ù
 = 
	`¡ohl
(
ß±r
->
sö_addr
.
s_addr
);

496 i‡(
p‹t
!=(*)0) {

497 *
p‹t
 = 
	`¡ohs
(
ß±r
->
sö_p‹t
);

500  
ªt
;

501 
	}
}

503 
	$udp˛o£
(
sock
) {

504  
	`˛o£
(
sock
);

505 
	}
}

	@mfscommon/sockets.h

19 #i‚de‡
_SOCKETS_H_


20 
	#_SOCKETS_H_


	)

22 
	~<öây≥s.h
>

26 
t˝sockë
();

27 
t˝ªsﬁve
(c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,
∑ssiveÊag
);

28 
t˝n⁄block
(
sock
);

29 
t˝£èc˚±fûãr
(
sock
);

30 
t˝ªu£addr
(
sock
);

31 
t˝nodñay
(
sock
);

32 
t˝accfhâp
(
sock
);

33 
t˝accfd©a
(
sock
);

34 
t˝numböd
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

35 
t˝°rböd
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
);

36 
t˝numc⁄√˘
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

37 
t˝numtoc⁄√˘
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,uöt32_à
m£˘o
);

38 
t˝°rc⁄√˘
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
);

39 
t˝°πoc⁄√˘
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 
m£˘o
);

40 
t˝gë°©us
(
sock
);

41 
t˝numli°í
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,uöt16_à
queue
);

42 
t˝°æi°í
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt16_t
 
queue
);

43 
t˝ac˚±
(
lsock
);

44 
t˝gë≥î
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
);

45 
t˝gëmyaddr
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
);

46 
t˝˛o£
(
sock
);

49 
öt32_t
 
t˝t‹ód
(
sock
,*
buff
,
uöt32_t
 
Àng
,uöt32_à
m£˘o
);

50 
öt32_t
 
t˝towrôe
(
sock
,c⁄° *
buff
,
uöt32_t
 
Àng
,uöt32_à
m£˘o
);

51 
t˝tﬂc˚±
(
sock
,
uöt32_t
 
m£˘o
);

55 
udpsockë
();

56 
ud¥esﬁve
(c⁄° *
ho°«me
,c⁄° *
£rvi˚
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,
∑ssiveÊag
);

57 
ud≤⁄block
(
sock
);

58 
ud≤umli°í
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

59 
udp°æi°í
(
sock
,c⁄° *
ho°«me
,c⁄° *
£rvi˚
);

60 
udpwrôe
(
sock
,
uöt32_t
 
ù
,
uöt16_t
 
p‹t
,c⁄° *
buff
,uöt16_à
Àng
);

61 
ud¥ód
(
sock
,
uöt32_t
 *
ù
,
uöt16_t
 *
p‹t
,*
buff
,uöt16_à
Àng
);

62 
udp˛o£
(
sock
);

	@mfscommon/strerr.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<öây≥s.h
>

4 
	~<î∫o.h
>

6 
	sîª¡
 {

7 
	mnum
;

8 c⁄° * 
	m°r
;

9 } 
	tîª¡
;

11 
îª¡
 
	gîπab
[] = {

12 #ifde‡
E2BIG


13 {
E2BIG
,"E2BIG (ArgumentÜistÅooÜong)"},

15 #ifde‡
EACCES


16 {
EACCES
,"EACCES (Permission denied)"},

18 #ifde‡
EADDRINUSE


19 {
EADDRINUSE
,"EADDRINUSE (Addressálready in use)"},

21 #ifde‡
EADDRNOTAVAIL


22 {
EADDRNOTAVAIL
,"EADDRNOTAVAIL (CannotássignÑequestedáddress)"},

24 #ifde‡
EADV


25 {
EADV
,"EADV (AdvertiseÉrror)"},

27 #ifde‡
EAFNOSUPPORT


28 {
EAFNOSUPPORT
,"EAFNOSUPPORT (Address familyÇot supported byÖrotocol family)"},

30 #ifde‡
EAGAIN


31 {
EAGAIN
,"EAGAIN (ResourceÅemporarily unavailable)"},

33 #ifde‡
EALREADY


34 {
EALREADY
,"EALREADY (Operationálready inÖrogress)"},

36 #ifde‡
EAUTH


37 {
EAUTH
,"EAUTH (AuthenticationÉrror)"},

39 #ifde‡
EBADARCH


40 {
EBADARCH
,"EBADARCH (Bad CPUÅype inÉxecutable)"},

42 #ifde‡
EBADEXEC


43 {
EBADEXEC
,"EBADEXEC (BadÉxecutable)"},

45 #ifde‡
EBADE


46 {
EBADE
,"EBADE (InvalidÉxchange)"},

48 #ifde‡
EBADFD


49 {
EBADFD
,"EBADFD (File descriptor invalid forÅhis operation)"},

51 #ifde‡
EBADF


52 {
EBADF
,"EBADF (Bad file descriptor)"},

54 #ifde‡
EBADMACHO


55 {
EBADMACHO
,"EBADMACHO (Malformed Macho file)"},

57 #ifde‡
EBADMSG


58 {
EBADMSG
,"EBADMSG (Bad message)"},

60 #ifde‡
EBADRPC


61 {
EBADRPC
,"EBADRPC (RPC struct is bad)"},

63 #ifde‡
EBADRQC


64 {
EBADRQC
,"EBADRQC (InvalidÑequest code)"},

66 #ifde‡
EBADR


67 {
EBADR
,"EBADR (InvalidÑequest descriptor)"},

69 #ifde‡
EBADSLT


70 {
EBADSLT
,"EBADSLT (Invalid slot)"},

72 #ifde‡
EBFONT


73 {
EBFONT
,"EBFONT (Bad font file format)"},

75 #ifde‡
EBUSY


76 {
EBUSY
,"EBUSY (Device orÑesource busy)"},

78 #ifde‡
ECANCELED


79 {
ECANCELED
,"ECANCELED (Operation canceled)"},

81 #ifde‡
ECHILD


82 {
ECHILD
,"ECHILD (No childÖrocesses)"},

84 #ifde‡
ECHRNG


85 {
ECHRNG
,"ECHRNG (ChannelÇumber out ofÑange)"},

87 #ifde‡
ECOMM


88 {
ECOMM
,"ECOMM (CommunicationÉrror on send)"},

90 #ifde‡
ECONNABORTED


91 {
ECONNABORTED
,"ECONNABORTED (Software caused connectionábort)"},

93 #ifde‡
ECONNREFUSED


94 {
ECONNREFUSED
,"ECONNREFUSED (ConnectionÑefused)"},

96 #ifde‡
ECONNRESET


97 {
ECONNRESET
,"ECONNRESET (ConnectionÑeset byÖeer)"},

99 #ifde‡
EDEADLK


100 {
EDEADLK
,"EDEADLK (Resource deadlock would occur)"},

102 #ifde‡
EDEADLOCK


103 {
EDEADLOCK
,"EDEADLOCK (FileÜocking deadlockÉrror)"},

105 #ifde‡
EDESTADDRREQ


106 {
EDESTADDRREQ
,"EDESTADDRREQ (DestinationáddressÑequired)"},

108 #ifde‡
EDEVERR


109 {
EDEVERR
,"EDEVERR (DeviceÉrror,É.g.Öaper out)"},

111 #ifde‡
EDOM


112 {
EDOM
,"EDOM (Numericalárgument out of domain)"},

114 #ifde‡
EDOOFUS


115 {
EDOOFUS
,"EDOOFUS (ProgrammingÉrror)"},

117 #ifde‡
EDOTDOT


118 {
EDOTDOT
,"EDOTDOT (RFS specificÉrror)"},

120 #ifde‡
EDQUOT


121 {
EDQUOT
,"EDQUOT (QuotaÉxceeded)"},

123 #ifde‡
EEXIST


124 {
EEXIST
,"EEXIST (FileÉxists)"},

126 #ifde‡
EFAULT


127 {
EFAULT
,"EFAULT (Badáddress)"},

129 #ifde‡
EFBIG


130 {
EFBIG
,"EFBIG (FileÅooÜarge)"},

132 #ifde‡
EFTYPE


133 {
EFTYPE
,"EFTYPE (Inappropriate fileÅype or format)"},

135 #ifde‡
EHOSTDOWN


136 {
EHOSTDOWN
,"EHOSTDOWN (Host is down)"},

138 #ifde‡
EHOSTUNREACH


139 {
EHOSTUNREACH
,"EHOSTUNREACH (NoÑouteÅo host)"},

141 #ifde‡
EIDRM


142 {
EIDRM
,"EIDRM (IdentifierÑemoved)"},

144 #ifde‡
EILSEQ


145 {
EILSEQ
,"EILSEQ (Illegal byte sequence)"},

147 #ifde‡
EINPROGRESS


148 {
EINPROGRESS
,"EINPROGRESS (OperationÇow inÖrogress)"},

150 #ifde‡
EINTR


151 {
EINTR
,"EINTR (Interrupted system call)"},

153 #ifde‡
EINVAL


154 {
EINVAL
,"EINVAL (Invalidárgument)"},

156 #ifde‡
EIO


157 {
EIO
,"EIO (Input/outputÉrror)"},

159 #ifde‡
EISCONN


160 {
EISCONN
,"EISCONN (TransportÉndpoint isálready connected)"},

162 #ifde‡
EISDIR


163 {
EISDIR
,"EISDIR (Isá directory)"},

165 #ifde‡
EISNAM


166 {
EISNAM
,"EISNAM (IsáÇamedÅype file)"},

168 #ifde‡
EKEYEXPIRED


169 {
EKEYEXPIRED
,"EKEYEXPIRED (Key hasÉxpired)"},

171 #ifde‡
EKEYREJECTED


172 {
EKEYREJECTED
,"EKEYREJECTED (Key wasÑejected by service)"},

174 #ifde‡
EKEYREVOKED


175 {
EKEYREVOKED
,"EKEYREVOKED (Key has beenÑevoked)"},

177 #ifde‡
EL2HLT


178 {
EL2HLT
,"EL2HLT (Level 2 halted)"},

180 #ifde‡
EL2NSYNC


181 {
EL2NSYNC
,"EL2NSYNC (Level 2Çot synchronized)"},

183 #ifde‡
EL3HLT


184 {
EL3HLT
,"EL3HLT (Level 3 halted)"},

186 #ifde‡
EL3RST


187 {
EL3RST
,"EL3RST (Level 3Ñeset)"},

189 #ifde‡
ELIBACC


190 {
ELIBACC
,"ELIBACC (CanÇotáccessáÇeeded sharedÜibrary)"},

192 #ifde‡
ELIBBAD


193 {
ELIBBAD
,"ELIBBAD (Accessingá corrupted sharedÜibrary)"},

195 #ifde‡
ELIBEXEC


196 {
ELIBEXEC
,"ELIBEXEC (CannotÉxecá sharedÜibrary directly)"},

198 #ifde‡
ELIBMAX


199 {
ELIBMAX
,"ELIBMAX (AttemptingÅoÜink inÅoo many sharedÜibraries)"},

201 #ifde‡
ELIBSCN


202 {
ELIBSCN
,"ELIBSCN (.lib section iná.out corrupted)"},

204 #ifde‡
ELNRNG


205 {
ELNRNG
,"ELNRNG (LinkÇumber out ofÑange)"},

207 #ifde‡
ELOCKUNMAPPED


208 {
ELOCKUNMAPPED
,"ELOCKUNMAPPED (lockedÜock was unmapped)"},

210 #ifde‡
ELOOP


211 {
ELOOP
,"ELOOP (Too manyÜevels of symbolicÜinks)"},

213 #ifde‡
EMEDIUMTYPE


214 {
EMEDIUMTYPE
,"EMEDIUMTYPE (Wrong mediumÅype)"},

216 #ifde‡
EMFILE


217 {
EMFILE
,"EMFILE (Too many open files)"},

219 #ifde‡
EMLINK


220 {
EMLINK
,"EMLINK (Too manyÜinks)"},

222 #ifde‡
EMSGSIZE


223 {
EMSGSIZE
,"EMSGSIZE (MessageÅooÜong)"},

225 #ifde‡
EMULTIHOP


226 {
EMULTIHOP
,"EMULTIHOP (Multihopáttempted)"},

228 #ifde‡
ENAMETOOLONG


229 {
ENAMETOOLONG
,"ENAMETOOLONG (FileÇameÅooÜong)"},

231 #ifde‡
ENAVAIL


232 {
ENAVAIL
,"ENAVAIL (No XENIX semaphoresávailable)"},

234 #ifde‡
ENEEDAUTH


235 {
ENEEDAUTH
,"ENEEDAUTH (Needáuthenticator)"},

237 #ifde‡
ENETDOWN


238 {
ENETDOWN
,"ENETDOWN (Network is down)"},

240 #ifde‡
ENETRESET


241 {
ENETRESET
,"ENETRESET (Network dropped connection because ofÑeset)"},

243 #ifde‡
ENETUNREACH


244 {
ENETUNREACH
,"ENETUNREACH (Network is unreachable)"},

246 #ifde‡
ENFILE


247 {
ENFILE
,"ENFILE (Too many open files in system)"},

249 #ifde‡
ENOANO


250 {
ENOANO
,"ENOANO (Noánode)"},

252 #ifde‡
ENOATTR


253 {
ENOATTR
,"ENOATTR (AttributeÇot found)"},

255 #ifde‡
ENOBUFS


256 {
ENOBUFS
,"ENOBUFS (No buffer spaceávailable)"},

258 #ifde‡
ENOCSI


259 {
ENOCSI
,"ENOCSI (No CSI structureávailable)"},

261 #ifde‡
ENODATA


262 {
ENODATA
,"ENODATA (No dataávailable)"},

264 #ifde‡
ENODEV


265 {
ENODEV
,"ENODEV (OperationÇot supported by device orÇo such device)"},

267 #ifde‡
ENOENT


268 {
ENOENT
,"ENOENT (No such file or directory)"},

270 #ifde‡
ENOEXEC


271 {
ENOEXEC
,"ENOEXEC (Exec formatÉrror)"},

273 #ifde‡
ENOKEY


274 {
ENOKEY
,"ENOKEY (Required keyÇotávailable)"},

276 #ifde‡
ENOLCK


277 {
ENOLCK
,"ENOLCK (NoÜocksávailable)"},

279 #ifde‡
ENOLINK


280 {
ENOLINK
,"ENOLINK (Link has been severed)"},

282 #ifde‡
ENOMEDIUM


283 {
ENOMEDIUM
,"ENOMEDIUM (No medium found)"},

285 #ifde‡
ENOMEM


286 {
ENOMEM
,"ENOMEM (Cannotállocate memory)"},

288 #ifde‡
ENOMSG


289 {
ENOMSG
,"ENOMSG (No message of desiredÅype)"},

291 #ifde‡
ENONET


292 {
ENONET
,"ENONET (Machine isÇot onÅheÇetwork)"},

294 #ifde‡
ENOPKG


295 {
ENOPKG
,"ENOPKG (PackageÇot installed)"},

297 #ifde‡
ENOPOLICY


298 {
ENOPOLICY
,"ENOPOLICY (No suchÖolicyÑegistered)"},

300 #ifde‡
ENOPROTOOPT


301 {
ENOPROTOOPT
,"ENOPROTOOPT (ProtocolÇotávailable)"},

303 #ifde‡
ENOSPC


304 {
ENOSPC
,"ENOSPC (No spaceÜeft on device)"},

306 #ifde‡
ENOSR


307 {
ENOSR
,"ENOSR (Out of streamsÑesources)"},

309 #ifde‡
ENOSTR


310 {
ENOSTR
,"ENOSTR (DeviceÇotá stream)"},

312 #ifde‡
ENOSYS


313 {
ENOSYS
,"ENOSYS (Unsupported file system operation)"},

315 #ifde‡
ENOTACTIVE


316 {
ENOTACTIVE
,"ENOTACTIVE (Facility isÇotáctive)"},

318 #ifde‡
ENOTBLK


319 {
ENOTBLK
,"ENOTBLK (Block deviceÑequired)"},

321 #ifde‡
ENOTCONN


322 {
ENOTCONN
,"ENOTCONN (TransportÉndpoint isÇot connected)"},

324 #ifde‡
ENOTDIR


325 {
ENOTDIR
,"ENOTDIR (Notá directory)"},

327 #ifde‡
ENOTEMPTY


328 {
ENOTEMPTY
,"ENOTEMPTY (DirectoryÇotÉmpty)"},

330 #ifde‡
ENOTNAM


331 {
ENOTNAM
,"ENOTNAM (Notá XENIXÇamedÅype file)"},

333 #ifde‡
ENOTRECOVERABLE


334 {
ENOTRECOVERABLE
,"ENOTRECOVERABLE (StateÇotÑecoverable)"},

336 #ifde‡
ENOTSOCK


337 {
ENOTSOCK
,"ENOTSOCK (Socket operation onÇon-socket)"},

339 #ifde‡
ENOTSUP


340 {
ENOTSUP
,"ENOTSUP (OperationÇot supported)"},

342 #ifde‡
ENOTTY


343 {
ENOTTY
,"ENOTTY (Inappropriate ioctl for device)"},

345 #ifde‡
ENOTUNIQ


346 {
ENOTUNIQ
,"ENOTUNIQ (NameÇot unique onÇetwork)"},

348 #ifde‡
ENXIO


349 {
ENXIO
,"ENXIO (No such device oráddress)"},

351 #ifde‡
EOPNOTSUPP


352 {
EOPNOTSUPP
,"EOPNOTSUPP (OperationÇot supported onÅransportÉndpoint)"},

354 #ifde‡
EOVERFLOW


355 {
EOVERFLOW
,"EOVERFLOW (ValueÅooÜargeÅo be stored in dataÅype)"},

357 #ifde‡
EOWNERDEAD


358 {
EOWNERDEAD
,"EOWNERDEAD (Process died withÅheÜock)"},

360 #ifde‡
EPERM


361 {
EPERM
,"EPERM (OperationÇotÖermitted)"},

363 #ifde‡
EPFNOSUPPORT


364 {
EPFNOSUPPORT
,"EPFNOSUPPORT (Protocol familyÇot supported)"},

366 #ifde‡
EPIPE


367 {
EPIPE
,"EPIPE (BrokenÖipe)"},

369 #ifde‡
EPROCLIM


370 {
EPROCLIM
,"EPROCLIM (Too manyÖrocesses)"},

372 #ifde‡
EPROCUNAVAIL


373 {
EPROCUNAVAIL
,"EPROCUNAVAIL (BadÖrocedure forÖrogram)"},

375 #ifde‡
EPROGMISMATCH


376 {
EPROGMISMATCH
,"EPROGMISMATCH (Program version wrong)"},

378 #ifde‡
EPROGUNAVAIL


379 {
EPROGUNAVAIL
,"EPROGUNAVAIL (RPCÖrog.Çotávail)"},

381 #ifde‡
EPROTONOSUPPORT


382 {
EPROTONOSUPPORT
,"EPROTONOSUPPORT (ProtocolÇot supported)"},

384 #ifde‡
EPROTOTYPE


385 {
EPROTOTYPE
,"EPROTOTYPE (Protocol wrongÅype for socket)"},

387 #ifde‡
EPROTO


388 {
EPROTO
,"EPROTO (ProtocolÉrror)"},

390 #ifde‡
EPWROFF


391 {
EPWROFF
,"EPWROFF (DeviceÖower is off)"},

393 #ifde‡
ERANGE


394 {
ERANGE
,"ERANGE (ResultÅooÜarge)"},

396 #ifde‡
EREMCHG


397 {
EREMCHG
,"EREMCHG (Remoteáddress changed)"},

399 #ifde‡
EREMOTEIO


400 {
EREMOTEIO
,"EREMOTEIO (Remote I/OÉrror)"},

402 #ifde‡
EREMOTE


403 {
EREMOTE
,"EREMOTE (Object isÑemote)"},

405 #ifde‡
ERESTART


406 {
ERESTART
,"ERESTART (Interrupted system call should beÑestarted)"},

408 #ifde‡
EROFS


409 {
EROFS
,"EROFS (Read-only file system)"},

411 #ifde‡
ERPCMISMATCH


412 {
ERPCMISMATCH
,"ERPCMISMATCH (RPC version wrong)"},

414 #ifde‡
ESHLIBVERS


415 {
ESHLIBVERS
,"ESHLIBVERS (SharedÜibrary version mismatch)"},

417 #ifde‡
ESHUTDOWN


418 {
ESHUTDOWN
,"ESHUTDOWN (Cannot sendáfterÅransportÉndpoint shutdown)"},

420 #ifde‡
ESOCKTNOSUPPORT


421 {
ESOCKTNOSUPPORT
,"ESOCKTNOSUPPORT (SocketÅypeÇot supported)"},

423 #ifde‡
ESPIPE


424 {
ESPIPE
,"ESPIPE (Illegal seek)"},

426 #ifde‡
ESRCH


427 {
ESRCH
,"ESRCH (No suchÖrocess)"},

429 #ifde‡
ESRMNT


430 {
ESRMNT
,"ESRMNT (SrmountÉrror)"},

432 #ifde‡
ESTALE


433 {
ESTALE
,"ESTALE (Stale NFS file handle)"},

435 #ifde‡
ESTRPIPE


436 {
ESTRPIPE
,"ESTRPIPE (StreamsÖipeÉrror)"},

438 #ifde‡
ETIMEDOUT


439 {
ETIMEDOUT
,"ETIMEDOUT (OperationÅimed out)"},

441 #ifde‡
ETIME


442 {
ETIME
,"ETIME (TimerÉxpired)"},

444 #ifde‡
ETOOMANYREFS


445 {
ETOOMANYREFS
,"ETOOMANYREFS (Too manyÑeferences: cannot splice)"},

447 #ifde‡
ETXTBSY


448 {
ETXTBSY
,"ETXTBSY (Text file busy)"},

450 #ifde‡
EUCLEAN


451 {
EUCLEAN
,"EUCLEAN (StructureÇeeds cleaning)"},

453 #ifde‡
EUNATCH


454 {
EUNATCH
,"EUNATCH (Protocol driverÇotáttached)"},

456 #ifde‡
EUSERS


457 {
EUSERS
,"EUSERS (Too many users)"},

459 #ifde‡
EXDEV


460 {
EXDEV
,"EXDEV (Cross-deviceÜink)"},

462 #ifde‡
EXFULL


463 {
EXFULL
,"EXFULL (Exchange full)"},

465 {0,
NULL
}

468 
îª¡
 *
	gîrhash
 = 
NULL
;

469 
uöt32_t
 
	gîrhsize
 = 0;

471 
	$°ªº_öô
() {

472 
uöt32_t
 
n
;

473 
uöt32_t
 
hash
,
di•
;

475 
n
=0 ; 
îπab
[n].
°r
 ;Ç++) {}

477 
n
 = (n*3)/2;

479 
îrhsize
 = 1;

480 
n
>0) {

481 
îrhsize
<<=1;

482 
n
>>=1;

485 
îrhash
 = 
	`mÆloc
((
îª¡
)*
îrhsize
);

486 
	`mem£t
(
îrhash
,0,(
îª¡
)*
îrhsize
);

488 
n
=0 ; 
îπab
[n].
°r
 ;Ç++) {

489 
hash
 = 
îπab
[
n
].
num
;

490 
di•
 = ((
hash
 * 760092119Ë& (
îrhsize
-1)) | 1;

491 
hash
 = ((hash * 1905886897Ë& (
îrhsize
-1));

492 
îrhash
[
hash
].
°r
!=
NULL
 &&Éºhash[hash].
num
 !
îπab
[
n
].num) {

493 
hash
+=
di•
;

494 
hash
&=(
îrhsize
-1);

496 i‡(
îrhash
[
hash
].
°r
==
NULL
) {

497 
îrhash
[
hash
] = 
îπab
[
n
];

500 
	}
}

502 c⁄° * 
	$°ªº
(
îr‹
) {

503 
uöt32_t
 
hash
,
di•
;

505 
hash
 = 
îr‹
;

506 
di•
 = ((
hash
 * 760092119Ë& (
îrhsize
-1)) | 1;

507 
hash
 = ((hash * 1905886897Ë& (
îrhsize
-1));

508 
îrhash
[
hash
].
°r
!=
NULL
) {

509 i‡(
îrhash
[
hash
].
num
 =
îr‹
) {

510  
îrhash
[
hash
].
°r
;

512 
hash
+=
di•
;

513 
hash
&=(
îrhsize
-1);

516 
	}
}

518 
	$°ªº_ãrm
() {

519 
	`‰ì
(
îrhash
);

520 
	}
}

	@mfscommon/strerr.h

19 #i‚de‡
_STRERR_H_


20 
	#_STRERR_H_


	)

22 c⁄° * 
°ªº
(
îr‹
);

23 
°ªº_öô
();

24 
°ªº_ãrm
();

	@mfsmaster/changelog.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°d¨g.h
>

23 
	~<sy¶og.h
>

24 
	~<uni°d.h
>

26 
	~"maö.h
"

27 
	~"ch™gñog.h
"

28 
	~"m©oml£rv.h
"

29 
	~"cfg.h
"

31 
	#MAXLOGLINESIZE
 10000

	)

32 
uöt32_t
 
	gBackLogsNumbî
;

33 
FILE
 *
	gfd
;

35 
	$ch™gñog_rŸ©e
() {

36 
log«me1
[100],
log«me2
[100];

37 
uöt32_t
 
i
;

38 i‡(
fd
) {

39 
	`f˛o£
(
fd
);

40 
fd
=
NULL
;

42 i‡(
BackLogsNumbî
>0) {

43 
i
=
BackLogsNumbî
 ; i>0 ; i--) {

44 
	`¢¥ötf
(
log«me1
,100,"ch™gñog.%"
PRIu32
".mfs",
i
);

45 
	`¢¥ötf
(
log«me2
,100,"ch™gñog.%"
PRIu32
".mfs",
i
-1);

46 
	`ª«me
(
log«me2
,
log«me1
);

49 
	`u∆ök
("changelog.0.mfs");

51 
	`m©oml£rv_brﬂdˇ°_logrŸ©e
();

52 
	}
}

54 
	$ch™gñog
(
uöt64_t
 
vîsi⁄
,c⁄° *
f‹m©
,...) {

55 
¥ötbuff
[
MAXLOGLINESIZE
];

56 
va_li°
 
≠
;

57 
uöt32_t
 
Àng
;

59 
	`va_°¨t
(
≠
,
f‹m©
);

60 
Àng
 = 
	`v¢¥ötf
(
¥ötbuff
,
MAXLOGLINESIZE
,
f‹m©
,
≠
);

61 
	`va_íd
(
≠
);

62 i‡(
Àng
>=
MAXLOGLINESIZE
) {

63 
¥ötbuff
[
MAXLOGLINESIZE
-1]='\0';

64 
Àng
=
MAXLOGLINESIZE
;

66 
Àng
++;

69 i‡(
fd
==
NULL
) {

70 
fd
 = 
	`f›í
("changelog.0.mfs","a");

71 i‡(!
fd
) {

72 
	`sy¶og
(
LOG_NOTICE
,"lo° MFS ch™gê%"
PRIu64
": %s",
vîsi⁄
,
¥ötbuff
);

76 i‡(
fd
) {

77 
	`Ârötf
(
fd
,"%"
PRIu64
": %s\n",
vîsi⁄
,
¥ötbuff
);

78 
	`fÊush
(
fd
);

80 
	`m©oml£rv_brﬂdˇ°_log°rög
(
vîsi⁄
,(
uöt8_t
*)
¥ötbuff
,
Àng
);

81 
	}
}

83 
	$ch™gñog_öô
() {

84 
BackLogsNumbî
 = 
	`cfg_gëuöt32
("BACK_LOGS",50);

85 
fd
 = 
NULL
;

87 
	}
}

	@mfsmaster/changelog.h

19 #i‚de‡
_CHANGELOG_H_


20 
	#_CHANGELOG_H_


	)

22 
	~<öây≥s.h
>

24 
ch™gñog_rŸ©e
();

25 
ch™gñog
(
uöt64_t
 
vîsi⁄
,c⁄° *
f‹m©
,...);

26 
ch™gñog_öô
();

	@mfsmaster/chartsdata.c

19 
	~"c⁄fig.h
"

21 #i‡
deföed
(
HAVE_GETRUSAGE
Ë&& deföed(
HAVE_STRUCT_RUSAGE_RU_MAXRSS
)

22 
	~<sys/ty≥s.h
>

23 #ifde‡
HAVE_SYS_RESOURCE_H


24 
	~<sys/ªsour˚.h
>

26 #ifde‡
HAVE_SYS_RUSAGE_H


27 
	~<sys/rußge.h
>

29 #i‚de‡
RUSAGE_SELF


30 
	#RUSAGE_SELF
 0

	)

32 
	#MEMORY_USAGE
 1

	)

35 #i‡
deföed
(
HAVE_SETITIMER
)

36 
	~<sys/time.h
>

37 #i‚de‡
ITIMER_REAL


38 
	#ITIMER_REAL
 0

	)

40 #i‚de‡
ITIMER_VIRTUAL


41 
	#ITIMER_VIRTUAL
 1

	)

43 #i‚de‡
ITIMER_PROF


44 
	#ITIMER_PROF
 2

	)

46 
	#CPU_USAGE
 1

	)

49 
	~<time.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<uni°d.h
>

54 
	~<f˙é.h
>

55 
	~<sy¶og.h
>

56 
	~<î∫o.h
>

59 
	~"ch¨ts.h
"

60 
	~"maö.h
"

62 
	~"chunks.h
"

63 
	~"fûesy°em.h
"

64 
	~"m©o˛£rv.h
"

66 
	#CHARTS_FILENAME
 "°©s.mfs"

	)

68 
	#CHARTS_UCPU
 0

	)

69 
	#CHARTS_SCPU
 1

	)

70 
	#CHARTS_DELCHUNK
 2

	)

71 
	#CHARTS_REPLCHUNK
 3

	)

72 
	#CHARTS_STATFS
 4

	)

73 
	#CHARTS_GETATTR
 5

	)

74 
	#CHARTS_SETATTR
 6

	)

75 
	#CHARTS_LOOKUP
 7

	)

76 
	#CHARTS_MKDIR
 8

	)

77 
	#CHARTS_RMDIR
 9

	)

78 
	#CHARTS_SYMLINK
 10

	)

79 
	#CHARTS_READLINK
 11

	)

80 
	#CHARTS_MKNOD
 12

	)

81 
	#CHARTS_UNLINK
 13

	)

82 
	#CHARTS_RENAME
 14

	)

83 
	#CHARTS_LINK
 15

	)

84 
	#CHARTS_READDIR
 16

	)

85 
	#CHARTS_OPEN
 17

	)

86 
	#CHARTS_READ
 18

	)

87 
	#CHARTS_WRITE
 19

	)

88 
	#CHARTS_MEMORY
 20

	)

89 
	#CHARTS_PACKETSRCVD
 21

	)

90 
	#CHARTS_PACKETSSENT
 22

	)

91 
	#CHARTS_BYTESRCVD
 23

	)

92 
	#CHARTS_BYTESSENT
 24

	)

94 
	#CHARTS
 25

	)

97 
	#STATDEFS
 { \

98 {"u˝u" ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

99 {"s˝u" ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

100 {"dñëe" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

101 {"ª∂iˇã" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

102 {"°©fs" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

103 {"gë©å" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

104 {"£èâr" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

105 {"lookup" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

106 {"mkdú" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

107 {"rmdú" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

108 {"symlök" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

109 {"ªadlök" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

110 {"mknod" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

111 {"u∆ök" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

112 {"ª«me" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

113 {"lök" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

114 {"ªaddú" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

115 {"›í" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

116 {"ªad" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

117 {"wrôe" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

118 {"mem‹y" ,
CHARTS_MODE_MAX
,0,
CHARTS_SCALE_NONE
 , 1, 1}, \

119 {"¥cvd" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

120 {"p£¡" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,1000,60}, \

121 {"brcvd" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

122 {"b£¡" ,
CHARTS_MODE_ADD
,0,
CHARTS_SCALE_MILI
 ,8000,60}, \

123 {
NULL
 ,0 ,0,0 , 0, 0} \

124 };

	)

126 
	#CALCDEFS
 { \

127 
CHARTS_DEFS_END
 \

128 };

	)

131 
	#ESTATDEFS
 { \

132 {
	`CHARTS_DIRECT
(
CHARTS_UCPU
Ë,CHARTS_DIRECT(
CHARTS_SCPU
Ë,
CHARTS_NONE
 ,
CHARTS_MODE_ADD
,1,
CHARTS_SCALE_MICRO
, 100,60}, \

133 {
CHARTS_NONE
 ,CHARTS_NONE ,CHARTS_NONE ,0 ,0,0 , 0, 0} \

134 };

	)

136 c⁄° 
uöt32_t
 
	gˇlcdefs
[]=
CALCDEFS


137 c⁄° 
°©def
 
°©defs
[]=
STATDEFS


138 c⁄° 
e°©def
 
e°©defs
[]=
ESTATDEFS


140 #ifde‡
CPU_USAGE


141 
ôimîvÆ
 
ô_£t
;

143 #ifde‡
MEMORY_USAGE


144 
uöt64_t
 
	gmemußge
;

147 
uöt64_t
 
	$ch¨tsd©a_memußge
() {

148  
memußge
;

149 
	}
}

151 
	$ch¨tsd©a_ª‰esh
() {

152 
uöt64_t
 
d©a
[
CHARTS
];

153 
uöt32_t
 
fsd©a
[16];

154 
uöt32_t
 
i
,
dñ
,
ª∂
;

155 #ifde‡
CPU_USAGE


156 
ôimîvÆ
 
uc
,
pc
;

157 
uöt32_t
 
ucu£c
,
pcu£c
;

159 #ifde‡
MEMORY_USAGE


160 
rußge
 
ru
;

163 
i
=0 ; i<
CHARTS
 ; i++) {

164 
d©a
[
i
]=
CHARTS_NODATA
;

167 #ifde‡
CPU_USAGE


169 
	`£tôimî
(
ITIMER_VIRTUAL
,&
ô_£t
,&
uc
);

170 
	`£tôimî
(
ITIMER_PROF
,&
ô_£t
,&
pc
);

172 i‡(
uc
.
ô_vÆue
.
tv_£c
<=999) {

173 
uc
.
ô_vÆue
.
tv_£c
 = 999-uc.it_value.tv_sec;

174 
uc
.
ô_vÆue
.
tv_u£c
 = 999999-uc.it_value.tv_usec;

176 
uc
.
ô_vÆue
.
tv_£c
 = 0;

177 
uc
.
ô_vÆue
.
tv_u£c
 = 0;

179 i‡(
pc
.
ô_vÆue
.
tv_£c
<=999) {

180 
pc
.
ô_vÆue
.
tv_£c
 = 999-pc.it_value.tv_sec;

181 
pc
.
ô_vÆue
.
tv_u£c
 = 999999-pc.it_value.tv_usec;

183 
pc
.
ô_vÆue
.
tv_£c
 = 0;

184 
uc
.
ô_vÆue
.
tv_u£c
 = 0;

187 
ucu£c
 = 
uc
.
ô_vÆue
.
tv_£c
*1000000+uc.ô_vÆue.
tv_u£c
;

188 
pcu£c
 = 
pc
.
ô_vÆue
.
tv_£c
*1000000+pc.ô_vÆue.
tv_u£c
;

190 i‡(
pcu£c
>
ucu£c
) {

191 
pcu£c
-=
ucu£c
;

193 
pcu£c
=0;

195 
d©a
[
CHARTS_UCPU
] = 
ucu£c
;

196 
d©a
[
CHARTS_SCPU
] = 
pcu£c
;

200 #ifde‡
MEMORY_USAGE


201 
	`gërußge
(
RUSAGE_SELF
,&
ru
);

202 #ifde‡
__APPLE__


203 
memußge
 = 
ru
.
ru_maxrss
;

205 
memußge
 = 
ru
.
ru_maxrss
 * 1024;

207 #ifde‡
__löux__


208 i‡(
memußge
==0) {

209 
fd
 = 
	`›í
("/¥oc/£lf/°©m",
O_RDONLY
);

210 
°©buff
[1000];

211 
l
;

212 i‡(
fd
>=0) {

213 
l
 = 
	`ªad
(
fd
,
°©buff
,1000);

214 i‡(
l
<1000 &&Ü>0) {

215 
°©buff
[
l
]=0;

216 
memußge
 = 
	`°πoul
(
°©buff
,
NULL
,10)*
	`gë∑gesize
();

218 
	`˛o£
(
fd
);

222 i‡(
memußge
>0) {

223 
d©a
[
CHARTS_MEMORY
] = 
memußge
;

227 
	`chunk_°©s
(&
dñ
,&
ª∂
);

228 
d©a
[
CHARTS_DELCHUNK
]=
dñ
;

229 
d©a
[
CHARTS_REPLCHUNK
]=
ª∂
;

230 
	`fs_°©s
(
fsd©a
);

231 
i
=0 ; i<16 ; i++) {

232 
d©a
[
CHARTS_STATFS
+
i
]=
fsd©a
[i];

234 
	`m©o˛£rv_°©s
(
d©a
+
CHARTS_PACKETSRCVD
);

236 
	`ch¨ts_add
(
d©a
,
	`maö_time
()-60);

237 
	}
}

239 
	$ch¨tsd©a_ãrm
() {

240 
	`ch¨tsd©a_ª‰esh
();

241 
	`ch¨ts_°‹e
();

242 
	`ch¨ts_ãrm
();

243 
	}
}

245 
	$ch¨tsd©a_°‹e
() {

246 
	`ch¨ts_°‹e
();

247 
	}
}

249 
	$ch¨tsd©a_öô
 () {

250 #ifde‡
CPU_USAGE


251 
ôimîvÆ
 
uc
,
pc
;

253 #ifde‡
MEMORY_USAGE


254 
rußge
 
ru
;

257 #ifde‡
CPU_USAGE


258 
ô_£t
.
ô_öãrvÆ
.
tv_£c
 = 0;

259 
ô_£t
.
ô_öãrvÆ
.
tv_u£c
 = 0;

260 
ô_£t
.
ô_vÆue
.
tv_£c
 = 999;

261 
ô_£t
.
ô_vÆue
.
tv_u£c
 = 999999;

262 
	`£tôimî
(
ITIMER_VIRTUAL
,&
ô_£t
,&
uc
);

263 
	`£tôimî
(
ITIMER_PROF
,&
ô_£t
,&
pc
);

265 #ifde‡
MEMORY_USAGE


266 
	`gërußge
(
RUSAGE_SELF
,&
ru
);

267 #ifde‡
__APPLE__


268 
memußge
 = 
ru
.
ru_maxrss
;

270 
memußge
 = 
ru
.
ru_maxrss
 * 1024;

274 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
ch¨tsd©a_ª‰esh
);

275 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,3600,0,
ch¨tsd©a_°‹e
);

276 
	`maö_de°ru˘ªgi°î
(
ch¨tsd©a_ãrm
);

277  
	`ch¨ts_öô
(
ˇlcdefs
,
°©defs
,
e°©defs
,
CHARTS_FILENAME
);

278 
	}
}

	@mfsmaster/chartsdata.h

19 #i‚de‡
_CHARTSDATA_H_


20 
	#_CHARTSDATA_H_


	)

22 
	~<öây≥s.h
>

24 
uöt64_t
 
ch¨tsd©a_memußge
();

25 
ch¨tsd©a_öô
 ();

	@mfsmaster/chunks.c

19 
	~"c⁄fig.h
"

21 
	~<öây≥s.h
>

22 
	~<°dlib.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~<sy¶og.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 #ifde‡
METARESTORE


31 
	~<time.h
>

34 
	~"MFSCommuniˇti⁄.h
"

36 #i‚de‡
METARESTORE


37 
	~"maö.h
"

38 
	~"cfg.h
"

39 
	~"m©ocs£rv.h
"

40 
	~"m©o˛£rv.h
"

41 
	~"øndom.h
"

42 
	~"t›ﬁogy.h
"

45 
	~"chunks.h
"

46 
	~"fûesy°em.h
"

47 
	~"d©≠ack.h
"

48 
	~"mas£π.h
"

50 
	#USE_SLIST_BUCKETS
 1

	)

51 
	#USE_FLIST_BUCKETS
 1

	)

52 
	#USE_CHUNK_BUCKETS
 1

	)

54 
	#MINLOOPTIME
 60

	)

55 
	#MAXLOOPTIME
 7200

	)

56 
	#MAXCPS
 10000000

	)

57 
	#MINCPS
 10000

	)

59 
	#HASHSIZE
 0x100000

	)

60 
	#HASHPOS
(
chunkid
Ë(((
uöt32_t
)chunkid)&0xFFFFF)

	)

62 #i‚de‡
METARESTORE


64 íum {
	mJOBS_INIT
,
	mJOBS_EVERYLOOP
,
	mJOBS_EVERYSECOND
};

67 íum {
	mNONE
,
	mCREATE
,
	mSET_VERSION
,
	mDUPLICATE
,
	mTRUNCATE
,
	mDUPTRUNC
};

75 íum {
	mINVALID
,
	mDEL
,
	mBUSY
,
	mVALID
,
	mTDBUSY
,
	mTDVALID
};

84 
	s_¶i°
 {

85 *
	m±r
;

86 
uöt8_t
 
	mvÆid
;

87 
uöt32_t
 
	mvîsi⁄
;

90 
_¶i°
 *
	m√xt
;

91 } 
	t¶i°
;

93 #ifde‡
USE_SLIST_BUCKETS


94 
	#SLIST_BUCKET_SIZE
 5000

	)

96 
	s_¶i°_buckë
 {

97 
¶i°
 
	mbuckë
[
SLIST_BUCKET_SIZE
];

98 
uöt32_t
 
	mfú°‰ì
;

99 
_¶i°_buckë
 *
	m√xt
;

100 } 
	t¶i°_buckë
;

102 
¶i°_buckë
 *
	gsbhód
 = 
NULL
;

103 
¶i°
 *
	g¶‰ìhód
 = 
NULL
;

108 
	s_Êi°
 {

109 
uöt32_t
 
	möode
;

110 
uöt16_t
 
	mödx
;

111 
uöt8_t
 
	mgﬂl
;

112 
_Êi°
 *
	m√xt
;

113 } 
	tÊi°
;

115 #ifde‡
USE_FLIST_BUCKETS


116 
	#FLIST_BUCKET_SIZE
 5000

	)

117 
	s_Êi°_buckë
 {

118 
Êi°
 
	mbuckë
[
FLIST_BUCKET_SIZE
];

119 
uöt32_t
 
	mfú°‰ì
;

120 
_Êi°_buckë
 *
	m√xt
;

121 } 
	tÊi°_buckë
;

123 
Êi°_buckë
 *
	gfbhód
 = 
NULL
;

124 
Êi°
 *
	gÊ‰ìhód
 = 
NULL
;

127 
	schunk
 {

128 
uöt64_t
 
	mchunkid
;

129 
uöt32_t
 
	mvîsi⁄
;

130 
uöt8_t
 
	mgﬂl
;

131 #i‚de‡
METARESTORE


132 
uöt8_t
 
	mÆlvÆidc›õs
;

133 
uöt8_t
 
	mªguœrvÆidc›õs
;

134 
	m√edvîö¸ó£
:1;

135 
	möãºu±ed
:1;

136 
	m›î©i⁄
:4;

138 
uöt32_t
 
	mlockedto
;

139 #i‚de‡
METARESTORE


141 
¶i°
 *
	m¶i°hód
;

144 
Êi°
 *
	mÊi°hód
;

145 
chunk
 *
	m√xt
;

146 } 
	tchunk
;

148 #ifde‡
USE_CHUNK_BUCKETS


149 
	#CHUNK_BUCKET_SIZE
 20000

	)

150 
	s_chunk_buckë
 {

151 
chunk
 
	mbuckë
[
CHUNK_BUCKET_SIZE
];

152 
uöt32_t
 
	mfú°‰ì
;

153 
_chunk_buckë
 *
	m√xt
;

154 } 
	tchunk_buckë
;

156 
chunk_buckë
 *
	gcbhód
 = 
NULL
;

157 
chunk
 *
	gch‰ìhód
 = 
NULL
;

160 
chunk
 *
	gchunkhash
[
HASHSIZE
];

161 
uöt64_t
 
	g√xtchunkid
=1;

162 
	#LOCKTIMEOUT
 120

	)

164 
	#UNUSED_DELETE_TIMEOUT
 (86400*7)

	)

166 #i‚de‡
METARESTORE


168 
uöt32_t
 
	gRïliˇti⁄sDñayDisc⁄√˘
=3600;

169 
uöt32_t
 
	gRïliˇti⁄sDñayInô
=300;

180 
uöt32_t
 
	gMaxWrôeRïl
;

181 
uöt32_t
 
	gMaxRódRïl
;

182 
uöt32_t
 
	gMaxDñSo·Limô
;

183 
uöt32_t
 
	gMaxDñH¨dLimô
;

184 
	gTmpMaxDñFøc
;

185 
uöt32_t
 
	gTmpMaxDñ
;

186 
uöt32_t
 
	gHashSãps
;

187 
uöt32_t
 
	gHashCPS
;

194 
	#ACCEPTABLE_DIFFERENCE
 0.01

	)

196 
uöt32_t
 
	gjobshpos
;

197 
uöt32_t
 
	gjob§ebÆ™˚cou¡
;

198 
uöt32_t
 
	gjob¢‹ïbef‹e
;

200 
uöt32_t
 
	g°¨âime
;

202 
	s_job_öfo
 {

203 
uöt32_t
 
	mdñ_övÆid
;

204 
uöt32_t
 
	mdñ_unu£d
;

205 
uöt32_t
 
	mdñ_disk˛ón
;

206 
uöt32_t
 
	mdñ_ovîgﬂl
;

207 
uöt32_t
 
	mc›y_undîgﬂl
;

208 } 
	tjob_öfo
;

210 
	s_lo›_öfo
 {

211 
job_öfo
 
	md⁄e
,
	mnŸd⁄e
;

212 
uöt32_t
 
	mc›y_ªbÆ™˚
;

213 } 
	tlo›_öfo
;

215 
lo›_öfo
 
	gchunksöfo
 = {{0,0,0,0,0},{0,0,0,0,0},0};

216 
uöt32_t
 
	gchunksöfo_lo›°¨t
=0,
	gchunksöfo_lo›íd
=0;

220 
uöt64_t
 
	gœ°chunkid
=0;

221 
chunk
* 
	gœ°chunk±r
=
NULL
;

223 #i‚de‡
METARESTORE


224 
uöt32_t
 
	gchunks
;

227 #i‚de‡
METARESTORE


228 
uöt32_t
 
	gÆlchunkcou¡s
[11][11];

229 
uöt32_t
 
	gªguœrchunkcou¡s
[11][11];

232 #i‚de‡
METARESTORE


233 
uöt32_t
 
	g°©s_dñëi⁄s
=0;

234 
uöt32_t
 
	g°©s_ª∂iˇti⁄s
=0;

236 
	$chunk_°©s
(
uöt32_t
 *
dñ
,uöt32_à*
ª∂
) {

237 *
dñ
 = 
°©s_dñëi⁄s
;

238 *
ª∂
 = 
°©s_ª∂iˇti⁄s
;

239 
°©s_dñëi⁄s
 = 0;

240 
°©s_ª∂iˇti⁄s
 = 0;

241 
	}
}

245 #i‚de‡
METARESTORE


246 #ifde‡
USE_SLIST_BUCKETS


247 
ölöe
 
¶i°
* 
	$¶i°_mÆloc
() {

248 
¶i°_buckë
 *
sb
;

249 
¶i°
 *
ªt
;

250 i‡(
¶‰ìhód
) {

251 
ªt
 = 
¶‰ìhód
;

252 
¶‰ìhód
 = 
ªt
->
√xt
;

253  
ªt
;

255 i‡(
sbhód
==
NULL
 || sbhód->
fú°‰ì
==
SLIST_BUCKET_SIZE
) {

256 
sb
 = (
¶i°_buckë
*)
	`mÆloc
((slist_bucket));

257 
	`∑s£π
(
sb
);

258 
sb
->
√xt
 = 
sbhód
;

259 
sb
->
fú°‰ì
 = 0;

260 
sbhód
 = 
sb
;

262 
ªt
 = (
sbhód
->
buckë
)+(sbhód->
fú°‰ì
);

263 
sbhód
->
fú°‰ì
++;

264  
ªt
;

265 
	}
}

267 
ölöe
 
	$¶i°_‰ì
(
¶i°
 *
p
) {

268 
p
->
√xt
 = 
¶‰ìhód
;

269 
¶‰ìhód
 = 
p
;

270 
	}
}

273 
ölöe
 
¶i°
* 
	$¶i°_mÆloc
() {

274 
¶i°
 *
¶
;

275 
¶
 = (
¶i°
*)
	`mÆloc
((slist));

276 
	`∑s£π
(
¶
);

277  
¶
;

278 
	}
}

280 
ölöe
 
	$¶i°_‰ì
(
¶i°
* 
p
) {

281 
	`‰ì
(
p
);

282 
	}
}

287 #ifde‡
USE_FLIST_BUCKETS


288 
ölöe
 
Êi°
* 
	$Êi°_mÆloc
() {

289 
Êi°_buckë
 *
fb
;

290 
Êi°
 *
ªt
;

291 i‡(
Ê‰ìhód
) {

292 
ªt
 = 
Ê‰ìhód
;

293 
Ê‰ìhód
 = 
ªt
->
√xt
;

294  
ªt
;

296 i‡(
fbhód
==
NULL
 || fbhód->
fú°‰ì
==
FLIST_BUCKET_SIZE
) {

297 
fb
 = (
Êi°_buckë
*)
	`mÆloc
((flist_bucket));

298 
	`∑s£π
(
fb
);

299 
fb
->
√xt
 = 
fbhód
;

300 
fb
->
fú°‰ì
 = 0;

301 
fbhód
 = 
fb
;

303 
ªt
 = (
fbhód
->
buckë
)+(fbhód->
fú°‰ì
);

304 
fbhód
->
fú°‰ì
++;

305  
ªt
;

306 
	}
}

308 
ölöe
 
	$Êi°_‰ì
(
Êi°
 *
p
) {

309 
p
->
√xt
 = 
Ê‰ìhód
;

310 
Ê‰ìhód
 = 
p
;

311 
	}
}

314 
ölöe
 
Êi°
* 
	$Êi°_mÆloc
() {

315 
Êi°
 *
Ê
;

316 
Ê
 = (
Êi°
*)
	`mÆloc
((flist));

317 
	`∑s£π
(
Ê
);

318  
Ê
;

319 
	}
}

321 
ölöe
 
	$Êi°_‰ì
(
Êi°
* 
p
) {

322 
	`‰ì
(
p
);

323 
	}
}

327 #ifde‡
USE_CHUNK_BUCKETS


328 
ölöe
 
chunk
* 
	$chunk_mÆloc
() {

329 
chunk_buckë
 *
cb
;

330 
chunk
 *
ªt
;

331 i‡(
ch‰ìhód
) {

332 
ªt
 = 
ch‰ìhód
;

333 
ch‰ìhód
 = 
ªt
->
√xt
;

334  
ªt
;

336 i‡(
cbhód
==
NULL
 || cbhód->
fú°‰ì
==
CHUNK_BUCKET_SIZE
) {

337 
cb
 = (
chunk_buckë
*)
	`mÆloc
((chunk_bucket));

338 
	`∑s£π
(
cb
);

339 
cb
->
√xt
 = 
cbhód
;

340 
cb
->
fú°‰ì
 = 0;

341 
cbhód
 = 
cb
;

343 
ªt
 = (
cbhód
->
buckë
)+(cbhód->
fú°‰ì
);

344 
cbhód
->
fú°‰ì
++;

345  
ªt
;

346 
	}
}

348 
ölöe
 
	$chunk_‰ì
(
chunk
 *
p
) {

349 
p
->
√xt
 = 
ch‰ìhód
;

350 
ch‰ìhód
 = 
p
;

351 
	}
}

354 
ölöe
 
chunk
* 
	$chunk_mÆloc
() {

355 
chunk
 *
cu
;

356 
cu
 = (
chunk
*)
	`mÆloc
((chunk));

357 
	`∑s£π
(
cu
);

358  
cu
;

359 
	}
}

361 
ölöe
 
	$chunk_‰ì
(
chunk
* 
p
) {

362 
	`‰ì
(
p
);

363 
	}
}

416 
chunk
* 
	$chunk_√w
(
uöt64_t
 
chunkid
) {

417 
uöt32_t
 
chunkpos
 = 
	`HASHPOS
(
chunkid
);

418 
chunk
 *
√wchunk
;

419 
√wchunk
 = 
	`chunk_mÆloc
();

420 #i‚de‡
METARESTORE


421 
chunks
++;

422 
Ælchunkcou¡s
[0][0]++;

423 
ªguœrchunkcou¡s
[0][0]++;

425 
√wchunk
->
√xt
 = 
chunkhash
[
chunkpos
];

426 
chunkhash
[
chunkpos
] = 
√wchunk
;

427 
√wchunk
->
chunkid
 = chunkid;

428 
√wchunk
->
vîsi⁄
 = 0;

429 
√wchunk
->
gﬂl
 = 0;

430 
√wchunk
->
lockedto
 = 0;

431 #i‚de‡
METARESTORE


432 
√wchunk
->
ÆlvÆidc›õs
 = 0;

433 
√wchunk
->
ªguœrvÆidc›õs
 = 0;

434 
√wchunk
->
√edvîö¸ó£
 = 1;

435 
√wchunk
->
öãºu±ed
 = 0;

436 
√wchunk
->
›î©i⁄
 = 
NONE
;

437 
√wchunk
->
¶i°hód
 = 
NULL
;

439 
√wchunk
->
Êi°hód
 = 
NULL
;

440 
œ°chunkid
 = 
chunkid
;

441 
œ°chunk±r
 = 
√wchunk
;

442  
√wchunk
;

443 
	}
}

445 
chunk
* 
	$chunk_föd
(
uöt64_t
 
chunkid
) {

446 
uöt32_t
 
chunkpos
 = 
	`HASHPOS
(
chunkid
);

447 
chunk
 *
chunkô
;

448 i‡(
œ°chunkid
==
chunkid
) {

449  
œ°chunk±r
;

451 
chunkô
 = 
chunkhash
[
chunkpos
] ; chunkô ; chunkô = chunkô->
√xt
 ) {

452 i‡(
chunkô
->
chunkid
 == chunkid) {

453 
œ°chunkid
 = 
chunkid
;

454 
œ°chunk±r
 = 
chunkô
;

455  
chunkô
;

458  
NULL
;

459 
	}
}

461 #i‚de‡
METARESTORE


462 
	$chunk_dñëe
(
chunk
* 
c
) {

465 i‡(
œ°chunk±r
==
c
) {

466 
œ°chunkid
=0;

467 
œ°chunk±r
=
NULL
;

481 
chunks
--;

482 
Ælchunkcou¡s
[
c
->
gﬂl
][0]--;

483 
ªguœrchunkcou¡s
[
c
->
gﬂl
][0]--;

484 
	`chunk_‰ì
(
c
);

485 
	}
}

487 
ölöe
 
	$chunk_°©e_ch™ge
(
uöt8_t
 
ﬁdgﬂl
,uöt8_à
√wgﬂl
,uöt8_à
ﬁdavc
,uöt8_à
√wavc
,uöt8_à
ﬁdrvc
,uöt8_à
√wrvc
) {

488 i‡(
ﬁdgﬂl
>9) {

489 
ﬁdgﬂl
=10;

491 i‡(
√wgﬂl
>9) {

492 
√wgﬂl
=10;

494 i‡(
ﬁdavc
>9) {

495 
ﬁdavc
=10;

497 i‡(
√wavc
>9) {

498 
√wavc
=10;

500 i‡(
ﬁdrvc
>9) {

501 
ﬁdrvc
=10;

503 i‡(
√wrvc
>9) {

504 
√wrvc
=10;

506 
Ælchunkcou¡s
[
ﬁdgﬂl
][
ﬁdavc
]--;

507 
Ælchunkcou¡s
[
√wgﬂl
][
√wavc
]++;

508 
ªguœrchunkcou¡s
[
ﬁdgﬂl
][
ﬁdrvc
]--;

509 
ªguœrchunkcou¡s
[
√wgﬂl
][
√wrvc
]++;

510 
	}
}

512 
uöt32_t
 
	$chunk_cou¡
() {

513  
chunks
;

514 
	}
}

516 
	$chunk_öfo
(
uöt32_t
 *
Ælchunks
,uöt32_à*
Ælc›õs
,uöt32_à*
ªguœrvÆidc›õs
) {

517 
uöt32_t
 
i
,
j
,
ag
,
rg
;

518 *
Ælchunks
 = 
chunks
;

519 *
Ælc›õs
 = 0;

520 *
ªguœrvÆidc›õs
 = 0;

521 
i
=1 ; i<=10 ; i++) {

522 
ag
=0;

523 
rg
=0;

524 
j
=0 ; j<=10 ; j++) {

525 
ag
 +
Ælchunkcou¡s
[
j
][
i
];

526 
rg
 +
ªguœrchunkcou¡s
[
j
][
i
];

528 *
Ælc›õs
 +
ag
*
i
;

529 *
ªguœrvÆidc›õs
 +
rg
*
i
;

531 
	}
}

533 
uöt32_t
 
	$chunk_gë_missög_cou¡
() {

534 
uöt32_t
 
ªs
=0;

535 
uöt8_t
 
i
;

537 
i
=1 ; i<=10 ; i++) {

538 
ªs
+=
Ælchunkcou¡s
[
i
][0];

540  
ªs
;

541 
	}
}

543 
	$chunk_°‹e_chunkcou¡îs
(
uöt8_t
 *
buff
,uöt8_à
m©rixid
) {

544 
uöt8_t
 
i
,
j
;

545 i‡(
m©rixid
==0) {

546 
i
=0 ; i<=10 ; i++) {

547 
j
=0 ; j<=10 ; j++) {

548 
	`put32bô
(&
buff
,
Ælchunkcou¡s
[
i
][
j
]);

551 } i‡(
m©rixid
==1) {

552 
i
=0 ; i<=10 ; i++) {

553 
j
=0 ; j<=10 ; j++) {

554 
	`put32bô
(&
buff
,
ªguœrchunkcou¡s
[
i
][
j
]);

558 
	`mem£t
(
buff
,0,11*11*4);

560 
	}
}

562 
	$chunk_ª‰esh_gﬂl
(
chunk
* 
c
) {

563 
Êi°
 *
f
;

564 
uöt8_t
 
ﬁdgﬂl
 = 
c
->
gﬂl
;

565 
c
->
gﬂl
 = 0;

566 
f
=
c
->
Êi°hód
 ; f ; f=f->
√xt
) {

567 i‡(
f
->
gﬂl
 > 
c
->goal) {

568 
c
->
gﬂl
 = 
f
->goal;

571 i‡(
c
->
gﬂl
!=
ﬁdgﬂl
) {

572 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
c
->
gﬂl
,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

574 
	}
}

813 
	$chunk_£t_fûe_gﬂl
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
) {

814 
chunk
 *
c
;

815 
Êi°
 *
f
;

816 #i‚de‡
METARESTORE


817 
uöt8_t
 
ﬁdgﬂl
;

819 
c
 = 
	`chunk_föd
(
chunkid
);

820 i‡(
c
==
NULL
) {

821  
ERROR_NOCHUNK
;

823 #i‚de‡
METARESTORE


824 
ﬁdgﬂl
 = 
c
->
gﬂl
;

826 
c
->
gﬂl
 = 0;

827 
f
=
c
->
Êi°hód
 ; f ; f=f->
√xt
) {

828 i‡(
f
->
öode
 =öodê&& f->
ödx
 == indx) {

829 
f
->
gﬂl
 = goal;

831 i‡(
f
->
gﬂl
 > 
c
->goal) {

832 
c
->
gﬂl
 = 
f
->goal;

835 #i‚de‡
METARESTORE


836 i‡(
ﬁdgﬂl
!=
c
->
gﬂl
) {

837 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
c
->
gﬂl
,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

840  
STATUS_OK
;

841 
	}
}

843 
	$chunk_dñëe_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
) {

844 
chunk
 *
c
;

845 
Êi°
 *
f
,**
Â
;

846 #i‚de‡
METARESTORE


847 
uöt8_t
 
ﬁdgﬂl
;

849 
uöt32_t
 
i
;

850 
c
 = 
	`chunk_föd
(
chunkid
);

851 i‡(
c
==
NULL
) {

852  
ERROR_NOCHUNK
;

854 
i
=0;

855 #i‚de‡
METARESTORE


856 
ﬁdgﬂl
 = 
c
->
gﬂl
;

858 
c
->
gﬂl
 = 0;

859 
Â
 = &(
c
->
Êi°hód
);

860 (
f
=*
Â
)) {

861 i‡(
f
->
öode
 =öodê&& f->
ödx
 == indx) {

862 *
Â
 = 
f
->
√xt
;

863 
	`Êi°_‰ì
(
f
);

864 
i
=1;

866 i‡(
f
->
gﬂl
 > 
c
->goal) {

867 
c
->
gﬂl
 = 
f
->goal;

869 
Â
 = &(
f
->
√xt
);

872 i‡(
i
==0) {

873 
	`sy¶og
(
LOG_WARNING
,"(dñëêfûeË£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")",
chunkid
,
öode
,
ödx
);

875 #i‚de‡
METARESTORE


876 i‡(
ﬁdgﬂl
!=
c
->
gﬂl
) {

877 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
c
->
gﬂl
,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

880  
STATUS_OK
;

881 
	}
}

883 
	$chunk_add_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
) {

884 
chunk
 *
c
;

885 
Êi°
 *
f
;

886 #i‚de‡
METARESTORE


887 
uöt8_t
 
ﬁdgﬂl
;

889 
uöt32_t
 
i
;

890 
c
 = 
	`chunk_föd
(
chunkid
);

891 i‡(
c
==
NULL
) {

892  
ERROR_NOCHUNK
;

894 
i
=0;

895 #i‚de‡
METARESTORE


896 
ﬁdgﬂl
 = 
c
->
gﬂl
;

898 
c
->
gﬂl
 = 0;

899 
f
=
c
->
Êi°hód
 ; f ; f=f->
√xt
) {

900 i‡(
f
->
öode
 =öodê&& f->
ödx
 == indx) {

901 
f
->
gﬂl
 = goal;

902 
i
=1;

904 i‡(
f
->
gﬂl
 > 
c
->goal) {

905 
c
->
gﬂl
 = 
f
->goal;

908 i‡(
i
==0) {

909 
f
 = 
	`Êi°_mÆloc
();

910 
f
->
öode
 = inode;

911 
f
->
ödx
 = indx;

912 
f
->
gﬂl
 = goal;

913 
f
->
√xt
 = 
c
->
Êi°hód
;

914 
c
->
Êi°hód
 = 
f
;

915 i‡(
gﬂl
 > 
c
->goal) {

916 
c
->
gﬂl
 = goal;

919 
	`sy¶og
(
LOG_WARNING
,"◊dd fûeË£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")",
chunkid
,
öode
,
ödx
);

921 #i‚de‡
METARESTORE


922 i‡(
ﬁdgﬂl
!=
c
->
gﬂl
) {

923 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
c
->
gﬂl
,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

926  
STATUS_OK
;

927 
	}
}

967 
	$chunk_u∆ock
(
uöt64_t
 
chunkid
) {

968 
chunk
 *
c
;

969 
c
 = 
	`chunk_föd
(
chunkid
);

970 i‡(
c
==
NULL
) {

971  
ERROR_NOCHUNK
;

973 
c
->
lockedto
=0;

974  
STATUS_OK
;

975 
	}
}

977 #i‚de‡
METARESTORE


979 
	$chunk_gë_vÆidc›õs
(
uöt64_t
 
chunkid
,
uöt8_t
 *
vc›õs
) {

980 
chunk
 *
c
;

983 *
vc›õs
 = 0;

984 
c
 = 
	`chunk_föd
(
chunkid
);

985 i‡(
c
==
NULL
) {

986  
ERROR_NOCHUNK
;

996 *
vc›õs
 = 
c
->
ÆlvÆidc›õs
;

997  
STATUS_OK
;

998 
	}
}

1002 #i‚de‡
METARESTORE


1003 
	$chunk_mu…i_modify
(
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
,uöt8_à*
›Êag
) {

1004 * 
±rs
[65536];

1005 
uöt16_t
 
£rvcou¡
;

1006 
¶i°
 *
os
,*
s
;

1007 
uöt8_t
 
ﬁdgﬂl
;

1009 
	$chunk_mu…i_modify
(
uöt32_t
 
ts
,
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
,uöt8_à
›Êag
) {

1011 
uöt32_t
 
i
;

1012 
chunk
 *
oc
,*
c
;

1013 
Êi°
 *
f
,**
Â
;

1015 i‡(
ochunkid
==0) {

1017 #i‚de‡
METARESTORE


1018 
£rvcou¡
 = 
	`m©ocs£rv_gë£rvîs_wøndom
(
±rs
,
gﬂl
);

1019 i‡(
£rvcou¡
==0) {

1020 
uöt16_t
 
uscou¡
,
tscou¡
;

1021 
möußge
,
maxußge
;

1022 
	`m©ocs£rv_ußgedif„ªn˚
(&
möußge
,&
maxußge
,&
uscou¡
,&
tscou¡
);

1023 i‡(
uscou¡
>0 && (
uöt32_t
)(
	`maö_time
())>(
°¨âime
+600)) {

1024  
ERROR_NOSPACE
;

1026  
ERROR_NOCHUNKSERVERS
;

1030 
c
 = 
	`chunk_√w
(
√xtchunkid
++);

1031 
c
->
vîsi⁄
 = 1;

1032 
c
->
gﬂl
 = goal;

1033 #i‚de‡
METARESTORE


1034 
c
->
öãºu±ed
 = 0;

1035 
c
->
›î©i⁄
 = 
CREATE
;

1037 
c
->
Êi°hód
 = 
	`Êi°_mÆloc
();

1038 
c
->
Êi°hód
->
öode
 = inode;

1039 
c
->
Êi°hód
->
ödx
 = indx;

1040 
c
->
Êi°hód
->
gﬂl
 = goal;

1041 
c
->
Êi°hód
->
√xt
 = 
NULL
;

1042 #i‚de‡
METARESTORE


1043 i‡(
£rvcou¡
<
gﬂl
) {

1044 
c
->
ÆlvÆidc›õs
 = 
£rvcou¡
;

1045 
c
->
ªguœrvÆidc›õs
 = 
£rvcou¡
;

1047 
c
->
ÆlvÆidc›õs
 = 
gﬂl
;

1048 
c
->
ªguœrvÆidc›õs
 = 
gﬂl
;

1050 
i
=0 ; i<
c
->
ÆlvÆidc›õs
 ; i++) {

1051 
s
 = 
	`¶i°_mÆloc
();

1052 
s
->
±r
 = 
±rs
[
i
];

1053 
s
->
vÆid
 = 
BUSY
;

1054 
s
->
vîsi⁄
 = 
c
->version;

1055 
s
->
√xt
 = 
c
->
¶i°hód
;

1056 
c
->
¶i°hód
 = 
s
;

1057 
	`m©ocs£rv_£nd_¸óãchunk
(
s
->
±r
,
c
->
chunkid
,c->
vîsi⁄
);

1059 
	`chunk_°©e_ch™ge
(0,
c
->
gﬂl
,0,c->
ÆlvÆidc›õs
,0,c->
ªguœrvÆidc›õs
);

1060 *
›Êag
=1;

1062 *
nchunkid
 = 
c
->
chunkid
;

1064 
c
 = 
NULL
;

1065 
oc
 = 
	`chunk_föd
(
ochunkid
);

1066 i‡(
oc
==
NULL
) {

1067  
ERROR_NOCHUNK
;

1069 #i‚de‡
METARESTORE


1070 i‡(
oc
->
lockedto
>=(
uöt32_t
)
	`maö_time
()) {

1071  
ERROR_LOCKED
;

1074 
Â
 = &(
oc
->
Êi°hód
);

1075 
i
=1;

1076 (
f
=*
Â
)) {

1077 i‡(
f
->
öode
==öodê&& f->
ödx
==indx) {

1078 
f
->
gﬂl
 = goal;

1081 
Â
 = &(
f
->
√xt
);

1082 
i
=0;

1084 i‡(
i
 && 
f
 && f->
√xt
==
NULL
) {

1085 *
nchunkid
 = 
ochunkid
;

1086 
c
 = 
oc
;

1087 #i‚de‡
METARESTORE


1089 i‡(
c
->
›î©i⁄
!=
NONE
) {

1090  
ERROR_CHUNKBUSY
;

1092 i‡(
c
->
√edvîö¸ó£
) {

1093 
i
=0;

1094 
s
=
c
->
¶i°hód
 ;†; s=s->
√xt
) {

1095 i‡(
s
->
vÆid
!=
INVALID
 && s->vÆid!=
DEL
) {

1096 i‡(
s
->
vÆid
==
TDVALID
 || s->vÆid==
TDBUSY
) {

1097 
s
->
vÆid
 = 
TDBUSY
;

1099 
s
->
vÆid
 = 
BUSY
;

1101 
s
->
vîsi⁄
 = 
c
->version+1;

1102 
	`m©ocs£rv_£nd_£tchunkvîsi⁄
(
s
->
±r
,
ochunkid
,
c
->
vîsi⁄
+1,c->version);

1103 
i
++;

1106 i‡(
i
>0) {

1107 
c
->
öãºu±ed
 = 0;

1108 
c
->
›î©i⁄
 = 
SET_VERSION
;

1109 
c
->
vîsi⁄
++;

1110 *
›Êag
=1;

1112  
ERROR_CHUNKLOST
;

1115 *
›Êag
=0;

1118 i‡(
›Êag
) {

1119 
c
->
vîsi⁄
++;

1123 i‡(
f
==
NULL
) {

1124 #i‚de‡
METARESTORE


1125 
	`sy¶og
(
LOG_WARNING
,"£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")",
ochunkid
,
öode
,
ödx
);

1127 
	`¥ötf
("£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")\n",
ochunkid
,
öode
,
ödx
);

1129  
ERROR_CHUNKLOST
;

1131 #i‚de‡
METARESTORE


1132 
i
=0;

1133 
os
=
oc
->
¶i°hód
 ;o†; os=os->
√xt
) {

1134 i‡(
os
->
vÆid
!=
INVALID
 && os->vÆid!=
DEL
) {

1135 i‡(
c
==
NULL
) {

1137 
c
 = 
	`chunk_√w
(
√xtchunkid
++);

1138 
c
->
vîsi⁄
 = 1;

1139 
c
->
gﬂl
 = goal;

1140 #i‚de‡
METARESTORE


1141 
c
->
öãºu±ed
 = 0;

1142 
c
->
›î©i⁄
 = 
DUPLICATE
;

1145 
c
->
Êi°hód
 = 
f
;

1146 *
Â
 = 
f
->
√xt
;

1147 
f
->
√xt
 = 
NULL
;

1148 #i‚de‡
METARESTORE


1150 
s
 = 
	`¶i°_mÆloc
();

1151 
s
->
±r
 = 
os
->ptr;

1152 
s
->
vÆid
 = 
BUSY
;

1153 
s
->
vîsi⁄
 = 
c
->version;

1154 
s
->
√xt
 = 
c
->
¶i°hód
;

1155 
c
->
¶i°hód
 = 
s
;

1156 
c
->
ÆlvÆidc›õs
++;

1157 
c
->
ªguœrvÆidc›õs
++;

1158 
	`m©ocs£rv_£nd_du∂iˇãchunk
(
s
->
±r
,
c
->
chunkid
,c->
vîsi⁄
,
oc
->chunkid,oc->version);

1159 
i
++;

1162 i‡(
c
!=
NULL
) {

1163 
	`chunk_°©e_ch™ge
(0,
c
->
gﬂl
,0,c->
ÆlvÆidc›õs
,0,c->
ªguœrvÆidc›õs
);

1165 i‡(
i
>0) {

1167 *
nchunkid
 = 
c
->
chunkid
;

1168 #i‚de‡
METARESTORE


1169 
ﬁdgﬂl
 = 
oc
->
gﬂl
;

1171 
oc
->
gﬂl
 = 0;

1172 
f
=
oc
->
Êi°hód
 ; f ; f=f->
√xt
) {

1173 i‡(
f
->
gﬂl
 > 
oc
->goal) {

1174 
oc
->
gﬂl
 = 
f
->goal;

1177 #i‚de‡
METARESTORE


1178 i‡(
ﬁdgﬂl
!=
oc
->
gﬂl
) {

1179 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
oc
->
gﬂl
,oc->
ÆlvÆidc›õs
,oc->ÆlvÆidc›õs,oc->
ªguœrvÆidc›õs
,oc->regularvalidcopies);

1181 *
›Êag
=1;

1183  
ERROR_CHUNKLOST
;

1189 #i‚de‡
METARESTORE


1190 
c
->
lockedto
=(
uöt32_t
)
	`maö_time
()+
LOCKTIMEOUT
;

1192 
c
->
lockedto
=
ts
+
LOCKTIMEOUT
;

1194  
STATUS_OK
;

1195 
	}
}

1197 #i‚de‡
METARESTORE


1198 
	$chunk_mu…i_åunˇã
(
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,
uöt32_t
 
Àngth
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
) {

1199 
¶i°
 *
os
,*
s
;

1200 
uöt8_t
 
ﬁdgﬂl
;

1202 
	$chunk_mu…i_åunˇã
(
uöt32_t
 
ts
,
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
) {

1204 
chunk
 *
oc
,*
c
;

1205 
Êi°
 *
f
,**
Â
;

1206 
uöt32_t
 
i
;

1208 
c
=
NULL
;

1209 
oc
 = 
	`chunk_föd
(
ochunkid
);

1210 i‡(
oc
==
NULL
) {

1211  
ERROR_NOCHUNK
;

1213 #i‚de‡
METARESTORE


1214 i‡(
oc
->
lockedto
>=(
uöt32_t
)
	`maö_time
()) {

1215  
ERROR_LOCKED
;

1218 
Â
 = &(
oc
->
Êi°hód
);

1219 
i
=1;

1220 (
f
=*
Â
)) {

1221 i‡(
f
->
öode
==öodê&& f->
ödx
==indx) {

1222 
f
->
gﬂl
 = goal;

1225 
Â
 = &(
f
->
√xt
);

1226 
i
=0;

1228 i‡(
i
 && 
f
 && f->
√xt
==
NULL
) {

1229 *
nchunkid
 = 
ochunkid
;

1230 
c
 = 
oc
;

1231 #i‚de‡
METARESTORE


1232 i‡(
c
->
›î©i⁄
!=
NONE
) {

1233  
ERROR_CHUNKBUSY
;

1235 
i
=0;

1236 
s
=
c
->
¶i°hód
 ;†; s=s->
√xt
) {

1237 i‡(
s
->
vÆid
!=
INVALID
 && s->vÆid!=
DEL
) {

1238 i‡(
s
->
vÆid
==
TDVALID
 || s->vÆid==
TDBUSY
) {

1239 
s
->
vÆid
 = 
TDBUSY
;

1241 
s
->
vÆid
 = 
BUSY
;

1243 
s
->
vîsi⁄
 = 
c
->version+1;

1244 
	`m©ocs£rv_£nd_åunˇãchunk
(
s
->
±r
,
ochunkid
,
Àngth
,
c
->
vîsi⁄
+1,c->version);

1245 
i
++;

1248 i‡(
i
>0) {

1249 
c
->
öãºu±ed
 = 0;

1250 
c
->
›î©i⁄
 = 
TRUNCATE
;

1251 
c
->
vîsi⁄
++;

1253  
ERROR_CHUNKLOST
;

1256 
c
->
vîsi⁄
++;

1259 i‡(
f
==
NULL
) {

1260 #i‚de‡
METARESTORE


1261 
	`sy¶og
(
LOG_WARNING
,"£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")",
ochunkid
,
öode
,
ödx
);

1263 
	`¥ötf
("£riou†°ru˘uª inc⁄si°ícy: (chunkid:%016"
PRIX64
" ; inode:%"
PRIu32
" ; index:%"
PRIu16
")\n",
ochunkid
,
öode
,
ödx
);

1265  
ERROR_CHUNKLOST
;

1267 #i‚de‡
METARESTORE


1268 
i
=0;

1269 
os
=
oc
->
¶i°hód
 ;o†; os=os->
√xt
) {

1270 i‡(
os
->
vÆid
!=
INVALID
 && os->vÆid!=
DEL
) {

1271 i‡(
c
==
NULL
) {

1273 
c
 = 
	`chunk_√w
(
√xtchunkid
++);

1274 
c
->
vîsi⁄
 = 1;

1275 
c
->
gﬂl
 = goal;

1276 #i‚de‡
METARESTORE


1277 
c
->
öãºu±ed
 = 0;

1278 
c
->
›î©i⁄
 = 
DUPTRUNC
;

1281 
c
->
Êi°hód
 = 
f
;

1282 *
Â
 = 
f
->
√xt
;

1283 
f
->
√xt
 = 
NULL
;

1284 #i‚de‡
METARESTORE


1286 
s
 = 
	`¶i°_mÆloc
();

1287 
s
->
±r
 = 
os
->ptr;

1288 
s
->
vÆid
 = 
BUSY
;

1289 
s
->
vîsi⁄
 = 
c
->version;

1290 
s
->
√xt
 = 
c
->
¶i°hód
;

1291 
c
->
¶i°hód
 = 
s
;

1292 
c
->
ÆlvÆidc›õs
++;

1293 
c
->
ªguœrvÆidc›õs
++;

1294 
	`m©ocs£rv_£nd_du±runcchunk
(
s
->
±r
,
c
->
chunkid
,c->
vîsi⁄
,
oc
->chunkid,oc->vîsi⁄,
Àngth
);

1295 
i
++;

1298 i‡(
c
!=
NULL
) {

1299 
	`chunk_°©e_ch™ge
(0,
c
->
gﬂl
,0,c->
ÆlvÆidc›õs
,0,c->
ªguœrvÆidc›õs
);

1301 i‡(
i
>0) {

1303 *
nchunkid
 = 
c
->
chunkid
;

1304 #i‚de‡
METARESTORE


1305 
ﬁdgﬂl
 = 
oc
->
gﬂl
;

1307 
oc
->
gﬂl
 = 0;

1308 
f
=
oc
->
Êi°hód
 ; f ; f=f->
√xt
) {

1309 i‡(
f
->
gﬂl
 > 
oc
->goal) {

1310 
oc
->
gﬂl
 = 
f
->goal;

1313 #i‚de‡
METARESTORE


1314 i‡(
ﬁdgﬂl
!=
oc
->
gﬂl
) {

1315 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
oc
->
gﬂl
,oc->
ÆlvÆidc›õs
,oc->ÆlvÆidc›õs,oc->
ªguœrvÆidc›õs
,oc->regularvalidcopies);

1318  
ERROR_CHUNKLOST
;

1323 #i‚de‡
METARESTORE


1324 
c
->
lockedto
=(
uöt32_t
)
	`maö_time
()+
LOCKTIMEOUT
;

1326 
c
->
lockedto
=
ts
+
LOCKTIMEOUT
;

1328  
STATUS_OK
;

1329 
	}
}

1390 #i‚de‡
METARESTORE


1391 
	$chunk_ª∑ú
(
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt64_t
 
ochunkid
,uöt32_à*
nvîsi⁄
) {

1392 
uöt32_t
 
be°vîsi⁄
;

1393 
uöt8_t
 
ﬁdgﬂl
;

1394 
chunk
 *
c
;

1395 
Êi°
 *
f
,**
Â
;

1396 
¶i°
 *
s
;

1398 *
nvîsi⁄
=0;

1399 i‡(
ochunkid
==0) {

1403 
c
 = 
	`chunk_föd
(
ochunkid
);

1404 i‡(
c
==
NULL
) {

1407 i‡(
c
->
lockedto
>=(
uöt32_t
)
	`maö_time
()) {

1410 
be°vîsi⁄
 = 0;

1411 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1412 i‡(
s
->
vÆid
 =
VALID
 || s->vÆid =
TDVALID
 || s->vÆid =
BUSY
 || s->vÆid =
TDBUSY
) {

1415 i‡(
s
->
vÆid
 =
INVALID
) {

1416 i‡(
s
->
vîsi⁄
>=
be°vîsi⁄
) {

1417 
be°vîsi⁄
 = 
s
->
vîsi⁄
;

1421 i‡(
be°vîsi⁄
==0) {

1422 
ﬁdgﬂl
 = 
c
->
gﬂl
;

1423 
c
->
gﬂl
 = 0;

1424 
Â
 = &(
c
->
Êi°hód
);

1425 (
f
=*
Â
)) {

1426 i‡(
f
->
öode
 =öodê&& f->
ödx
 == indx) {

1427 *
Â
 = 
f
->
√xt
;

1428 
	`Êi°_‰ì
(
f
);

1430 i‡(
f
->
gﬂl
 > 
c
->goal) {

1431 
c
->
gﬂl
 = 
f
->goal;

1433 
Â
 = &(
f
->
√xt
);

1436 i‡(
ﬁdgﬂl
!=
c
->
gﬂl
) {

1437 
	`chunk_°©e_ch™ge
(
ﬁdgﬂl
,
c
->
gﬂl
,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1441 i‡(
c
->
ÆlvÆidc›õs
>0 || c->
ªguœrvÆidc›õs
>0) {

1442 i‡(
c
->
ÆlvÆidc›õs
>0) {

1443 
	`sy¶og
(
LOG_WARNING
,"wr⁄gáŒ vÆid c›õ†cou¡î - (cou¡î vÆue: %u, should be: 0Ë- fixed",
c
->
ÆlvÆidc›õs
);

1445 i‡(
c
->
ªguœrvÆidc›õs
>0) {

1446 
	`sy¶og
(
LOG_WARNING
,"wr⁄gÑeguœ∏vÆid c›õ†cou¡î - (cou¡î vÆue: %u, should be: 0Ë- fixed",
c
->
ªguœrvÆidc›õs
);

1448 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,0,c->
ªguœrvÆidc›õs
,0);

1449 
c
->
ÆlvÆidc›õs
 = 0;

1450 
c
->
ªguœrvÆidc›õs
 = 0;

1452 
c
->
vîsi⁄
 = 
be°vîsi⁄
;

1453 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1454 i‡(
s
->
vÆid
 =
INVALID
 && s->
vîsi⁄
==
be°vîsi⁄
) {

1455 
s
->
vÆid
 = 
VALID
;

1456 
c
->
ÆlvÆidc›õs
++;

1457 
c
->
ªguœrvÆidc›õs
++;

1460 *
nvîsi⁄
 = 
be°vîsi⁄
;

1461 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,0,c->
ÆlvÆidc›õs
,0,c->
ªguœrvÆidc›õs
);

1462 
c
->
√edvîö¸ó£
=1;

1464 
	}
}

1466 
	$chunk_£t_vîsi⁄
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

1467 
chunk
 *
c
;

1468 
c
 = 
	`chunk_föd
(
chunkid
);

1469 i‡(
c
==
NULL
) {

1470  
ERROR_NOCHUNK
;

1472 
c
->
vîsi⁄
 = version;

1473  
STATUS_OK
;

1474 
	}
}

1477 #i‚de‡
METARESTORE


1478 
	$chunk_emîgícy_ö¸ó£_vîsi⁄
(
chunk
 *
c
) {

1479 
¶i°
 *
s
;

1480 
uöt32_t
 
i
;

1481 
i
=0;

1482 
s
=
c
->
¶i°hód
 ;†; s=s->
√xt
) {

1483 i‡(
s
->
vÆid
!=
INVALID
 && s->vÆid!=
DEL
) {

1484 i‡(
s
->
vÆid
==
TDVALID
 || s->vÆid==
TDBUSY
) {

1485 
s
->
vÆid
 = 
TDBUSY
;

1487 
s
->
vÆid
 = 
BUSY
;

1489 
s
->
vîsi⁄
 = 
c
->version+1;

1490 
	`m©ocs£rv_£nd_£tchunkvîsi⁄
(
s
->
±r
,
c
->
chunkid
,c->
vîsi⁄
+1,c->version);

1491 
i
++;

1494 i‡(
i
>0) {

1495 
c
->
öãºu±ed
 = 0;

1496 
c
->
›î©i⁄
 = 
SET_VERSION
;

1497 
c
->
vîsi⁄
++;

1499 
	`m©o˛£rv_chunk_°©us
(
c
->
chunkid
,
ERROR_CHUNKLOST
);

1501 
	`fs_öcvîsi⁄
(
c
->
chunkid
);

1502 
	}
}

1504 
	$chunk_ö¸ó£_vîsi⁄
(
uöt64_t
 
chunkid
) {

1505 
chunk
 *
c
;

1506 
c
 = 
	`chunk_föd
(
chunkid
);

1507 i‡(
c
==
NULL
) {

1508  
ERROR_NOCHUNK
;

1510 
c
->
vîsi⁄
++;

1511  
STATUS_OK
;

1512 
	}
}

1517 #i‚de‡
METARESTORE


1519 
	slocs‹t
 {

1520 
uöt32_t
 
	mù
;

1521 
uöt16_t
 
	mp‹t
;

1522 
uöt32_t
 
	mdi°
;

1523 
uöt32_t
 
	m∫d
;

1524 } 
	tlocs‹t
;

1526 
	$chunk_locs‹t_cmp
(c⁄° *
Ø
,c⁄° *
bb
) {

1527 c⁄° 
locs‹t
 *
a
 = (c⁄°Üocs‹t*)
Ø
;

1528 c⁄° 
locs‹t
 *
b
 = (c⁄°Üocs‹t*)
bb
;

1529 i‡(
a
->
di°
<
b
->dist) {

1531 } i‡(
a
->
di°
>
b
->dist) {

1533 } i‡(
a
->
∫d
<
b
->rnd) {

1535 } i‡(
a
->
∫d
>
b
->rnd) {

1539 
	}
}

1541 
	$chunk_gëvîsi⁄™dloˇti⁄s
(
uöt64_t
 
chunkid
,
uöt32_t
 
cuù
,uöt32_à*
vîsi⁄
,
uöt8_t
 *
cou¡
,uöt8_à
loc
[100*6]) {

1542 
chunk
 *
c
;

1543 
¶i°
 *
s
;

1544 
uöt8_t
 
i
;

1545 
uöt8_t
 
˙t
;

1546 
uöt8_t
 *
w±r
;

1547 
locs‹t
 
l°ab
[100];

1549 
c
 = 
	`chunk_föd
(
chunkid
);

1550 i‡(
c
==
NULL
) {

1551  
ERROR_NOCHUNK
;

1553 *
vîsi⁄
 = 
c
->version;

1554 
˙t
=0;

1555 
s
=
c
->
¶i°hód
 ;†; s=s->
√xt
) {

1556 i‡(
s
->
vÆid
!=
INVALID
 && s->vÆid!=
DEL
) {

1557 i‡(
˙t
<100 && 
	`m©ocs£rv_gëloˇti⁄
(
s
->
±r
,&(
l°ab
[˙t].
ù
),&÷°ab[˙t].
p‹t
))==0) {

1558 
l°ab
[
˙t
].
di°
 = 
	`t›ﬁogy_di°™˚
÷°ab[˙t].
ù
,
cuù
);

1559 
l°ab
[
˙t
].
∫d
 = 
	`∫du32
();

1560 
˙t
++;

1565 
	`qs‹t
(
l°ab
,
˙t
,(
locs‹t
),
chunk_locs‹t_cmp
);

1566 
w±r
 = 
loc
;

1567 
i
=0 ; i<
˙t
 ; i++) {

1568 
	`put32bô
(&
w±r
,
l°ab
[
i
].
ù
);

1569 
	`put16bô
(&
w±r
,
l°ab
[
i
].
p‹t
);

1582 *
cou¡
 = 
˙t
;

1583  
STATUS_OK
;

1584 
	}
}

1588 
	$chunk_£rvî_has_chunk
(*
±r
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

1589 
chunk
 *
c
;

1590 
¶i°
 *
s
;

1591 
c
 = 
	`chunk_föd
(
chunkid
);

1592 i‡(
c
==
NULL
) {

1594 i‡(
chunkid
>=
√xtchunkid
) {

1595 
√xtchunkid
=
chunkid
+1;

1597 
c
 = 
	`chunk_√w
(
chunkid
);

1598 
c
->
vîsi⁄
 = version;

1599 
c
->
lockedto
 = (
uöt32_t
)
	`maö_time
()+
UNUSED_DELETE_TIMEOUT
;

1601 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1602 i‡(
s
->
±r
==ptr) {

1606 
s
 = 
	`¶i°_mÆloc
();

1607 
s
->
±r
 =Ötr;

1608 i‡(
c
->
vîsi⁄
!=(version&0x7FFFFFFF)) {

1609 
s
->
vÆid
 = 
INVALID
;

1610 
s
->
vîsi⁄
 = version&0x7FFFFFFF;

1612 i‡(
vîsi⁄
&0x80000000) {

1613 
s
->
vÆid
=
TDVALID
;

1614 
s
->
vîsi⁄
 = 
c
->version;

1615 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs+1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1616 
c
->
ÆlvÆidc›õs
++;

1618 
s
->
vÆid
=
VALID
;

1619 
s
->
vîsi⁄
 = 
c
->version;

1620 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs+1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies+1);

1621 
c
->
ÆlvÆidc›õs
++;

1622 
c
->
ªguœrvÆidc›õs
++;

1625 
s
->
√xt
 = 
c
->
¶i°hód
;

1626 
c
->
¶i°hód
 = 
s
;

1627 
	}
}

1629 
	$chunk_damaged
(*
±r
,
uöt64_t
 
chunkid
) {

1630 
chunk
 *
c
;

1631 
¶i°
 *
s
;

1632 
c
 = 
	`chunk_föd
(
chunkid
);

1633 i‡(
c
==
NULL
) {

1635 i‡(
chunkid
>=
√xtchunkid
) {

1636 
√xtchunkid
=
chunkid
+1;

1638 
c
 = 
	`chunk_√w
(
chunkid
);

1639 
c
->
vîsi⁄
 = 0;

1641 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1642 i‡(
s
->
±r
==ptr) {

1643 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1644 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1645 
c
->
ÆlvÆidc›õs
--;

1647 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
VALID
) {

1648 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1649 
c
->
ÆlvÆidc›õs
--;

1650 
c
->
ªguœrvÆidc›õs
--;

1652 
s
->
vÆid
 = 
INVALID
;

1653 
s
->
vîsi⁄
 = 0;

1654 
c
->
√edvîö¸ó£
=1;

1658 
s
 = 
	`¶i°_mÆloc
();

1659 
s
->
±r
 =Ötr;

1660 
s
->
vÆid
 = 
INVALID
;

1661 
s
->
vîsi⁄
 = 0;

1662 
s
->
√xt
 = 
c
->
¶i°hód
;

1663 
c
->
√edvîö¸ó£
=1;

1664 
c
->
¶i°hód
 = 
s
;

1665 
	}
}

1667 
	$chunk_lo°
(*
±r
,
uöt64_t
 
chunkid
) {

1668 
chunk
 *
c
;

1669 
¶i°
 **
•å
,*
s
;

1670 
c
 = 
	`chunk_föd
(
chunkid
);

1671 i‡(
c
==
NULL
) {

1674 
•å
=&(
c
->
¶i°hód
);

1675 (
s
=*
•å
)) {

1676 i‡(
s
->
±r
==ptr) {

1677 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1678 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1679 
c
->
ÆlvÆidc›õs
--;

1681 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
VALID
) {

1682 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1683 
c
->
ÆlvÆidc›õs
--;

1684 
c
->
ªguœrvÆidc›õs
--;

1686 
c
->
√edvîö¸ó£
=1;

1687 *
•å
 = 
s
->
√xt
;

1688 
	`¶i°_‰ì
(
s
);

1690 
•å
 = &(
s
->
√xt
);

1693 
	}
}

1695 
	$chunk_£rvî_disc⁄√˘ed
(*
±r
) {

1696 
chunk
 *
c
;

1697 
¶i°
 *
s
,**
°
;

1698 
uöt32_t
 
i
;

1699 
uöt8_t
 
vÆid
,
vs
;

1702 
i
=0 ; i<
HASHSIZE
 ; i++) {

1703 
c
=
chunkhash
[
i
] ; c ; c=c->
√xt
 ) {

1704 
°
 = &(
c
->
¶i°hód
);

1705 *
°
) {

1706 
s
 = *
°
;

1707 i‡(
s
->
±r
 ==Ötr) {

1708 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1709 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1710 
c
->
ÆlvÆidc›õs
--;

1712 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
VALID
) {

1713 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1714 
c
->
ÆlvÆidc›õs
--;

1715 
c
->
ªguœrvÆidc›õs
--;

1717 
c
->
√edvîö¸ó£
=1;

1718 *
°
 = 
s
->
√xt
;

1719 
	`¶i°_‰ì
(
s
);

1721 
°
 = &(
s
->
√xt
);

1724 
vs
=0;

1725 
vÆid
=1;

1726 i‡(
c
->
›î©i⁄
!=
NONE
) {

1727 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1728 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
TDBUSY
) {

1729 
vÆid
=0;

1731 i‡(
s
->
vÆid
==
VALID
 || s->vÆid==
TDVALID
) {

1732 
vs
++;

1735 i‡(
vÆid
) {

1736 i‡(
vs
>0) {

1737 
	`chunk_emîgícy_ö¸ó£_vîsi⁄
(
c
);

1740 
	`m©o˛£rv_chunk_°©us
(
c
->
chunkid
,
ERROR_NOTDONE
);

1741 
c
->
›î©i⁄
=
NONE
;

1744 
c
->
öãºu±ed
 = 1;

1749 
	`fs_cs_disc⁄√˘ed
();

1750 
	}
}

1752 
	$chunk_gŸ_dñëe_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1753 
chunk
 *
c
;

1754 
¶i°
 *
s
,**
°
;

1755 
c
 = 
	`chunk_föd
(
chunkid
);

1756 i‡(
c
==
NULL
) {

1759 
°
 = &(
c
->
¶i°hód
);

1760 *
°
) {

1761 
s
 = *
°
;

1762 i‡(
s
->
±r
 ==Ötr) {

1763 i‡(
s
->
vÆid
!=
DEL
) {

1764 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1765 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1766 
c
->
ÆlvÆidc›õs
--;

1768 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
VALID
) {

1769 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1770 
c
->
ÆlvÆidc›õs
--;

1771 
c
->
ªguœrvÆidc›õs
--;

1773 
	`sy¶og
(
LOG_WARNING
,"got unexpected delete status");

1775 *
°
 = 
s
->
√xt
;

1776 
	`¶i°_‰ì
(
s
);

1778 
°
 = &(
s
->
√xt
);

1781 i‡(
°©us
!=0) {

1784 
	}
}

1786 
	$chunk_gŸ_ª∂iˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
°©us
) {

1787 
chunk
 *
c
;

1788 
¶i°
 *
s
;

1789 
c
 = 
	`chunk_föd
(
chunkid
);

1790 i‡(
c
==
NULL
) {

1793 i‡(
°©us
!=0) {

1796 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1797 i‡(
s
->
±r
 ==Ötr) {

1798 
	`sy¶og
(
LOG_WARNING
,"gŸÑïliˇti⁄ sètu†‰om sîvî which had hadÅh© chunk bef‹ê(chunk:%016"
PRIX64
"_%08"
PRIX32
")",
chunkid
,
vîsi⁄
);

1799 i‡(
s
->
vÆid
==
VALID
 && 
vîsi⁄
!=
c
->version) {

1800 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1801 
c
->
ÆlvÆidc›õs
--;

1802 
c
->
ªguœrvÆidc›õs
--;

1803 
s
->
vÆid
 = 
INVALID
;

1804 
s
->
vîsi⁄
 = version;

1809 
s
 = 
	`¶i°_mÆloc
();

1810 
s
->
±r
 =Ötr;

1811 i‡(
c
->
lockedto
>=(
uöt32_t
)
	`maö_time
(Ë|| 
vîsi⁄
!=c->version) {

1812 
s
->
vÆid
 = 
INVALID
;

1814 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs+1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies+1);

1815 
c
->
ÆlvÆidc›õs
++;

1816 
c
->
ªguœrvÆidc›õs
++;

1817 
s
->
vÆid
 = 
VALID
;

1819 
s
->
vîsi⁄
 = version;

1820 
s
->
√xt
 = 
c
->
¶i°hód
;

1821 
c
->
¶i°hód
 = 
s
;

1822 
	}
}

1825 
	$chunk_›î©i⁄_°©us
(
chunk
 *
c
,
uöt8_t
 
°©us
,*
±r
) {

1826 
uöt8_t
 
vÆid
,
vs
;

1827 
¶i°
 *
s
;

1843 
vs
=0;

1844 
vÆid
=1;

1845 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

1846 i‡(
s
->
±r
 ==Ötr) {

1847 i‡(
°©us
!=0) {

1848 
c
->
öãºu±ed
 = 1;

1849 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1850 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

1851 
c
->
ÆlvÆidc›õs
--;

1853 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
VALID
) {

1854 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

1855 
c
->
ÆlvÆidc›õs
--;

1856 
c
->
ªguœrvÆidc›õs
--;

1858 
s
->
vÆid
=
INVALID
;

1859 
s
->
vîsi⁄
 = 0;

1861 i‡(
s
->
vÆid
==
TDBUSY
 || s->vÆid==
TDVALID
) {

1862 
s
->
vÆid
=
TDVALID
;

1864 
s
->
vÆid
=
VALID
;

1868 i‡(
s
->
vÆid
==
BUSY
 || s->vÆid==
TDBUSY
) {

1869 
vÆid
=0;

1871 i‡(
s
->
vÆid
==
VALID
 || s->vÆid==
TDVALID
) {

1872 
vs
++;

1875 i‡(
vÆid
) {

1876 i‡(
vs
>0) {

1877 i‡(
c
->
öãºu±ed
) {

1878 
	`chunk_emîgícy_ö¸ó£_vîsi⁄
(
c
);

1880 
	`m©o˛£rv_chunk_°©us
(
c
->
chunkid
,
STATUS_OK
);

1881 
c
->
›î©i⁄
=
NONE
;

1882 
c
->
√edvîö¸ó£
 = 0;

1885 
	`m©o˛£rv_chunk_°©us
(
c
->
chunkid
,
ERROR_NOTDONE
);

1886 
c
->
›î©i⁄
=
NONE
;

1889 
	}
}

1891 
	$chunk_gŸ_chunk›_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1892 
chunk
 *
c
;

1893 
c
 = 
	`chunk_föd
(
chunkid
);

1894 i‡(
c
==
NULL
) {

1897 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1898 
	}
}

1900 
	$chunk_gŸ_¸óã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1901 
chunk
 *
c
;

1902 
c
 = 
	`chunk_föd
(
chunkid
);

1903 i‡(
c
==
NULL
) {

1906 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1907 
	}
}

1909 
	$chunk_gŸ_du∂iˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1910 
chunk
 *
c
;

1911 
c
 = 
	`chunk_föd
(
chunkid
);

1912 i‡(
c
==
NULL
) {

1915 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1916 
	}
}

1918 
	$chunk_gŸ_£tvîsi⁄_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1919 
chunk
 *
c
;

1920 
c
 = 
	`chunk_föd
(
chunkid
);

1921 i‡(
c
==
NULL
) {

1924 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1925 
	}
}

1927 
	$chunk_gŸ_åunˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1928 
chunk
 *
c
;

1929 
c
 = 
	`chunk_föd
(
chunkid
);

1930 i‡(
c
==
NULL
) {

1933 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1934 
	}
}

1936 
	$chunk_gŸ_du±runc_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

1937 
chunk
 *
c
;

1938 
c
 = 
	`chunk_föd
(
chunkid
);

1939 i‡(
c
==
NULL
) {

1942 
	`chunk_›î©i⁄_°©us
(
c
,
°©us
,
±r
);

1943 
	}
}

1949 
	$chunk_°‹e_öfo
(
uöt8_t
 *
buff
) {

1950 
	`put32bô
(&
buff
,
chunksöfo_lo›°¨t
);

1951 
	`put32bô
(&
buff
,
chunksöfo_lo›íd
);

1952 
	`put32bô
(&
buff
,
chunksöfo
.
d⁄e
.
dñ_övÆid
);

1953 
	`put32bô
(&
buff
,
chunksöfo
.
nŸd⁄e
.
dñ_övÆid
);

1954 
	`put32bô
(&
buff
,
chunksöfo
.
d⁄e
.
dñ_unu£d
);

1955 
	`put32bô
(&
buff
,
chunksöfo
.
nŸd⁄e
.
dñ_unu£d
);

1956 
	`put32bô
(&
buff
,
chunksöfo
.
d⁄e
.
dñ_disk˛ón
);

1957 
	`put32bô
(&
buff
,
chunksöfo
.
nŸd⁄e
.
dñ_disk˛ón
);

1958 
	`put32bô
(&
buff
,
chunksöfo
.
d⁄e
.
dñ_ovîgﬂl
);

1959 
	`put32bô
(&
buff
,
chunksöfo
.
nŸd⁄e
.
dñ_ovîgﬂl
);

1960 
	`put32bô
(&
buff
,
chunksöfo
.
d⁄e
.
c›y_undîgﬂl
);

1961 
	`put32bô
(&
buff
,
chunksöfo
.
nŸd⁄e
.
c›y_undîgﬂl
);

1962 
	`put32bô
(&
buff
,
chunksöfo
.
c›y_ªbÆ™˚
);

1963 
	}
}

1967 
	$chunk_do_jobs
(
chunk
 *
c
,
uöt16_t
 
scou¡
,
möußge
,
maxußge
) {

1968 
¶i°
 *
s
;

1969 * 
±rs
[65535];

1970 
uöt16_t
 
£rvcou¡
;

1971 
uöt32_t
 
mö
,
max
;

1972 * 
Ωås
[65536];

1973 
uöt16_t
 
r£rvcou¡
;

1974 *
§˝å
;

1977 
uöt16_t
 
i
;

1978 
uöt32_t
 
vc
,
tdc
,
ivc
,
bc
,
tdb
,
dc
;

1979 
lo›_öfo
 
öf‹ec
;

1980 
uöt32_t
 
dñnŸd⁄e
;

1981 
uöt32_t
 
dñd⁄e
;

1982 
uöt32_t
 
¥evtodñëecou¡
;

1983 
uöt32_t
 
dñlo›˙t
;

1985 i‡(
c
==
NULL
) {

1986 i‡(
scou¡
==
JOBS_INIT
) {

1987 
dñnŸd⁄e
 = 0;

1988 
dñd⁄e
 = 0;

1989 
¥evtodñëecou¡
 = 0;

1990 
dñlo›˙t
 = 0;

1991 
	`mem£t
(&
öf‹ec
,0,(
lo›_öfo
));

1992 } i‡(
scou¡
==
JOBS_EVERYLOOP
) {

1993 
dñlo›˙t
++;

1994 i‡(
dñlo›˙t
>=16) {

1995 
uöt32_t
 
todñëecou¡
 = 
dñd⁄e
+
dñnŸd⁄e
;

1996 
dñlo›˙t
=0;

1997 i‡((
dñnŸd⁄e
 > 
dñd⁄e
Ë&& (
todñëecou¡
 > 
¥evtodñëecou¡
)) {

1998 
TmpMaxDñFøc
 *= 1.5;

1999 i‡(
TmpMaxDñFøc
>
MaxDñH¨dLimô
) {

2000 
	`sy¶og
(
LOG_NOTICE
,"DEL_LIMIT h¨dÜimô (%"
PRIu32
"Öî sîvîËªached",
MaxDñH¨dLimô
);

2001 
TmpMaxDñFøc
=
MaxDñH¨dLimô
;

2003 
TmpMaxDñ
 = 
TmpMaxDñFøc
;

2004 
	`sy¶og
(
LOG_NOTICE
,"DEL_LIMITÅemp‹¨y in¸ó£dÅo: %"
PRIu32
"Öî sîvî",
TmpMaxDñ
);

2006 i‡((
todñëecou¡
 < 
¥evtodñëecou¡
Ë&& (
TmpMaxDñFøc
 > 
MaxDñSo·Limô
)) {

2007 
TmpMaxDñFøc
 /= 1.5;

2008 i‡(
TmpMaxDñFøc
<
MaxDñSo·Limô
) {

2009 
	`sy¶og
(
LOG_NOTICE
,"DEL_LIMIT backÅÿso·Üimô (%"
PRIu32
"Öî sîvî)",
MaxDñSo·Limô
);

2010 
TmpMaxDñFøc
 = 
MaxDñSo·Limô
;

2012 
TmpMaxDñ
 = 
TmpMaxDñFøc
;

2013 
	`sy¶og
(
LOG_NOTICE
,"DEL_LIMIT de¸ó£d backÅo: %"
PRIu32
"Öî sîvî",
TmpMaxDñ
);

2015 
¥evtodñëecou¡
 = 
todñëecou¡
;

2016 
dñnŸd⁄e
 = 0;

2017 
dñd⁄e
 = 0;

2019 
chunksöfo
 = 
öf‹ec
;

2020 
	`mem£t
(&
öf‹ec
,0,(inforec));

2021 
chunksöfo_lo›°¨t
 = 
chunksöfo_lo›íd
;

2022 
chunksöfo_lo›íd
 = 
	`maö_time
();

2023 } i‡(
scou¡
==
JOBS_EVERYSECOND
) {

2024 
£rvcou¡
=0;

2029 
vc
=
tdc
=
ivc
=
bc
=
tdb
=
dc
=0;

2030 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

2031 
s
->
vÆid
) {

2032 
INVALID
:

2033 
ivc
++;

2035 
TDVALID
:

2036 
tdc
++;

2038 
VALID
:

2039 
vc
++;

2041 
TDBUSY
:

2042 
tdb
++;

2044 
BUSY
:

2045 
bc
++;

2047 
DEL
:

2048 
dc
++;

2052 i‡(
c
->
ÆlvÆidc›õs
!=
vc
+
tdc
+
bc
+
tdb
) {

2053 
	`sy¶og
(
LOG_WARNING
,"wr⁄gáŒ vÆid c›õ†cou¡î - (cou¡î vÆue: %u, should be: %uË- fixed",
c
->
ÆlvÆidc›õs
,
vc
+
tdc
+
bc
+
tdb
);

2054 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,
vc
+
tdc
+
bc
+
tdb
,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

2055 
c
->
ÆlvÆidc›õs
 = 
vc
+
tdc
+
bc
+
tdb
;

2057 i‡(
c
->
ªguœrvÆidc›õs
!=
vc
+
bc
) {

2058 
	`sy¶og
(
LOG_WARNING
,"wr⁄gÑeguœ∏vÆid c›õ†cou¡î - (cou¡î vÆue: %u, should be: %uË- fixed",
c
->
ªguœrvÆidc›õs
,
vc
+
bc
);

2059 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs,c->
ªguœrvÆidc›õs
,
vc
+
bc
);

2060 
c
->
ªguœrvÆidc›õs
 = 
vc
+
bc
;

2066 i‡(
tdc
+
vc
+
tdb
+
bc
==0 && 
ivc
>0 && 
c
->
Êi°hód
) {

2067 
	`sy¶og
(
LOG_WARNING
,"chunk %016"
PRIX64
" ha†⁄ly invÆid c›õ†(%"
PRIu32
"Ë-ÖÀa£Ñïaú iàm™uÆly",
c
->
chunkid
,
ivc
);

2068 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

2069 
	`sy¶og
(
LOG_NOTICE
,"chunk %016"
PRIX64
"_%08"
PRIX32
" - invÆid c›y o¿(%†- vî:%08"PRIX32")",
c
->
chunkid
,c->
vîsi⁄
,
	`m©ocs£rv_gë°rù
(
s
->
±r
),s->version);

2076 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

2077 i‡(
	`m©ocs£rv_dñëi⁄_cou¡î
(
s
->
±r
)<
TmpMaxDñ
) {

2078 i‡(
s
->
vÆid
==
INVALID
 || s->vÆid==
DEL
) {

2079 i‡(
s
->
vÆid
==
DEL
) {

2080 
	`sy¶og
(
LOG_WARNING
,"chunk hasn't been deleted sinceÖreviousÜoop -Ñetry");

2082 
s
->
vÆid
 = 
DEL
;

2083 
°©s_dñëi⁄s
++;

2084 
	`m©ocs£rv_£nd_dñëechunk
(
s
->
±r
,
c
->
chunkid
,0);

2085 
öf‹ec
.
d⁄e
.
dñ_övÆid
++;

2086 
dñd⁄e
++;

2087 
dc
++;

2088 
ivc
--;

2091 i‡(
s
->
vÆid
==
INVALID
) {

2092 
öf‹ec
.
nŸd⁄e
.
dñ_övÆid
++;

2093 
dñnŸd⁄e
++;

2123 i‡(
c
->
›î©i⁄
!=
NONE
 || (c->
lockedto
>=(
uöt32_t
)
	`maö_time
())) {

2128 i‡((
bc
+
tdb
)>0) {

2129 
	`sy¶og
(
LOG_WARNING
,"chunk %016"
PRIX64
" ha†u√x≥˘ed BUSY c›õs",
c
->
chunkid
);

2134 i‡(
c
->
Êi°hód
==
NULL
) {

2136 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

2137 i‡(
	`m©ocs£rv_dñëi⁄_cou¡î
(
s
->
±r
)<
TmpMaxDñ
) {

2138 i‡(
s
->
vÆid
==
VALID
 || s->vÆid==
TDVALID
) {

2139 i‡(
s
->
vÆid
==
TDVALID
) {

2140 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

2141 
c
->
ÆlvÆidc›õs
--;

2143 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

2144 
c
->
ÆlvÆidc›õs
--;

2145 
c
->
ªguœrvÆidc›õs
--;

2147 
c
->
√edvîö¸ó£
=1;

2148 
s
->
vÆid
 = 
DEL
;

2149 
°©s_dñëi⁄s
++;

2150 
	`m©ocs£rv_£nd_dñëechunk
(
s
->
±r
,
c
->
chunkid
,c->
vîsi⁄
);

2151 
öf‹ec
.
d⁄e
.
dñ_unu£d
++;

2152 
dñd⁄e
++;

2155 i‡(
s
->
vÆid
==
VALID
 || s->vÆid==
TDVALID
) {

2156 
öf‹ec
.
nŸd⁄e
.
dñ_unu£d
++;

2157 
dñnŸd⁄e
++;

2194 i‡(
vc
 > 
c
->
gﬂl
) {

2195 
uöt8_t
 
¥evd⁄e
;

2197 i‡(
£rvcou¡
==0) {

2198 
£rvcou¡
 = 
	`m©ocs£rv_gë£rvîs_‹dîed
(
±rs
,
ACCEPTABLE_DIFFERENCE
/2.0,&
mö
,&
max
);

2200 
öf‹ec
.
nŸd⁄e
.
dñ_ovîgﬂl
+=(
vc
-(
c
->
gﬂl
));

2201 
dñnŸd⁄e
+=(
vc
-(
c
->
gﬂl
));

2202 
¥evd⁄e
 = 1;

2203 
i
=0 ; i<
£rvcou¡
 && 
vc
>
c
->
gﬂl
 && 
¥evd⁄e
; i++) {

2204 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
±rs
[
£rvcou¡
-1-
i
] ; s=s->
√xt
) {}

2205 i‡(
s
 && s->
vÆid
==
VALID
) {

2206 i‡(
	`m©ocs£rv_dñëi⁄_cou¡î
(
s
->
±r
)<
TmpMaxDñ
) {

2207 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies-1);

2208 
c
->
ÆlvÆidc›õs
--;

2209 
c
->
ªguœrvÆidc›õs
--;

2210 
c
->
√edvîö¸ó£
=1;

2211 
s
->
vÆid
 = 
DEL
;

2212 
°©s_dñëi⁄s
++;

2213 
	`m©ocs£rv_£nd_dñëechunk
(
s
->
±r
,
c
->
chunkid
,0);

2214 
öf‹ec
.
d⁄e
.
dñ_ovîgﬂl
++;

2215 
öf‹ec
.
nŸd⁄e
.
dñ_ovîgﬂl
--;

2216 
dñd⁄e
++;

2217 
dñnŸd⁄e
--;

2218 
vc
--;

2219 
dc
++;

2221 
¥evd⁄e
=0;

2229 i‡(
vc
+
tdc
>=
scou¡
 && vc<
c
->
gﬂl
 &&Ådc>0 && vc+tdc>1) {

2230 
uöt8_t
 
¥evd⁄e
;

2232 
¥evd⁄e
 = 0;

2233 
s
=
c
->
¶i°hód
 ; s && 
¥evd⁄e
==0 ; s=s->
√xt
) {

2234 i‡(
s
->
vÆid
==
TDVALID
) {

2235 i‡(
	`m©ocs£rv_dñëi⁄_cou¡î
(
s
->
±r
)<
TmpMaxDñ
) {

2236 
	`chunk_°©e_ch™ge
(
c
->
gﬂl
,c->gﬂl,c->
ÆlvÆidc›õs
,c->ÆlvÆidc›õs-1,c->
ªguœrvÆidc›õs
,c->regularvalidcopies);

2237 
c
->
ÆlvÆidc›õs
--;

2238 
c
->
√edvîö¸ó£
=1;

2239 
s
->
vÆid
 = 
DEL
;

2240 
°©s_dñëi⁄s
++;

2241 
	`m©ocs£rv_£nd_dñëechunk
(
s
->
±r
,
c
->
chunkid
,0);

2242 
öf‹ec
.
d⁄e
.
dñ_disk˛ón
++;

2243 
tdc
--;

2244 
dc
++;

2245 
¥evd⁄e
 = 1;

2247 
öf‹ec
.
nŸd⁄e
.
dñ_disk˛ón
++;

2255 i‡(
c
->
gﬂl
 > 
vc
 && vc+
tdc
 > 0) {

2256 i‡(
job¢‹ïbef‹e
<(
uöt32_t
)
	`maö_time
()) {

2257 
uöt32_t
 
rgvc
,
rgtdc
;

2258 
r£rvcou¡
 = 
	`m©ocs£rv_gë£rvîs_Às§ïl
(
Ωås
,
MaxWrôeRïl
);

2259 
rgvc
=0;

2260 
rgtdc
=0;

2261 
s
=
c
->
¶i°hód
 ; s ; s=s->
√xt
) {

2262 i‡(
	`m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(
s
->
±r
)<
MaxRódRïl
) {

2263 i‡(
s
->
vÆid
==
VALID
) {

2264 
rgvc
++;

2265 } i‡(
s
->
vÆid
==
TDVALID
) {

2266 
rgtdc
++;

2270 i‡(
rgvc
+
rgtdc
>0 && 
r£rvcou¡
>0) {

2271 
i
=0 ; i<
r£rvcou¡
 ; i++) {

2272 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
Ωås
[
i
] ; s=s->
√xt
) {}

2273 i‡(!
s
) {

2274 
uöt32_t
 
r
;

2275 i‡(
rgvc
>0) {

2276 
r
 = 1+
	`∫du32_ønged
(
rgvc
);

2277 
§˝å
 = 
NULL
;

2278 
s
=
c
->
¶i°hód
 ; s && 
r
>0 ; s=s->
√xt
) {

2279 i‡(
	`m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(
s
->
±r
)<
MaxRódRïl
 && s->
vÆid
==
VALID
) {

2280 
r
--;

2281 
§˝å
 = 
s
->
±r
;

2285 
r
 = 1+
	`∫du32_ønged
(
rgtdc
);

2286 
§˝å
 = 
NULL
;

2287 
s
=
c
->
¶i°hód
 ; s && 
r
>0 ; s=s->
√xt
) {

2288 i‡(
	`m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(
s
->
±r
)<
MaxRódRïl
 && s->
vÆid
==
TDVALID
) {

2289 
r
--;

2290 
§˝å
 = 
s
->
±r
;

2294 i‡(
§˝å
) {

2295 
°©s_ª∂iˇti⁄s
++;

2297 
	`m©ocs£rv_£nd_ª∂iˇãchunk
(
Ωås
[
i
],
c
->
chunkid
,c->
vîsi⁄
,
§˝å
);

2298 
c
->
√edvîö¸ó£
=1;

2299 
öf‹ec
.
d⁄e
.
c›y_undîgﬂl
++;

2306 
öf‹ec
.
nŸd⁄e
.
c›y_undîgﬂl
++;

2353 i‡(
chunksöfo
.
nŸd⁄e
.
c›y_undîgﬂl
>0 && chunksöfo.
d⁄e
.copy_undergoal>0) {

2358 i‡(
c
->
gﬂl
 >
vc
 && vc+
tdc
>0 && (
maxußge
-
möußge
)>
ACCEPTABLE_DIFFERENCE
) {

2359 i‡(
£rvcou¡
==0) {

2360 
£rvcou¡
 = 
	`m©ocs£rv_gë£rvîs_‹dîed
(
±rs
,
ACCEPTABLE_DIFFERENCE
/2.0,&
mö
,&
max
);

2362 i‡(
mö
>0 || 
max
>0) {

2363 *
§c£rv
=
NULL
;

2364 *
d°£rv
=
NULL
;

2365 i‡(
max
>0) {

2366 
i
=0 ; i<
max
 && 
§c£rv
==
NULL
 ; i++) {

2367 i‡(
	`m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(
±rs
[
£rvcou¡
-1-
i
])<
MaxRódRïl
) {

2368 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
±rs
[
£rvcou¡
-1-
i
] ; s=s->
√xt
 ) {}

2369 i‡(
s
 && (s->
vÆid
==
VALID
 || s->vÆid==
TDVALID
)) {

2370 
§c£rv
=
s
->
±r
;

2375 
i
=0 ; i<(
£rvcou¡
-
mö
Ë&& 
§c£rv
==
NULL
 ; i++) {

2376 i‡(
	`m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(
±rs
[
£rvcou¡
-1-
i
])<
MaxRódRïl
) {

2377 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
±rs
[
£rvcou¡
-1-
i
] ; s=s->
√xt
 ) {}

2378 i‡(
s
 && (s->
vÆid
==
VALID
 || s->vÆid==
TDVALID
)) {

2379 
§c£rv
=
s
->
±r
;

2384 i‡(
§c£rv
!=
NULL
) {

2385 i‡(
mö
>0) {

2386 
i
=0 ; i<
mö
 && 
d°£rv
==
NULL
 ; i++) {

2387 i‡(
	`m©ocs£rv_ª∂iˇti⁄_wrôe_cou¡î
(
±rs
[
i
])<
MaxWrôeRïl
) {

2388 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
±rs
[
i
] ; s=s->
√xt
 ) {}

2389 i‡(
s
==
NULL
) {

2390 
d°£rv
=
±rs
[
i
];

2395 
i
=0 ; i<
£rvcou¡
-
max
 && 
d°£rv
==
NULL
 ; i++) {

2396 i‡(
	`m©ocs£rv_ª∂iˇti⁄_wrôe_cou¡î
(
±rs
[
i
])<
MaxWrôeRïl
) {

2397 
s
=
c
->
¶i°hód
 ; s && s->
±r
!=
±rs
[
i
] ; s=s->
√xt
 ) {}

2398 i‡(
s
==
NULL
) {

2399 
d°£rv
=
±rs
[
i
];

2404 i‡(
d°£rv
!=
NULL
) {

2405 
°©s_ª∂iˇti⁄s
++;

2407 
	`m©ocs£rv_£nd_ª∂iˇãchunk
(
d°£rv
,
c
->
chunkid
,c->
vîsi⁄
,
§c£rv
);

2408 
c
->
√edvîö¸ó£
=1;

2409 
öf‹ec
.
c›y_ªbÆ™˚
++;

2447 
	}
}

2449 
	$chunk_jobs_maö
() {

2450 
uöt32_t
 
i
,
l
,
lc
,
r
;

2451 
uöt16_t
 
uscou¡
,
tscou¡
;

2452 
uöt16_t
 
œ°tscou¡
=0;

2453 
uöt16_t
 
maxtscou¡
=0;

2454 
möußge
,
maxußge
;

2455 
chunk
 *
c
,**
˝
;

2457 i‡(
°¨âime
+
Rïliˇti⁄sDñayInô
>
	`maö_time
()) {

2461 
	`m©ocs£rv_ußgedif„ªn˚
(&
möußge
,&
maxußge
,&
uscou¡
,&
tscou¡
);

2463 i‡(
tscou¡
<
œ°tscou¡
) {

2464 
job¢‹ïbef‹e
 = 
	`maö_time
()+
Rïliˇti⁄sDñayDisc⁄√˘
;

2465 } i‡(
tscou¡
>
œ°tscou¡
) {

2466 i‡(
tscou¡
>=
maxtscou¡
) {

2467 
maxtscou¡
 = 
tscou¡
;

2468 
job¢‹ïbef‹e
 = 
	`maö_time
();

2470 } i‡(
tscou¡
<
maxtscou¡
 && (
uöt32_t
)
	`maö_time
()>
job¢‹ïbef‹e
) {

2471 
maxtscou¡
 = 
tscou¡
;

2473 
œ°tscou¡
 = 
tscou¡
;

2475 i‡(
möußge
>
maxußge
) {

2479 
	`chunk_do_jobs
(
NULL
,
JOBS_EVERYSECOND
,0.0,0.0);

2480 
lc
 = 0;

2481 
i
=0 ; i<
HashSãps
 && 
lc
<
HashCPS
 ; i++) {

2482 i‡(
jobshpos
==0) {

2483 
	`chunk_do_jobs
(
NULL
,
JOBS_EVERYLOOP
,0.0,0.0);

2486 
l
=0;

2487 
˝
 = &(
chunkhash
[
jobshpos
]);

2488 (
c
=*
˝
)!=
NULL
) {

2489 i‡(
c
->
Êi°hód
==
NULL
 && c->
¶i°hód
==NULL) {

2490 *
˝
 = (
c
->
√xt
);

2491 
	`chunk_dñëe
(
c
);

2493 
˝
 = &(
c
->
√xt
);

2494 
l
++;

2495 
lc
++;

2498 i‡(
l
>0) {

2499 
r
 = 
	`∫du32_ønged
(
l
);

2500 
l
=0;

2502 
c
=
chunkhash
[
jobshpos
] ; c ; c=c->
√xt
) {

2503 i‡(
l
>=
r
) {

2504 
	`chunk_do_jobs
(
c
,
uscou¡
,
möußge
,
maxußge
);

2506 
l
++;

2508 
l
=0;

2509 
c
=
chunkhash
[
jobshpos
] ; 
l
<
r
 && c ; c=c->
√xt
) {

2510 
	`chunk_do_jobs
(
c
,
uscou¡
,
möußge
,
maxußge
);

2511 
l
++;

2517 
jobshpos
+=123;

2518 
jobshpos
%=
HASHSIZE
;

2520 
	}
}

2527 
	#CHUNKFSIZE
 16

	)

2528 
	#CHUNKCNT
 1000

	)

2582 #ifde‡
METARESTORE


2584 
	$chunk_dump
() {

2585 
chunk
 *
c
;

2586 
uöt32_t
 
i
,
lockedto
,
now
;

2587 
now
 = 
	`time
(
NULL
);

2589 
i
=0 ; i<
HASHSIZE
 ; i++) {

2590 
c
=
chunkhash
[
i
] ; c ; c=c->
√xt
) {

2591 
lockedto
 = 
c
->lockedto;

2592 i‡(
lockedto
<
now
) {

2593 
lockedto
 = 0;

2595 
	`¥ötf
("*|i:%016"
PRIX64
"|v:%08"
PRIX32
"|g:%"
PRIu8
"|t:%10"
PRIu32
"\n",
c
->
chunkid
,c->
vîsi⁄
,c->
gﬂl
,c->
lockedto
);

2598 
	}
}

2602 
	$chunk_lﬂd
(
FILE
 *
fd
) {

2603 
uöt8_t
 
hdr
[8];

2604 
uöt8_t
 
lﬂdbuff
[
CHUNKFSIZE
];

2605 c⁄° 
uöt8_t
 *
±r
;

2606 
öt32_t
 
r
;

2607 
chunk
 *
c
;

2609 
uöt64_t
 
chunkid
;

2610 
uöt32_t
 
vîsi⁄
,
lockedto
;

2612 #i‚de‡
METARESTORE


2613 
chunks
=0;

2615 i‡(
	`‰ód
(
hdr
,1,8,
fd
)!=8) {

2618 
±r
 = 
hdr
;

2619 
√xtchunkid
 = 
	`gë64bô
(&
±r
);

2621 
r
 = 
	`‰ód
(
lﬂdbuff
,1,
CHUNKFSIZE
,
fd
);

2622 i‡(
r
!=
CHUNKFSIZE
) {

2625 
±r
 = 
lﬂdbuff
;

2626 
chunkid
 = 
	`gë64bô
(&
±r
);

2627 i‡(
chunkid
>0) {

2628 
c
 = 
	`chunk_√w
(
chunkid
);

2629 
vîsi⁄
 = 
	`gë32bô
(&
±r
);

2630 
c
->
vîsi⁄
 = version;

2631 
lockedto
 = 
	`gë32bô
(&
±r
);

2632 
c
->
lockedto
 =Üockedto;

2634 
vîsi⁄
 = 
	`gë32bô
(&
±r
);

2635 
lockedto
 = 
	`gë32bô
(&
±r
);

2636 i‡(
vîsi⁄
==0 && 
lockedto
==0) {

2644 
	}
}

2646 
	$chunk_°‹e
(
FILE
 *
fd
) {

2647 
uöt8_t
 
hdr
[8];

2648 
uöt8_t
 
°‹ebuff
[
CHUNKFSIZE
*
CHUNKCNT
];

2649 
uöt8_t
 *
±r
;

2650 
uöt32_t
 
i
,
j
;

2651 
size_t
 
h≠py
;

2652 
chunk
 *
c
;

2654 
uöt64_t
 
chunkid
;

2655 
uöt32_t
 
vîsi⁄
;

2656 
uöt32_t
 
lockedto
,
now
;

2657 #i‚de‡
METARESTORE


2658 
now
 = 
	`maö_time
();

2660 
now
 = 
	`time
(
NULL
);

2662 
±r
 = 
hdr
;

2663 
	`put64bô
(&
±r
,
√xtchunkid
);

2664 
h≠py
 = 
	`fwrôe
(
hdr
,1,8,
fd
);

2665 
j
=0;

2666 
±r
 = 
°‹ebuff
;

2667 
i
=0 ; i<
HASHSIZE
 ; i++) {

2668 
c
=
chunkhash
[
i
] ; c ; c=c->
√xt
) {

2669 
chunkid
 = 
c
->chunkid;

2670 
	`put64bô
(&
±r
,
chunkid
);

2671 
vîsi⁄
 = 
c
->version;

2672 
	`put32bô
(&
±r
,
vîsi⁄
);

2673 
lockedto
 = 
c
->lockedto;

2674 i‡(
lockedto
<
now
) {

2675 
lockedto
 = 0;

2677 
	`put32bô
(&
±r
,
lockedto
);

2678 
j
++;

2679 i‡(
j
==
CHUNKCNT
) {

2680 
h≠py
 = 
	`fwrôe
(
°‹ebuff
,1,
CHUNKFSIZE
*
CHUNKCNT
,
fd
);

2681 
j
=0;

2682 
±r
 = 
°‹ebuff
;

2686 
	`mem£t
(
±r
,0,
CHUNKFSIZE
);

2687 
j
++;

2688 
h≠py
 = 
	`fwrôe
(
°‹ebuff
,1,
CHUNKFSIZE
*
j
,
fd
);

2689 
	}
}

2691 
	$chunk_ãrm
() {

2692 #i‚de‡
METARESTORE


2693 #ifde‡
USE_SLIST_BUCKETS


2694 
¶i°_buckë
 *
sb
,*
sbn
;

2696 
¶i°
 *
¶
,*
¶n
;

2698 #ifde‡
USE_FLIST_BUCKETS


2699 
Êi°_buckë
 *
fb
,*
fbn
;

2701 
Êi°
 *
Ê
,*
Ên
;

2703 #ifde‡
USE_CHUNK_BUCKETS


2704 
chunk_buckë
 *
cb
,*
cbn
;

2706 #i‡!
	`deföed
(
USE_SLIST_BUCKETS
Ë|| !deföed(
USE_FLIST_BUCKETS
Ë|| !deföed(
USE_CHUNK_BUCKETS
)

2707 
uöt32_t
 
i
;

2708 
chunk
 *
ch
,*
chn
;

2711 #ifde‡
USE_CHUNK_BUCKETS


2712 
chunk_buckë
 *
cb
,*
cbn
;

2714 
uöt32_t
 
i
;

2715 
chunk
 *
ch
,*
chn
;

2719 #i‚de‡
METARESTORE


2720 #ifde‡
USE_SLIST_BUCKETS


2721 
sb
 = 
sbhód
 ; sb ; sb = 
sbn
) {

2722 
sbn
 = 
sb
->
√xt
;

2723 
	`‰ì
(
sb
);

2726 
i
=0 ; i<
HASHSIZE
 ; i++) {

2727 
ch
 = 
chunkhash
[
i
] ; ch ; ch = ch->
√xt
) {

2728 
¶
 = 
ch
->
¶i°hód
 ; s»; s»
¶n
) {

2729 
¶n
 = 
¶
->
√xt
;

2730 
	`‰ì
(
¶
);

2735 #ifde‡
USE_FLIST_BUCKETS


2736 
fb
 = 
fbhód
 ; fb ; fb = 
fbn
) {

2737 
fbn
 = 
fb
->
√xt
;

2738 
	`‰ì
(
fb
);

2741 
i
=0 ; i<
HASHSIZE
 ; i++) {

2742 
ch
 = 
chunkhash
[
i
] ; ch ; ch = ch->
√xt
) {

2743 
Ê
 = 
ch
->
Êi°hód
 ; f»; f»
Ên
) {

2744 
Ên
 = 
Ê
->
√xt
;

2745 
	`‰ì
(
Ê
);

2751 #ifde‡
USE_CHUNK_BUCKETS


2752 
cb
 = 
cbhód
 ; cb ; cb = 
cbn
) {

2753 
cbn
 = 
cb
->
√xt
;

2754 
	`‰ì
(
cb
);

2757 
i
=0 ; i<
HASHSIZE
 ; i++) {

2758 
ch
 = 
chunkhash
[
i
] ; ch ; ch = 
chn
) {

2759 
chn
 = 
ch
->
√xt
;

2760 
	`‰ì
(
ch
);

2764 
	}
}

2766 
	$chunk_√wfs
() {

2767 #i‚de‡
METARESTORE


2768 
chunks
 = 0;

2770 
√xtchunkid
 = 1;

2771 
	}
}

2773 
	$chunk_°röô
() {

2774 
uöt32_t
 
i
;

2775 #i‚de‡
METARESTORE


2776 
uöt32_t
 
j
;

2777 
uöt32_t
 
lo›time
;

2779 
Rïliˇti⁄sDñayInô
 = 
	`cfg_gëuöt32
("REPLICATIONS_DELAY_INIT",300);

2780 
Rïliˇti⁄sDñayDisc⁄√˘
 = 
	`cfg_gëuöt32
("REPLICATIONS_DELAY_DISCONNECT",3600);

2781 
MaxDñSo·Limô
 = 
	`cfg_gëuöt32
("CHUNKS_SOFT_DEL_LIMIT",10);

2782 i‡(
	`cfg_isdeföed
("CHUNKS_HARD_DEL_LIMIT")) {

2783 
MaxDñH¨dLimô
 = 
	`cfg_gëuöt32
("CHUNKS_HARD_DEL_LIMIT",25);

2784 i‡(
MaxDñH¨dLimô
<
MaxDñSo·Limô
) {

2785 
MaxDñSo·Limô
 = 
MaxDñH¨dLimô
;

2786 
	`Ârötf
(
°dîr
,"CHUNKS_SOFT_DEL_LIMIT is greaterÅhan CHUNKS_HARD_DEL_LIMIT - using CHUNKS_HARD_DEL_LIMIT for both\n");

2789 
MaxDñH¨dLimô
 = 3 * 
MaxDñSo·Limô
;

2791 i‡(
MaxDñSo·Limô
==0) {

2792 
	`Ârötf
(
°dîr
,"deleteÜimit is zero !!!\n");

2795 
TmpMaxDñFøc
 = 
MaxDñSo·Limô
;

2796 
TmpMaxDñ
 = 
MaxDñSo·Limô
;

2797 
MaxWrôeRïl
 = 
	`cfg_gëuöt32
("CHUNKS_WRITE_REP_LIMIT",2);

2798 
MaxRódRïl
 = 
	`cfg_gëuöt32
("CHUNKS_READ_REP_LIMIT",10);

2799 i‡(
MaxRódRïl
==0) {

2800 
	`Ârötf
(
°dîr
,"readÑeplicationÜimit is zero !!!\n");

2803 i‡(
MaxWrôeRïl
==0) {

2804 
	`Ârötf
(
°dîr
,"writeÑeplicationÜimit is zero !!!\n");

2807 i‡(
	`cfg_isdeföed
("CHUNKS_LOOP_TIME")) {

2808 
	`Ârötf
(
°dîr
,"DefiningÜoopÅime by CHUNKS_LOOP_TIME option is deprecated - use CHUNKS_LOOP_MAX_CPSánd CHUNKS_LOOP_MIN_TIME\n");

2809 
lo›time
 = 
	`cfg_gëuöt32
("CHUNKS_LOOP_TIME",300);

2810 i‡(
lo›time
 < 
MINLOOPTIME
) {

2811 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_TIME vÆuêtoÿlow (%"
PRIu32
"Ëö¸ó£dÅÿ%u\n",
lo›time
,
MINLOOPTIME
);

2812 
lo›time
 = 
MINLOOPTIME
;

2814 i‡(
lo›time
 > 
MAXLOOPTIME
) {

2815 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_TIME vÆuêtoÿhigh (%"
PRIu32
"Ëde¸ó£dÅÿ%u\n",
lo›time
,
MAXLOOPTIME
);

2816 
lo›time
 = 
MAXLOOPTIME
;

2818 
HashSãps
 = 1+((
HASHSIZE
)/
lo›time
);

2819 
HashCPS
 = 0xFFFFFFFF;

2821 
lo›time
 = 
	`cfg_gëuöt32
("CHUNKS_LOOP_MIN_TIME",300);

2822 i‡(
lo›time
 < 
MINLOOPTIME
) {

2823 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_MIN_TIME vÆuêtoÿlow (%"
PRIu32
"Ëö¸ó£dÅÿ%u\n",
lo›time
,
MINLOOPTIME
);

2824 
lo›time
 = 
MINLOOPTIME
;

2826 i‡(
lo›time
 > 
MAXLOOPTIME
) {

2827 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_MIN_TIME vÆuêtoÿhigh (%"
PRIu32
"Ëde¸ó£dÅÿ%u\n",
lo›time
,
MAXLOOPTIME
);

2828 
lo›time
 = 
MAXLOOPTIME
;

2830 
HashSãps
 = 1+((
HASHSIZE
)/
lo›time
);

2831 
HashCPS
 = 
	`cfg_gëuöt32
("CHUNKS_LOOP_MAX_CPS",100000);

2832 i‡(
HashCPS
 < 
MINCPS
) {

2833 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_MAX_CPS vÆuêtoÿlow (%"
PRIu32
"Ëö¸ó£dÅÿ%u\n",
HashCPS
,
MINCPS
);

2834 
HashCPS
 = 
MINCPS
;

2836 i‡(
HashCPS
 > 
MAXCPS
) {

2837 
	`Ârötf
(
°dîr
,"CHUNKS_LOOP_MAX_CPS vÆuêtoÿhigh (%"
PRIu32
"Ëde¸ó£dÅÿ%u\n",
HashCPS
,
MAXCPS
);

2838 
HashCPS
 = 
MAXCPS
;

2842 
i
=0 ; i<
HASHSIZE
 ; i++) {

2843 
chunkhash
[
i
]=
NULL
;

2845 #i‚de‡
METARESTORE


2846 
i
=0 ; i<11 ; i++) {

2847 
j
=0 ; j<11 ; j++) {

2848 
Ælchunkcou¡s
[
i
][
j
]=0;

2849 
ªguœrchunkcou¡s
[
i
][
j
]=0;

2852 
jobshpos
 = 0;

2853 
job§ebÆ™˚cou¡
 = 0;

2854 
°¨âime
 = 
	`maö_time
();

2855 
job¢‹ïbef‹e
 = 
°¨âime
+
Rïliˇti⁄sDñayInô
;

2857 
	`chunk_do_jobs
(
NULL
,
JOBS_INIT
,0.0,0.0);

2862 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,1,0,
chunk_jobs_maö
);

2865 
	}
}

	@mfsmaster/chunks.h

19 #i‚de‡
_CHUNKS_H_


20 
	#_CHUNKS_H_


	)

21 
	~<°dio.h
>

22 
	~<öây≥s.h
>

34 #ifde‡
METARESTORE


35 
chunk_£t_fûe_gﬂl
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

36 
chunk_dñëe_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
);

37 
chunk_add_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

38 
chunk_mu…i_modify
(
uöt32_t
 
ts
,
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
,uöt8_à
›Êag
);

39 
chunk_mu…i_åunˇã
(
uöt32_t
 
ts
,
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

41 
chunk_u∆ock
(
uöt64_t
 
chunkid
);

42 
chunk_ö¸ó£_vîsi⁄
(
uöt64_t
 
chunkid
);

43 
chunk_£t_vîsi⁄
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
);

45 
chunk_dump
();

48 
chunk_°©s
(
uöt32_t
 *
dñ
,uöt32_à*
ª∂
);

49 
chunk_°‹e_öfo
(
uöt8_t
 *
buff
);

50 
uöt32_t
 
chunk_gë_missög_cou¡
();

51 
chunk_°‹e_chunkcou¡îs
(
uöt8_t
 *
buff
,uöt8_à
m©rixid
);

52 
uöt32_t
 
chunk_cou¡
();

53 
chunk_öfo
(
uöt32_t
 *
Ælchunks
,uöt32_à*
Ælc›õs
,uöt32_à*
ªgc›õs
);

55 
chunk_gë_vÆidc›õs
(
uöt64_t
 
chunkid
,
uöt8_t
 *
vc›õs
);

57 
chunk_£t_fûe_gﬂl
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

58 
chunk_dñëe_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
);

59 
chunk_add_fûe
(
uöt64_t
 
chunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

63 
chunk_u∆ock
(
uöt64_t
 
chunkid
);

65 
chunk_mu…i_modify
(
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
,uöt8_à*
›Êag
);

66 
chunk_mu…i_åunˇã
(
uöt64_t
 *
nchunkid
,uöt64_à
ochunkid
,
uöt32_t
 
Àngth
,uöt32_à
öode
,
uöt16_t
 
ödx
,
uöt8_t
 
gﬂl
);

68 
chunk_ª∑ú
(
uöt32_t
 
öode
,
uöt16_t
 
ödx
,
uöt64_t
 
ochunkid
,uöt32_à*
nvîsi⁄
);

71 
chunk_gëvîsi⁄™dloˇti⁄s
(
uöt64_t
 
chunkid
,
uöt32_t
 
cuù
,uöt32_à*
vîsi⁄
,
uöt8_t
 *
cou¡
,uöt8_à
loc
[256*6]);

73 
chunk_£rvî_has_chunk
(*
±r
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
);

74 
chunk_damaged
(*
±r
,
uöt64_t
 
chunkid
);

75 
chunk_lo°
(*
±r
,
uöt64_t
 
chunkid
);

76 
chunk_£rvî_disc⁄√˘ed
(*
±r
);

78 
chunk_gŸ_dñëe_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

79 
chunk_gŸ_ª∂iˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
°©us
);

81 
chunk_gŸ_chunk›_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

83 
chunk_gŸ_¸óã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

84 
chunk_gŸ_du∂iˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

85 
chunk_gŸ_£tvîsi⁄_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

86 
chunk_gŸ_åunˇã_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

87 
chunk_gŸ_du±runc_°©us
(*
±r
,
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

93 
chunk_lﬂd
(
FILE
 *
fd
);

94 
chunk_°‹e
(
FILE
 *
fd
);

95 
chunk_ãrm
();

96 
chunk_√wfs
();

97 
chunk_°röô
();

	@mfsmaster/datacachemgr.c

19 
	~"c⁄fig.h
"

21 
	~<öây≥s.h
>

22 
	~<°dio.h
>

24 
	#DCM_TAB_LENG
 500000

	)

25 
	#DCM_INODEHASH_LENG
 ((
DCM_TAB_LENG
)/2)

	)

27 
	#DCM_INODE_HASH
(
öode
Ë(((öode)*0x4A4FECD1)%
DCM_INODEHASH_LENG
)

	)

29 
	#DCM_NIL
 0xFFFFFFFF

	)

31 
	s_d©aˇche_íåy
 {

32 
uöt32_t
 
	möode
;

33 
uöt32_t
 
	m£ssi⁄id
;

34 
uöt32_t
 
	mùªv
,
	möext
;

35 
uöt32_t
 
	mÃu¥ev
,
	mÃu√xt
;

36 } 
	td©aˇche_íåy
;

38 
d©aˇche_íåy
 
	gdcm_èb
[
DCM_TAB_LENG
];

39 
uöt32_t
 
	gdcm_öodehash
[
DCM_INODEHASH_LENG
];

40 
uöt32_t
 
	gdcm_Ãu_fú°
,
	gdcm_Ãu_œ°
;

44 
	$dcm_›í
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
) {

45 
uöt32_t
 
ih
 = 
	`DCM_INODE_HASH
(
öode
);

46 
uöt32_t
 
p
,
µ
,
≈
;

47 
p
 = 
dcm_öodehash
[
ih
];

48 
p
<
DCM_TAB_LENG
) {

49 i‡(
dcm_èb
[
p
].
öode
 =öodê&& dcm_èb[p].
£ssi⁄id
 == sessionid) {

51 i‡(
dcm_Ãu_œ°
!=
p
) {

53 
µ
 = 
dcm_èb
[
p
].
Ãu¥ev
;

54 
≈
 = 
dcm_èb
[
p
].
Ãu√xt
;

55 i‡(
µ
<
DCM_TAB_LENG
) {

56 
dcm_èb
[
µ
].
Ãu√xt
 = 
≈
;

58 
dcm_Ãu_fú°
 = 
≈
;

60 i‡(
≈
<
DCM_TAB_LENG
) {

61 
dcm_èb
[
≈
].
Ãu¥ev
 = 
µ
;

63 
dcm_Ãu_œ°
 = 
µ
;

66 
dcm_èb
[
p
].
Ãu¥ev
 = 
dcm_Ãu_œ°
;

67 
dcm_èb
[
p
].
Ãu√xt
 = 
DCM_NIL
;

68 
dcm_èb
[
dcm_Ãu_œ°
].
Ãu√xt
 = 
p
;

69 
dcm_Ãu_œ°
 = 
p
;

73 
p
 = 
dcm_èb
[p].
öext
;

77 
p
 = 
dcm_Ãu_fú°
;

80 
µ
 = 
dcm_èb
[
p
].
Ãu¥ev
;

81 
≈
 = 
dcm_èb
[
p
].
Ãu√xt
;

82 i‡(
µ
<
DCM_TAB_LENG
) {

83 
dcm_èb
[
µ
].
Ãu√xt
 = 
≈
;

85 
dcm_Ãu_fú°
 = 
≈
;

87 i‡(
≈
<
DCM_TAB_LENG
) {

88 
dcm_èb
[
≈
].
Ãu¥ev
 = 
µ
;

90 
dcm_Ãu_œ°
 = 
µ
;

93 
dcm_èb
[
p
].
Ãu¥ev
 = 
dcm_Ãu_œ°
;

94 
dcm_èb
[
p
].
Ãu√xt
 = 
DCM_NIL
;

95 
dcm_èb
[
dcm_Ãu_œ°
].
Ãu√xt
 = 
p
;

96 
dcm_Ãu_œ°
 = 
p
;

99 i‡(
dcm_èb
[
p
].
öode
>0) {

101 
ih
 = 
	`DCM_INODE_HASH
(
dcm_èb
[
p
].
öode
);

102 
µ
 = 
dcm_èb
[
p
].
ùªv
;

103 
≈
 = 
dcm_èb
[
p
].
öext
;

104 i‡(
µ
<
DCM_TAB_LENG
) {

105 
dcm_èb
[
µ
].
öext
 = 
≈
;

107 
dcm_öodehash
[
ih
] = 
≈
;

109 i‡(
≈
<
DCM_TAB_LENG
) {

110 
dcm_èb
[
≈
].
ùªv
 = 
µ
;

117 
dcm_èb
[
p
].
öode
 = inode;

118 
dcm_èb
[
p
].
£ssi⁄id
 = sessionid;

119 
ih
 = 
	`DCM_INODE_HASH
(
öode
);

120 
≈
 = 
dcm_öodehash
[
ih
];

121 
dcm_èb
[
p
].
öext
 = 
≈
;

122 
dcm_èb
[
p
].
ùªv
 = 
DCM_NIL
;

123 
dcm_öodehash
[
ih
] = 
p
;

124 i‡(
≈
<
DCM_TAB_LENG
) {

125 
dcm_èb
[
≈
].
ùªv
 = 
p
;

128 
	}
}

130 
	$dcm_modify
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
) {

131 
uöt32_t
 
ih
 = 
	`DCM_INODE_HASH
(
öode
);

132 
uöt32_t
 
p
,
µ
,
≈
;

133 
p
 = 
dcm_öodehash
[
ih
];

134 
p
<
DCM_TAB_LENG
) {

135 i‡(
dcm_èb
[
p
].
öode
 =öodê&& dcm_èb[p].
£ssi⁄id
 != sessionid) {

137 i‡(
p
!=
dcm_Ãu_fú°
) {

139 
µ
 = 
dcm_èb
[
p
].
Ãu¥ev
;

140 
≈
 = 
dcm_èb
[
p
].
Ãu√xt
;

141 i‡(
µ
<
DCM_TAB_LENG
) {

142 
dcm_èb
[
µ
].
Ãu√xt
 = 
≈
;

144 
dcm_Ãu_fú°
 = 
≈
;

146 i‡(
≈
<
DCM_TAB_LENG
) {

147 
dcm_èb
[
≈
].
Ãu¥ev
 = 
µ
;

149 
dcm_Ãu_œ°
 = 
µ
;

152 
dcm_èb
[
p
].
Ãu¥ev
 = 
DCM_NIL
;

153 
dcm_èb
[
p
].
Ãu√xt
 = 
dcm_Ãu_fú°
;

154 
dcm_èb
[
dcm_Ãu_fú°
].
Ãu¥ev
 = 
p
;

155 
dcm_Ãu_fú°
 = 
p
;

158 
µ
 = 
dcm_èb
[
p
].
ùªv
;

159 
≈
 = 
dcm_èb
[
p
].
öext
;

160 i‡(
µ
<
DCM_TAB_LENG
) {

161 
dcm_èb
[
µ
].
öext
 = 
≈
;

163 
dcm_öodehash
[
ih
] = 
≈
;

165 i‡(
≈
<
DCM_TAB_LENG
) {

166 
dcm_èb
[
≈
].
ùªv
 = 
µ
;

169 
dcm_èb
[
p
].
öode
 = 0;

170 
dcm_èb
[
p
].
öext
 = 
DCM_NIL
;

171 
dcm_èb
[
p
].
ùªv
 = 
DCM_NIL
;

174 
p
 = 
≈
;

176 
p
 = 
dcm_èb
[p].
öext
;

179 
	}
}

181 
	$dcm_öô
() {

182 
uöt32_t
 
i
;

184 
i
=0 ; i<
DCM_INODEHASH_LENG
 ; i++) {

185 
dcm_öodehash
[
i
]=
DCM_NIL
;

187 
i
=0 ; i<
DCM_TAB_LENG
 ; i++) {

188 
dcm_èb
[
i
].
öode
=0;

189 
dcm_èb
[
i
].
£ssi⁄id
=0;

190 
dcm_èb
[
i
].
ùªv
 = 
DCM_NIL
;

191 
dcm_èb
[
i
].
öext
 = 
DCM_NIL
;

192 
dcm_èb
[
i
].
Ãu¥ev
 = i-1;

193 
dcm_èb
[
i
].
Ãu√xt
 = i+1;

195 
dcm_èb
[0].
Ãu¥ev
 = 
DCM_NIL
;

196 
dcm_Ãu_fú°
 = 0;

197 
dcm_èb
[
DCM_TAB_LENG
-1].
Ãu√xt
 = 
DCM_NIL
;

198 
dcm_Ãu_œ°
 = 
DCM_TAB_LENG
-1;

201 
	}
}

	@mfsmaster/datacachemgr.h

19 #i‚de‡
_DATACACHEMGR_H_


20 
	#_DATACACHEMGR_H_


	)

22 
	~<öây≥s.h
>

24 
dcm_›í
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

25 
dcm_modify
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

26 
dcm_öô
();

	@mfsmaster/exports.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<sy¶og.h
>

25 
	~<î∫o.h
>

26 
	~<pwd.h
>

27 
	~<gΩ.h
>

28 
	~<öây≥s.h
>

30 
	~"MFSCommuniˇti⁄.h
"

31 
	~"md5.h
"

32 
	~"exp‹ts.h
"

33 
	~"d©≠ack.h
"

34 
	~"maö.h
"

35 
	~"cfg.h
"

36 
	~"¶oggî.h
"

37 
	~"mas£π.h
"

39 
	s_exp‹ts
 {

40 
uöt32_t
 
	m∂íg
;

41 c⁄° 
uöt8_t
 *
	m∑th
;

42 
uöt32_t
 
	m‰omù
,
	mtoù
;

43 
uöt32_t
 
	mmövîsi⁄
;

44 
uöt8_t
 
	m∑ssw‹ddige°
[16];

45 
	mÆldús
:1;

46 
	m√ed∑ssw‹d
:1;

47 
	mmëa
:1;

48 
	mroŸªdeföed
:1;

50 
uöt8_t
 
	m£sÊags
;

51 
uöt32_t
 
	mroŸuid
;

52 
uöt32_t
 
	mroŸgid
;

53 
uöt32_t
 
	mm≠Æluid
;

54 
uöt32_t
 
	mm≠Ælgid
;

55 
_exp‹ts
 *
	m√xt
;

56 } 
	texp‹ts
;

58 
exp‹ts
 *
	gexp‹ts_ªc‹ds
;

59 *
	gExp‹tsFûeName
;

61 * 
	$exp‹ts_°r£p
(**
°rögp
, c⁄° *
dñim
) {

62 *
s
;

63 c⁄° *
•™p
;

64 
c
, 
sc
;

65 *
tok
;

67 
s
 = *
°rögp
;

68 i‡(
s
==
NULL
) {

69  
NULL
;

71 
tok
 = 
s
;

73 
c
 = *
s
++;

74 
•™p
 = 
dñim
;

76 i‡((
sc
=*
•™p
++)==
c
) {

77 i‡(
c
==0) {

78 
s
 = 
NULL
;

80 
s
[-1] = 0;

82 *
°rögp
 = 
s
;

83  
tok
;

85 } 
sc
!=0);

87  
NULL
;

88 
	}
}

91 
uöt32_t
 
	$exp‹ts_öfo_size
() {

92 
exp‹ts
 *
e
;

93 
uöt32_t
 
size
=0;

94 
e
=
exp‹ts_ªc‹ds
 ;É ;ÉÛ->
√xt
) {

95 i‡(
e
->
mëa
) {

96 
size
+=35;

98 
size
+=35+
e
->
∂íg
;

101  
size
;

102 
	}
}

104 
	$exp‹ts_öfo_d©a
(
uöt8_t
 *
buff
) {

105 
exp‹ts
 *
e
;

106 
e
=
exp‹ts_ªc‹ds
 ;É ;ÉÛ->
√xt
) {

107 
	`put32bô
(&
buff
,
e
->
‰omù
);

108 
	`put32bô
(&
buff
,
e
->
toù
);

109 i‡(
e
->
mëa
) {

110 
	`put32bô
(&
buff
,1);

111 
	`put8bô
(&
buff
,'.');

113 
	`put32bô
(&
buff
,
e
->
∂íg
+1);

114 
	`put8bô
(&
buff
,'/');

115 i‡(
e
->
∂íg
>0) {

116 
	`mem˝y
(
buff
,
e
->
∑th
,e->
∂íg
);

117 
buff
+=
e
->
∂íg
;

120 
	`put32bô
(&
buff
,
e
->
mövîsi⁄
);

121 
	`put8bô
(&
buff
,(
e
->
Ældús
?1:0)+”->
√ed∑ssw‹d
?2:0));

122 
	`put8bô
(&
buff
,
e
->
£sÊags
);

123 
	`put32bô
(&
buff
,
e
->
roŸuid
);

124 
	`put32bô
(&
buff
,
e
->
roŸgid
);

125 
	`put32bô
(&
buff
,
e
->
m≠Æluid
);

126 
	`put32bô
(&
buff
,
e
->
m≠Ælgid
);

128 
	}
}

130 
uöt8_t
 
	$exp‹ts_check
(
uöt32_t
 
ù
,uöt32_à
vîsi⁄
,
uöt8_t
 
mëa
,c⁄° uöt8_à*
∑th
,c⁄° uöt8_à
∫dcode
[32],c⁄° uöt8_à
∑sscode
[16],uöt8_à*
£sÊags
,uöt32_à*
roŸuid
,uöt32_à*
roŸgid
,uöt32_à*
m≠Æluid
,uöt32_à*
m≠Ælgid
) {

131 c⁄° 
uöt8_t
 *
p
;

132 
uöt32_t
 
∂íg
,
i
;

133 
uöt8_t
 
∫d°©e
;

134 
ok
,
n›ass
;

135 
md5˘x
 
md5c
;

136 
uöt8_t
 
íåydige°
[16];

137 
exp‹ts
 *
e
,*
f
;

141 i‡(
mëa
==0) {

142 
p
 = 
∑th
;

143 *
p
=='/') {

144 
p
++;

146 
∂íg
 = 0;

147 
p
[
∂íg
]) {

148 
∂íg
++;

150 
∂íg
>0 && 
p
[pleng-1]=='/') {

151 
∂íg
--;

154 
p
 = 
NULL
;

155 
∂íg
 = 0;

157 
∫d°©e
=0;

158 i‡(
∫dcode
!=
NULL
) {

159 
i
=0 ; i<32 ; i++) {

160 
∫d°©e
|=
∫dcode
[
i
];

163 
n›ass
=0;

164 
f
=
NULL
;

165 
e
=
exp‹ts_ªc‹ds
 ;É ;ÉÛ->
√xt
) {

166 
ok
 = 0;

168 i‡(
ù
>=
e
->
‰omù
 && ip<Û->
toù
 && 
vîsi⁄
>Û->
mövîsi⁄
 && 
mëa
==e->meta) {

171 i‡(
mëa
) {

172 
ok
=1;

174 i‡(
e
->
∂íg
==0) {

176 i‡(
∂íg
==0) {

177 
ok
=1;

178 } i‡(
e
->
Ældús
) {

179 
ok
=1;

183 i‡(
∂íg
==
e
->∂íg && 
	`memcmp
(
p
,e->
∑th
,pleng)==0) {

184 
ok
=1;

185 } i‡(
e
->
Ældús
 && 
∂íg
>e->∂íg && 
p
[e->∂íg]=='/' && 
	`memcmp
’,e->
∑th
,e->pleng)==0) {

186 
ok
=1;

193 i‡(
ok
 && 
e
->
√ed∑ssw‹d
) {

194 i‡(
∫d°©e
==0 || 
∫dcode
==
NULL
 || 
∑sscode
==NULL) {

195 
ok
=0;

196 
n›ass
=1;

198 
	`md5_öô
(&
md5c
);

199 
	`md5_upd©e
(&
md5c
,
∫dcode
,16);

200 
	`md5_upd©e
(&
md5c
,
e
->
∑ssw‹ddige°
,16);

201 
	`md5_upd©e
(&
md5c
,
∫dcode
+16,16);

202 
	`md5_föÆ
(
íåydige°
,&
md5c
);

203 i‡(
	`memcmp
(
íåydige°
,
∑sscode
,16)!=0) {

204 
ok
=0;

205 
n›ass
=1;

210 i‡(
ok
) {

212 i‡(
f
==
NULL
) {

213 
f
=
e
;

215 i‡((
e
->
£sÊags
&
SESFLAG_READONLY
)==0 && (
f
->sesflags&SESFLAG_READONLY)!=0) {

216 
f
=
e
;

217 } i‡(
e
->
roŸuid
==0 && 
f
->rootuid!=0) {

218 
f
=
e
;

219 } i‡((
e
->
£sÊags
&
SESFLAG_CANCHANGEQUOTA
)!=0 && (
f
->sesflags&SESFLAG_CANCHANGEQUOTA)==0) {

220 
f
=
e
;

221 } i‡(
e
->
√ed∑ssw‹d
==1 && 
f
->needpassword==0) {

222 
f
=
e
;

223 } i‡(
e
->
∂íg
 > 
f
->pleng) {

224 
f
=
e
;

229 i‡(
f
==
NULL
) {

230 i‡(
n›ass
) {

231 i‡(
∫d°©e
==0 || 
∫dcode
==
NULL
 || 
∑sscode
==NULL) {

232  
ERROR_NOPASSWORD
;

234  
ERROR_BADPASSWORD
;

237  
ERROR_EACCES
;

239 *
£sÊags
 = 
f
->sesflags;

240 *
roŸuid
 = 
f
->rootuid;

241 *
roŸgid
 = 
f
->rootgid;

242 *
m≠Æluid
 = 
f
->mapalluid;

243 *
m≠Ælgid
 = 
f
->mapallgid;

244  
STATUS_OK
;

245 
	}
}

247 
	$exp‹ts_‰ìli°
(
exp‹ts
 *
¨ec
) {

248 
exp‹ts
 *
dªc
;

249 
¨ec
) {

250 
dªc
 = 
¨ec
;

251 
¨ec
 =áªc->
√xt
;

252 i‡(
dªc
->
∑th
) {

253 
	`‰ì
((
uöt8_t
 *)(
dªc
->
∑th
));

255 
	`‰ì
(
dªc
);

257 
	}
}

277 
	$exp‹ts_∑r£√t
(*
√t
,
uöt32_t
 *
‰omù
,uöt32_à*
toù
) {

278 
uöt32_t
 
ù
,
i
,
o˘ë
;

279 i‡(
√t
[0]=='*' &&Çet[1]==0) {

280 *
‰omù
 = 0;

281 *
toù
 = 0xFFFFFFFFU;

284 
ù
=0;

285 
i
=0 ; i<4; i++) {

286 i‡(*
√t
>='0' && *net<='9') {

287 
o˘ë
=0;

288 *
√t
>='0' && *net<='9') {

289 
o˘ë
*=10;

290 
o˘ë
+=*
√t
-'0';

291 
√t
++;

292 i‡(
o˘ë
>255) {

299 i‡(
i
<3) {

300 i‡(*
√t
!='.') {

303 
√t
++;

305 
ù
*=256;

306 
ù
+=
o˘ë
;

308 i‡(*
√t
==0) {

309 *
‰omù
 = 
ù
;

310 *
toù
 = 
ù
;

313 i‡(*
√t
=='/') {

314 *
‰omù
 = 
ù
;

315 
ù
=0;

316 
√t
++;

317 
i
=0 ; i<4; i++) {

318 i‡(*
√t
>='0' && *net<='9') {

319 
o˘ë
=0;

320 *
√t
>='0' && *net<='9') {

321 
o˘ë
*=10;

322 
o˘ë
+=*
√t
-'0';

323 
√t
++;

324 i‡(
o˘ë
>255) {

331 i‡(
i
==0 && *
√t
==0 && 
o˘ë
<=32) {

332 
ù
 = 0xFFFFFFFF;

333 i‡(
o˘ë
<32) {

334 
ù
<<=32-
o˘ë
;

338 i‡(
i
<3) {

339 i‡(*
√t
!='.') {

342 
√t
++;

344 
ù
*=256;

345 
ù
+=
o˘ë
;

347 i‡(*
√t
!=0) {

350 *
‰omù
 &
ù
;

351 *
toù
 = *
‰omù
 | (
ù
 ^ 0xFFFFFFFFU);

354 i‡(*
√t
=='-') {

355 *
‰omù
 = 
ù
;

356 
ù
=0;

357 
√t
++;

358 
i
=0 ; i<4; i++) {

359 i‡(*
√t
>='0' && *net<='9') {

360 
o˘ë
=0;

361 *
√t
>='0' && *net<='9') {

362 
o˘ë
*=10;

363 
o˘ë
+=*
√t
-'0';

364 
√t
++;

365 i‡(
o˘ë
>255) {

372 i‡(
i
<3) {

373 i‡(*
√t
!='.') {

376 
√t
++;

378 
ù
*=256;

379 
ù
+=
o˘ë
;

381 i‡(*
√t
!=0) {

384 *
toù
 = 
ù
;

388 
	}
}

390 
	$exp‹ts_∑r£vîsi⁄
(*
vî°r
,
uöt32_t
 *
vîsi⁄
) {

391 
uöt32_t
 
vp
;

392 i‡(*
vî°r
<'0' || *verstr>'9') {

395 
vp
=0;

396 *
vî°r
>='0' && *verstr<='9') {

397 
vp
*=10;

398 
vp
+=*
vî°r
-'0';

399 
vî°r
++;

401 i‡(
vp
>255 || (*
vî°r
!='.' && *verstr)) {

404 *
vîsi⁄
 = 
vp
<<16;

405 i‡(*
vî°r
==0) {

408 
vî°r
++;

409 i‡(*
vî°r
<'0' || *verstr>'9') {

412 
vp
=0;

413 *
vî°r
>='0' && *verstr<='9') {

414 
vp
*=10;

415 
vp
+=*
vî°r
-'0';

416 
vî°r
++;

418 i‡(
vp
>255 || (*
vî°r
!='.' && *verstr)) {

421 *
vîsi⁄
 +
vp
<<8;

422 i‡(*
vî°r
==0) {

425 
vî°r
++;

426 i‡(*
vî°r
<'0' || *verstr>'9') {

429 
vp
=0;

430 *
vî°r
>='0' && *verstr<='9') {

431 
vp
*=10;

432 
vp
+=*
vî°r
-'0';

433 
vî°r
++;

435 i‡(
vp
>255 || *
vî°r
) {

438 *
vîsi⁄
 +
vp
;

440 
	}
}

442 
	$exp‹ts_∑r£uidgid
(*
m≠roŸ
,
uöt32_t
 
löío
,uöt32_à*
ruid
,uöt32_à*
rgid
) {

443 *
u±r
,*
g±r
,*
ïå
;

444 
group
 *
gºec
,
gΩ
;

445 
∑sswd
 *
pwªc
,
pwd
;

446 
pwgrbuff
[16384];

447 
uöt32_t
 
uid
,
gid
;

448 
gidok
;

450 
u±r
 = 
m≠roŸ
;

451 
g±r
 = 
m≠roŸ
;

452 *
g±r
 && *gptr!=':') {

453 
g±r
++;

456 i‡(*
g±r
==':') {

457 *
g±r
 = 0;

458 
gid
 = 0;

459 
ïå
 = 
g±r
+1;

460 *
ïå
>='0' && *eptr<='9') {

461 
gid
*=10;

462 
gid
+=*
ïå
-'0';

463 
ïå
++;

465 i‡(*
ïå
!=0) {

466 
	`gëg∫am_r
(
g±r
+1,&
gΩ
,
pwgrbuff
,16384,&
gºec
);

468 i‡(
gºec
==
NULL
) {

469 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts/m≠roŸ: c™'àföd grou∞«med '%s' deföed i¿löe: %"
PRIu32
,
g±r
+1,
löío
);

472 
gid
 = 
gºec
->
gr_gid
;

474 
gidok
 = 1;

476 
gidok
 = 0;

477 
gid
 = 0;

478 
g±r
 = 
NULL
;

481 
uid
 = 0;

482 
ïå
 = 
u±r
;

483 *
ïå
>='0' && *eptr<='9') {

484 
uid
*=10;

485 
uid
+=*
ïå
-'0';

486 
ïå
++;

488 i‡(*
ïå
!=0) {

489 
	`gëpw«m_r
(
u±r
,&
pwd
,
pwgrbuff
,16384,&
pwªc
);

491 i‡(
pwªc
==
NULL
) {

492 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts/m≠roŸ: c™'àföd u£∏«med '%s' deföed i¿löe: %"
PRIu32
,
u±r
,
löío
);

495 *
ruid
 = 
pwªc
->
pw_uid
;

496 i‡(
gidok
==0) {

497 *
rgid
 = 
pwªc
->
pw_gid
;

499 *
rgid
 = 
gid
;

502 } i‡(
gidok
==1) {

503 *
ruid
 = 
uid
;

504 *
rgid
 = 
gid
;

507 
	`gëpwuid_r
(
uid
,&
pwd
,
pwgrbuff
,16384,&
pwªc
);

509 i‡(
pwªc
==
NULL
) {

510 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts/m≠roŸ: c™'àdëîmöêgid, beˇu£ c™'àföd u£∏wôh uid %"
PRIu32
" deföed i¿löe: %"PRIu32,
uid
,
löío
);

513 *
ruid
 = 
pwªc
->
pw_uid
;

514 *
rgid
 = 
pwªc
->
pw_gid
;

518 
	}
}

520 
	$exp‹ts_∑r£›ti⁄s
(*
›ts
,
uöt32_t
 
löío
,
exp‹ts
 *
¨ec
) {

521 *
p
;

522 
o
;

523 
md5˘x
 
˘x
;

525 (
p
=
	`exp‹ts_°r£p
(&
›ts
,","))) {

526 
o
=0;

528 *
p
) {

530 i‡(
	`°rcmp
(
p
,"ro")==0) {

531 
¨ec
->
£sÊags
 |
SESFLAG_READONLY
;

532 
o
=1;

533 } i‡(
	`°rcmp
(
p
,"readonly")==0) {

534 
¨ec
->
£sÊags
 |
SESFLAG_READONLY
;

535 
o
=1;

536 } i‡(
	`°rcmp
(
p
,"rw")==0) {

537 
¨ec
->
£sÊags
 &~
SESFLAG_READONLY
;

538 
o
=1;

539 } i‡(
	`°rcmp
(
p
,"readwrite")==0) {

540 
¨ec
->
£sÊags
 &~
SESFLAG_READONLY
;

541 
o
=1;

545 i‡(
	`°rcmp
(
p
,"ignoregid")==0) {

546 i‡(
¨ec
->
mëa
) {

547 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"më®›ti⁄ ign‹ed: %s",
p
);

549 
¨ec
->
£sÊags
 |
SESFLAG_IGNOREGID
;

551 
o
=1;

555 i‡(
	`°rcmp
(
p
,"alldirs")==0) {

556 i‡(
¨ec
->
mëa
) {

557 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"më®›ti⁄ ign‹ed: %s",
p
);

559 
¨ec
->
Ældús
 = 1;

561 
o
=1;

565 i‡(
	`°rcmp
(
p
,"dynamicip")==0) {

566 
¨ec
->
£sÊags
 |
SESFLAG_DYNAMICIP
;

567 
o
=1;

571 i‡(
	`°rcmp
(
p
,"canchangequota")==0) {

572 i‡(
¨ec
->
mëa
) {

573 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"më®›ti⁄ ign‹ed: %s",
p
);

575 
¨ec
->
£sÊags
 |
SESFLAG_CANCHANGEQUOTA
;

577 
o
=1;

581 i‡(
	`°∫cmp
(
p
,"maproot=",8)==0) {

582 
o
=1;

583 i‡(
¨ec
->
mëa
) {

584 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"më®›ti⁄ ign‹ed: %s",
p
);

586 i‡(
	`exp‹ts_∑r£uidgid
(
p
+8,
löío
,&
¨ec
->
roŸuid
,&¨ec->
roŸgid
)<0) {

589 
¨ec
->
roŸªdeföed
 = 1;

591 } i‡(
	`°∫cmp
(
p
,"mapall=",7)==0) {

592 
o
=1;

593 i‡(
¨ec
->
mëa
) {

594 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"më®›ti⁄ ign‹ed: %s",
p
);

596 i‡(
	`exp‹ts_∑r£uidgid
(
p
+7,
löío
,&
¨ec
->
m≠Æluid
,&¨ec->
m≠Ælgid
)<0) {

599 
¨ec
->
£sÊags
 |
SESFLAG_MAPALL
;

601 } i‡(
	`°∫cmp
(
p
,"md5pass=",8)==0) {

602 *
±r
 = 
p
+8;

603 
uöt32_t
 
i
=0;

604 
o
=1;

605 (*
±r
>='0' && *ptr<='9') || (*ptr>='a' && *ptr<='f') || (*ptr>='A' && *ptr<='F')) {

606 
±r
++;

607 
i
++;

609 i‡(*
±r
==0 && 
i
==32) {

610 
±r
 = 
p
+8;

611 
i
=0 ; i<16 ; i++) {

612 i‡(*
±r
>='0' && *ptr<='9') {

613 
¨ec
->
∑ssw‹ddige°
[
i
]=(*
±r
-'0')<<4;

614 } i‡(*
±r
>='a' && *ptr<='f') {

615 
¨ec
->
∑ssw‹ddige°
[
i
]=(*
±r
-'a'+10)<<4;

617 
¨ec
->
∑ssw‹ddige°
[
i
]=(*
±r
-'A'+10)<<4;

619 
±r
++;

620 i‡(*
±r
>='0' && *ptr<='9') {

621 
¨ec
->
∑ssw‹ddige°
[
i
]+=(*
±r
-'0');

622 } i‡(*
±r
>='a' && *ptr<='f') {

623 
¨ec
->
∑ssw‹ddige°
[
i
]+=(*
±r
-'a'+10);

625 
¨ec
->
∑ssw‹ddige°
[
i
]+=(*
±r
-'A'+10);

627 
±r
++;

629 
¨ec
->
√ed∑ssw‹d
=1;

631 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts: inc‹ª˘ md5∑s†deföôi⁄ (%sËöÜöe: %"
PRIu32
,
p
,
löío
);

634 } i‡(
	`°∫cmp
(
p
,"minversion=",11)==0) {

635 
o
=1;

636 i‡(
	`exp‹ts_∑r£vîsi⁄
(
p
+11,&
¨ec
->
mövîsi⁄
)<0) {

637 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts: inc‹ª˘ mövîsi⁄ deföôi⁄ (%sËöÜöe: %"
PRIu32
,
p
,
löío
);

643 i‡(
	`°∫cmp
(
p
,"password=",9)==0) {

644 
	`md5_öô
(&
˘x
);

645 
	`md5_upd©e
(&
˘x
,(
uöt8_t
*)(
p
+9),
	`°æí
(p+9));

646 
	`md5_föÆ
(
¨ec
->
∑ssw‹ddige°
,&
˘x
);

647 
¨ec
->
√ed∑ssw‹d
=1;

648 
o
=1;

652 i‡(
o
==0) {

653 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts: unknow¿›ti⁄ '%s' i¿löe: %"
PRIu32
" (ign‹ed)",
p
,
löío
);

657 
	}
}

659 
	$exp‹ts_∑r£löe
(*
löe
,
uöt32_t
 
löío
,
exp‹ts
 *
¨ec
) {

660 *
√t
,*
∑th
;

661 *
p
;

662 
uöt32_t
 
∂íg
;

664 
¨ec
->
∂íg
 = 0;

665 
¨ec
->
∑th
 = 
NULL
;

666 
¨ec
->
‰omù
 = 0;

667 
¨ec
->
toù
 = 0;

668 
¨ec
->
mövîsi⁄
 = 0;

669 
¨ec
->
Ældús
 = 0;

670 
¨ec
->
√ed∑ssw‹d
 = 0;

671 
¨ec
->
mëa
 = 0;

672 
¨ec
->
roŸªdeföed
 = 0;

673 
¨ec
->
£sÊags
 = 
SESFLAG_READONLY
;

674 
¨ec
->
roŸuid
 = 999;

675 
¨ec
->
roŸgid
 = 999;

676 
¨ec
->
m≠Æluid
 = 999;

677 
¨ec
->
m≠Ælgid
 = 999;

678 
¨ec
->
√xt
 = 
NULL
;

680 
p
 = 
löe
;

681 *
p
==' ' || *p=='\t') {

682 
p
++;

684 
√t
 = 
p
;

685 *
p
 && *p!=' ' && *p!='\t') {

686 
p
++;

688 i‡(*
p
==0) {

689 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts: incom∂ëêdeföôi⁄ i¿löe: %"
PRIu32
,
löío
);

692 *
p
=0;

693 
p
++;

694 i‡(
	`exp‹ts_∑r£√t
(
√t
,&
¨ec
->
‰omù
,&¨ec->
toù
)<0) {

695 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf£xp‹ts: inc‹ª˘ ip/√tw‹k deföôi⁄ i¿löe: %"
PRIu32
,
löío
);

699 *
p
==' ' || *p=='\t') {

700 
p
++;

702 i‡(
p
[0]=='.' && (p[1]==0 ||Ö[1]==' ' ||Ö[1]=='\t')) {

703 
∑th
 = 
NULL
;

704 
∂íg
 = 0;

705 
¨ec
->
roŸuid
 = 0;

706 
¨ec
->
roŸgid
 = 0;

707 
¨ec
->
mëa
 = 1;

708 
p
++;

710 *
p
=='/') {

711 
p
++;

713 
∑th
 = 
p
;

714 
∂íg
 = 0;

715 *
p
 && *p!=' ' && *p!='\t') {

716 
p
++;

717 
∂íg
++;

719 
∂íg
>0 && 
∑th
[pleng-1]=='/') {

720 
∂íg
--;

723 i‡(*
p
==0) {

725 
¨ec
->
∂íg
 =Öleng;

726 i‡(
∂íg
>0) {

727 
¨ec
->
∑th
 = 
	`mÆloc
(
∂íg
+1);

728 
	`∑s£π
(
¨ec
->
∑th
);

729 
	`mem˝y
((
uöt8_t
*)(
¨ec
->
∑th
),∑th,
∂íg
);

730 ((
uöt8_t
*)(
¨ec
->
∑th
))[
∂íg
]=0;

732 
¨ec
->
∑th
 = 
NULL
;

737 *
p
==' ' || *p=='\t') {

738 
p
++;

741 i‡(
	`exp‹ts_∑r£›ti⁄s
(
p
,
löío
,
¨ec
)<0) {

745 i‡((
¨ec
->
£sÊags
&
SESFLAG_MAPALL
Ë&& (¨ec->
roŸªdeföed
==0)) {

746 
¨ec
->
roŸuid
 =áªc->
m≠Æluid
;

747 
¨ec
->
roŸgid
 =áªc->
m≠Ælgid
;

750 
¨ec
->
∂íg
 =Öleng;

751 i‡(
∂íg
>0) {

752 
¨ec
->
∑th
 = 
	`mÆloc
(
∂íg
+1);

753 
	`∑s£π
(
¨ec
->
∑th
);

754 
	`mem˝y
((
uöt8_t
*)(
¨ec
->
∑th
),∑th,
∂íg
);

755 ((
uöt8_t
*)(
¨ec
->
∑th
))[
∂íg
]=0;

757 
¨ec
->
∑th
 = 
NULL
;

761 
	}
}

763 
	$exp‹ts_lﬂdexp‹ts
() {

764 
FILE
 *
fd
;

765 
löebuff
[10000];

766 
uöt32_t
 
s
,
löío
;

767 
exp‹ts
 *
√wexp‹ts
,**
√èû
,*
¨ec
;

769 
fd
 = 
	`f›í
(
Exp‹tsFûeName
,"r");

770 i‡(
fd
==
NULL
) {

771 i‡(
î∫o
==
ENOENT
) {

772 i‡(
exp‹ts_ªc‹ds
) {

773 
	`sy¶og
(
LOG_WARNING
,"mf£xp‹t†c⁄figuøti⁄ fûê(%sËnŸ found -Éxp‹t†nŸ ch™ged",
Exp‹tsFûeName
);

775 
	`sy¶og
(
LOG_WARNING
,"mf£xp‹t†c⁄figuøti⁄ fûê(%sËnŸ found -Çÿexp‹t†!!!",
Exp‹tsFûeName
);

777 
	`Ârötf
(
°dîr
,"mf£xp‹t†c⁄figuøti⁄ fûê(%sËnŸ found -ÖÀa£ cª©ê⁄ê(you c™ c›y %s.di°Åÿgëá ba£ c⁄figuøti⁄)\n",
Exp‹tsFûeName
,ExportsFileName);

779 i‡(
exp‹ts_ªc‹ds
) {

780 
	`mfs_¨g_îæog
(
LOG_WARNING
,"ˇn'à›í mf£xp‹t†c⁄figuøti⁄ fûê(%sË-Éxp‹t†nŸ ch™ged,Éº‹",
Exp‹tsFûeName
);

782 
	`mfs_¨g_îæog
(
LOG_WARNING
,"ˇn'à›í mf£xp‹t†c⁄figuøti⁄ fûê(%sË-Çÿexp‹t†!!!,Éº‹",
Exp‹tsFûeName
);

787 
√wexp‹ts
 = 
NULL
;

788 
√èû
 = &
√wexp‹ts
;

789 
löío
 = 1;

790 
¨ec
 = 
	`mÆloc
((
exp‹ts
));

791 
	`∑s£π
(
¨ec
);

792 
	`fgës
(
löebuff
,10000,
fd
)) {

793 i‡(
löebuff
[0]!='#') {

794 
löebuff
[9999]=0;

795 
s
=
	`°æí
(
löebuff
);

796 
s
>0 && (
löebuff
[s-1]=='\r' ||Üinebuff[s-1]=='\n' ||Üinebuff[s-1]=='\t' ||Üinebuff[s-1]==' ')) {

797 
s
--;

799 i‡(
s
>0) {

800 
löebuff
[
s
]=0;

801 i‡(
	`exp‹ts_∑r£löe
(
löebuff
,
löío
,
¨ec
)>=0) {

802 *
√èû
 = 
¨ec
;

803 
√èû
 = &(
¨ec
->
√xt
);

804 
¨ec
 = 
	`mÆloc
((
exp‹ts
));

805 
	`∑s£π
(
¨ec
);

809 
löío
++;

811 
	`‰ì
(
¨ec
);

812 i‡(
	`„º‹
(
fd
)) {

813 
	`f˛o£
(
fd
);

814 
	`sy¶og
(
LOG_WARNING
,"errorÑeading mfsexports file -ÉxportsÇot changed");

815 
	`exp‹ts_‰ìli°
(
√wexp‹ts
);

816 
	`Ârötf
(
°dîr
,"errorÑeading mfsexports file - using defaults\n");

819 
	`f˛o£
(
fd
);

820 
	`exp‹ts_‰ìli°
(
exp‹ts_ªc‹ds
);

821 
exp‹ts_ªc‹ds
 = 
√wexp‹ts
;

822 
	`mfs_sy¶og
(
LOG_NOTICE
,"exports file has beenÜoaded");

823 
	}
}

825 
	$exp‹ts_ªlﬂdexp‹ts
() {

826 
	`exp‹ts_lﬂdexp‹ts
();

827 
	}
}

829 
	$exp‹ts_ãrm
() {

830 
	`exp‹ts_‰ìli°
(
exp‹ts_ªc‹ds
);

831 
	`‰ì
(
Exp‹tsFûeName
);

832 
	}
}

834 
	$exp‹ts_öô
() {

835 
Exp‹tsFûeName
 = 
	`cfg_gë°r
("EXPORTS_FILENAME",
ETC_PATH
 "/mfsexports.cfg");

836 
exp‹ts_ªc‹ds
 = 
NULL
;

837 
	`exp‹ts_lﬂdexp‹ts
();

838 i‡(
exp‹ts_ªc‹ds
==
NULL
) {

839 
	`Ârötf
(
°dîr
,"noÉxports defined !!!\n");

842 
	`maö_ªlﬂdªgi°î
(
exp‹ts_ªlﬂdexp‹ts
);

843 
	`maö_de°ru˘ªgi°î
(
exp‹ts_ãrm
);

845 
	}
}

	@mfsmaster/exports.h

19 #i‚de‡
_EXPORTS_H_


20 
	#_EXPORTS_H_


	)

22 
	~<öây≥s.h
>

24 
uöt32_t
 
exp‹ts_öfo_size
();

25 
exp‹ts_öfo_d©a
(
uöt8_t
 *
buff
);

26 
uöt8_t
 
exp‹ts_check
(
uöt32_t
 
ù
,uöt32_à
vîsi⁄
,uöt8_à
mëa
,c⁄° uöt8_à*
∑th
,c⁄° uöt8_à
∫dcode
[32],c⁄° uöt8_à
∑sscode
[16],uöt8_à*
£sÊags
,uöt32_à*
roŸuid
,uöt32_à*
roŸgid
,uöt32_à*
m≠Æluid
,uöt32_à*
m≠Ælgid
);

27 
exp‹ts_öô
();

	@mfsmaster/filesystem.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<sy¶og.h
>

25 
	~<uni°d.h
>

26 
	~<sys/ty≥s.h
>

27 #ifde‡
HAVE_PWD_H


28 
	~<pwd.h
>

30 
	~<sys/°©.h
>

31 
	~<öây≥s.h
>

32 
	~<î∫o.h
>

34 
	~"MFSCommuniˇti⁄.h
"

38 #i‚de‡
METARESTORE


39 
	~"m©o˛£rv.h
"

40 
	~"m©ocs£rv.h
"

43 
	~"chunks.h
"

44 
	~"fûesy°em.h
"

45 
	~"d©≠ack.h
"

46 
	~"¶oggî.h
"

47 
	~"mas£π.h
"

49 #i‚de‡
METARESTORE


50 
	~"d©aˇchemgr.h
"

51 
	~"cfg.h
"

52 
	~"maö.h
"

53 
	~"ch™gñog.h
"

56 
	#USE_FREENODE_BUCKETS
 1

	)

57 
	#USE_CUIDREC_BUCKETS
 1

	)

58 
	#EDGEHASH
 1

	)

59 
	#BACKGROUND_METASTORE
 1

	)

61 
	#NODEHASHBITS
 (22)

	)

62 
	#NODEHASHSIZE
 (1<<
NODEHASHBITS
)

	)

63 
	#NODEHASHPOS
(
nodeid
Ë(“odeid)&(
NODEHASHSIZE
-1))

	)

65 #ifde‡
EDGEHASH


66 
	#EDGEHASHBITS
 (22)

	)

67 
	#EDGEHASHSIZE
 (1<<
EDGEHASHBITS
)

	)

68 
	#EDGEHASHPOS
(
hash
Ë((hash)&(
EDGEHASHSIZE
-1))

	)

69 
	#LOOKUPNOHASHLIMIT
 10

	)

83 
	#DEFAULT_GOAL
 1

	)

84 
	#DEFAULT_TRASHTIME
 86400

	)

86 
	#MAXFNAMELENG
 255

	)

88 
	#MAX_INDEX
 0x7FFFFFFF

	)

90 
	#CHIDS_NO
 0

	)

91 
	#CHIDS_YES
 1

	)

92 
	#CHIDS_AUTO
 2

	)

94 #i‚de‡
METARESTORE


95 
	s_b°node
 {

96 
uöt32_t
 
	mvÆ
,
	mcou¡
;

97 
_b°node
 *
	mÀ·
,*
	mright
;

98 } 
	tb°node
;

101 
	s_£ssi⁄idªc
 {

102 
uöt32_t
 
	m£ssi⁄id
;

103 
_£ssi⁄idªc
 *
	m√xt
;

104 } 
	t£ssi⁄idªc
;

106 
	g_f¢ode
;

108 
	s_f£dge
 {

109 
_f¢ode
 *
	mchûd
,*
	m∑ª¡
;

110 
_f£dge
 *
	m√xtchûd
,*
	m√xç¨ít
;

111 
_f£dge
 **
	m¥evchûd
,**
	m¥ev∑ª¡
;

112 #ifde‡
EDGEHASH


113 
_f£dge
 *
	m√xt
,**
	m¥ev
;

115 
uöt16_t
 
	m∆íg
;

117 
uöt8_t
 *
	m«me
;

118 } 
	tf£dge
;

120 #i‚de‡
METARESTORE


121 
	s_°©§ec‹d
 {

122 
uöt32_t
 
	möodes
;

123 
uöt32_t
 
	mdús
;

124 
uöt32_t
 
	mfûes
;

125 
uöt32_t
 
	mchunks
;

126 
uöt64_t
 
	mÀngth
;

127 
uöt64_t
 
	msize
;

128 
uöt64_t
 
	mªÆsize
;

129 } 
	t°©§ec‹d
;

132 
	s_quŸ™ode
 {

133 
uöt8_t
 
	mex˚eded
;

134 
uöt8_t
 
	mÊags
;

135 
uöt32_t
 
	m°ime°amp
;

136 
uöt32_t
 
	msöodes
,
	mhöodes
;

137 
uöt64_t
 
	m¶ígth
,
	mhÀngth
;

138 
uöt64_t
 
	mssize
,
	mhsize
;

139 
uöt64_t
 
	m§ólsize
,
	mhªÆsize
;

140 
_f¢ode
 *
	mnode
;

141 
_quŸ™ode
 *
	m√xt
,**
	m¥ev
;

142 } 
	tquŸ™ode
;

144 
quŸ™ode
 *
	gquŸahód
;

146 #i‚de‡
METARESTORE


147 
uöt32_t
 
	gQuŸaTimeLimô
;

150 
	s_f¢ode
 {

151 
uöt32_t
 
	mid
;

152 
uöt32_t
 
	m˘ime
,
	mmtime
,
	m©ime
;

153 
uöt8_t
 
	mty≥
;

154 
uöt8_t
 
	mgﬂl
;

155 
uöt16_t
 
	mmode
;

156 
uöt32_t
 
	muid
;

157 
uöt32_t
 
	mgid
;

158 
uöt32_t
 
	måashtime
;

159 
	u_d©a
 {

160 
	s_dd©a
 {

161 
f£dge
 *
	mchûdªn
;

162 
uöt32_t
 
	m∆ök
;

163 
uöt32_t
 
	mñemíts
;

165 #i‚de‡
METARESTORE


166 
°©§ec‹d
 *
	m°©s
;

168 
quŸ™ode
 *
	mquŸa
;

169 } 
	mdd©a
;

170 
	s_sd©a
 {

171 
uöt32_t
 
	m∂íg
;

172 
uöt8_t
 *
	m∑th
;

178 } 
	msd©a
;

179 
	s_devd©a
 {

180 
uöt32_t
 
	mrdev
;

186 } 
	mdevd©a
;

187 
	s_fd©a
 {

188 
uöt64_t
 
	mÀngth
;

189 
uöt64_t
 *
	mchunkèb
;

190 
uöt32_t
 
	mchunks
;

196 
£ssi⁄idªc
 *
	m£ssi⁄ids
;

197 } 
	mfd©a
;

205 } 
	md©a
;

206 
f£dge
 *
	m∑ª¡s
;

207 
_f¢ode
 *
	m√xt
;

208 } 
	tf¢ode
;

210 
	s_‰ìnode
 {

211 
uöt32_t
 
	mid
;

212 
uöt32_t
 
	m·ime
;

213 
_‰ìnode
 *
	m√xt
;

214 } 
	t‰ìnode
;

216 
uöt32_t
 *
	g‰ìbômask
;

217 
uöt32_t
 
	gbômasksize
;

218 
uöt32_t
 
	g£¨chpos
;

219 
‰ìnode
 *
	g‰ìli°
,**
	g‰ìèû
;

221 
f£dge
 *
	gåash
;

222 
f£dge
 *
	gª£rved
;

223 
f¢ode
 *
	groŸ
;

224 
f¢ode
* 
	gnodehash
[
NODEHASHSIZE
];

225 #ifde‡
EDGEHASH


226 
f£dge
* 
	gedgehash
[
EDGEHASHSIZE
];

229 
uöt32_t
 
	gmaxnodeid
;

230 
uöt32_t
 
	g√xt£ssi⁄id
;

231 
uöt32_t
 
	gnodes
;

233 
uöt64_t
 
	gvîsi⁄
;

234 
uöt64_t
 
	gåash•a˚
;

235 
uöt64_t
 
	gª£rved•a˚
;

236 
uöt32_t
 
	gåashnodes
;

237 
uöt32_t
 
	gª£rvednodes
;

238 
uöt32_t
 
	gfûíodes
;

239 
uöt32_t
 
	gdúnodes
;

241 #i‚de‡
METARESTORE


243 
	#MSGBUFFSIZE
 1000000

	)

244 
	#ERRORS_LOG_MAX
 500

	)

246 
uöt32_t
 
	gfsöfo_fûes
=0;

247 
uöt32_t
 
	gfsöfo_ugfûes
=0;

248 
uöt32_t
 
	gfsöfo_mfûes
=0;

249 
uöt32_t
 
	gfsöfo_chunks
=0;

250 
uöt32_t
 
	gfsöfo_ugchunks
=0;

251 
uöt32_t
 
	gfsöfo_mchunks
=0;

252 *
	gfsöfo_msgbuff
=
NULL
;

253 
uöt32_t
 
	gfsöfo_msgbufÊíg
=0;

254 
uöt32_t
 
	gfsöfo_lo›°¨t
=0;

255 
uöt32_t
 
	gfsöfo_lo›íd
=0;

257 
uöt32_t
 
	gã°_°¨t_time
;

259 
uöt32_t
 
	g°©s_°©fs
=0;

260 
uöt32_t
 
	g°©s_gë©å
=0;

261 
uöt32_t
 
	g°©s_£èâr
=0;

262 
uöt32_t
 
	g°©s_lookup
=0;

263 
uöt32_t
 
	g°©s_mkdú
=0;

264 
uöt32_t
 
	g°©s_rmdú
=0;

265 
uöt32_t
 
	g°©s_symlök
=0;

266 
uöt32_t
 
	g°©s_ªadlök
=0;

267 
uöt32_t
 
	g°©s_mknod
=0;

268 
uöt32_t
 
	g°©s_u∆ök
=0;

269 
uöt32_t
 
	g°©s_ª«me
=0;

270 
uöt32_t
 
	g°©s_lök
=0;

271 
uöt32_t
 
	g°©s_ªaddú
=0;

272 
uöt32_t
 
	g°©s_›í
=0;

273 
uöt32_t
 
	g°©s_ªad
=0;

274 
uöt32_t
 
	g°©s_wrôe
=0;

276 
	$fs_°©s
(
uöt32_t
 
°©s
[16]) {

277 
°©s
[0] = 
°©s_°©fs
;

278 
°©s
[1] = 
°©s_gë©å
;

279 
°©s
[2] = 
°©s_£èâr
;

280 
°©s
[3] = 
°©s_lookup
;

281 
°©s
[4] = 
°©s_mkdú
;

282 
°©s
[5] = 
°©s_rmdú
;

283 
°©s
[6] = 
°©s_symlök
;

284 
°©s
[7] = 
°©s_ªadlök
;

285 
°©s
[8] = 
°©s_mknod
;

286 
°©s
[9] = 
°©s_u∆ök
;

287 
°©s
[10] = 
°©s_ª«me
;

288 
°©s
[11] = 
°©s_lök
;

289 
°©s
[12] = 
°©s_ªaddú
;

290 
°©s
[13] = 
°©s_›í
;

291 
°©s
[14] = 
°©s_ªad
;

292 
°©s
[15] = 
°©s_wrôe
;

293 
°©s_°©fs
=0;

294 
°©s_gë©å
=0;

295 
°©s_£èâr
=0;

296 
°©s_lookup
=0;

297 
°©s_mkdú
=0;

298 
°©s_rmdú
=0;

299 
°©s_symlök
=0;

300 
°©s_ªadlök
=0;

301 
°©s_mknod
=0;

302 
°©s_u∆ök
=0;

303 
°©s_ª«me
=0;

304 
°©s_lök
=0;

305 
°©s_ªaddú
=0;

306 
°©s_›í
=0;

307 
°©s_ªad
=0;

308 
°©s_wrôe
=0;

309 
	}
}

313 #ifde‡
USE_FREENODE_BUCKETS


314 
	#FREENODE_BUCKET_SIZE
 5000

	)

316 
	s_‰ìnode_buckë
 {

317 
‰ìnode
 
	mbuckë
[
FREENODE_BUCKET_SIZE
];

318 
uöt32_t
 
	mfú°‰ì
;

319 
_‰ìnode_buckë
 *
	m√xt
;

320 } 
	t‰ìnode_buckë
;

322 
‰ìnode_buckë
 *
	g‚bhód
 = 
NULL
;

323 
‰ìnode
 *
	g‚‰ìhód
 = 
NULL
;

325 
ölöe
 
‰ìnode
* 
	$‰ìnode_mÆloc
() {

326 
‰ìnode_buckë
 *
‚b
;

327 
‰ìnode
 *
ªt
;

328 i‡(
‚‰ìhód
) {

329 
ªt
 = 
‚‰ìhód
;

330 
‚‰ìhód
 = 
ªt
->
√xt
;

331  
ªt
;

333 i‡(
‚bhód
==
NULL
 || fnbhód->
fú°‰ì
==
FREENODE_BUCKET_SIZE
) {

334 
‚b
 = (
‰ìnode_buckë
*)
	`mÆloc
((freenode_bucket));

335 
	`∑s£π
(
‚b
);

336 
‚b
->
√xt
 = 
‚bhód
;

337 
‚b
->
fú°‰ì
 = 0;

338 
‚bhód
 = 
‚b
;

340 
ªt
 = (
‚bhód
->
buckë
)+(‚bhód->
fú°‰ì
);

341 
‚bhód
->
fú°‰ì
++;

342  
ªt
;

343 
	}
}

345 
ölöe
 
	$‰ìnode_‰ì
(
‰ìnode
 *
p
) {

346 
p
->
√xt
 = 
‚‰ìhód
;

347 
‚‰ìhód
 = 
p
;

348 
	}
}

351 
ölöe
 
‰ìnode
* 
	$‰ìnode_mÆloc
() {

352 
‰ìnode
 *
‚
;

353 
‚
 = (
‰ìnode
*)
	`mÆloc
((freenode));

354 
	`∑s£π
(
‚
);

355  
‚
;

356 
	}
}

358 
ölöe
 
	$‰ìnode_‰ì
(
‰ìnode
* 
p
) {

359 
	`‰ì
(
p
);

360 
	}
}

364 #ifde‡
USE_CUIDREC_BUCKETS


365 
	#CUIDREC_BUCKET_SIZE
 1000

	)

367 
	s_£ssi⁄idªc_buckë
 {

368 
£ssi⁄idªc
 
	mbuckë
[
CUIDREC_BUCKET_SIZE
];

369 
uöt32_t
 
	mfú°‰ì
;

370 
_£ssi⁄idªc_buckë
 *
	m√xt
;

371 } 
	t£ssi⁄idªc_buckë
;

373 
£ssi⁄idªc_buckë
 *
	g¸bhód
 = 
NULL
;

374 
£ssi⁄idªc
 *
	g¸‰ìhód
 = 
NULL
;

376 
ölöe
 
£ssi⁄idªc
* 
	$£ssi⁄idªc_mÆloc
() {

377 
£ssi⁄idªc_buckë
 *
¸b
;

378 
£ssi⁄idªc
 *
ªt
;

379 i‡(
¸‰ìhód
) {

380 
ªt
 = 
¸‰ìhód
;

381 
¸‰ìhód
 = 
ªt
->
√xt
;

382  
ªt
;

384 i‡(
¸bhód
==
NULL
 || crbhód->
fú°‰ì
==
CUIDREC_BUCKET_SIZE
) {

385 
¸b
 = (
£ssi⁄idªc_buckë
*)
	`mÆloc
((sessionidrec_bucket));

386 
	`∑s£π
(
¸b
);

387 
¸b
->
√xt
 = 
¸bhód
;

388 
¸b
->
fú°‰ì
 = 0;

389 
¸bhód
 = 
¸b
;

391 
ªt
 = (
¸bhód
->
buckë
)+(¸bhód->
fú°‰ì
);

392 
¸bhód
->
fú°‰ì
++;

393  
ªt
;

394 
	}
}

396 
ölöe
 
	$£ssi⁄idªc_‰ì
(
£ssi⁄idªc
 *
p
) {

397 
p
->
√xt
 = 
¸‰ìhód
;

398 
¸‰ìhód
 = 
p
;

399 
	}
}

402 
ölöe
 
£ssi⁄idªc
* 
	$£ssi⁄idªc_mÆloc
() {

403 
£ssi⁄idªc
 *
sidªc
;

404 
sidªc
 = (
£ssi⁄idªc
*)
	`mÆloc
((sessionidrec));

405 
	`∑s£π
(
sidªc
);

406  
sidªc
;

407 
	}
}

409 
ölöe
 
	$£ssi⁄idªc_‰ì
(
£ssi⁄idªc
* 
p
) {

410 
	`‰ì
(
p
);

411 
	}
}

415 
uöt32_t
 
	$f¢odes_gë_√xt_id
() {

416 
uöt32_t
 
i
,
mask
;

417 
£¨chpos
<
bômasksize
 && 
‰ìbômask
[searchpos]==0xFFFFFFFF) {

418 
£¨chpos
++;

420 i‡(
£¨chpos
==
bômasksize
) {

421 
bômasksize
+=0x80;

422 
‰ìbômask
 = (
uöt32_t
*)
	`ªÆloc
(‰ìbômask,
bômasksize
*(uint32_t));

423 
	`∑s£π
(
‰ìbômask
);

424 
	`mem£t
(
‰ìbômask
+
£¨chpos
,0,0x80*(
uöt32_t
));

426 
mask
 = 
‰ìbômask
[
£¨chpos
];

427 
i
=0;

428 
mask
&1) {

429 
i
++;

430 
mask
>>=1;

432 
mask
 = 1<<
i
;

433 
‰ìbômask
[
£¨chpos
] |
mask
;

434 
i
+=(
£¨chpos
<<5);

435 i‡(
i
>
maxnodeid
) {

436 
maxnodeid
=
i
;

438  
i
;

439 
	}
}

441 
	$f¢odes_‰ì_id
(
uöt32_t
 
id
,uöt32_à
ts
) {

442 
‰ìnode
 *
n
;

443 
n
 = 
	`‰ìnode_mÆloc
();

444 
n
->
id
 = id;

445 
n
->
·ime
 = 
ts
;

446 
n
->
√xt
 = 
NULL
;

447 *
‰ìèû
 = 
n
;

448 
‰ìèû
 = &(
n
->
√xt
);

449 
	}
}

451 #i‚de‡
METARESTORE


452 
	$f¢odes_‰ìöodes
() {

454 
uöt8_t
 
	$fs_‰ìöodes
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
) {

456 
uöt32_t
 
fi
,
now
,
pos
,
mask
;

457 
‰ìnode
 *
n
,*
™
;

458 #i‚de‡
METARESTORE


459 
now
 = 
	`maö_time
();

461 
now
 = 
ts
;

463 
fi
 = 0;

464 
n
 = 
‰ìli°
;

465 
n
 &&Ç->
·ime
+86400<
now
) {

466 
fi
++;

467 
pos
 = (
n
->
id
 >> 5);

468 
mask
 = 1<<(
n
->
id
&0x1F);

469 
‰ìbômask
[
pos
] &~
mask
;

470 i‡(
pos
<
£¨chpos
) {

471 
£¨chpos
 = 
pos
;

473 
™
 = 
n
->
√xt
;

474 
	`‰ìnode_‰ì
(
n
);

475 
n
 = 
™
;

477 i‡(
n
) {

478 
‰ìli°
 = 
n
;

480 
‰ìli°
 = 
NULL
;

481 
‰ìèû
 = &(
‰ìli°
);

483 #i‚de‡
METARESTORE


484 i‡(
fi
>0) {

485 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|FREEINODES():%"PRIu32,(
uöt32_t
)
	`maö_time
(),
fi
);

488 
vîsi⁄
++;

489 i‡(
‰ìöodes
!=
fi
) {

494 
	}
}

496 
	$f¢odes_öô_‰ìbômask
 () {

497 
bômasksize
 = 0x100+(((
maxnodeid
)>>5)&0xFFFFFF80);

498 
‰ìbômask
 = (
uöt32_t
*)
	`mÆloc
(
bômasksize
*(uint32_t));

499 
	`∑s£π
(
‰ìbômask
);

500 
	`mem£t
(
‰ìbômask
,0,
bômasksize
*(
uöt32_t
));

501 
‰ìbômask
[0]=1;

502 
£¨chpos
 = 0;

503 
	}
}

505 
	$f¢odes_u£d_öode
 (
uöt32_t
 
id
) {

506 
uöt32_t
 
pos
,
mask
;

507 
pos
 = 
id
>>5;

508 
mask
 = 1<<(
id
&0x1F);

509 
‰ìbômask
[
pos
]|=
mask
;

510 
	}
}

535 * 
	$f¢odes_esˇ≥_«me
(
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

536 *
es˙ame
[2]={
NULL
,NULL};

537 
uöt32_t
 
es˙amesize
[2]={0,0};

538 
uöt8_t
 
buffid
=0;

539 *
cuºes˙ame
=
NULL
;

540 
uöt32_t
 
i
;

541 
uöt8_t
 
c
;

542 
buffid
 = 1-buffid;

543 
i
 = 
∆íg
;

544 
i
 = i*3+1;

545 i‡(
i
>
es˙amesize
[
buffid
]) {

546 
es˙amesize
[
buffid
] = ((
i
/1000)+1)*1000;

547 i‡(
es˙ame
[
buffid
]!=
NULL
) {

548 
	`‰ì
(
es˙ame
[
buffid
]);

550 
es˙ame
[
buffid
] = 
	`mÆloc
(
es˙amesize
[buffid]);

551 
	`∑s£π
(
es˙ame
[
buffid
]);

553 
i
 = 0;

554 
cuºes˙ame
 = 
es˙ame
[
buffid
];

555 
∆íg
>0) {

556 
c
 = *
«me
;

557 i‡(
c
<32 || c>=127 || c==',' || c=='%' || c=='(' || c==')') {

558 
cuºes˙ame
[
i
++]='%';

559 
cuºes˙ame
[
i
++]="0123456789ABCDEF"[(
c
>>4)&0xF];

560 
cuºes˙ame
[
i
++]="0123456789ABCDEF"[
c
&0xF];

562 
cuºes˙ame
[
i
++]=
c
;

564 
«me
++;

565 
∆íg
--;

567 
cuºes˙ame
[
i
]=0;

568  
cuºes˙ame
;

569 
	}
}

571 #ifde‡
EDGEHASH


572 
ölöe
 
uöt32_t
 
	$f¢odes_hash
(
uöt32_t
 
∑ª¡id
,
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

573 
uöt32_t
 
hash
,
i
;

574 
hash
 = ((
∑ª¡id
 * 0x5F2318BDË+ 
∆íg
);

575 
i
=0 ; i<
∆íg
 ; i++) {

576 
hash
 = hash*33+
«me
[
i
];

578  
hash
;

579 
	}
}

582 
ölöe
 
	$f¢odes_«meisu£d
(
f¢ode
 *
node
,
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

583 
f£dge
 *
ei
;

584 #ifde‡
EDGEHASH


585 i‡(
node
->
d©a
.
dd©a
.
ñemíts
>
LOOKUPNOHASHLIMIT
) {

586 
ei
 = 
edgehash
[
	`EDGEHASHPOS
(
	`f¢odes_hash
(
node
->
id
,
∆íg
,
«me
))];

587 
ei
) {

588 i‡(
ei
->
∑ª¡
==
node
 && 
∆íg
=Ûi->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

591 
ei
 =Éi->
√xt
;

594 
ei
 = 
node
->
d©a
.
dd©a
.
chûdªn
;

595 
ei
) {

596 i‡(
∆íg
==
ei
->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

599 
ei
 =Éi->
√xtchûd
;

603 
ei
 = 
node
->
d©a
.
dd©a
.
chûdªn
;

604 
ei
) {

605 i‡(
∆íg
==
ei
->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

608 
ei
 =Éi->
√xtchûd
;

612 
	}
}

614 
ölöe
 
f£dge
* 
	$f¢odes_lookup
(
f¢ode
 *
node
,
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

615 
f£dge
 *
ei
;

617 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

618  
NULL
;

620 #ifde‡
EDGEHASH


621 i‡(
node
->
d©a
.
dd©a
.
ñemíts
>
LOOKUPNOHASHLIMIT
) {

622 
ei
 = 
edgehash
[
	`EDGEHASHPOS
(
	`f¢odes_hash
(
node
->
id
,
∆íg
,
«me
))];

623 
ei
) {

624 i‡(
ei
->
∑ª¡
==
node
 && 
∆íg
=Ûi->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

625  
ei
;

627 
ei
 =Éi->
√xt
;

630 
ei
 = 
node
->
d©a
.
dd©a
.
chûdªn
;

631 
ei
) {

632 i‡(
∆íg
==
ei
->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

633  
ei
;

635 
ei
 =Éi->
√xtchûd
;

639 
ei
 = 
node
->
d©a
.
dd©a
.
chûdªn
;

640 
ei
) {

641 i‡(
∆íg
==
ei
->∆íg && 
	`memcmp
((*)”i->
«me
),(*)name,nleng)==0) {

642  
ei
;

644 
ei
 =Éi->
√xtchûd
;

647  
NULL
;

648 
	}
}

650 
ölöe
 
f¢ode
* 
	$f¢odes_id_to_node
(
uöt32_t
 
id
) {

651 
f¢ode
 *
p
;

652 
uöt32_t
 
nodïos
 = 
	`NODEHASHPOS
(
id
);

653 
p
=
nodehash
[
nodïos
];Ö ;Öı->
√xt
 ) {

654 i‡(
p
->
id
 == id) {

655  
p
;

658  
NULL
;

659 
	}
}

695 
ölöe
 
	$f¢odes_ißn˚°‹
(
f¢ode
 *
f
,f¢odê*
p
) {

696 
f£dge
 *
e
;

700 
e
=
p
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

701 
p
=
e
->
∑ª¡
;

702 
p
) {

703 i‡(
f
==
p
) {

706 i‡(
p
->
∑ª¡s
) {

707 
p
 =Ö->
∑ª¡s
->
∑ª¡
;

709 
p
 = 
NULL
;

714 
	}
}

719 
ölöe
 
quŸ™ode
* 
	$f¢odes_√w_quŸ™ode
(
f¢ode
 *
p
) {

720 
quŸ™ode
 *
qn
;

721 
qn
 = 
	`mÆloc
((
quŸ™ode
));

722 
	`∑s£π
(
qn
);

723 
	`mem£t
(
qn
,0,(
quŸ™ode
));

724 
qn
->
√xt
 = 
quŸahód
;

725 i‡(
qn
->
√xt
) {

726 
qn
->
√xt
->
¥ev
 = &(qn->next);

728 
qn
->
¥ev
 = &(
quŸahód
);

729 
quŸahód
 = 
qn
;

730 
qn
->
node
 = 
p
;

731 
p
->
d©a
.
dd©a
.
quŸa
 = 
qn
;

732  
qn
;

733 
	}
}

735 
ölöe
 
	$f¢odes_dñëe_quŸ™ode
(
f¢ode
 *
p
) {

736 
quŸ™ode
 *
qn
 = 
p
->
d©a
.
dd©a
.
quŸa
;

737 i‡(
qn
) {

738 *(
qn
->
¥ev
Ëqn->
√xt
;

739 i‡(
qn
->
√xt
) {

740 
qn
->
√xt
->
¥ev
 = qn->prev;

742 
	`‰ì
(
qn
);

743 
p
->
d©a
.
dd©a
.
quŸa
 = 
NULL
;

745 
	}
}

747 #i‚de‡
METARESTORE


748 
ölöe
 
	$f¢odes_check_quŸ™ode
(
quŸ™ode
 *
qn
,
uöt32_t
 
ts
) {

749 
°©§ec‹d
 *
p§
 = 
qn
->
node
->
d©a
.
dd©a
.
°©s
;

750 
uöt8_t
 
hq
,
sq
,
chg
,
ex˚eded
;

751 
hq
=0;

752 i‡(
qn
->
Êags
&
QUOTA_FLAG_HINODES
) {

753 i‡(
p§
->
öodes
>
qn
->
höodes
) {

754 
hq
=1;

757 i‡(
qn
->
Êags
&
QUOTA_FLAG_HLENGTH
) {

758 i‡(
p§
->
Àngth
>
qn
->
hÀngth
) {

759 
hq
=1;

762 i‡(
qn
->
Êags
&
QUOTA_FLAG_HSIZE
) {

763 i‡(
p§
->
size
>
qn
->
hsize
) {

764 
hq
=1;

767 i‡(
qn
->
Êags
&
QUOTA_FLAG_HREALSIZE
) {

768 i‡(
p§
->
ªÆsize
>
qn
->
hªÆsize
) {

769 
hq
=1;

772 
sq
=0;

773 i‡(
qn
->
Êags
&
QUOTA_FLAG_SINODES
) {

774 i‡(
p§
->
öodes
>
qn
->
söodes
) {

775 
sq
=1;

778 i‡(
qn
->
Êags
&
QUOTA_FLAG_SLENGTH
) {

779 i‡(
p§
->
Àngth
>
qn
->
¶ígth
) {

780 
sq
=1;

783 i‡(
qn
->
Êags
&
QUOTA_FLAG_SSIZE
) {

784 i‡(
p§
->
size
>
qn
->
ssize
) {

785 
sq
=1;

788 i‡(
qn
->
Êags
&
QUOTA_FLAG_SREALSIZE
) {

789 i‡(
p§
->
ªÆsize
>
qn
->
§ólsize
) {

790 
sq
=1;

793 
chg
 = 0;

794 i‡(
sq
==0 && 
qn
->
°ime°amp
>0) {

795 
qn
->
°ime°amp
 = 0;

796 
chg
 = 1;

797 } i‡(
sq
 && 
qn
->
°ime°amp
==0) {

798 
qn
->
°ime°amp
 = 
ts
;

799 
chg
 = 1;

801 
ex˚eded
 = (
hq
 || (
qn
->
°ime°amp
 && qn->°ime°amp+
QuŸaTimeLimô
<
ts
))?1:0;

802 i‡(
qn
->
ex˚eded
 !=Éxceeded) {

803 
qn
->
ex˚eded
 =Éxceeded;

804 
chg
 = 1;

806 i‡(
chg
) {

807 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|QUOTA(%"PRIu32",%"
PRIu8
",%"PRIu8",%"PRIu32",%"PRIu32",%"PRIu32",%"
PRIu64
",%"PRIu64",%"PRIu64",%"PRIu64",%"PRIu64",%"PRIu64")",
ts
,
qn
->
node
->
id
,qn->
ex˚eded
,qn->
Êags
,qn->
°ime°amp
,qn->
söodes
,qn->
höodes
,qn->
¶ígth
,qn->
hÀngth
,qn->
ssize
,qn->
hsize
,qn->
§ólsize
,qn->
hªÆsize
);

809 
	}
}

811 
	$f¢odes_check_Æl_quŸas
() {

812 
quŸ™ode
 *
qn
;

813 
uöt32_t
 
now
 = 
	`maö_time
();

814 
qn
 = 
quŸahód
 ; q¿; qn=qn->
√xt
) {

815 
	`f¢odes_check_quŸ™ode
(
qn
,
now
);

817 
	}
}

820 
ölöe
 
uöt8_t
 
	$f¢odes_ã°_quŸa
(
f¢ode
 *
node
) {

821 
f£dge
 *
e
;

822 i‡(
node
) {

823 i‡(
node
->
ty≥
==
TYPE_DIRECTORY
 &&Çode->
d©a
.
dd©a
.
quŸa
 &&Çode->d©a.dd©a.quŸa->
ex˚eded
) {

826 i‡(
node
!=
roŸ
) {

827 
e
=
node
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

828 i‡(
	`f¢odes_ã°_quŸa
(
e
->
∑ª¡
)) {

835 
	}
}

838 #i‚de‡
METARESTORE


839 
ölöe
 
	$f¢odes_gë_°©s
(
f¢ode
 *
node
,
°©§ec‹d
 *
§
) {

840 
uöt32_t
 
i
,
œ°chunk
,
œ°chunksize
;

841 
node
->
ty≥
) {

842 
TYPE_DIRECTORY
:

843 *
§
 = *(
node
->
d©a
.
dd©a
.
°©s
);

844 
§
->
öodes
++;

845 
§
->
dús
++;

847 
TYPE_FILE
:

848 
TYPE_TRASH
:

849 
TYPE_RESERVED
:

850 
§
->
öodes
 = 1;

851 
§
->
dús
 = 0;

852 
§
->
fûes
 = 1;

853 
§
->
chunks
 = 0;

854 
§
->
Àngth
 = 
node
->
d©a
.
fd©a
.length;

855 
§
->
size
 = 0;

856 i‡(
node
->
d©a
.
fd©a
.
Àngth
>0) {

857 
œ°chunk
 = (
node
->
d©a
.
fd©a
.
Àngth
-1)>>
MFSCHUNKBITS
;

858 
œ°chunksize
 = ((((
node
->
d©a
.
fd©a
.
Àngth
-1)&
MFSCHUNKMASK
)+
MFSBLOCKSIZE
)&
MFSBLOCKNEGMASK
)+
MFSHDRSIZE
;

860 
œ°chunk
 = 0;

861 
œ°chunksize
 = 
MFSHDRSIZE
;

863 
i
=0 ; i<
node
->
d©a
.
fd©a
.
chunks
 ; i++) {

864 i‡(
node
->
d©a
.
fd©a
.
chunkèb
[
i
]>0) {

865 i‡(
i
<
œ°chunk
) {

866 
§
->
size
+=
MFSCHUNKSIZE
+
MFSHDRSIZE
;

867 } i‡(
i
==
œ°chunk
) {

868 
§
->
size
+=
œ°chunksize
;

870 
§
->
chunks
++;

873 
§
->
ªÆsize
 = sr->
size
 * 
node
->
gﬂl
;

875 
TYPE_SYMLINK
:

876 
§
->
öodes
 = 1;

877 
§
->
fûes
 = 0;

878 
§
->
dús
 = 0;

879 
§
->
chunks
 = 0;

880 
§
->
Àngth
 = 
node
->
d©a
.
sd©a
.
∂íg
;

881 
§
->
size
 = 0;

882 
§
->
ªÆsize
 = 0;

885 
§
->
öodes
 = 1;

886 
§
->
fûes
 = 0;

887 
§
->
dús
 = 0;

888 
§
->
chunks
 = 0;

889 
§
->
Àngth
 = 0;

890 
§
->
size
 = 0;

891 
§
->
ªÆsize
 = 0;

893 
	}
}

895 
ölöe
 
	$f¢odes_sub_°©s
(
f¢ode
 *
∑ª¡
,
°©§ec‹d
 *
§
) {

896 
°©§ec‹d
 *
p§
;

897 
f£dge
 *
e
;

898 i‡(
∑ª¡
) {

899 
p§
 = 
∑ª¡
->
d©a
.
dd©a
.
°©s
;

900 
p§
->
öodes
 -
§
->inodes;

901 
p§
->
dús
 -
§
->dirs;

902 
p§
->
fûes
 -
§
->files;

903 
p§
->
chunks
 -
§
->chunks;

904 
p§
->
Àngth
 -
§
->length;

905 
p§
->
size
 -
§
->size;

906 
p§
->
ªÆsize
 -
§
->realsize;

907 i‡(
∑ª¡
!=
roŸ
) {

911 
e
=
∑ª¡
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

912 
	`f¢odes_sub_°©s
(
e
->
∑ª¡
,
§
);

916 
	}
}

918 
ölöe
 
	$f¢odes_add_°©s
(
f¢ode
 *
∑ª¡
,
°©§ec‹d
 *
§
) {

919 
°©§ec‹d
 *
p§
;

920 
f£dge
 *
e
;

921 i‡(
∑ª¡
) {

922 
p§
 = 
∑ª¡
->
d©a
.
dd©a
.
°©s
;

923 
p§
->
öodes
 +
§
->inodes;

924 
p§
->
dús
 +
§
->dirs;

925 
p§
->
fûes
 +
§
->files;

926 
p§
->
chunks
 +
§
->chunks;

927 
p§
->
Àngth
 +
§
->length;

928 
p§
->
size
 +
§
->size;

929 
p§
->
ªÆsize
 +
§
->realsize;

930 i‡(
∑ª¡
!=
roŸ
) {

934 
e
=
∑ª¡
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

935 
	`f¢odes_add_°©s
(
e
->
∑ª¡
,
§
);

939 
	}
}

941 
ölöe
 
	$f¢odes_add_sub_°©s
(
f¢ode
 *
∑ª¡
,
°©§ec‹d
 *
√w§
,°©§ec‹d *
¥ev§
) {

942 
°©§ec‹d
 
§
;

943 
§
.
öodes
 = 
√w§
->öode†- 
¥ev§
->inodes;

944 
§
.
dús
 = 
√w§
->dú†- 
¥ev§
->dirs;

945 
§
.
fûes
 = 
√w§
->fûe†- 
¥ev§
->files;

946 
§
.
chunks
 = 
√w§
->chunk†- 
¥ev§
->chunks;

947 
§
.
Àngth
 = 
√w§
->Àngth - 
¥ev§
->length;

948 
§
.
size
 = 
√w§
->sizê- 
¥ev§
->size;

949 
§
.
ªÆsize
 = 
√w§
->ªÆsizê- 
¥ev§
->realsize;

950 
	`f¢odes_add_°©s
(
∑ª¡
,&
§
);

951 
	}
}

955 #i‚de‡
METARESTORE


957 
ölöe
 
	$f¢odes_fûl_©å
(
f¢ode
 *
node
,f¢odê*
∑ª¡
,
uöt32_t
 
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt8_t
 
£sÊags
,uöt8_à
©å
[35]) {

958 
uöt8_t
 *
±r
;

959 
uöt16_t
 
mode
;

960 
uöt32_t
 
∆ök
;

966 
f£dge
 *
e
;

967 ()
£sÊags
;

968 
±r
 = 
©å
;

969 i‡(
node
->
ty≥
==
TYPE_TRASH
 ||Çode->ty≥==
TYPE_RESERVED
) {

970 
	`put8bô
(&
±r
,
TYPE_FILE
);

972 
	`put8bô
(&
±r
,
node
->
ty≥
);

974 
mode
 = 
node
->mode&07777;

975 i‡(
∑ª¡
) {

976 i‡(
∑ª¡
->
mode
&(
EATTR_NOECACHE
<<12)) {

977 
mode
 |(
MATTR_NOECACHE
<<12);

1006 i‡((
node
->
mode
&((
EATTR_NOOWNER
|
EATTR_NOACACHE
)<<12)Ë|| (
£sÊags
&
SESFLAG_MAPALL
)) {

1007 
mode
 |(
MATTR_NOACACHE
<<12);

1009 i‡((
node
->
mode
&(
EATTR_NODATACACHE
<<12))==0) {

1010 
mode
 |(
MATTR_ALLOWDATACACHE
<<12);

1012 
	`put16bô
(&
±r
,
mode
);

1013 i‡((
node
->
mode
&(
EATTR_NOOWNER
<<12)Ë&& 
uid
!=0) {

1014 i‡(
£sÊags
&
SESFLAG_MAPALL
) {

1015 
	`put32bô
(&
±r
,
auid
);

1016 
	`put32bô
(&
±r
,
agid
);

1018 
	`put32bô
(&
±r
,
uid
);

1019 
	`put32bô
(&
±r
,
gid
);

1022 i‡(
£sÊags
&
SESFLAG_MAPALL
 && 
auid
!=0) {

1023 i‡(
node
->
uid
==uid) {

1024 
	`put32bô
(&
±r
,
auid
);

1026 
	`put32bô
(&
±r
,0);

1028 i‡(
node
->
gid
==gid) {

1029 
	`put32bô
(&
±r
,
agid
);

1031 
	`put32bô
(&
±r
,0);

1034 
	`put32bô
(&
±r
,
node
->
uid
);

1035 
	`put32bô
(&
±r
,
node
->
gid
);

1038 
	`put32bô
(&
±r
,
node
->
©ime
);

1039 
	`put32bô
(&
±r
,
node
->
mtime
);

1040 
	`put32bô
(&
±r
,
node
->
˘ime
);

1041 
∆ök
 = 0;

1042 
e
=
node
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1043 
∆ök
++;

1045 
node
->
ty≥
) {

1046 
TYPE_FILE
:

1047 
TYPE_TRASH
:

1048 
TYPE_RESERVED
:

1049 
	`put32bô
(&
±r
,
∆ök
);

1050 
	`put64bô
(&
±r
,
node
->
d©a
.
fd©a
.
Àngth
);

1052 
TYPE_DIRECTORY
:

1053 
	`put32bô
(&
±r
,
node
->
d©a
.
dd©a
.
∆ök
);

1054 
	`put64bô
(&
±r
,
node
->
d©a
.
dd©a
.
°©s
->
Àngth
>>30);

1056 
TYPE_SYMLINK
:

1057 
	`put32bô
(&
±r
,
∆ök
);

1058 *
±r
++=0;

1059 *
±r
++=0;

1060 *
±r
++=0;

1061 *
±r
++=0;

1062 
	`put32bô
(&
±r
,
node
->
d©a
.
sd©a
.
∂íg
);

1064 
TYPE_BLOCKDEV
:

1065 
TYPE_CHARDEV
:

1066 
	`put32bô
(&
±r
,
∆ök
);

1067 
	`put32bô
(&
±r
,
node
->
d©a
.
devd©a
.
rdev
);

1068 *
±r
++=0;

1069 *
±r
++=0;

1070 *
±r
++=0;

1071 *
±r
++=0;

1074 
	`put32bô
(&
±r
,
∆ök
);

1075 *
±r
++=0;

1076 *
±r
++=0;

1077 *
±r
++=0;

1078 *
±r
++=0;

1079 *
±r
++=0;

1080 *
±r
++=0;

1081 *
±r
++=0;

1082 *
±r
++=0;

1084 
	}
}

1087 #ifde‡
CACHENOTIFY


1089 
	#CACHE_ENABLE
(
fõld«me
) { \

1090 i‡(
node
->
d©a
.
fõld«me
.
œ°©åch™ge
&1) { \

1091 i‡(
node
->
d©a
.
fõld«me
.
œ°©åch™ge
+
ATTR_CACHE_ENABLE_DELTA
<
ts
) { \

1092 
node
->
d©a
.
fõld«me
.
œ°©åch™ge
--; \

1096 }

	)

1098 
ölöe
 
	$f¢odes_©å_íabÀ_ã°
(
f¢ode
 *
node
,
uöt32_t
 
ts
) {

1099 
node
->
ty≥
) {

1100 
TYPE_FILE
:

1101 
	`CACHE_ENABLE
(
fd©a
);

1103 
TYPE_SYMLINK
:

1104 
	`CACHE_ENABLE
(
sd©a
);

1106 
TYPE_CHARDEV
:

1107 
TYPE_BLOCKDEV
:

1108 
	`CACHE_ENABLE
(
devd©a
);

1110 
TYPE_SOCKET
:

1111 
TYPE_FIFO
:

1112 
	`CACHE_ENABLE
(
od©a
);

1116 
	}
}

1118 
	#CACHE_DISABLE
(
fõld«me
) { \

1119 i‡(
node
->
d©a
.
fõld«me
.
œ°©åch™ge
&1) { \

1120 i‡(
node
->
d©a
.
fõld«me
.
œ°©åch™ge
+
ATTR_CACHE_ENABLE_DELTA
<
ts
) { \

1121 
node
->
d©a
.
fõld«me
.
œ°©åch™ge
 = 
ts
-1; \

1123 
node
->
d©a
.
fõld«me
.
œ°©åch™ge
 = 
ts
; \

1127 i‡(
node
->
d©a
.
fõld«me
.
œ°©åch™ge
+
ATTR_CACHE_DISABLE_DELTA
>
ts
) { \

1128 
node
->
d©a
.
fõld«me
.
œ°©åch™ge
 = 
ts
; \

1130 
node
->
d©a
.
fõld«me
.
œ°©åch™ge
 = 
ts
-1; \

1133 }

	)

1135 
ölöe
 
	$f¢odes_©å_dißbÀ_ã°
(
f¢ode
 *
node
,
uöt32_t
 
ts
) {

1136 
ts
|=1;

1137 
node
->
ty≥
) {

1138 
TYPE_FILE
:

1139 
	`CACHE_DISABLE
(
fd©a
);

1141 
TYPE_SYMLINK
:

1142 
	`CACHE_DISABLE
(
sd©a
);

1144 
TYPE_CHARDEV
:

1145 
TYPE_BLOCKDEV
:

1146 
	`CACHE_DISABLE
(
devd©a
);

1148 
TYPE_SOCKET
:

1149 
TYPE_FIFO
:

1150 
	`CACHE_DISABLE
(
od©a
);

1154 
	}
}

1156 
ölöe
 
	$f¢odes_©å_ch™ged_Ÿhî_∑ª¡s
(
f¢ode
 *
node
,
uöt32_t
 
∑ª¡_to_ign‹e
,uöt32_à
ts
) {

1157 
f£dge
 *
e
;

1158 
uöt8_t
 
©å
[35];

1159 i‡(
	`f¢odes_©å_dißbÀ_ã°
(
node
,
ts
)) {

1160 
e
=
node
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1161 i‡(
e
->
∑ª¡
 &&É->∑ª¡->
id
!=
∑ª¡_to_ign‹e
) {

1162 
	`f¢odes_fûl_©å
(
node
,
e
->
∑ª¡
,0,0,0,0,0,
©å
);

1163 
	`m©o˛£rv_nŸify_©å
(
e
->
∑ª¡
->
id
,
node
->id,
©å
);

1167 
	}
}

1169 
ölöe
 
	$f¢odes_©å_ch™ged
(
f¢ode
 *
node
,
uöt32_t
 
ts
) {

1170 
f£dge
 *
e
;

1171 
uöt8_t
 
©å
[35];

1172 i‡(
	`f¢odes_©å_dißbÀ_ã°
(
node
,
ts
)) {

1173 
e
=
node
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1174 i‡(
e
->
∑ª¡
) {

1175 
	`f¢odes_fûl_©å
(
node
,
e
->
∑ª¡
,0,0,0,0,0,
©å
);

1176 
	`m©o˛£rv_nŸify_©å
(
e
->
∑ª¡
->
id
,
node
->id,
©å
);

1179 i‡(
node
->
ty≥
==
TYPE_DIRECTORY
) {

1180 
	`f¢odes_fûl_©å
(
node
,node,0,0,0,0,0,
©å
);

1181 
	`m©o˛£rv_nŸify_©å
(
node
->
id
,node->id,
©å
);

1184 
	}
}

1186 
ölöe
 
	$f¢odes_©å_ac˚ss
(
f¢ode
 *
node
,
uöt32_t
 
ts
) {

1187 
f£dge
 *
e
;

1188 
uöt8_t
 
©å
[35];

1189 i‡(
	`f¢odes_©å_íabÀ_ã°
(
node
,
ts
)) {

1190 
e
=
node
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1191 i‡(
e
->
∑ª¡
) {

1192 
	`f¢odes_fûl_©å
(
node
,
e
->
∑ª¡
,0,0,0,0,0,
©å
);

1193 
	`m©o˛£rv_nŸify_©å
(
e
->
∑ª¡
->
id
,
node
->id,
©å
);

1197 
	}
}

1204 
ölöe
 
	$f¢odes_ªmove_edge
(
uöt32_t
 
ts
,
f£dge
 *
e
) {

1205 #i‚de‡
METARESTORE


1206 
°©§ec‹d
 
§
;

1208 i‡(
e
->
∑ª¡
) {

1209 #i‚de‡
METARESTORE


1210 
	`f¢odes_gë_°©s
(
e
->
chûd
,&
§
);

1211 
	`f¢odes_sub_°©s
(
e
->
∑ª¡
,&
§
);

1213 
e
->
∑ª¡
->
mtime
 =É->∑ª¡->
˘ime
 = 
ts
;

1214 
e
->
∑ª¡
->
d©a
.
dd©a
.
ñemíts
--;

1215 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

1216 
e
->
∑ª¡
->
d©a
.
dd©a
.
∆ök
--;

1219 i‡(
e
->
chûd
) {

1220 
e
->
chûd
->
˘ime
 = 
ts
;

1222 *(
e
->
¥evchûd
Ëe->
√xtchûd
;

1223 i‡(
e
->
√xtchûd
) {

1224 
e
->
√xtchûd
->
¥evchûd
 =É->prevchild;

1226 *(
e
->
¥ev∑ª¡
Ëe->
√xç¨ít
;

1227 i‡(
e
->
√xç¨ít
) {

1228 
e
->
√xç¨ít
->
¥ev∑ª¡
 =É->prevparent;

1230 #ifde‡
EDGEHASH


1231 i‡(
e
->
¥ev
) {

1232 *(
e
->
¥ev
Ëe->
√xt
;

1233 i‡(
e
->
√xt
) {

1234 
e
->
√xt
->
¥ev
 =É->prev;

1238 #i‚de‡
METARESTORE


1252 
	`‰ì
(
e
->
«me
);

1253 
	`‰ì
(
e
);

1254 
	}
}

1256 
ölöe
 
	$f¢odes_lök
(
uöt32_t
 
ts
,
f¢ode
 *
∑ª¡
,f¢odê*
chûd
,
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

1257 
f£dge
 *
e
;

1258 #i‚de‡
METARESTORE


1259 
°©§ec‹d
 
§
;

1266 #ifde‡
EDGEHASH


1267 
uöt32_t
 
hpos
;

1270 
e
 = 
	`mÆloc
((
f£dge
));

1271 
	`∑s£π
(
e
);

1272 
e
->
∆íg
 =Çleng;

1273 
e
->
«me
 = 
	`mÆloc
(
∆íg
);

1274 
	`∑s£π
(
e
->
«me
);

1275 
	`mem˝y
(
e
->
«me
,«me,
∆íg
);

1276 
e
->
chûd
 = child;

1277 
e
->
∑ª¡
 =Öarent;

1278 
e
->
√xtchûd
 = 
∑ª¡
->
d©a
.
dd©a
.
chûdªn
;

1279 i‡(
e
->
√xtchûd
) {

1280 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

1282 
∑ª¡
->
d©a
.
dd©a
.
chûdªn
 = 
e
;

1283 
e
->
¥evchûd
 = &(
∑ª¡
->
d©a
.
dd©a
.
chûdªn
);

1284 
e
->
√xç¨ít
 = 
chûd
->
∑ª¡s
;

1285 i‡(
e
->
√xç¨ít
) {

1286 
e
->
√xç¨ít
->
¥ev∑ª¡
 = &(e->nextparent);

1288 
chûd
->
∑ª¡s
 = 
e
;

1289 
e
->
¥ev∑ª¡
 = &(
chûd
->
∑ª¡s
);

1290 #ifde‡
EDGEHASH


1291 
hpos
 = 
	`EDGEHASHPOS
(
	`f¢odes_hash
(
∑ª¡
->
id
,
∆íg
,
«me
));

1292 
e
->
√xt
 = 
edgehash
[
hpos
];

1293 i‡(
e
->
√xt
) {

1294 
e
->
√xt
->
¥ev
 = &(e->next);

1296 
edgehash
[
hpos
] = 
e
;

1297 
e
->
¥ev
 = &(
edgehash
[
hpos
]);

1300 
∑ª¡
->
d©a
.
dd©a
.
ñemíts
++;

1301 i‡(
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

1302 
∑ª¡
->
d©a
.
dd©a
.
∆ök
++;

1304 #i‚de‡
METARESTORE


1305 
	`f¢odes_gë_°©s
(
chûd
,&
§
);

1306 
	`f¢odes_add_°©s
(
∑ª¡
,&
§
);

1308 i‡(
ts
>0) {

1309 
∑ª¡
->
mtime
 =Ö¨ít->
˘ime
 = 
ts
;

1310 
chûd
->
˘ime
 = 
ts
;

1312 #i‚de‡
METARESTORE


1327 
	}
}

1329 
ölöe
 
f¢ode
* 
	$f¢odes_¸óã_node
(
uöt32_t
 
ts
,
f¢ode
* 
node
,
uöt16_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
,uöt8_à
ty≥
,uöt16_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
c›ysgid
) {

1330 
f¢ode
 *
p
;

1331 #i‚de‡
METARESTORE


1332 
°©§ec‹d
 *
§
;

1334 
uöt32_t
 
nodïos
;

1335 
p
 = 
	`mÆloc
((
f¢ode
));

1336 
	`∑s£π
(
p
);

1337 
nodes
++;

1338 i‡(
ty≥
==
TYPE_DIRECTORY
) {

1339 
dúnodes
++;

1341 i‡(
ty≥
==
TYPE_FILE
) {

1342 
fûíodes
++;

1353 
p
->
id
 = 
	`f¢odes_gë_√xt_id
();

1354 
p
->
ty≥
 =Åype;

1355 
p
->
˘ime
 =Ö->
mtime
 =Ö->
©ime
 = 
ts
;

1356 i‡(
ty≥
==
TYPE_DIRECTORY
 ||Åy≥==
TYPE_FILE
) {

1357 
p
->
gﬂl
 = 
node
->goal;

1358 
p
->
åashtime
 = 
node
->trashtime;

1360 
p
->
gﬂl
 = 
DEFAULT_GOAL
;

1361 
p
->
åashtime
 = 
DEFAULT_TRASHTIME
;

1363 i‡(
ty≥
==
TYPE_DIRECTORY
) {

1364 
p
->
mode
 = (mode&07777Ë| (
node
->mode&0xF000);

1366 
p
->
mode
 = (mode&07777Ë| (
node
->mode&(0xF000&(~(
EATTR_NOECACHE
<<12))));

1368 
p
->
uid
 = uid;

1369 i‡((
node
->
mode
&02000)==02000) {

1370 
p
->
gid
 = 
node
->gid;

1371 i‡(
c›ysgid
 && 
ty≥
==
TYPE_DIRECTORY
) {

1372 
p
->
mode
 |= 02000;

1375 
p
->
gid
 = gid;

1377 
ty≥
) {

1378 
TYPE_DIRECTORY
:

1379 #i‚de‡
METARESTORE


1380 
§
 = 
	`mÆloc
((
°©§ec‹d
));

1381 
	`∑s£π
(
§
);

1382 
	`mem£t
(
§
,0,(
°©§ec‹d
));

1383 
p
->
d©a
.
dd©a
.
°©s
 = 
§
;

1385 
p
->
d©a
.
dd©a
.
quŸa
 = 
NULL
;

1386 
p
->
d©a
.
dd©a
.
chûdªn
 = 
NULL
;

1387 
p
->
d©a
.
dd©a
.
∆ök
 = 2;

1388 
p
->
d©a
.
dd©a
.
ñemíts
 = 0;

1390 
TYPE_FILE
:

1391 
p
->
d©a
.
fd©a
.
Àngth
 = 0;

1392 
p
->
d©a
.
fd©a
.
chunks
 = 0;

1393 
p
->
d©a
.
fd©a
.
chunkèb
 = 
NULL
;

1394 
p
->
d©a
.
fd©a
.
£ssi⁄ids
 = 
NULL
;

1401 
TYPE_SYMLINK
:

1402 
p
->
d©a
.
sd©a
.
∂íg
 = 0;

1403 
p
->
d©a
.
sd©a
.
∑th
 = 
NULL
;

1410 
TYPE_BLOCKDEV
:

1411 
TYPE_CHARDEV
:

1412 
p
->
d©a
.
devd©a
.
rdev
 = 0;

1424 
p
->
∑ª¡s
 = 
NULL
;

1434 
nodïos
 = 
	`NODEHASHPOS
(
p
->
id
);

1435 
p
->
√xt
 = 
nodehash
[
nodïos
];

1436 
nodehash
[
nodïos
] = 
p
;

1437 
	`f¢odes_lök
(
ts
,
node
,
p
,
∆íg
,
«me
);

1438  
p
;

1439 
	}
}

1441 
ölöe
 
uöt32_t
 
	$f¢odes_gë∑th_size
(
f£dge
 *
e
) {

1442 
uöt32_t
 
size
;

1443 
f¢ode
 *
p
;

1444 i‡(
e
==
NULL
) {

1447 
p
 = 
e
->
∑ª¡
;

1448 
size
 = 
e
->
∆íg
;

1449 
p
!=
roŸ
 &&Ö->
∑ª¡s
) {

1450 
size
 +
p
->
∑ª¡s
->
∆íg
+1;

1451 
p
 =Ö->
∑ª¡s
->
∑ª¡
;

1453  
size
;

1454 
	}
}

1456 
ölöe
 
	$f¢odes_gë∑th_d©a
(
f£dge
 *
e
,
uöt8_t
 *
∑th
,
uöt32_t
 
size
) {

1457 
f¢ode
 *
p
;

1458 i‡(
e
==
NULL
) {

1461 i‡(
size
>=
e
->
∆íg
) {

1462 
size
-=
e
->
∆íg
;

1463 
	`mem˝y
(
∑th
+
size
,
e
->
«me
,e->
∆íg
);

1464 } i‡(
size
>0) {

1465 
	`mem˝y
(
∑th
,
e
->
«me
+”->
∆íg
-
size
),size);

1466 
size
=0;

1468 i‡(
size
>0) {

1469 
∑th
[--
size
]='/';

1471 
p
 = 
e
->
∑ª¡
;

1472 
p
!=
roŸ
 &&Ö->
∑ª¡s
) {

1473 i‡(
size
>=
p
->
∑ª¡s
->
∆íg
) {

1474 
size
-=
p
->
∑ª¡s
->
∆íg
;

1475 
	`mem˝y
(
∑th
+
size
,
p
->
∑ª¡s
->
«me
,p->∑ª¡s->
∆íg
);

1476 } i‡(
size
>0) {

1477 
	`mem˝y
(
∑th
,
p
->
∑ª¡s
->
«me
+’->∑ª¡s->
∆íg
-
size
),size);

1478 
size
=0;

1480 i‡(
size
>0) {

1481 
∑th
[--
size
]='/';

1483 
p
 =Ö->
∑ª¡s
->
∑ª¡
;

1485 
	}
}

1487 
ölöe
 
	$f¢odes_gë∑th
(
f£dge
 *
e
,
uöt16_t
 *
∂íg
,
uöt8_t
 **
∑th
) {

1488 
uöt32_t
 
size
;

1489 
uöt8_t
 *
ªt
;

1490 
f¢ode
 *
p
;

1492 
p
 = 
e
->
∑ª¡
;

1493 
size
 = 
e
->
∆íg
;

1494 
p
!=
roŸ
 &&Ö->
∑ª¡s
) {

1495 
size
 +
p
->
∑ª¡s
->
∆íg
+1;

1496 
p
 =Ö->
∑ª¡s
->
∑ª¡
;

1498 i‡(
size
>65535) {

1499 
	`sy¶og
(
LOG_WARNING
,"pathÅooÜong !!! -Åruncate");

1500 
size
=65535;

1502 *
∂íg
 = 
size
;

1503 
ªt
 = 
	`mÆloc
(
size
);

1504 
	`∑s£π
(
ªt
);

1505 
size
 -
e
->
∆íg
;

1506 
	`mem˝y
(
ªt
+
size
,
e
->
«me
,e->
∆íg
);

1507 i‡(
size
>0) {

1508 
ªt
[--
size
]='/';

1510 
p
 = 
e
->
∑ª¡
;

1511 
p
!=
roŸ
 &&Ö->
∑ª¡s
) {

1512 i‡(
size
>=
p
->
∑ª¡s
->
∆íg
) {

1513 
size
-=
p
->
∑ª¡s
->
∆íg
;

1514 
	`mem˝y
(
ªt
+
size
,
p
->
∑ª¡s
->
«me
,p->∑ª¡s->
∆íg
);

1516 i‡(
size
>0) {

1517 
	`mem˝y
(
ªt
,
p
->
∑ª¡s
->
«me
+’->∑ª¡s->
∆íg
-
size
),size);

1518 
size
=0;

1521 i‡(
size
>0) {

1522 
ªt
[--
size
]='/';

1524 
p
 =Ö->
∑ª¡s
->
∑ª¡
;

1526 *
∑th
 = 
ªt
;

1527 
	}
}

1530 #i‚de‡
METARESTORE


1611 
ölöe
 
uöt32_t
 
	$f¢odes_gëdëachedsize
(
f£dge
 *
°¨t
) {

1612 
f£dge
 *
e
;

1613 
uöt32_t
 
ªsu…
=0;

1614 
e
 = 
°¨t
 ;É ;ÉÛ->
√xtchûd
) {

1615 i‡(
e
->
∆íg
>240) {

1616 
ªsu…
+=245;

1618 
ªsu…
+=5+
e
->
∆íg
;

1621  
ªsu…
;

1622 
	}
}

1624 
ölöe
 
	$f¢odes_gëdëachedd©a
(
f£dge
 *
°¨t
,
uöt8_t
 *
dbuff
) {

1625 
f£dge
 *
e
;

1626 
uöt8_t
 *
•å
;

1627 
uöt8_t
 
c
;

1628 
e
 = 
°¨t
 ;É ;ÉÛ->
√xtchûd
) {

1629 i‡(
e
->
∆íg
>240) {

1630 *
dbuff
=240;

1631 
dbuff
++;

1632 
	`mem˝y
(
dbuff
,"(...)",5);

1633 
dbuff
+=5;

1634 
•å
 = 
e
->
«me
+”->
∆íg
-235);

1635 
c
=0 ; c<235 ; c++) {

1636 i‡(*
•å
=='/') {

1637 *
dbuff
='|';

1639 *
dbuff
 = *
•å
;

1641 
•å
++;

1642 
dbuff
++;

1645 *
dbuff
=
e
->
∆íg
;

1646 
dbuff
++;

1647 
•å
 = 
e
->
«me
;

1648 
c
=0 ; c<
e
->
∆íg
 ; c++) {

1649 i‡(*
•å
=='/') {

1650 *
dbuff
='|';

1652 *
dbuff
 = *
•å
;

1654 
•å
++;

1655 
dbuff
++;

1658 
	`put32bô
(&
dbuff
,
e
->
chûd
->
id
);

1660 
	}
}

1663 
ölöe
 
uöt32_t
 
	$f¢odes_gëdúsize
(
f¢ode
 *
p
,
uöt8_t
 
wôh©å
) {

1664 
uöt32_t
 
ªsu…
 = ((
wôh©å
)?40:6)*2+3;

1665 
f£dge
 *
e
;

1666 
e
 = 
p
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

1667 
ªsu…
+=((
wôh©å
)?40:6)+
e
->
∆íg
;

1669  
ªsu…
;

1670 
	}
}

1672 
ölöe
 
	$f¢odes_gëdúd©a
(
uöt32_t
 
roŸöode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt8_t
 
£sÊags
,
f¢ode
 *
p
,uöt8_à*
dbuff
,uöt8_à
wôh©å
) {

1673 
f£dge
 *
e
;

1675 
dbuff
[0]=1;

1676 
dbuff
[1]='.';

1677 
dbuff
+=2;

1678 i‡(
p
->
id
!=
roŸöode
) {

1679 
	`put32bô
(&
dbuff
,
p
->
id
);

1681 
	`put32bô
(&
dbuff
,
MFS_ROOT_ID
);

1683 i‡(
wôh©å
) {

1684 
	`f¢odes_fûl_©å
(
p
,p,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1685 
dbuff
+=35;

1687 
	`put8bô
(&
dbuff
,
TYPE_DIRECTORY
);

1690 
dbuff
[0]=2;

1691 
dbuff
[1]='.';

1692 
dbuff
[2]='.';

1693 
dbuff
+=3;

1694 i‡(
p
->
id
==
roŸöode
) {

1695 
	`put32bô
(&
dbuff
,
MFS_ROOT_ID
);

1696 i‡(
wôh©å
) {

1697 
	`f¢odes_fûl_©å
(
p
,p,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1698 
dbuff
+=35;

1700 
	`put8bô
(&
dbuff
,
TYPE_DIRECTORY
);

1703 i‡(
p
->
∑ª¡s
 &&Ö->∑ª¡s->
∑ª¡
->
id
!=
roŸöode
) {

1704 
	`put32bô
(&
dbuff
,
p
->
∑ª¡s
->
∑ª¡
->
id
);

1706 
	`put32bô
(&
dbuff
,
MFS_ROOT_ID
);

1708 i‡(
wôh©å
) {

1709 i‡(
p
->
∑ª¡s
) {

1710 
	`f¢odes_fûl_©å
(
p
->
∑ª¡s
->
∑ª¡
,p,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1712 i‡(
roŸöode
==
MFS_ROOT_ID
) {

1713 
	`f¢odes_fûl_©å
(
roŸ
,
p
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1715 
f¢ode
 *
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

1716 i‡(
∫
) {

1717 
	`f¢odes_fûl_©å
(
∫
,
p
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1719 
	`mem£t
(
dbuff
,0,35);

1723 
dbuff
+=35;

1725 
	`put8bô
(&
dbuff
,
TYPE_DIRECTORY
);

1729 
e
 = 
p
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

1730 
dbuff
[0]=
e
->
∆íg
;

1731 
dbuff
++;

1732 
	`mem˝y
(
dbuff
,
e
->
«me
,e->
∆íg
);

1733 
dbuff
+=
e
->
∆íg
;

1734 
	`put32bô
(&
dbuff
,
e
->
chûd
->
id
);

1735 i‡(
wôh©å
) {

1736 
	`f¢odes_fûl_©å
(
e
->
chûd
,
p
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
dbuff
);

1737 
dbuff
+=35;

1739 
	`put8bô
(&
dbuff
,
e
->
chûd
->
ty≥
);

1742 
	}
}

1744 
ölöe
 
	$f¢odes_checkfûe
(
f¢ode
 *
p
,
uöt32_t
 
chunkcou¡
[11]) {

1745 
uöt32_t
 
i
;

1746 
uöt64_t
 
chunkid
;

1747 
uöt8_t
 
cou¡
;

1748 
i
=0 ; i<11 ; i++) {

1749 
chunkcou¡
[
i
]=0;

1751 
i
=0 ; i<
p
->
d©a
.
fd©a
.
chunks
 ; i++) {

1752 
chunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
i
];

1753 i‡(
chunkid
>0) {

1754 
	`chunk_gë_vÆidc›õs
(
chunkid
,&
cou¡
);

1755 i‡(
cou¡
>10) {

1756 
cou¡
=10;

1758 
chunkcou¡
[
cou¡
]++;

1761 
	}
}

1764 
ölöe
 
uöt8_t
 
	$f¢odes_≠≥ndchunks
(
uöt32_t
 
ts
,
f¢ode
 *
d°obj
,f¢odê*
§cobj
) {

1765 
uöt64_t
 
chunkid
,
Àngth
;

1766 
uöt32_t
 
i
;

1767 
uöt32_t
 
§cchunks
,
d°chunks
;

1768 #i‚de‡
METARESTORE


1769 
°©§ec‹d
 
p§
,
n§
;

1770 
f£dge
 *
e
;

1773 
§cchunks
=0;

1774 
i
=0 ; i<
§cobj
->
d©a
.
fd©a
.
chunks
 ; i++) {

1775 i‡(
§cobj
->
d©a
.
fd©a
.
chunkèb
[
i
]!=0) {

1776 
§cchunks
 = 
i
+1;

1779 i‡(
§cchunks
==0) {

1780  
STATUS_OK
;

1782 
d°chunks
=0;

1783 
i
=0 ; i<
d°obj
->
d©a
.
fd©a
.
chunks
 ; i++) {

1784 i‡(
d°obj
->
d©a
.
fd©a
.
chunkèb
[
i
]!=0) {

1785 
d°chunks
 = 
i
+1;

1788 
i
 = 
§cchunks
+
d°chunks
-1;

1789 i‡(
i
>
MAX_INDEX
) {

1790  
ERROR_INDEXTOOBIG
;

1792 #i‚de‡
METARESTORE


1793 
	`f¢odes_gë_°©s
(
d°obj
,&
p§
);

1795 i‡(
i
>=
d°obj
->
d©a
.
fd©a
.
chunks
) {

1796 
uöt32_t
 
√wsize
;

1797 i‡(
i
<8) {

1798 
√wsize
=
i
+1;

1799 } i‡(
i
<64) {

1800 
√wsize
=(
i
&0xFFFFFFF8)+8;

1802 
√wsize
 = (
i
&0xFFFFFFC0)+64;

1804 i‡(
d°obj
->
d©a
.
fd©a
.
chunkèb
==
NULL
) {

1805 
d°obj
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`mÆloc
((uöt64_t)*
√wsize
);

1807 
d°obj
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`ªÆloc
(d°obj->d©a.fd©a.chunkèb,(uöt64_t)*
√wsize
);

1809 
	`∑s£π
(
d°obj
->
d©a
.
fd©a
.
chunkèb
);

1810 
i
=
d°obj
->
d©a
.
fd©a
.
chunks
 ; i<
√wsize
 ; i++) {

1811 
d°obj
->
d©a
.
fd©a
.
chunkèb
[
i
]=0;

1813 
d°obj
->
d©a
.
fd©a
.
chunks
 = 
√wsize
;

1816 
i
=0 ; i<
§cchunks
 ; i++) {

1817 
chunkid
 = 
§cobj
->
d©a
.
fd©a
.
chunkèb
[
i
];

1818 
d°obj
->
d©a
.
fd©a
.
chunkèb
[
i
+
d°chunks
] = 
chunkid
;

1819 i‡(
chunkid
>0) {

1820 i‡(
	`chunk_add_fûe
(
chunkid
,
d°obj
->
id
,
i
+
d°chunks
,d°obj->
gﬂl
)!=
STATUS_OK
) {

1821 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
§cobj
->
id
,
i
);

1826 
Àngth
 = (((
uöt64_t
)
d°chunks
)<<
MFSCHUNKBITS
)+
§cobj
->
d©a
.
fd©a
.length;

1827 i‡(
d°obj
->
ty≥
==
TYPE_TRASH
) {

1828 
åash•a˚
 -
d°obj
->
d©a
.
fd©a
.
Àngth
;

1829 
åash•a˚
 +
Àngth
;

1830 } i‡(
d°obj
->
ty≥
==
TYPE_RESERVED
) {

1831 
ª£rved•a˚
 -
d°obj
->
d©a
.
fd©a
.
Àngth
;

1832 
ª£rved•a˚
 +
Àngth
;

1834 
d°obj
->
d©a
.
fd©a
.
Àngth
 =Üength;

1835 #i‚de‡
METARESTORE


1836 
	`f¢odes_gë_°©s
(
d°obj
,&
n§
);

1837 
e
=
d°obj
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1838 
	`f¢odes_add_sub_°©s
(
e
->
∑ª¡
,&
n§
,&
p§
);

1841 #ifde‡
METARESTORE


1842 
d°obj
->
mtime
 = 
ts
;

1843 
d°obj
->
©ime
 = 
ts
;

1844 
§cobj
->
©ime
 = 
ts
;

1846 
d°obj
->
mtime
 = 
ts
;

1847 
d°obj
->
©ime
 = 
ts
;

1853 i‡(
§cobj
->
©ime
!=
ts
) {

1854 
§cobj
->
©ime
 = 
ts
;

1862  
STATUS_OK
;

1863 
	}
}

1865 
ölöe
 
	$f¢odes_ch™gefûegﬂl
(
f¢ode
 *
obj
,
uöt8_t
 
gﬂl
) {

1866 
uöt32_t
 
i
;

1867 #i‚de‡
METARESTORE


1868 
°©§ec‹d
 
p§
,
n§
;

1869 
f£dge
 *
e
;

1871 
	`f¢odes_gë_°©s
(
obj
,&
p§
);

1872 
n§
 = 
p§
;

1873 
n§
.
ªÆsize
 = 
gﬂl
 *Ç§.
size
;

1874 
e
=
obj
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1875 
	`f¢odes_add_sub_°©s
(
e
->
∑ª¡
,&
n§
,&
p§
);

1878 
obj
->
gﬂl
 = goal;

1879 
i
=0 ; i<
obj
->
d©a
.
fd©a
.
chunks
 ; i++) {

1880 i‡(
obj
->
d©a
.
fd©a
.
chunkèb
[
i
]>0) {

1881 
	`chunk_£t_fûe_gﬂl
(
obj
->
d©a
.
fd©a
.
chunkèb
[
i
],obj->
id
,i,
gﬂl
);

1884 
	}
}

1886 
ölöe
 
	$f¢odes_£éígth
(
f¢ode
 *
obj
,
uöt64_t
 
Àngth
) {

1887 
uöt32_t
 
i
,
chunks
;

1888 
uöt64_t
 
chunkid
;

1889 #i‚de‡
METARESTORE


1890 
f£dge
 *
e
;

1891 
°©§ec‹d
 
p§
,
n§
;

1892 
	`f¢odes_gë_°©s
(
obj
,&
p§
);

1894 i‡(
obj
->
ty≥
==
TYPE_TRASH
) {

1895 
åash•a˚
 -
obj
->
d©a
.
fd©a
.
Àngth
;

1896 
åash•a˚
 +
Àngth
;

1897 } i‡(
obj
->
ty≥
==
TYPE_RESERVED
) {

1898 
ª£rved•a˚
 -
obj
->
d©a
.
fd©a
.
Àngth
;

1899 
ª£rved•a˚
 +
Àngth
;

1901 
obj
->
d©a
.
fd©a
.
Àngth
 =Üength;

1902 i‡(
Àngth
>0) {

1903 
chunks
 = ((
Àngth
-1)>>
MFSCHUNKBITS
)+1;

1905 
chunks
 = 0;

1907 
i
=
chunks
 ; i<
obj
->
d©a
.
fd©a
.chunks ; i++) {

1908 
chunkid
 = 
obj
->
d©a
.
fd©a
.
chunkèb
[
i
];

1909 i‡(
chunkid
>0) {

1910 i‡(
	`chunk_dñëe_fûe
(
chunkid
,
obj
->
id
,
i
)!=
STATUS_OK
) {

1911 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
obj
->
id
,
i
);

1914 
obj
->
d©a
.
fd©a
.
chunkèb
[
i
]=0;

1916 i‡(
chunks
>0) {

1917 i‡(
chunks
<
obj
->
d©a
.
fd©a
.chunk†&& obj->d©a.fd©a.
chunkèb
) {

1918 
obj
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`ªÆloc
(obj->d©a.fd©a.chunkèb,(uöt64_t)*
chunks
);

1919 
	`∑s£π
(
obj
->
d©a
.
fd©a
.
chunkèb
);

1920 
obj
->
d©a
.
fd©a
.
chunks
 = chunks;

1923 i‡(
obj
->
d©a
.
fd©a
.
chunks
>0 && obj->d©a.fd©a.
chunkèb
) {

1924 
	`‰ì
(
obj
->
d©a
.
fd©a
.
chunkèb
);

1925 
obj
->
d©a
.
fd©a
.
chunkèb
 = 
NULL
;

1926 
obj
->
d©a
.
fd©a
.
chunks
 = 0;

1929 #i‚de‡
METARESTORE


1930 
	`f¢odes_gë_°©s
(
obj
,&
n§
);

1931 
e
=
obj
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

1932 
	`f¢odes_add_sub_°©s
(
e
->
∑ª¡
,&
n§
,&
p§
);

1935 
	}
}

1938 
ölöe
 
	$f¢odes_ªmove_node
(
uöt32_t
 
ts
,
f¢ode
 *
t‹emove
) {

1939 
uöt32_t
 
nodïos
;

1940 
f¢ode
 **
±r
;

1941 i‡(
t‹emove
->
∑ª¡s
!=
NULL
) {

1945 
nodïos
 = 
	`NODEHASHPOS
(
t‹emove
->
id
);

1946 
±r
 = &(
nodehash
[
nodïos
]);

1947 *
±r
) {

1948 i‡(*
±r
==
t‹emove
) {

1949 *
±r
=
t‹emove
->
√xt
;

1952 
±r
 = &((*±r)->
√xt
);

1955 
nodes
--;

1956 i‡(
t‹emove
->
ty≥
==
TYPE_DIRECTORY
) {

1957 
dúnodes
--;

1958 
	`f¢odes_dñëe_quŸ™ode
(
t‹emove
);

1959 #i‚de‡
METARESTORE


1960 
	`‰ì
(
t‹emove
->
d©a
.
dd©a
.
°©s
);

1968 i‡(
t‹emove
->
ty≥
==
TYPE_FILE
 ||Å‹emove->ty≥==
TYPE_TRASH
 ||Å‹emove->ty≥==
TYPE_RESERVED
) {

1969 
uöt32_t
 
i
;

1970 
uöt64_t
 
chunkid
;

1971 
fûíodes
--;

1972 
i
=0 ; i<
t‹emove
->
d©a
.
fd©a
.
chunks
 ; i++) {

1973 
chunkid
 = 
t‹emove
->
d©a
.
fd©a
.
chunkèb
[
i
];

1974 i‡(
chunkid
>0) {

1975 i‡(
	`chunk_dñëe_fûe
(
chunkid
,
t‹emove
->
id
,
i
)!=
STATUS_OK
) {

1976 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
t‹emove
->
id
,
i
);

1980 i‡(
t‹emove
->
d©a
.
fd©a
.
chunkèb
!=
NULL
) {

1981 
	`‰ì
(
t‹emove
->
d©a
.
fd©a
.
chunkèb
);

1984 i‡(
t‹emove
->
ty≥
==
TYPE_SYMLINK
) {

1985 
	`‰ì
(
t‹emove
->
d©a
.
sd©a
.
∑th
);

1987 
	`f¢odes_‰ì_id
(
t‹emove
->
id
,
ts
);

1988 #i‚de‡
METARESTORE


1989 
	`dcm_modify
(
t‹emove
->
id
,0);

1991 
	`‰ì
(
t‹emove
);

1992 
	}
}

1995 
ölöe
 
	$f¢odes_u∆ök
(
uöt32_t
 
ts
,
f£dge
 *
e
) {

1996 
f¢ode
 *
chûd
;

1997 
uöt16_t
 
∂íg
=0;

1998 
uöt8_t
 *
∑th
=
NULL
;

2000 
chûd
 = 
e
->child;

2001 i‡(
chûd
->
∑ª¡s
->
√xç¨ít
==
NULL
) {

2002 i‡(
chûd
->
ty≥
==
TYPE_FILE
 && (chûd->
åashtime
>0 || chûd->
d©a
.
fd©a
.
£ssi⁄ids
!=
NULL
)) {

2003 
	`f¢odes_gë∑th
(
e
,&
∂íg
,&
∑th
);

2006 
	`f¢odes_ªmove_edge
(
ts
,
e
);

2007 i‡(
chûd
->
∑ª¡s
==
NULL
) {

2008 i‡(
chûd
->
ty≥
 =
TYPE_FILE
) {

2009 i‡(
chûd
->
åashtime
>0) {

2010 
chûd
->
ty≥
 = 
TYPE_TRASH
;

2011 
chûd
->
˘ime
 = 
ts
;

2012 
e
 = 
	`mÆloc
((
f£dge
));

2013 
	`∑s£π
(
e
);

2014 
e
->
∆íg
 = 
∂íg
;

2015 
e
->
«me
 = 
∑th
;

2016 
e
->
chûd
 = child;

2017 
e
->
∑ª¡
 = 
NULL
;

2018 
e
->
√xtchûd
 = 
åash
;

2019 
e
->
√xç¨ít
 = 
NULL
;

2020 
e
->
¥evchûd
 = &
åash
;

2021 
e
->
¥ev∑ª¡
 = &(
chûd
->
∑ª¡s
);

2022 i‡(
e
->
√xtchûd
) {

2023 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

2025 #ifde‡
EDGEHASH


2026 
e
->
√xt
 = 
NULL
;

2027 
e
->
¥ev
 = 
NULL
;

2029 
åash
 = 
e
;

2030 
chûd
->
∑ª¡s
 = 
e
;

2031 
åash•a˚
 +
chûd
->
d©a
.
fd©a
.
Àngth
;

2032 
åashnodes
++;

2033 } i‡(
chûd
->
d©a
.
fd©a
.
£ssi⁄ids
!=
NULL
) {

2034 
chûd
->
ty≥
 = 
TYPE_RESERVED
;

2035 
e
 = 
	`mÆloc
((
f£dge
));

2036 
	`∑s£π
(
e
);

2037 
e
->
∆íg
 = 
∂íg
;

2038 
e
->
«me
 = 
∑th
;

2039 
e
->
chûd
 = child;

2040 
e
->
∑ª¡
 = 
NULL
;

2041 
e
->
√xtchûd
 = 
ª£rved
;

2042 
e
->
√xç¨ít
 = 
NULL
;

2043 
e
->
¥evchûd
 = &
ª£rved
;

2044 
e
->
¥ev∑ª¡
 = &(
chûd
->
∑ª¡s
);

2045 i‡(
e
->
√xtchûd
) {

2046 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

2048 #ifde‡
EDGEHASH


2049 
e
->
√xt
 = 
NULL
;

2050 
e
->
¥ev
 = 
NULL
;

2052 
ª£rved
 = 
e
;

2053 
chûd
->
∑ª¡s
 = 
e
;

2054 
ª£rved•a˚
 +
chûd
->
d©a
.
fd©a
.
Àngth
;

2055 
ª£rvednodes
++;

2057 
	`f¢odes_ªmove_node
(
ts
,
chûd
);

2060 
	`f¢odes_ªmove_node
(
ts
,
chûd
);

2063 
	}
}

2065 
ölöe
 
	$f¢odes_purge
(
uöt32_t
 
ts
,
f¢ode
 *
p
) {

2066 
f£dge
 *
e
;

2067 
e
 = 
p
->
∑ª¡s
;

2069 i‡(
p
->
ty≥
==
TYPE_TRASH
) {

2070 
åash•a˚
 -
p
->
d©a
.
fd©a
.
Àngth
;

2071 
åashnodes
--;

2072 i‡(
p
->
d©a
.
fd©a
.
£ssi⁄ids
!=
NULL
) {

2073 
p
->
ty≥
 = 
TYPE_RESERVED
;

2074 
ª£rved•a˚
 +
p
->
d©a
.
fd©a
.
Àngth
;

2075 
ª£rvednodes
++;

2076 *(
e
->
¥evchûd
Ëe->
√xtchûd
;

2077 i‡(
e
->
√xtchûd
) {

2078 
e
->
√xtchûd
->
¥evchûd
 =É->prevchild;

2080 
e
->
√xtchûd
 = 
ª£rved
;

2081 
e
->
¥evchûd
 = &(
ª£rved
);

2082 i‡(
e
->
√xtchûd
) {

2083 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

2085 
ª£rved
 = 
e
;

2088 
	`f¢odes_ªmove_edge
(
ts
,
e
);

2089 
	`f¢odes_ªmove_node
(
ts
,
p
);

2092 } i‡(
p
->
ty≥
==
TYPE_RESERVED
) {

2093 
ª£rved•a˚
 -
p
->
d©a
.
fd©a
.
Àngth
;

2094 
ª£rvednodes
--;

2095 
	`f¢odes_ªmove_edge
(
ts
,
e
);

2096 
	`f¢odes_ªmove_node
(
ts
,
p
);

2100 
	}
}

2102 
ölöe
 
uöt8_t
 
	$f¢odes_undñ
(
uöt32_t
 
ts
,
f¢ode
 *
node
) {

2103 
uöt16_t
 
∂íg
;

2104 c⁄° 
uöt8_t
 *
∑th
;

2105 
uöt8_t
 
√w
;

2106 
uöt32_t
 
i
,
∑πÀng
,
dŸs
;

2107 
f£dge
 *
e
,*
≥
;

2108 
f¢ode
 *
p
,*
n
;

2111 
e
 = 
node
->
∑ª¡s
;

2112 
∂íg
 = 
e
->
∆íg
;

2113 
∑th
 = 
e
->
«me
;

2115 i‡(
∑th
==
NULL
) {

2116  
ERROR_CANTCREATEPATH
;

2118 *
∑th
=='/' && 
∂íg
>0) {

2119 
∑th
++;

2120 
∂íg
--;

2122 i‡(
∂íg
==0) {

2123  
ERROR_CANTCREATEPATH
;

2125 
∑πÀng
=0;

2126 
dŸs
=0;

2127 
i
=0 ; i<
∂íg
 ; i++) {

2128 i‡(
∑th
[
i
]==0) {

2129  
ERROR_CANTCREATEPATH
;

2130 } i‡(
∑th
[
i
]=='/') {

2131 i‡(
∑πÀng
==0) {

2132  
ERROR_CANTCREATEPATH
;

2134 i‡(
∑πÀng
==
dŸs
 &&Öartleng<=2) {

2135  
ERROR_CANTCREATEPATH
;

2137 
∑πÀng
=0;

2138 
dŸs
=0;

2140 i‡(
∑th
[
i
]=='.') {

2141 
dŸs
++;

2143 
∑πÀng
++;

2144 i‡(
∑πÀng
>
MAXFNAMELENG
) {

2145  
ERROR_CANTCREATEPATH
;

2149 i‡(
∑πÀng
==0) {

2150  
ERROR_CANTCREATEPATH
;

2152 i‡(
∑πÀng
==
dŸs
 &&Öartleng<=2) {

2153  
ERROR_CANTCREATEPATH
;

2157 
n
 = 
NULL
;

2158 
p
 = 
roŸ
;

2159 
√w
 = 0;

2161 #i‚de‡
METARESTORE


2162 i‡(
p
->
d©a
.
dd©a
.
quŸa
 &&Ö->d©a.dd©a.quŸa->
ex˚eded
) {

2163  
ERROR_QUOTA
;

2166 
∑πÀng
=0;

2167 
∑th
[
∑πÀng
]!='/' &&Ö¨éíg<
∂íg
) {

2168 
∑πÀng
++;

2170 i‡(
∑πÀng
==
∂íg
) {

2171 i‡(
	`f¢odes_«meisu£d
(
p
,
∑πÀng
,
∑th
)) {

2172  
ERROR_EEXIST
;

2175 
node
->
ty≥
 = 
TYPE_FILE
;

2176 
node
->
˘ime
 = 
ts
;

2177 
	`f¢odes_lök
(
ts
,
p
,
node
,
∑πÀng
,
∑th
);

2178 
	`f¢odes_ªmove_edge
(
ts
,
e
);

2179 
åash•a˚
 -
node
->
d©a
.
fd©a
.
Àngth
;

2180 
åashnodes
--;

2181  
STATUS_OK
;

2183 i‡(
√w
==0) {

2184 
≥
 = 
	`f¢odes_lookup
(
p
,
∑πÀng
,
∑th
);

2185 i‡(
≥
==
NULL
) {

2186 
√w
=1;

2188 
n
 = 
≥
->
chûd
;

2189 i‡(
n
->
ty≥
!=
TYPE_DIRECTORY
) {

2190  
ERROR_CANTCREATEPATH
;

2194 i‡(
√w
==1) {

2195 
n
 = 
	`f¢odes_¸óã_node
(
ts
,
p
,
∑πÀng
,
∑th
,
TYPE_DIRECTORY
,0755,0,0,0);

2197 
p
 = 
n
;

2199 
∑th
+=
∑πÀng
+1;

2200 
∂íg
-=
∑πÀng
+1;

2202 
	}
}

2205 #i‚de‡
METARESTORE


2304 
ölöe
 
	$f¢odes_gëgﬂl_ªcursive
(
f¢ode
 *
node
,
uöt8_t
 
gmode
,
uöt32_t
 
fgèb
[10],uöt32_à
dgèb
[10]) {

2305 
f£dge
 *
e
;

2307 i‡(
node
->
ty≥
==
TYPE_FILE
 ||Çode->ty≥==
TYPE_TRASH
 ||Çode->ty≥==
TYPE_RESERVED
) {

2308 i‡(
node
->
gﬂl
>9) {

2309 
	`sy¶og
(
LOG_WARNING
,"öodê%"
PRIu32
": gﬂl>9 !!! - fixög",
node
->
id
);

2310 
	`f¢odes_ch™gefûegﬂl
(
node
,9);

2311 } i‡(
node
->
gﬂl
<1) {

2312 
	`sy¶og
(
LOG_WARNING
,"öodê%"
PRIu32
": gﬂl<1 !!! - fixög",
node
->
id
);

2313 
	`f¢odes_ch™gefûegﬂl
(
node
,1);

2315 
fgèb
[
node
->
gﬂl
]++;

2316 } i‡(
node
->
ty≥
==
TYPE_DIRECTORY
) {

2317 i‡(
node
->
gﬂl
>9) {

2318 
	`sy¶og
(
LOG_WARNING
,"öodê%"
PRIu32
": gﬂl>9 !!! - fixög",
node
->
id
);

2319 
node
->
gﬂl
=9;

2320 } i‡(
node
->
gﬂl
<1) {

2321 
	`sy¶og
(
LOG_WARNING
,"öodê%"
PRIu32
": gﬂl<1 !!! - fixög",
node
->
id
);

2322 
node
->
gﬂl
=1;

2324 
dgèb
[
node
->
gﬂl
]++;

2325 i‡(
gmode
==
GMODE_RECURSIVE
) {

2326 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2327 
	`f¢odes_gëgﬂl_ªcursive
(
e
->
chûd
,
gmode
,
fgèb
,
dgèb
);

2331 
	}
}

2333 
ölöe
 
	$f¢odes_b°_add
(
b°node
 **
n
,
uöt32_t
 
vÆ
) {

2334 *
n
) {

2335 i‡(
vÆ
<(*
n
)->val) {

2336 
n
 = &((*n)->
À·
);

2337 } i‡(
vÆ
>(*
n
)->val) {

2338 
n
 = &((*n)->
right
);

2340 (*
n
)->
cou¡
++;

2344 (*
n
)=
	`mÆloc
((
b°node
));

2345 
	`∑s£π
(*
n
);

2346 (*
n
)->
vÆ
 = val;

2347 (*
n
)->
cou¡
 = 1;

2348 (*
n
)->
À·
 = 
NULL
;

2349 (*
n
)->
right
 = 
NULL
;

2350 
	}
}

2352 
ölöe
 
uöt32_t
 
	$f¢odes_b°_nodes
(
b°node
 *
n
) {

2353 i‡(
n
) {

2354  1+
	`f¢odes_b°_nodes
(
n
->
À·
)+f¢odes_b°_nodes“->
right
);

2358 
	}
}

2360 
ölöe
 
	$f¢odes_b°_°‹ed©a
(
b°node
 *
n
,
uöt8_t
 **
±r
) {

2361 i‡(
n
) {

2362 
	`f¢odes_b°_°‹ed©a
(
n
->
À·
,
±r
);

2363 
	`put32bô
(&*
±r
,
n
->
vÆ
);

2364 
	`put32bô
(&*
±r
,
n
->
cou¡
);

2365 
	`f¢odes_b°_°‹ed©a
(
n
->
right
,
±r
);

2367 
	}
}

2369 
ölöe
 
	$f¢odes_b°_‰ì
(
b°node
 *
n
) {

2370 i‡(
n
) {

2371 
	`f¢odes_b°_‰ì
(
n
->
À·
);

2372 
	`f¢odes_b°_‰ì
(
n
->
right
);

2373 
	`‰ì
(
n
);

2375 
	}
}

2377 
ölöe
 
	$f¢odes_gëåashtime_ªcursive
(
f¢ode
 *
node
,
uöt8_t
 
gmode
,
b°node
 **
b°roŸfûes
,b°nodê**
b°roŸdús
) {

2378 
f£dge
 *
e
;

2380 i‡(
node
->
ty≥
==
TYPE_FILE
 ||Çode->ty≥==
TYPE_TRASH
 ||Çode->ty≥==
TYPE_RESERVED
) {

2381 
	`f¢odes_b°_add
(
b°roŸfûes
,
node
->
åashtime
);

2382 } i‡(
node
->
ty≥
==
TYPE_DIRECTORY
) {

2383 
	`f¢odes_b°_add
(
b°roŸdús
,
node
->
åashtime
);

2384 i‡(
gmode
==
GMODE_RECURSIVE
) {

2385 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2386 
	`f¢odes_gëåashtime_ªcursive
(
e
->
chûd
,
gmode
,
b°roŸfûes
,
b°roŸdús
);

2390 
	}
}

2392 
ölöe
 
	$f¢odes_gëóâr_ªcursive
(
f¢ode
 *
node
,
uöt8_t
 
gmode
,
uöt32_t
 
„©åèb
[16],uöt32_à
dóâπab
[16]) {

2393 
f£dge
 *
e
;

2395 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

2396 
„©åèb
[(
node
->
mode
>>12)&(
EATTR_NOOWNER
|
EATTR_NOACACHE
|
EATTR_NODATACACHE
)]++;

2398 
dóâπab
[(
node
->
mode
>>12)]++;

2399 i‡(
gmode
==
GMODE_RECURSIVE
) {

2400 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2401 
	`f¢odes_gëóâr_ªcursive
(
e
->
chûd
,
gmode
,
„©åèb
,
dóâπab
);

2405 
	}
}

2409 #i‡
VERSHEX
>=0x010700

2410 
ölöe
 
	$f¢odes_£tgﬂl_ªcursive
(
f¢ode
 *
node
,
uöt32_t
 
ts
,uöt32_à
uid
,
uöt8_t
 
quŸa
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
,uöt32_à*
qeöodes
) {

2412 
ölöe
 
	$f¢odes_£tgﬂl_ªcursive
(
f¢ode
 *
node
,
uöt32_t
 
ts
,uöt32_à
uid
,
uöt8_t
 
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

2414 
f£dge
 *
e
;

2415 
uöt8_t
 
£t
;

2417 i‡(
node
->
ty≥
==
TYPE_FILE
 ||Çode->ty≥==
TYPE_DIRECTORY
 ||Çode->ty≥==
TYPE_TRASH
 ||Çode->ty≥==
TYPE_RESERVED
) {

2418 i‡((
node
->
mode
&(
EATTR_NOOWNER
<<12))==0 && 
uid
!=0 &&Çode->uid!=uid) {

2419 (*
nsöodes
)++;

2421 
£t
=0;

2422 
smode
&
SMODE_TMASK
) {

2423 
SMODE_SET
:

2424 i‡(
node
->
gﬂl
!=goal) {

2425 
£t
=1;

2428 
SMODE_INCREASE
:

2429 i‡(
node
->
gﬂl
<goal) {

2430 
£t
=1;

2433 
SMODE_DECREASE
:

2434 i‡(
node
->
gﬂl
>goal) {

2435 
£t
=1;

2439 i‡(
£t
) {

2440 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

2441 #i‡
VERSHEX
>=0x010700

2442 i‡(
quŸa
 && 
gﬂl
>
node
->goal) {

2443 (*
qeöodes
)++;

2446 
	`f¢odes_ch™gefûegﬂl
(
node
,
gﬂl
);

2447 (*
söodes
)++;

2448 #i‡
VERSHEX
>=0x010700

2452 
node
->
gﬂl
=goal;

2453 (*
söodes
)++;

2455 
node
->
˘ime
 = 
ts
;

2464 (*
ncöodes
)++;

2467 i‡(
node
->
ty≥
==
TYPE_DIRECTORY
 && (
smode
&
SMODE_RMASK
)) {

2468 #i‡
VERSHEX
>=0x010700

2469 i‡(
quŸa
==0 && 
node
->
d©a
.
dd©a
.quŸ®&&Çode->d©a.dd©a.quŸa->
ex˚eded
) {

2470 
quŸa
=1;

2473 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2474 #i‡
VERSHEX
>=0x010700

2475 
	`f¢odes_£tgﬂl_ªcursive
(
e
->
chûd
,
ts
,
uid
,
quŸa
,
gﬂl
,
smode
,
söodes
,
ncöodes
,
nsöodes
,
qeöodes
);

2477 
	`f¢odes_£tgﬂl_ªcursive
(
e
->
chûd
,
ts
,
uid
,
gﬂl
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

2482 
	}
}

2484 
ölöe
 
	$f¢odes_£âøshtime_ªcursive
(
f¢ode
 *
node
,
uöt32_t
 
ts
,uöt32_à
uid
,uöt32_à
åashtime
,
uöt8_t
 
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

2485 
f£dge
 *
e
;

2486 
uöt8_t
 
£t
;

2488 i‡(
node
->
ty≥
==
TYPE_FILE
 ||Çode->ty≥==
TYPE_DIRECTORY
 ||Çode->ty≥==
TYPE_TRASH
 ||Çode->ty≥==
TYPE_RESERVED
) {

2489 i‡((
node
->
mode
&(
EATTR_NOOWNER
<<12))==0 && 
uid
!=0 &&Çode->uid!=uid) {

2490 (*
nsöodes
)++;

2492 
£t
=0;

2493 
smode
&
SMODE_TMASK
) {

2494 
SMODE_SET
:

2495 i‡(
node
->
åashtime
!=trashtime) {

2496 
node
->
åashtime
=trashtime;

2497 
£t
=1;

2500 
SMODE_INCREASE
:

2501 i‡(
node
->
åashtime
<trashtime) {

2502 
node
->
åashtime
=trashtime;

2503 
£t
=1;

2506 
SMODE_DECREASE
:

2507 i‡(
node
->
åashtime
>trashtime) {

2508 
node
->
åashtime
=trashtime;

2509 
£t
=1;

2513 i‡(
£t
) {

2514 (*
söodes
)++;

2515 
node
->
˘ime
 = 
ts
;

2524 (*
ncöodes
)++;

2527 i‡(
node
->
ty≥
==
TYPE_DIRECTORY
 && (
smode
&
SMODE_RMASK
)) {

2528 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2529 
	`f¢odes_£âøshtime_ªcursive
(
e
->
chûd
,
ts
,
uid
,
åashtime
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

2533 
	}
}

2535 
ölöe
 
	$f¢odes_£ã©å_ªcursive
(
f¢ode
 *
node
,
uöt32_t
 
ts
,uöt32_à
uid
,
uöt8_t
 
óâr
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

2536 
f£dge
 *
e
;

2537 
uöt8_t
 
√wóâr
,
£©å
;

2539 i‡((
node
->
mode
&(
EATTR_NOOWNER
<<12))==0 && 
uid
!=0 &&Çode->uid!=uid) {

2540 (*
nsöodes
)++;

2542 
£©å
 = 
óâr
;

2543 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

2544 
node
->
mode
 &~(
EATTR_NOECACHE
<<12);

2545 
£©å
 &~(
EATTR_NOECACHE
);

2547 
√wóâr
 = (
node
->
mode
>>12);

2548 
smode
&
SMODE_TMASK
) {

2549 
SMODE_SET
:

2550 
√wóâr
 = 
£©å
;

2552 
SMODE_INCREASE
:

2553 
√wóâr
 |
£©å
;

2555 
SMODE_DECREASE
:

2556 
√wóâr
 &~
£©å
;

2559 i‡(
√wóâr
!=(
node
->
mode
>>12)) {

2560 
node
->
mode
 = (node->mode&0xFFFË| (((
uöt16_t
)
√wóâr
)<<12);

2561 (*
söodes
)++;

2562 
node
->
˘ime
 = 
ts
;

2571 (*
ncöodes
)++;

2574 i‡(
node
->
ty≥
==
TYPE_DIRECTORY
 && (
smode
&
SMODE_RMASK
)) {

2575 
e
 = 
node
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2576 
	`f¢odes_£ã©å_ªcursive
(
e
->
chûd
,
ts
,
uid
,
óâr
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

2579 
	}
}

2581 
ölöe
 
	$f¢odes_¢≠shŸ
(
uöt32_t
 
ts
,
f¢ode
 *
§˙ode
,f¢odê*
∑ª¡node
,uöt32_à
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

2582 
f£dge
 *
e
;

2583 
f¢ode
 *
d°node
;

2584 
uöt32_t
 
i
;

2585 
uöt64_t
 
chunkid
;

2586 i‡((
e
=
	`f¢odes_lookup
(
∑ª¡node
,
∆íg
,
«me
))) {

2587 
d°node
 = 
e
->
chûd
;

2588 i‡(
§˙ode
->
ty≥
==
TYPE_DIRECTORY
) {

2589 
e
 = 
§˙ode
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2590 
	`f¢odes_¢≠shŸ
(
ts
,
e
->
chûd
,
d°node
,e->
∆íg
,e->
«me
);

2592 } i‡(
§˙ode
->
ty≥
==
TYPE_FILE
) {

2593 
uöt8_t
 
ßme
;

2594 i‡(
d°node
->
d©a
.
fd©a
.
Àngth
==
§˙ode
->d©a.fd©a.Àngth && d°node->d©a.fd©a.
chunks
==srcnode->data.fdata.chunks) {

2595 
ßme
=1;

2596 
i
=0 ; i<
§˙ode
->
d©a
.
fd©a
.
chunks
 && 
ßme
 ; i++) {

2597 i‡(
§˙ode
->
d©a
.
fd©a
.
chunkèb
[
i
]!=
d°node
->data.fdata.chunktab[i]) {

2598 
ßme
=0;

2602 
ßme
=0;

2604 i‡(
ßme
==0) {

2605 #i‚de‡
METARESTORE


2606 
°©§ec‹d
 
p§
,
n§
;

2608 
	`f¢odes_u∆ök
(
ts
,
e
);

2609 
d°node
 = 
	`f¢odes_¸óã_node
(
ts
,
∑ª¡node
,
∆íg
,
«me
,
TYPE_FILE
,
§˙ode
->
mode
,§˙ode->
uid
,§˙ode->
gid
,0);

2610 #i‚de‡
METARESTORE


2611 
	`f¢odes_gë_°©s
(
d°node
,&
p§
);

2613 
d°node
->
gﬂl
 = 
§˙ode
->goal;

2614 
d°node
->
åashtime
 = 
§˙ode
->trashtime;

2618 i‡(
§˙ode
->
d©a
.
fd©a
.
chunks
>0) {

2619 
d°node
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`mÆloc
((uöt64_t)*(
§˙ode
->d©a.fd©a.
chunks
));

2620 
	`∑s£π
(
d°node
->
d©a
.
fd©a
.
chunkèb
);

2622 
d°node
->
d©a
.
fd©a
.
chunkèb
 = 
NULL
;

2624 
d°node
->
d©a
.
fd©a
.
chunks
 = 
§˙ode
->data.fdata.chunks;

2625 
i
=0 ; i<
§˙ode
->
d©a
.
fd©a
.
chunks
 ; i++) {

2626 
chunkid
 = 
§˙ode
->
d©a
.
fd©a
.
chunkèb
[
i
];

2627 
d°node
->
d©a
.
fd©a
.
chunkèb
[
i
] = 
chunkid
;

2628 i‡(
chunkid
>0) {

2629 i‡(
	`chunk_add_fûe
(
chunkid
,
d°node
->
id
,
i
,d°node->
gﬂl
)!=
STATUS_OK
) {

2630 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
§˙ode
->
id
,
i
);

2634 
d°node
->
d©a
.
fd©a
.
Àngth
 = 
§˙ode
->data.fdata.length;

2635 #i‚de‡
METARESTORE


2636 
	`f¢odes_gë_°©s
(
d°node
,&
n§
);

2637 
	`f¢odes_add_sub_°©s
(
∑ª¡node
,&
n§
,&
p§
);

2647 } i‡(
§˙ode
->
ty≥
==
TYPE_SYMLINK
) {

2648 #i‚de‡
METARESTORE


2649 i‡(
d°node
->
d©a
.
sd©a
.
∂íg
!=
§˙ode
->data.sdata.pleng) {

2650 
°©§ec‹d
 
§
;

2651 
	`mem£t
(&
§
,0,(
°©§ec‹d
));

2652 
§
.
Àngth
 = 
d°node
->
d©a
.
sd©a
.
∂íg
-
§˙ode
->data.sdata.pleng;

2653 
	`f¢odes_add_°©s
(
∑ª¡node
,&
§
);

2656 i‡(
d°node
->
d©a
.
sd©a
.
∑th
) {

2657 
	`‰ì
(
d°node
->
d©a
.
sd©a
.
∑th
);

2659 i‡(
§˙ode
->
d©a
.
sd©a
.
∂íg
>0) {

2660 
d°node
->
d©a
.
sd©a
.
∑th
 = 
	`mÆloc
(
§˙ode
->d©a.sd©a.
∂íg
);

2661 
	`∑s£π
(
d°node
->
d©a
.
sd©a
.
∑th
);

2662 
	`mem˝y
(
d°node
->
d©a
.
sd©a
.
∑th
,
§˙ode
->d©a.sd©a.∑th,§˙ode->d©a.sd©a.
∂íg
);

2663 
d°node
->
d©a
.
sd©a
.
∂íg
 = 
§˙ode
->data.sdata.pleng;

2665 
d°node
->
d©a
.
sd©a
.
∑th
=
NULL
;

2666 
d°node
->
d©a
.
sd©a
.
∂íg
=0;

2668 } i‡(
§˙ode
->
ty≥
==
TYPE_BLOCKDEV
 || sr˙ode->ty≥==
TYPE_CHARDEV
) {

2669 
d°node
->
d©a
.
devd©a
.
rdev
 = 
§˙ode
->data.devdata.rdev;

2671 
d°node
->
mode
 = 
§˙ode
->mode;

2672 
d°node
->
uid
 = 
§˙ode
->uid;

2673 
d°node
->
gid
 = 
§˙ode
->gid;

2674 
d°node
->
©ime
 = 
§˙ode
->atime;

2675 
d°node
->
mtime
 = 
§˙ode
->mtime;

2676 
d°node
->
˘ime
 = 
ts
;

2677 #i‚de‡
METARESTORE


2685 i‡(
§˙ode
->
ty≥
==
TYPE_FILE
 || sr˙ode->ty≥==
TYPE_DIRECTORY
 || sr˙ode->ty≥==
TYPE_SYMLINK
 || sr˙ode->ty≥==
TYPE_BLOCKDEV
 || sr˙ode->ty≥==
TYPE_CHARDEV
 || sr˙ode->ty≥==
TYPE_SOCKET
 || sr˙ode->ty≥==
TYPE_FIFO
) {

2686 #i‚de‡
METARESTORE


2687 
°©§ec‹d
 
p§
,
n§
;

2689 
d°node
 = 
	`f¢odes_¸óã_node
(
ts
,
∑ª¡node
,
∆íg
,
«me
,
§˙ode
->
ty≥
,§˙ode->
mode
,§˙ode->
uid
,§˙ode->
gid
,0);

2690 #i‚de‡
METARESTORE


2691 
	`f¢odes_gë_°©s
(
d°node
,&
p§
);

2693 
d°node
->
gﬂl
 = 
§˙ode
->goal;

2694 
d°node
->
åashtime
 = 
§˙ode
->trashtime;

2695 
d°node
->
mode
 = 
§˙ode
->mode;

2696 
d°node
->
©ime
 = 
§˙ode
->atime;

2697 
d°node
->
mtime
 = 
§˙ode
->mtime;

2698 i‡(
§˙ode
->
ty≥
==
TYPE_DIRECTORY
) {

2699 
e
 = 
§˙ode
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2700 
	`f¢odes_¢≠shŸ
(
ts
,
e
->
chûd
,
d°node
,e->
∆íg
,e->
«me
);

2702 } i‡(
§˙ode
->
ty≥
==
TYPE_FILE
) {

2703 i‡(
§˙ode
->
d©a
.
fd©a
.
chunks
>0) {

2704 
d°node
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`mÆloc
((uöt64_t)*(
§˙ode
->d©a.fd©a.
chunks
));

2705 
	`∑s£π
(
d°node
->
d©a
.
fd©a
.
chunkèb
);

2707 
d°node
->
d©a
.
fd©a
.
chunkèb
 = 
NULL
;

2709 
d°node
->
d©a
.
fd©a
.
chunks
 = 
§˙ode
->data.fdata.chunks;

2710 
i
=0 ; i<
§˙ode
->
d©a
.
fd©a
.
chunks
 ; i++) {

2711 
chunkid
 = 
§˙ode
->
d©a
.
fd©a
.
chunkèb
[
i
];

2712 
d°node
->
d©a
.
fd©a
.
chunkèb
[
i
] = 
chunkid
;

2713 i‡(
chunkid
>0) {

2714 i‡(
	`chunk_add_fûe
(
chunkid
,
d°node
->
id
,
i
,d°node->
gﬂl
)!=
STATUS_OK
) {

2715 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
§˙ode
->
id
,
i
);

2719 
d°node
->
d©a
.
fd©a
.
Àngth
 = 
§˙ode
->data.fdata.length;

2720 #i‚de‡
METARESTORE


2721 
	`f¢odes_gë_°©s
(
d°node
,&
n§
);

2722 
	`f¢odes_add_sub_°©s
(
∑ª¡node
,&
n§
,&
p§
);

2724 } i‡(
§˙ode
->
ty≥
==
TYPE_SYMLINK
) {

2725 i‡(
§˙ode
->
d©a
.
sd©a
.
∂íg
>0) {

2726 
d°node
->
d©a
.
sd©a
.
∑th
 = 
	`mÆloc
(
§˙ode
->d©a.sd©a.
∂íg
);

2727 
	`∑s£π
(
d°node
->
d©a
.
sd©a
.
∑th
);

2728 
	`mem˝y
(
d°node
->
d©a
.
sd©a
.
∑th
,
§˙ode
->d©a.sd©a.∑th,§˙ode->d©a.sd©a.
∂íg
);

2729 
d°node
->
d©a
.
sd©a
.
∂íg
 = 
§˙ode
->data.sdata.pleng;

2731 #i‚de‡
METARESTORE


2732 
	`f¢odes_gë_°©s
(
d°node
,&
n§
);

2733 
	`f¢odes_add_sub_°©s
(
∑ª¡node
,&
n§
,&
p§
);

2735 } i‡(
§˙ode
->
ty≥
==
TYPE_BLOCKDEV
 || sr˙ode->ty≥==
TYPE_CHARDEV
) {

2736 
d°node
->
d©a
.
devd©a
.
rdev
 = 
§˙ode
->data.devdata.rdev;

2738 #i‚de‡
METARESTORE


2747 
	}
}

2749 
ölöe
 
uöt8_t
 
	$f¢odes_¢≠shŸ_ã°
(
f¢ode
 *
‹ig§˙ode
,f¢odê*
§˙ode
,f¢odê*
∑ª¡node
,
uöt32_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
,uöt8_à
ˇnovîwrôe
) {

2750 
f£dge
 *
e
;

2751 
f¢ode
 *
d°node
;

2752 
uöt8_t
 
°©us
;

2753 i‡((
e
=
	`f¢odes_lookup
(
∑ª¡node
,
∆íg
,
«me
))) {

2754 
d°node
 = 
e
->
chûd
;

2755 i‡(
d°node
==
‹ig§˙ode
) {

2756  
ERROR_EINVAL
;

2758 i‡(
d°node
->
ty≥
!=
§˙ode
->type) {

2759  
ERROR_EPERM
;

2761 i‡(
§˙ode
->
ty≥
==
TYPE_TRASH
 || sr˙ode->ty≥==
TYPE_RESERVED
) {

2762  
ERROR_EPERM
;

2764 i‡(
§˙ode
->
ty≥
==
TYPE_DIRECTORY
) {

2765 
e
 = 
§˙ode
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

2766 
°©us
 = 
	`f¢odes_¢≠shŸ_ã°
(
‹ig§˙ode
,
e
->
chûd
,
d°node
,e->
∆íg
,e->
«me
,
ˇnovîwrôe
);

2767 i‡(
°©us
!=
STATUS_OK
) {

2768  
°©us
;

2771 } i‡(
ˇnovîwrôe
==0) {

2772  
ERROR_EEXIST
;

2775  
STATUS_OK
;

2776 
	}
}

2778 
ölöe
 
	$f¢odes_«mecheck
(
uöt32_t
 
∆íg
,c⁄° 
uöt8_t
 *
«me
) {

2779 
uöt32_t
 
i
;

2780 i‡(
∆íg
==0 ||ÇÀng>
MAXFNAMELENG
) {

2783 i‡(
«me
[0]=='.') {

2784 i‡(
∆íg
==1) {

2787 i‡(
∆íg
==2 && 
«me
[1]=='.') {

2791 
i
=0 ; i<
∆íg
 ; i++) {

2792 i‡(
«me
[
i
]=='\0' ||Çame[i]=='/') {

2797 
	}
}

2799 #i‚de‡
METARESTORE


2800 
ölöe
 
	$f¢odes_ac˚ss
(
f¢ode
 *
node
,
uöt32_t
 
uid
,uöt32_à
gid
,
uöt8_t
 
modemask
,uöt8_à
£sÊags
) {

2801 
uöt8_t
 
nodemode
;

2802 i‡(
uid
==0) {

2805 i‡(
uid
==
node
->uid || (node->
mode
&(
EATTR_NOOWNER
<<12))) {

2806 
nodemode
 = ((
node
->
mode
)>>6) & 7;

2807 } i‡(
£sÊags
&
SESFLAG_IGNOREGID
) {

2808 
nodemode
 = (((
node
->
mode
)>>3) | (node->mode)) & 7;

2809 } i‡(
gid
==
node
->gid) {

2810 
nodemode
 = ((
node
->
mode
)>>3) & 7;

2812 
nodemode
 = (
node
->
mode
 & 7);

2814 i‡((
nodemode
 & 
modemask
) == modemask) {

2818 
	}
}

2820 
ölöe
 
	$f¢odes_°icky_ac˚ss
(
f¢ode
 *
∑ª¡
,f¢odê*
node
,
uöt32_t
 
uid
) {

2821 i‡(
uid
==0 || (
∑ª¡
->
mode
&01000)==0) {

2824 i‡(
uid
==
∑ª¡
->uid || (∑ª¡->
mode
&(
EATTR_NOOWNER
<<12)Ë|| uid==
node
->uid || (node->mode&(EATTR_NOOWNER<<12))) {

2828 
	}
}

2833 #ifde‡
METARESTORE


2834 
uöt8_t
 
	$fs_ac˚ss
(
uöt32_t
 
ts
,uöt32_à
öode
) {

2835 
f¢ode
 *
p
;

2836 
p
 = 
	`f¢odes_id_to_node
(
öode
);

2837 i‡(!
p
) {

2838  
ERROR_ENOENT
;

2840 
p
->
©ime
 = 
ts
;

2841 
vîsi⁄
++;

2842  
STATUS_OK
;

2843 
	}
}

2846 #i‚de‡
METARESTORE


2847 
uöt8_t
 
	$fs_ªadª£rved_size
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à*
dbuffsize
) {

2848 i‡(
roŸöode
!=0) {

2849  
ERROR_EPERM
;

2851 ()
£sÊags
;

2852 *
dbuffsize
 = 
	`f¢odes_gëdëachedsize
(
ª£rved
);

2853  
STATUS_OK
;

2854 
	}
}

2856 
	$fs_ªadª£rved_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt8_à*
dbuff
) {

2857 ()
roŸöode
;

2858 ()
£sÊags
;

2859 
	`f¢odes_gëdëachedd©a
(
ª£rved
,
dbuff
);

2860 
	}
}

2863 
uöt8_t
 
	$fs_ªadåash_size
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à*
dbuffsize
) {

2864 i‡(
roŸöode
!=0) {

2865  
ERROR_EPERM
;

2867 ()
£sÊags
;

2868 *
dbuffsize
 = 
	`f¢odes_gëdëachedsize
(
åash
);

2869  
STATUS_OK
;

2870 
	}
}

2872 
	$fs_ªadåash_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt8_à*
dbuff
) {

2873 ()
roŸöode
;

2874 ()
£sÊags
;

2875 
	`f¢odes_gëdëachedd©a
(
åash
,
dbuff
);

2876 
	}
}

2879 
uöt8_t
 
	$fs_gëdëached©å
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
©å
[35],uöt8_à
dty≥
) {

2880 
f¢ode
 *
p
;

2881 
	`mem£t
(
©å
,0,35);

2882 i‡(
roŸöode
!=0) {

2883  
ERROR_EPERM
;

2885 ()
£sÊags
;

2886 i‡(!
	`DTYPE_ISVALID
(
dty≥
)) {

2887  
ERROR_EINVAL
;

2889 
p
 = 
	`f¢odes_id_to_node
(
öode
);

2890 i‡(!
p
) {

2891  
ERROR_ENOENT
;

2893 i‡(
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

2894  
ERROR_ENOENT
;

2896 i‡(
dty≥
==
DTYPE_TRASH
 && 
p
->
ty≥
==
TYPE_RESERVED
) {

2897  
ERROR_ENOENT
;

2899 i‡(
dty≥
==
DTYPE_RESERVED
 && 
p
->
ty≥
==
TYPE_TRASH
) {

2900  
ERROR_ENOENT
;

2902 
	`f¢odes_fûl_©å
(
p
,
NULL
,p->
uid
,p->
gid
,p->uid,p->gid,
£sÊags
,
©å
);

2903  
STATUS_OK
;

2904 
	}
}

2906 
uöt8_t
 
	$fs_gëåash∑th
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à*
∂íg
,uöt8_à**
∑th
) {

2907 
f¢ode
 *
p
;

2908 *
∂íg
 = 0;

2909 *
∑th
 = 
NULL
;

2910 i‡(
roŸöode
!=0) {

2911  
ERROR_EPERM
;

2913 ()
£sÊags
;

2914 
p
 = 
	`f¢odes_id_to_node
(
öode
);

2915 i‡(!
p
) {

2916  
ERROR_ENOENT
;

2918 i‡(
p
->
ty≥
!=
TYPE_TRASH
) {

2919  
ERROR_ENOENT
;

2921 *
∂íg
 = 
p
->
∑ª¡s
->
∆íg
;

2922 *
∑th
 = 
p
->
∑ª¡s
->
«me
;

2923  
STATUS_OK
;

2924 
	}
}

2927 #i‚de‡
METARESTORE


2928 
uöt8_t
 
	$fs_£âøsh∑th
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
∂íg
,c⁄° uöt8_à*
∑th
) {

2930 
uöt8_t
 
	$fs_£ç©h
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 *
∑th
) {

2931 
uöt32_t
 
∂íg
;

2933 
f¢ode
 *
p
;

2934 
uöt8_t
 *
√w∑th
;

2935 #ifde‡
METARESTORE


2936 
∂íg
 = 
	`°æí
((*)
∑th
);

2938 
uöt32_t
 
i
;

2939 i‡(
roŸöode
!=0) {

2940  
ERROR_EPERM
;

2942 i‡(
£sÊags
&
SESFLAG_READONLY
) {

2943  
ERROR_EROFS
;

2945 i‡(
∂íg
==0) {

2946  
ERROR_EINVAL
;

2948 
i
=0 ; i<
∂íg
 ; i++) {

2949 i‡(
∑th
[
i
]==0) {

2950  
ERROR_EINVAL
;

2954 
p
 = 
	`f¢odes_id_to_node
(
öode
);

2955 i‡(!
p
) {

2956  
ERROR_ENOENT
;

2958 i‡(
p
->
ty≥
!=
TYPE_TRASH
) {

2959  
ERROR_ENOENT
;

2961 
√w∑th
 = 
	`mÆloc
(
∂íg
);

2962 
	`∑s£π
(
√w∑th
);

2963 
	`‰ì
(
p
->
∑ª¡s
->
«me
);

2964 
	`mem˝y
(
√w∑th
,
∑th
,
∂íg
);

2965 
p
->
∑ª¡s
->
«me
 = 
√w∑th
;

2966 
p
->
∑ª¡s
->
∆íg
 = 
∂íg
;

2967 #i‚de‡
METARESTORE


2968 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SETPATH(%"PRIu32",%s)",(
uöt32_t
)
	`maö_time
(),
öode
,
	`f¢odes_esˇ≥_«me
(
∂íg
,
√w∑th
));

2970 
vîsi⁄
++;

2972  
STATUS_OK
;

2973 
	}
}

2975 #i‚de‡
METARESTORE


2976 
uöt8_t
 
	$fs_undñ
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
) {

2977 
uöt32_t
 
ts
;

2979 
uöt8_t
 
	$fs_undñ
(
uöt32_t
 
ts
,uöt32_à
öode
) {

2981 
f¢ode
 *
p
;

2982 
uöt8_t
 
°©us
;

2983 #i‚de‡
METARESTORE


2984 i‡(
roŸöode
!=0) {

2985  
ERROR_EPERM
;

2987 i‡(
£sÊags
&
SESFLAG_READONLY
) {

2988  
ERROR_EROFS
;

2990 
ts
 = 
	`maö_time
();

2992 
p
 = 
	`f¢odes_id_to_node
(
öode
);

2993 i‡(!
p
) {

2994  
ERROR_ENOENT
;

2996 i‡(
p
->
ty≥
!=
TYPE_TRASH
) {

2997  
ERROR_ENOENT
;

2999 
°©us
 = 
	`f¢odes_undñ
(
ts
,
p
);

3000 #i‚de‡
METARESTORE


3001 i‡(
°©us
==
STATUS_OK
) {

3002 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|UNDEL(%"PRIu32")",
ts
,
öode
);

3005 
vîsi⁄
++;

3007  
°©us
;

3008 
	}
}

3010 #i‚de‡
METARESTORE


3011 
uöt8_t
 
	$fs_purge
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
) {

3012 
uöt32_t
 
ts
;

3014 
uöt8_t
 
	$fs_purge
(
uöt32_t
 
ts
,uöt32_à
öode
) {

3016 
f¢ode
 *
p
;

3017 #i‚de‡
METARESTORE


3018 i‡(
roŸöode
!=0) {

3019  
ERROR_EPERM
;

3021 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3022  
ERROR_EROFS
;

3024 
ts
 = 
	`maö_time
();

3026 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3027 i‡(!
p
) {

3028  
ERROR_ENOENT
;

3030 i‡(
p
->
ty≥
!=
TYPE_TRASH
) {

3031  
ERROR_ENOENT
;

3033 
	`f¢odes_purge
(
ts
,
p
);

3034 #i‚de‡
METARESTORE


3035 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|PURGE(%"PRIu32")",
ts
,
öode
);

3037 
vîsi⁄
++;

3039  
STATUS_OK
;

3040 
	}
}

3042 #i‚de‡
METARESTORE


3043 
	$fs_öfo
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
å•a˚
,
uöt32_t
 *
ånodes
,uöt64_à*
ª•a˚
,uöt32_à*
ªnodes
,uöt32_à*
öodes
,uöt32_à*
dnodes
,uöt32_à*
‚odes
) {

3044 
	`m©ocs£rv_gë•a˚
(
tŸÆ•a˚
,
avaû•a˚
);

3045 *
å•a˚
 = 
åash•a˚
;

3046 *
ånodes
 = 
åashnodes
;

3047 *
ª•a˚
 = 
ª£rved•a˚
;

3048 *
ªnodes
 = 
ª£rvednodes
;

3049 *
öodes
 = 
nodes
;

3050 *
dnodes
 = 
dúnodes
;

3051 *
‚odes
 = 
fûíodes
;

3052 
	}
}

3054 
uöt8_t
 
	$fs_gëroŸöode
(
uöt32_t
 *
roŸöode
,c⁄° 
uöt8_t
 *
∑th
) {

3055 
uöt32_t
 
∆íg
;

3056 c⁄° 
uöt8_t
 *
«me
;

3057 
f¢ode
 *
p
;

3058 
f£dge
 *
e
;

3060 
«me
 = 
∑th
;

3061 
p
 = 
roŸ
;

3063 *
«me
=='/') {

3064 
«me
++;

3066 i‡(*
«me
=='\0') {

3067 *
roŸöode
 = 
p
->
id
;

3068  
STATUS_OK
;

3070 
∆íg
=0;

3071 
«me
[
∆íg
] &&Çame[nleng]!='/') {

3072 
∆íg
++;

3074 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

3075  
ERROR_EINVAL
;

3077 
e
 = 
	`f¢odes_lookup
(
p
,
∆íg
,
«me
);

3078 i‡(!
e
) {

3079  
ERROR_ENOENT
;

3081 
p
 = 
e
->
chûd
;

3082 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

3083  
ERROR_ENOTDIR
;

3085 
«me
 +
∆íg
;

3087 
	}
}

3089 
	$fs_°©fs
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
å•a˚
,uöt64_à*
ª•a˚
,uöt32_à*
öodes
) {

3090 
f¢ode
 *
∫
;

3091 
quŸ™ode
 *
qn
;

3092 
°©§ec‹d
 
§
;

3093 ()
£sÊags
;

3098 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3099 *
å•a˚
 = 
åash•a˚
;

3100 *
ª•a˚
 = 
ª£rved•a˚
;

3101 
∫
 = 
roŸ
;

3103 *
å•a˚
 = 0;

3104 *
ª•a˚
 = 0;

3105 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3107 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3108 *
tŸÆ•a˚
 = 0;

3109 *
avaû•a˚
 = 0;

3110 *
öodes
 = 0;

3112 
	`m©ocs£rv_gë•a˚
(
tŸÆ•a˚
,
avaû•a˚
);

3113 
	`f¢odes_gë_°©s
(
∫
,&
§
);

3114 *
öodes
 = 
§
.inodes;

3115 
qn
 = 
∫
->
d©a
.
dd©a
.
quŸa
;

3116 i‡(
qn
 && (qn->
Êags
&
QUOTA_FLAG_HREALSIZE
)) {

3117 i‡(
§
.
ªÆsize
>=
qn
->
hªÆsize
) {

3118 *
avaû•a˚
 = 0;

3119 } i‡(*
avaû•a˚
 > 
qn
->
hªÆsize
 - 
§
.
ªÆsize
) {

3120 *
avaû•a˚
 = 
qn
->
hªÆsize
 - 
§
.
ªÆsize
;

3122 i‡(*
tŸÆ•a˚
 > 
qn
->
hªÆsize
) {

3123 *
tŸÆ•a˚
 = 
qn
->
hªÆsize
;

3126 i‡(
§
.
ªÆsize
 + *
avaû•a˚
 < *
tŸÆ•a˚
) {

3127 *
tŸÆ•a˚
 = 
§
.
ªÆsize
 + *
avaû•a˚
;

3130 
°©s_°©fs
++;

3131 
	}
}

3133 
uöt8_t
 
	$fs_ac˚ss
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,
modemask
) {

3134 
f¢ode
 *
p
,*
∫
;

3135 i‡((
£sÊags
&
SESFLAG_READONLY
Ë&& (
modemask
&
MODE_MASK_W
)) {

3136  
ERROR_EROFS
;

3138 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3139 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3140 i‡(!
p
) {

3141  
ERROR_ENOENT
;

3144 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3145 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3146  
ERROR_ENOENT
;

3148 i‡(
öode
==
MFS_ROOT_ID
) {

3149 
öode
 = 
roŸöode
;

3150 
p
 = 
∫
;

3152 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3153 i‡(!
p
) {

3154  
ERROR_ENOENT
;

3156 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3157  
ERROR_EPERM
;

3161  
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
modemask
,
£sÊags
)?
STATUS_OK
:
ERROR_EACCES
;

3162 
	}
}

3164 
uöt8_t
 
	$fs_lookup
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

3165 
f¢ode
 *
wd
,*
∫
;

3166 
f£dge
 *
e
;

3173 *
öode
 = 0;

3174 
	`mem£t
(
©å
,0,35);

3175 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3176 
∫
 = 
roŸ
;

3177 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3178 i‡(!
wd
) {

3179  
ERROR_ENOENT
;

3182 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3183 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3184  
ERROR_ENOENT
;

3186 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

3187 
∑ª¡
 = 
roŸöode
;

3188 
wd
 = 
∫
;

3190 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3191 i‡(!
wd
) {

3192  
ERROR_ENOENT
;

3194 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

3195  
ERROR_EPERM
;

3199 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3200  
ERROR_ENOTDIR
;

3202 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_X
,
£sÊags
)) {

3203  
ERROR_EACCES
;

3205 i‡(
«me
[0]=='.') {

3206 i‡(
∆íg
==1) {

3207 i‡(
∑ª¡
==
roŸöode
) {

3208 *
öode
 = 
MFS_ROOT_ID
;

3210 *
öode
 = 
wd
->
id
;

3212 
	`f¢odes_fûl_©å
(
wd
,wd,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3213 
°©s_lookup
++;

3214  
STATUS_OK
;

3216 i‡(
∆íg
==2 && 
«me
[1]=='.') {

3217 i‡(
∑ª¡
==
roŸöode
) {

3218 *
öode
 = 
MFS_ROOT_ID
;

3219 
	`f¢odes_fûl_©å
(
wd
,wd,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3221 i‡(
wd
->
∑ª¡s
) {

3222 i‡(
wd
->
∑ª¡s
->
∑ª¡
->
id
==
roŸöode
) {

3223 *
öode
 = 
MFS_ROOT_ID
;

3225 *
öode
 = 
wd
->
∑ª¡s
->
∑ª¡
->
id
;

3227 
	`f¢odes_fûl_©å
(
wd
->
∑ª¡s
->
∑ª¡
,wd,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3229 *
öode
=
MFS_ROOT_ID
;

3230 
	`f¢odes_fûl_©å
(
∫
,
wd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3233 
°©s_lookup
++;

3234  
STATUS_OK
;

3237 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

3238  
ERROR_EINVAL
;

3240 
e
 = 
	`f¢odes_lookup
(
wd
,
∆íg
,
«me
);

3241 i‡(!
e
) {

3242  
ERROR_ENOENT
;

3249 *
öode
 = 
e
->
chûd
->
id
;

3250 
	`f¢odes_fûl_©å
(
e
->
chûd
,
wd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3251 
°©s_lookup
++;

3252  
STATUS_OK
;

3253 
	}
}

3255 
uöt8_t
 
	$fs_gë©å
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
©å
[35]) {

3256 
f¢ode
 *
p
,*
∫
;

3263 ()
£sÊags
;

3264 
	`mem£t
(
©å
,0,35);

3265 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3266 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3267 i‡(!
p
) {

3268  
ERROR_ENOENT
;

3271 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3272 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3273  
ERROR_ENOENT
;

3275 i‡(
öode
==
MFS_ROOT_ID
) {

3276 
öode
 = 
roŸöode
;

3277 
p
 = 
∫
;

3279 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3280 i‡(!
p
) {

3281  
ERROR_ENOENT
;

3283 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3284  
ERROR_EPERM
;

3293 
	`f¢odes_fûl_©å
(
p
,
NULL
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3294 
°©s_gë©å
++;

3295  
STATUS_OK
;

3296 
	}
}

3298 
uöt8_t
 
	$fs_åy_£éígth
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
›íed
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt64_t
 
Àngth
,uöt8_à
©å
[35],uöt64_à*
chunkid
) {

3299 
f¢ode
 *
p
,*
∫
;

3300 
	`mem£t
(
©å
,0,35);

3301 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3302  
ERROR_EROFS
;

3304 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3305 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3306 i‡(!
p
) {

3307  
ERROR_ENOENT
;

3310 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3311 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3312  
ERROR_ENOENT
;

3314 i‡(
öode
==
MFS_ROOT_ID
) {

3315 
öode
 = 
roŸöode
;

3316 
p
 = 
∫
;

3318 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3319 i‡(!
p
) {

3320  
ERROR_ENOENT
;

3322 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3323  
ERROR_EPERM
;

3327 i‡(
›íed
==0) {

3328 i‡(!
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

3329  
ERROR_EACCES
;

3332 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

3333  
ERROR_EPERM
;

3335 i‡(
Àngth
>
p
->
d©a
.
fd©a
.length) {

3336 i‡(
	`f¢odes_ã°_quŸa
(
p
)) {

3337  
ERROR_QUOTA
;

3340 i‡(
Àngth
&
MFSCHUNKMASK
) {

3341 
uöt32_t
 
ödx
 = (
Àngth
>>
MFSCHUNKBITS
);

3342 i‡(
ödx
<
p
->
d©a
.
fd©a
.
chunks
) {

3343 
uöt64_t
 
ochunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
];

3344 i‡(
ochunkid
>0) {

3345 
uöt8_t
 
°©us
;

3346 
uöt64_t
 
nchunkid
;

3347 
°©us
 = 
	`chunk_mu…i_åunˇã
(&
nchunkid
,
ochunkid
,
Àngth
&
MFSCHUNKMASK
,
öode
,
ödx
,
p
->
gﬂl
);

3348 i‡(
°©us
!=
STATUS_OK
) {

3349  
°©us
;

3351 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
nchunkid
;

3352 *
chunkid
 = 
nchunkid
;

3353 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|TRUNC(%"PRIu32",%"PRIu32"):%"
PRIu64
,(
uöt32_t
)
	`maö_time
(),
öode
,
ödx
,
nchunkid
);

3354  
ERROR_DELAYED
;

3358 
	`f¢odes_fûl_©å
(
p
,
NULL
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3359 
°©s_£èâr
++;

3360  
STATUS_OK
;

3361 
	}
}

3364 #ifde‡
METARESTORE


3365 
uöt8_t
 
	$fs_åunc
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,
uöt64_t
 
chunkid
) {

3366 
uöt64_t
 
ochunkid
,
nchunkid
;

3367 
uöt8_t
 
°©us
;

3368 
f¢ode
 *
p
;

3369 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3370 i‡(!
p
) {

3371  
ERROR_ENOENT
;

3373 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

3374  
ERROR_EINVAL
;

3376 i‡(
ödx
>
MAX_INDEX
) {

3377  
ERROR_INDEXTOOBIG
;

3379 i‡(
ödx
>=
p
->
d©a
.
fd©a
.
chunks
) {

3380  
ERROR_EINVAL
;

3382 
ochunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
];

3383 
°©us
 = 
	`chunk_mu…i_åunˇã
(
ts
,&
nchunkid
,
ochunkid
,
öode
,
ödx
,
p
->
gﬂl
);

3384 i‡(
°©us
!=
STATUS_OK
) {

3385  
°©us
;

3387 i‡(
chunkid
!=
nchunkid
) {

3388  
ERROR_MISMATCH
;

3390 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
nchunkid
;

3391 
vîsi⁄
++;

3392  
STATUS_OK
;

3393 
	}
}

3396 #i‚de‡
METARESTORE


3397 
uöt8_t
 
	$fs_íd_£éígth
(
uöt64_t
 
chunkid
) {

3398 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|UNLOCK(%"
PRIu64
")",(
uöt32_t
)
	`maö_time
(),
chunkid
);

3399  
	`chunk_u∆ock
(
chunkid
);

3400 
	}
}

3402 
uöt8_t
 
	$fs_u∆ock
(
uöt64_t
 
chunkid
) {

3403 
vîsi⁄
++;

3404  
	`chunk_u∆ock
(
chunkid
);

3405 
	}
}

3408 #i‚de‡
METARESTORE


3409 
uöt8_t
 
	$fs_do_£éígth
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt64_t
 
Àngth
,uöt8_à
©å
[35]) {

3410 
f¢ode
 *
p
,*
∫
;

3411 
uöt32_t
 
ts
 = 
	`maö_time
();

3413 
	`mem£t
(
©å
,0,35);

3414 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

3415 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3416 i‡(!
p
) {

3417  
ERROR_ENOENT
;

3419 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

3420  
ERROR_EPERM
;

3423 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3424 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3425  
ERROR_ENOENT
;

3427 i‡(
öode
==
MFS_ROOT_ID
) {

3428 
öode
 = 
roŸöode
;

3429 
p
 = 
∫
;

3431 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3432 i‡(!
p
) {

3433  
ERROR_ENOENT
;

3435 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3436  
ERROR_EPERM
;

3440 
	`f¢odes_£éígth
(
p
,
Àngth
);

3441 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|LENGTH(%"PRIu32",%"
PRIu64
")",
ts
,
öode
,
p
->
d©a
.
fd©a
.
Àngth
);

3442 
p
->
˘ime
 =Ö->
mtime
 = 
ts
;

3443 
	`f¢odes_fûl_©å
(
p
,
NULL
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3449 
°©s_£èâr
++;

3450  
STATUS_OK
;

3451 
	}
}

3454 
uöt8_t
 
	$fs_£èâr
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
£tmask
,
uöt16_t
 
©åmode
,uöt32_à
©åuid
,uöt32_à
©ågid
,uöt32_à
©å©ime
,uöt32_à
©åmtime
,uöt8_à
sugid˛órmode
,uöt8_à
©å
[35]) {

3455 
f¢ode
 *
p
,*
∫
;

3456 
uöt32_t
 
ts
 = 
	`maö_time
();

3458 
	`mem£t
(
©å
,0,35);

3459 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3460  
ERROR_EROFS
;

3465 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3466 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3467 i‡(!
p
) {

3468  
ERROR_ENOENT
;

3471 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3472 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3473  
ERROR_ENOENT
;

3475 i‡(
öode
==
MFS_ROOT_ID
) {

3476 
öode
 = 
roŸöode
;

3477 
p
 = 
∫
;

3479 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3480 i‡(!
p
) {

3481  
ERROR_ENOENT
;

3483 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3484  
ERROR_EPERM
;

3494 i‡(
uid
!=0 && (
£sÊags
&
SESFLAG_MAPALL
Ë&& (
£tmask
&(
SET_UID_FLAG
|
SET_GID_FLAG
))) {

3495  
ERROR_EPERM
;

3497 i‡((
p
->
mode
&(
EATTR_NOOWNER
<<12))==0) {

3498 i‡(
uid
!=0 && uid!=
p
->uid && (
£tmask
&(
SET_MODE_FLAG
|
SET_UID_FLAG
|
SET_GID_FLAG
|
SET_ATIME_FLAG
|
SET_MTIME_FLAG
))) {

3499  
ERROR_EPERM
;

3502 i‡(
uid
!=0 && uid!=
©åuid
 && (
£tmask
&
SET_UID_FLAG
)) {

3503  
ERROR_EPERM
;

3505 i‡((
£sÊags
&
SESFLAG_IGNOREGID
)==0) {

3506 i‡(
uid
!=0 && 
gid
!=
©ågid
 && (
£tmask
&
SET_GID_FLAG
)) {

3507  
ERROR_EPERM
;

3511 i‡((
£tmask
&(
SET_UID_FLAG
|
SET_GID_FLAG
)Ë&& (£tmask&
SET_MODE_FLAG
)) {

3512 
©åmode
 |(
p
->
mode
 & 06000);

3515 i‡((
p
->
mode
 & 06000Ë&& (
£tmask
&(
SET_UID_FLAG
|
SET_GID_FLAG
))) {

3516 
sugid˛órmode
) {

3517 
SUGID_CLEAR_MODE_ALWAYS
:

3518 
p
->
mode
 &= 0171777;

3519 
©åmode
 &= 01777;

3521 
SUGID_CLEAR_MODE_OSX
:

3522 i‡(
uid
!=0) {

3523 
p
->
mode
 &= 0171777;

3524 
©åmode
 &= 01777;

3527 
SUGID_CLEAR_MODE_BSD
:

3528 i‡(
uid
!=0 && (
£tmask
&
SET_GID_FLAG
Ë&& 
p
->
gid
!=
©ågid
) {

3529 
p
->
mode
 &= 0171777;

3530 
©åmode
 &= 01777;

3533 
SUGID_CLEAR_MODE_EXT
:

3534 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

3535 i‡(
p
->
mode
 & 010) {

3536 
p
->
mode
 &= 0171777;

3537 
©åmode
 &= 01777;

3539 
p
->
mode
 &= 0173777;

3540 
©åmode
 &= 03777;

3544 
SUGID_CLEAR_MODE_XFS
:

3545 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

3546 i‡(
p
->
mode
 & 010) {

3547 
p
->
mode
 &= 0171777;

3548 
©åmode
 &= 01777;

3550 
p
->
mode
 &= 0173777;

3551 
©åmode
 &= 03777;

3553 } i‡(
uid
!=0) {

3554 
p
->
mode
 &= 0171777;

3555 
©åmode
 &= 01777;

3560 i‡(
£tmask
&
SET_MODE_FLAG
) {

3561 
p
->
mode
 = (
©åmode
 & 07777) | (p->mode & 0xF000);

3563 i‡(
£tmask
&
SET_UID_FLAG
) {

3564 
p
->
uid
 = 
©åuid
;

3566 i‡(
£tmask
&
SET_GID_FLAG
) {

3567 
p
->
gid
 = 
©ågid
;

3570 i‡(
£tmask
&
SET_ATIME_FLAG
) {

3571 
p
->
©ime
 = 
©å©ime
;

3573 i‡(
£tmask
&
SET_MTIME_FLAG
) {

3574 
p
->
mtime
 = 
©åmtime
;

3576 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|ATTR(%"PRIu32",%"
PRIu16
",%"PRIu32",%"PRIu32",%"PRIu32",%"PRIu32")",
ts
,
öode
,
p
->
mode
 & 07777,p->
uid
,p->
gid
,p->
©ime
,p->
mtime
);

3577 
p
->
˘ime
 = 
ts
;

3578 
	`f¢odes_fûl_©å
(
p
,
NULL
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3584 
°©s_£èâr
++;

3585  
STATUS_OK
;

3586 
	}
}

3590 #ifde‡
METARESTORE


3591 
uöt8_t
 
	$fs_©å
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
©ime
,uöt32_à
mtime
) {

3592 
f¢ode
 *
p
;

3593 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3594 i‡(!
p
) {

3595  
ERROR_ENOENT
;

3597 i‡(
mode
>07777) {

3598  
ERROR_EINVAL
;

3600 
p
->
mode
 = mode | (p->mode & 0xF000);

3601 
p
->
uid
 = uid;

3602 
p
->
gid
 = gid;

3603 
p
->
©ime
 =átime;

3604 
p
->
mtime
 = mtime;

3605 
p
->
˘ime
 = 
ts
;

3606 
vîsi⁄
++;

3607  
STATUS_OK
;

3608 
	}
}

3610 
uöt8_t
 
	$fs_Àngth
(
uöt32_t
 
ts
,uöt32_à
öode
,
uöt64_t
 
Àngth
) {

3611 
f¢ode
 *
p
;

3612 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3613 i‡(!
p
) {

3614  
ERROR_ENOENT
;

3616 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

3617  
ERROR_EINVAL
;

3619 
	`f¢odes_£éígth
(
p
,
Àngth
);

3620 
p
->
mtime
 = 
ts
;

3621 
p
->
˘ime
 = 
ts
;

3622 
vîsi⁄
++;

3623  
STATUS_OK
;

3624 
	}
}

3670 #i‚de‡
METARESTORE


3671 
uöt8_t
 
	$fs_ªadlök
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à*
∂íg
,uöt8_à**
∑th
) {

3672 
f¢ode
 *
p
,*
∫
;

3673 
uöt32_t
 
ts
 = 
	`maö_time
();

3675 ()
£sÊags
;

3676 *
∂íg
 = 0;

3677 *
∑th
 = 
NULL
;

3678 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3679 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3680 i‡(!
p
) {

3681  
ERROR_ENOENT
;

3684 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3685 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3686  
ERROR_ENOENT
;

3688 i‡(
öode
==
MFS_ROOT_ID
) {

3689 
öode
 = 
roŸöode
;

3690 
p
 = 
∫
;

3692 
p
 = 
	`f¢odes_id_to_node
(
öode
);

3693 i‡(!
p
) {

3694  
ERROR_ENOENT
;

3696 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

3697  
ERROR_EPERM
;

3701 i‡(
p
->
ty≥
!=
TYPE_SYMLINK
) {

3702  
ERROR_EINVAL
;

3704 *
∂íg
 = 
p
->
d©a
.
sd©a
.pleng;

3705 *
∑th
 = 
p
->
d©a
.
sd©a
.path;

3706 i‡(
p
->
©ime
!=
ts
) {

3707 
p
->
©ime
 = 
ts
;

3713 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|ACCESS(%"PRIu32")",
ts
,
öode
);

3715 
°©s_ªadlök
++;

3716  
STATUS_OK
;

3717 
	}
}

3720 #i‚de‡
METARESTORE


3721 
uöt8_t
 
	$fs_symlök
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
∂íg
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

3723 
uöt8_t
 
	$fs_symlök
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° 
uöt8_t
 *
«me
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
öode
) {

3724 
uöt32_t
 
∂íg
;

3726 
f¢ode
 *
wd
,*
p
;

3727 
uöt8_t
 *
√w∑th
;

3728 #i‚de‡
METARESTORE


3729 
f¢ode
 *
∫
;

3730 
°©§ec‹d
 
§
;

3731 
uöt32_t
 
i
;

3732 *
öode
 = 0;

3733 
	`mem£t
(
©å
,0,35);

3734 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3735  
ERROR_EROFS
;

3737 i‡(
∂íg
==0) {

3738  
ERROR_EINVAL
;

3740 
i
=0 ; i<
∂íg
 ; i++) {

3741 i‡(
∑th
[
i
]==0) {

3742  
ERROR_EINVAL
;

3745 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3746 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3747 i‡(!
wd
) {

3748  
ERROR_ENOENT
;

3751 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3752 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3753  
ERROR_ENOENT
;

3755 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

3756 
∑ª¡
 = 
roŸöode
;

3757 
wd
 = 
∫
;

3759 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3760 i‡(!
wd
) {

3761  
ERROR_ENOENT
;

3763 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

3764  
ERROR_EPERM
;

3769 
∂íg
 = 
	`°æí
((c⁄° *)
∑th
);

3770 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3771 i‡(!
wd
) {

3772  
ERROR_ENOENT
;

3775 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3776  
ERROR_ENOTDIR
;

3778 #i‚de‡
METARESTORE


3779 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

3780  
ERROR_EACCES
;

3783 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

3784  
ERROR_EINVAL
;

3786 i‡(
	`f¢odes_«meisu£d
(
wd
,
∆íg
,
«me
)) {

3787  
ERROR_EEXIST
;

3789 i‡(
	`f¢odes_ã°_quŸa
(
wd
)) {

3790  
ERROR_QUOTA
;

3792 
√w∑th
 = 
	`mÆloc
(
∂íg
);

3793 
	`∑s£π
(
√w∑th
);

3794 #i‚de‡
METARESTORE


3795 
p
 = 
	`f¢odes_¸óã_node
(
	`maö_time
(),
wd
,
∆íg
,
«me
,
TYPE_SYMLINK
,0777,
uid
,
gid
,0);

3797 
p
 = 
	`f¢odes_¸óã_node
(
ts
,
wd
,
∆íg
,
«me
,
TYPE_SYMLINK
,0777,
uid
,
gid
,0);

3799 
	`mem˝y
(
√w∑th
,
∑th
,
∂íg
);

3800 
p
->
d©a
.
sd©a
.
∑th
 = 
√w∑th
;

3801 
p
->
d©a
.
sd©a
.
∂íg
 =Öleng;

3802 #i‚de‡
METARESTORE


3804 
	`mem£t
(&
§
,0,(
°©§ec‹d
));

3805 
§
.
Àngth
 = 
∂íg
;

3806 
	`f¢odes_add_°©s
(
wd
,&
§
);

3808 *
öode
 = 
p
->
id
;

3809 
	`f¢odes_fûl_©å
(
p
,
wd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3810 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SYMLINK(%"PRIu32",%s,%s,%"PRIu32",%"PRIu32"):%"PRIu32,(
uöt32_t
)
	`maö_time
(),
∑ª¡
,
	`f¢odes_esˇ≥_«me
(
∆íg
,
«me
),f¢odes_esˇ≥_«me(
∂íg
,
√w∑th
),
uid
,
gid
,
p
->
id
);

3811 
°©s_symlök
++;

3813 i‡(
öode
!=
p
->
id
) {

3814  
ERROR_MISMATCH
;

3816 
vîsi⁄
++;

3818  
STATUS_OK
;

3819 
	}
}

3821 #i‚de‡
METARESTORE


3822 
uöt8_t
 
	$fs_mknod
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt8_à
ty≥
,uöt16_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à
rdev
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

3823 
f¢ode
 *
wd
,*
p
,*
∫
;

3824 *
öode
 = 0;

3825 
	`mem£t
(
©å
,0,35);

3826 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3827  
ERROR_EROFS
;

3829 i‡(
ty≥
!=
TYPE_FILE
 &&Åy≥!=
TYPE_SOCKET
 &&Åy≥!=
TYPE_FIFO
 &&Åy≥!=
TYPE_BLOCKDEV
 &&Åy≥!=
TYPE_CHARDEV
) {

3830  
ERROR_EINVAL
;

3832 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3833 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3834 i‡(!
wd
) {

3835  
ERROR_ENOENT
;

3838 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3839 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3840  
ERROR_ENOENT
;

3842 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

3843 
∑ª¡
 = 
roŸöode
;

3844 
wd
 = 
∫
;

3846 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3847 i‡(!
wd
) {

3848  
ERROR_ENOENT
;

3850 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

3851  
ERROR_EPERM
;

3855 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3856  
ERROR_ENOTDIR
;

3858 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

3859  
ERROR_EACCES
;

3861 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

3862  
ERROR_EINVAL
;

3864 i‡(
	`f¢odes_«meisu£d
(
wd
,
∆íg
,
«me
)) {

3865  
ERROR_EEXIST
;

3867 i‡(
	`f¢odes_ã°_quŸa
(
wd
)) {

3868  
ERROR_QUOTA
;

3870 
p
 = 
	`f¢odes_¸óã_node
(
	`maö_time
(),
wd
,
∆íg
,
«me
,
ty≥
,
mode
,
uid
,
gid
,0);

3871 i‡(
ty≥
==
TYPE_BLOCKDEV
 ||Åy≥==
TYPE_CHARDEV
) {

3872 
p
->
d©a
.
devd©a
.
rdev
 =Ñdev;

3874 *
öode
 = 
p
->
id
;

3875 
	`f¢odes_fûl_©å
(
p
,
wd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3876 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|CREATE(%"PRIu32",%s,%c,%"
PRIu16
",%"PRIu32",%"PRIu32",%"PRIu32"):%"PRIu32,(
uöt32_t
)
	`maö_time
(),
∑ª¡
,
	`f¢odes_esˇ≥_«me
(
∆íg
,
«me
),
ty≥
,
mode
,
uid
,
gid
,
rdev
,
p
->
id
);

3877 
°©s_mknod
++;

3878  
STATUS_OK
;

3879 
	}
}

3881 
uöt8_t
 
	$fs_mkdú
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt16_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
c›ysgid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

3882 
f¢ode
 *
wd
,*
p
,*
∫
;

3883 *
öode
 = 0;

3884 
	`mem£t
(
©å
,0,35);

3885 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3886  
ERROR_EROFS
;

3888 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3889 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3890 i‡(!
wd
) {

3891  
ERROR_ENOENT
;

3894 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3895 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3896  
ERROR_ENOENT
;

3898 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

3899 
∑ª¡
 = 
roŸöode
;

3900 
wd
 = 
∫
;

3902 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3903 i‡(!
wd
) {

3904  
ERROR_ENOENT
;

3906 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

3907  
ERROR_EPERM
;

3911 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3912  
ERROR_ENOTDIR
;

3914 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

3915  
ERROR_EACCES
;

3917 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

3918  
ERROR_EINVAL
;

3920 i‡(
	`f¢odes_«meisu£d
(
wd
,
∆íg
,
«me
)) {

3921  
ERROR_EEXIST
;

3923 i‡(
	`f¢odes_ã°_quŸa
(
wd
)) {

3924  
ERROR_QUOTA
;

3926 
p
 = 
	`f¢odes_¸óã_node
(
	`maö_time
(),
wd
,
∆íg
,
«me
,
TYPE_DIRECTORY
,
mode
,
uid
,
gid
,
c›ysgid
);

3927 *
öode
 = 
p
->
id
;

3928 
	`f¢odes_fûl_©å
(
p
,
wd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

3929 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|CREATE(%"PRIu32",%s,%c,%"
PRIu16
",%"PRIu32",%"PRIu32",%"PRIu32"):%"PRIu32,(
uöt32_t
)
	`maö_time
(),
∑ª¡
,
	`f¢odes_esˇ≥_«me
(
∆íg
,
«me
),
TYPE_DIRECTORY
,
mode
,
uid
,
gid
,0,
p
->
id
);

3930 
°©s_mkdú
++;

3931  
STATUS_OK
;

3932 
	}
}

3934 
uöt8_t
 
	$fs_¸óã
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° 
uöt8_t
 *
«me
,uöt8_à
ty≥
,uöt32_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
rdev
,uöt32_à
öode
) {

3935 
f¢ode
 *
wd
,*
p
;

3936 i‡(
ty≥
!=
TYPE_FILE
 &&Åy≥!=
TYPE_SOCKET
 &&Åy≥!=
TYPE_FIFO
 &&Åy≥!=
TYPE_BLOCKDEV
 &&Åy≥!=
TYPE_CHARDEV
 &&Åy≥!=
TYPE_DIRECTORY
) {

3937  
ERROR_EINVAL
;

3939 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3940 i‡(!
wd
) {

3941  
ERROR_ENOENT
;

3943 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3944  
ERROR_ENOTDIR
;

3946 i‡(
	`f¢odes_«meisu£d
(
wd
,
∆íg
,
«me
)) {

3947  
ERROR_EEXIST
;

3949 i‡(
	`f¢odes_ã°_quŸa
(
wd
)) {

3950  
ERROR_QUOTA
;

3952 
p
 = 
	`f¢odes_¸óã_node
(
ts
,
wd
,
∆íg
,
«me
,
ty≥
,
mode
,
uid
,
gid
,0);

3953 i‡(
ty≥
==
TYPE_BLOCKDEV
 ||Åy≥==
TYPE_CHARDEV
) {

3954 
p
->
d©a
.
devd©a
.
rdev
 =Ñdev;

3956 i‡(
öode
!=
p
->
id
) {

3957  
ERROR_MISMATCH
;

3959 
vîsi⁄
++;

3960  
STATUS_OK
;

3961 
	}
}

3964 #i‚de‡
METARESTORE


3965 
uöt8_t
 
	$fs_u∆ök
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
) {

3966 
uöt32_t
 
ts
;

3967 
f¢ode
 *
wd
,*
∫
;

3968 
f£dge
 *
e
;

3969 
ts
 = 
	`maö_time
();

3970 i‡(
£sÊags
&
SESFLAG_READONLY
) {

3971  
ERROR_EROFS
;

3973 i‡(
roŸöode
==
MFS_ROOT_ID
) {

3974 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3975 i‡(!
wd
) {

3976  
ERROR_ENOENT
;

3979 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

3980 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

3981  
ERROR_ENOENT
;

3983 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

3984 
∑ª¡
 = 
roŸöode
;

3985 
wd
 = 
∫
;

3987 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

3988 i‡(!
wd
) {

3989  
ERROR_ENOENT
;

3991 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

3992  
ERROR_EPERM
;

3996 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

3997  
ERROR_ENOTDIR
;

3999 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4000  
ERROR_EACCES
;

4002 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

4003  
ERROR_EINVAL
;

4005 
e
 = 
	`f¢odes_lookup
(
wd
,
∆íg
,
«me
);

4006 i‡(!
e
) {

4007  
ERROR_ENOENT
;

4009 i‡(!
	`f¢odes_°icky_ac˚ss
(
wd
,
e
->
chûd
,
uid
)) {

4010  
ERROR_EPERM
;

4012 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

4013  
ERROR_EPERM
;

4015 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|UNLINK(%"PRIu32",%s):%"PRIu32,
ts
,
∑ª¡
,
	`f¢odes_esˇ≥_«me
(
∆íg
,
«me
),
e
->
chûd
->
id
);

4016 
	`f¢odes_u∆ök
(
ts
,
e
);

4017 
°©s_u∆ök
++;

4018  
STATUS_OK
;

4020 
	}
}

4022 
uöt8_t
 
	$fs_rmdú
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
) {

4023 
uöt32_t
 
ts
;

4024 
f¢ode
 *
wd
,*
∫
;

4025 
f£dge
 *
e
;

4026 
ts
 = 
	`maö_time
();

4027 i‡(
£sÊags
&
SESFLAG_READONLY
) {

4028  
ERROR_EROFS
;

4030 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4031 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

4032 i‡(!
wd
) {

4033  
ERROR_ENOENT
;

4036 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4037 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4038  
ERROR_ENOENT
;

4040 i‡(
∑ª¡
==
MFS_ROOT_ID
) {

4041 
∑ª¡
 = 
roŸöode
;

4042 
wd
 = 
∫
;

4044 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

4045 i‡(!
wd
) {

4046  
ERROR_ENOENT
;

4048 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
wd
)) {

4049  
ERROR_EPERM
;

4053 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

4054  
ERROR_ENOTDIR
;

4056 i‡(!
	`f¢odes_ac˚ss
(
wd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4057  
ERROR_EACCES
;

4059 i‡(
	`f¢odes_«mecheck
(
∆íg
,
«me
)<0) {

4060  
ERROR_EINVAL
;

4062 
e
 = 
	`f¢odes_lookup
(
wd
,
∆íg
,
«me
);

4063 i‡(!
e
) {

4064  
ERROR_ENOENT
;

4066 i‡(!
	`f¢odes_°icky_ac˚ss
(
wd
,
e
->
chûd
,
uid
)) {

4067  
ERROR_EPERM
;

4069 i‡(
e
->
chûd
->
ty≥
!=
TYPE_DIRECTORY
) {

4070  
ERROR_ENOTDIR
;

4072 i‡(
e
->
chûd
->
d©a
.
dd©a
.
chûdªn
!=
NULL
) {

4073  
ERROR_ENOTEMPTY
;

4075 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|UNLINK(%"PRIu32",%s):%"PRIu32,
ts
,
∑ª¡
,
	`f¢odes_esˇ≥_«me
(
∆íg
,
«me
),
e
->
chûd
->
id
);

4076 
	`f¢odes_u∆ök
(
ts
,
e
);

4077 
°©s_rmdú
++;

4078  
STATUS_OK
;

4079 
	}
}

4081 
uöt8_t
 
	$fs_u∆ök
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° 
uöt8_t
 *
«me
,uöt32_à
öode
) {

4082 
f¢ode
 *
wd
;

4083 
f£dge
 *
e
;

4084 
wd
 = 
	`f¢odes_id_to_node
(
∑ª¡
);

4085 i‡(!
wd
) {

4086  
ERROR_ENOENT
;

4088 i‡(
wd
->
ty≥
!=
TYPE_DIRECTORY
) {

4089  
ERROR_ENOTDIR
;

4091 
e
 = 
	`f¢odes_lookup
(
wd
,
∆íg
,
«me
);

4092 i‡(!
e
) {

4093  
ERROR_ENOENT
;

4095 i‡(
e
->
chûd
->
id
!=
öode
) {

4096  
ERROR_MISMATCH
;

4098 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
 &&É->chûd->
d©a
.
dd©a
.
chûdªn
!=
NULL
) {

4099  
ERROR_ENOTEMPTY
;

4101 
	`f¢odes_u∆ök
(
ts
,
e
);

4102 
vîsi⁄
++;

4103  
STATUS_OK
;

4104 
	}
}

4107 #i‚de‡
METARESTORE


4108 
uöt8_t
 
	$fs_ª«me
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
∑ª¡_§c
,
uöt16_t
 
∆íg_§c
,c⁄° uöt8_à*
«me_§c
,uöt32_à
∑ª¡_d°
,uöt16_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

4109 
uöt32_t
 
ts
;

4111 
uöt8_t
 
	$fs_move
(
uöt32_t
 
ts
,uöt32_à
∑ª¡_§c
,uöt32_à
∆íg_§c
,c⁄° 
uöt8_t
 *
«me_§c
,uöt32_à
∑ª¡_d°
,uöt32_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
öode
) {

4113 
f¢ode
 *
swd
;

4114 
f£dge
 *
£
;

4115 
f¢ode
 *
dwd
;

4116 
f£dge
 *
de
;

4117 
f¢ode
 *
node
;

4118 #i‚de‡
METARESTORE


4119 
f¢ode
 *
∫
;

4120 
ts
 = 
	`maö_time
();

4121 i‡(
£sÊags
&
SESFLAG_READONLY
) {

4122  
ERROR_EROFS
;

4124 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4125 
swd
 = 
	`f¢odes_id_to_node
(
∑ª¡_§c
);

4126 i‡(!
swd
) {

4127  
ERROR_ENOENT
;

4129 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4130 i‡(!
dwd
) {

4131  
ERROR_ENOENT
;

4134 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4135 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4136  
ERROR_ENOENT
;

4138 i‡(
∑ª¡_§c
==
MFS_ROOT_ID
) {

4139 
∑ª¡_§c
 = 
roŸöode
;

4140 
swd
 = 
∫
;

4142 
swd
 = 
	`f¢odes_id_to_node
(
∑ª¡_§c
);

4143 i‡(!
swd
) {

4144  
ERROR_ENOENT
;

4146 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
swd
)) {

4147  
ERROR_EPERM
;

4150 i‡(
∑ª¡_d°
==
MFS_ROOT_ID
) {

4151 
∑ª¡_d°
 = 
roŸöode
;

4152 
dwd
 = 
∫
;

4154 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4155 i‡(!
dwd
) {

4156  
ERROR_ENOENT
;

4158 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
dwd
)) {

4159  
ERROR_EPERM
;

4164 
swd
 = 
	`f¢odes_id_to_node
(
∑ª¡_§c
);

4165 i‡(!
swd
) {

4166  
ERROR_ENOENT
;

4168 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4169 i‡(!
dwd
) {

4170  
ERROR_ENOENT
;

4173 i‡(
swd
->
ty≥
!=
TYPE_DIRECTORY
) {

4174  
ERROR_ENOTDIR
;

4176 #i‚de‡
METARESTORE


4177 i‡(!
	`f¢odes_ac˚ss
(
swd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4178  
ERROR_EACCES
;

4181 i‡(
	`f¢odes_«mecheck
(
∆íg_§c
,
«me_§c
)<0) {

4182  
ERROR_EINVAL
;

4184 
£
 = 
	`f¢odes_lookup
(
swd
,
∆íg_§c
,
«me_§c
);

4185 i‡(!
£
) {

4186  
ERROR_ENOENT
;

4188 
node
 = 
£
->
chûd
;

4189 #i‚de‡
METARESTORE


4190 i‡(!
	`f¢odes_°icky_ac˚ss
(
swd
,
node
,
uid
)) {

4191  
ERROR_EPERM
;

4194 #ifde‡
METARESTORE


4195 i‡(
node
->
id
!=
öode
) {

4196  
ERROR_MISMATCH
;

4199 i‡(
dwd
->
ty≥
!=
TYPE_DIRECTORY
) {

4200  
ERROR_ENOTDIR
;

4202 #i‚de‡
METARESTORE


4203 i‡(!
	`f¢odes_ac˚ss
(
dwd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4204  
ERROR_EACCES
;

4207 i‡(
£
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

4208 i‡(
	`f¢odes_ißn˚°‹
(
£
->
chûd
,
dwd
)) {

4209  
ERROR_EINVAL
;

4212 i‡(
	`f¢odes_«mecheck
(
∆íg_d°
,
«me_d°
)<0) {

4213  
ERROR_EINVAL
;

4216 i‡(
	`f¢odes_ã°_quŸa
(
dwd
)) {

4217  
ERROR_QUOTA
;

4219 
de
 = 
	`f¢odes_lookup
(
dwd
,
∆íg_d°
,
«me_d°
);

4220 i‡(
de
) {

4221 i‡(
de
->
chûd
->
ty≥
==
TYPE_DIRECTORY
 && de->chûd->
d©a
.
dd©a
.
chûdªn
!=
NULL
) {

4222  
ERROR_ENOTEMPTY
;

4224 #i‚de‡
METARESTORE


4225 i‡(!
	`f¢odes_°icky_ac˚ss
(
dwd
,
de
->
chûd
,
uid
)) {

4226  
ERROR_EPERM
;

4229 
	`f¢odes_u∆ök
(
ts
,
de
);

4231 
	`f¢odes_ªmove_edge
(
ts
,
£
);

4232 
	`f¢odes_lök
(
ts
,
dwd
,
node
,
∆íg_d°
,
«me_d°
);

4233 #i‚de‡
METARESTORE


4234 *
öode
 = 
node
->
id
;

4235 
	`f¢odes_fûl_©å
(
node
,
dwd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

4236 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|MOVE(%"PRIu32",%s,%"PRIu32",%s):%"PRIu32,(
uöt32_t
)
	`maö_time
(),
∑ª¡_§c
,
	`f¢odes_esˇ≥_«me
(
∆íg_§c
,
«me_§c
),
∑ª¡_d°
,f¢odes_esˇ≥_«me(
∆íg_d°
,
«me_d°
),
node
->
id
);

4237 
°©s_ª«me
++;

4239 
vîsi⁄
++;

4241  
STATUS_OK
;

4242 
	}
}

4244 #i‚de‡
METARESTORE


4245 
uöt8_t
 
	$fs_lök
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

4246 
uöt32_t
 
ts
;

4248 
uöt8_t
 
	$fs_lök
(
uöt32_t
 
ts
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,uöt32_à
∆íg_d°
,
uöt8_t
 *
«me_d°
) {

4250 
f¢ode
 *
•
;

4251 
f¢ode
 *
dwd
;

4252 #i‚de‡
METARESTORE


4253 
f¢ode
 *
∫
;

4254 
ts
 = 
	`maö_time
();

4255 *
öode
 = 0;

4256 
	`mem£t
(
©å
,0,35);

4257 i‡(
£sÊags
&
SESFLAG_READONLY
) {

4258  
ERROR_EROFS
;

4260 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4261 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4262 i‡(!
•
) {

4263  
ERROR_ENOENT
;

4265 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4266 i‡(!
dwd
) {

4267  
ERROR_ENOENT
;

4270 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4271 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4272  
ERROR_ENOENT
;

4274 i‡(
öode_§c
==
MFS_ROOT_ID
) {

4275 
öode_§c
 = 
roŸöode
;

4276 
•
 = 
∫
;

4278 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4279 i‡(!
•
) {

4280  
ERROR_ENOENT
;

4282 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
•
)) {

4283  
ERROR_EPERM
;

4286 i‡(
∑ª¡_d°
==
MFS_ROOT_ID
) {

4287 
∑ª¡_d°
 = 
roŸöode
;

4288 
dwd
 = 
∫
;

4290 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4291 i‡(!
dwd
) {

4292  
ERROR_ENOENT
;

4294 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
dwd
)) {

4295  
ERROR_EPERM
;

4300 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4301 i‡(!
•
) {

4302  
ERROR_ENOENT
;

4304 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4305 i‡(!
dwd
) {

4306  
ERROR_ENOENT
;

4309 i‡(
•
->
ty≥
==
TYPE_TRASH
 || sp->ty≥==
TYPE_RESERVED
) {

4310  
ERROR_ENOENT
;

4312 i‡(
•
->
ty≥
==
TYPE_DIRECTORY
) {

4313  
ERROR_EPERM
;

4315 i‡(
dwd
->
ty≥
!=
TYPE_DIRECTORY
) {

4316  
ERROR_ENOTDIR
;

4318 #i‚de‡
METARESTORE


4319 i‡(!
	`f¢odes_ac˚ss
(
dwd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4320  
ERROR_EACCES
;

4323 i‡(
	`f¢odes_«mecheck
(
∆íg_d°
,
«me_d°
)<0) {

4324  
ERROR_EINVAL
;

4326 i‡(
	`f¢odes_«meisu£d
(
dwd
,
∆íg_d°
,
«me_d°
)) {

4327  
ERROR_EEXIST
;

4329 i‡(
	`f¢odes_ã°_quŸa
(
dwd
)) {

4330  
ERROR_QUOTA
;

4332 
	`f¢odes_lök
(
ts
,
dwd
,
•
,
∆íg_d°
,
«me_d°
);

4333 #i‚de‡
METARESTORE


4334 *
öode
 = 
öode_§c
;

4335 
	`f¢odes_fûl_©å
(
•
,
dwd
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

4336 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|LINK(%"PRIu32",%"PRIu32",%s)",(
uöt32_t
)
	`maö_time
(),
öode_§c
,
∑ª¡_d°
,
	`f¢odes_esˇ≥_«me
(
∆íg_d°
,
«me_d°
));

4337 
°©s_lök
++;

4339 
vîsi⁄
++;

4341  
STATUS_OK
;

4342 
	}
}

4344 #i‚de‡
METARESTORE


4345 
uöt8_t
 
	$fs_¢≠shŸ
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
ˇnovîwrôe
) {

4346 
uöt32_t
 
ts
;

4347 
f¢ode
 *
∫
;

4349 
uöt8_t
 
	$fs_¢≠shŸ
(
uöt32_t
 
ts
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,
uöt8_t
 *
«me_d°
,uöt8_à
ˇnovîwrôe
) {

4351 
f¢ode
 *
•
;

4352 
f¢ode
 *
dwd
;

4353 
uöt8_t
 
°©us
;

4354 #i‚de‡
METARESTORE


4355 i‡(
£sÊags
&
SESFLAG_READONLY
) {

4356  
ERROR_EROFS
;

4358 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4359 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4360 i‡(!
•
) {

4361  
ERROR_ENOENT
;

4363 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4364 i‡(!
dwd
) {

4365  
ERROR_ENOENT
;

4368 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4369 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4370  
ERROR_ENOENT
;

4372 i‡(
öode_§c
==
MFS_ROOT_ID
) {

4373 
öode_§c
 = 
roŸöode
;

4374 
•
 = 
∫
;

4376 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4377 i‡(!
•
) {

4378  
ERROR_ENOENT
;

4380 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
•
)) {

4381  
ERROR_EPERM
;

4384 i‡(
∑ª¡_d°
==
MFS_ROOT_ID
) {

4385 
∑ª¡_d°
 = 
roŸöode
;

4386 
dwd
 = 
∫
;

4388 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4389 i‡(!
dwd
) {

4390  
ERROR_ENOENT
;

4392 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
dwd
)) {

4393  
ERROR_EPERM
;

4398 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4399 i‡(!
•
) {

4400  
ERROR_ENOENT
;

4402 
dwd
 = 
	`f¢odes_id_to_node
(
∑ª¡_d°
);

4403 i‡(!
dwd
) {

4404  
ERROR_ENOENT
;

4407 #i‚de‡
METARESTORE


4408 i‡(!
	`f¢odes_ac˚ss
(
•
,
uid
,
gid
,
MODE_MASK_R
,
£sÊags
)) {

4409  
ERROR_EACCES
;

4412 i‡(
dwd
->
ty≥
!=
TYPE_DIRECTORY
) {

4413  
ERROR_EPERM
;

4415 i‡(
•
->
ty≥
==
TYPE_DIRECTORY
) {

4416 i‡(
•
==
dwd
 || 
	`f¢odes_ißn˚°‹
(sp,dwd)) {

4417  
ERROR_EINVAL
;

4420 #i‚de‡
METARESTORE


4421 i‡(!
	`f¢odes_ac˚ss
(
dwd
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4422  
ERROR_EACCES
;

4425 i‡(
	`f¢odes_ã°_quŸa
(
dwd
)) {

4426  
ERROR_QUOTA
;

4428 
°©us
 = 
	`f¢odes_¢≠shŸ_ã°
(
•
,•,
dwd
,
∆íg_d°
,
«me_d°
,
ˇnovîwrôe
);

4429 i‡(
°©us
!=
STATUS_OK
) {

4430  
°©us
;

4432 #i‚de‡
METARESTORE


4433 
ts
 = 
	`maö_time
();

4435 
	`f¢odes_¢≠shŸ
(
ts
,
•
,
dwd
,
∆íg_d°
,
«me_d°
);

4436 #i‚de‡
METARESTORE


4437 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SNAPSHOT(%"PRIu32",%"PRIu32",%s,%"
PRIu8
")",
ts
,
öode_§c
,
∑ª¡_d°
,
	`f¢odes_esˇ≥_«me
(
∆íg_d°
,
«me_d°
),
ˇnovîwrôe
);

4439 
vîsi⁄
++;

4441  
STATUS_OK
;

4442 
	}
}

4444 #i‚de‡
METARESTORE


4445 
uöt8_t
 
	$fs_≠≥nd
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
öode_§c
,uöt32_à
uid
,uöt32_à
gid
) {

4446 
uöt32_t
 
ts
;

4447 
f¢ode
 *
∫
;

4449 
uöt8_t
 
	$fs_≠≥nd
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
öode_§c
) {

4451 
uöt8_t
 
°©us
;

4452 
f¢ode
 *
p
,*
•
;

4453 i‡(
öode
==
öode_§c
) {

4454  
ERROR_EINVAL
;

4456 #i‚de‡
METARESTORE


4457 i‡(
£sÊags
&
SESFLAG_READONLY
) {

4458  
ERROR_EROFS
;

4460 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4461 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4462 i‡(!
•
) {

4463  
ERROR_ENOENT
;

4465 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4466 i‡(!
p
) {

4467  
ERROR_ENOENT
;

4470 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4471 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4472  
ERROR_ENOENT
;

4474 i‡(
öode_§c
==
MFS_ROOT_ID
) {

4475 
öode_§c
 = 
roŸöode
;

4476 
•
 = 
∫
;

4478 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4479 i‡(!
•
) {

4480  
ERROR_ENOENT
;

4482 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
•
)) {

4483  
ERROR_EPERM
;

4486 i‡(
öode
==
MFS_ROOT_ID
) {

4487 
öode
 = 
roŸöode
;

4488 
p
 = 
∫
;

4490 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4491 i‡(!
p
) {

4492  
ERROR_ENOENT
;

4494 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

4495  
ERROR_EPERM
;

4500 
•
 = 
	`f¢odes_id_to_node
(
öode_§c
);

4501 i‡(!
•
) {

4502  
ERROR_ENOENT
;

4504 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4505 i‡(!
p
) {

4506  
ERROR_ENOENT
;

4509 i‡(
•
->
ty≥
!=
TYPE_FILE
 && sp->ty≥!=
TYPE_TRASH
 && sp->ty≥!=
TYPE_RESERVED
) {

4510  
ERROR_EPERM
;

4512 #i‚de‡
METARESTORE


4513 i‡(!
	`f¢odes_ac˚ss
(
•
,
uid
,
gid
,
MODE_MASK_R
,
£sÊags
)) {

4514  
ERROR_EACCES
;

4517 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4518  
ERROR_EPERM
;

4520 #i‚de‡
METARESTORE


4521 i‡(!
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

4522  
ERROR_EACCES
;

4525 i‡(
	`f¢odes_ã°_quŸa
(
p
)) {

4526  
ERROR_QUOTA
;

4528 #i‚de‡
METARESTORE


4529 
ts
 = 
	`maö_time
();

4531 
°©us
 = 
	`f¢odes_≠≥ndchunks
(
ts
,
p
,
•
);

4532 i‡(
°©us
!=
STATUS_OK
) {

4533  
°©us
;

4535 #i‚de‡
METARESTORE


4536 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|APPEND(%"PRIu32",%"PRIu32")",
ts
,
öode
,
öode_§c
);

4538 
vîsi⁄
++;

4540  
STATUS_OK
;

4541 
	}
}

4543 #i‚de‡
METARESTORE


4544 
uöt8_t
 
	$fs_ªaddú_size
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
Êags
,**
dnode
,uöt32_à*
dbuffsize
) {

4545 
f¢ode
 *
p
,*
∫
;

4546 *
dnode
 = 
NULL
;

4547 *
dbuffsize
 = 0;

4548 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4549 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4550 i‡(!
p
) {

4551  
ERROR_ENOENT
;

4554 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4555 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4556  
ERROR_ENOENT
;

4558 i‡(
öode
==
MFS_ROOT_ID
) {

4559 
öode
 = 
roŸöode
;

4560 
p
 = 
∫
;

4562 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4563 i‡(!
p
) {

4564  
ERROR_ENOENT
;

4566 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

4567  
ERROR_EPERM
;

4571 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

4572  
ERROR_ENOTDIR
;

4574 i‡(!
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
MODE_MASK_R
,
£sÊags
)) {

4575  
ERROR_EACCES
;

4577 *
dnode
 = 
p
;

4578 *
dbuffsize
 = 
	`f¢odes_gëdúsize
(
p
,
Êags
&
GETDIR_FLAG_WITHATTR
);

4579  
STATUS_OK
;

4580 
	}
}

4582 
	$fs_ªaddú_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
Êags
,*
dnode
,uöt8_à*
dbuff
) {

4583 
f¢ode
 *
p
 = (f¢ode*)
dnode
;

4584 
uöt32_t
 
ts
 = 
	`maö_time
();

4586 i‡(
p
->
©ime
!=
ts
) {

4587 
p
->
©ime
 = 
ts
;

4588 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|ACCESS(%"PRIu32")",
ts
,
p
->
id
);

4589 
	`f¢odes_gëdúd©a
(
roŸöode
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
p
,
dbuff
,
Êags
&
GETDIR_FLAG_WITHATTR
);

4596 
	`f¢odes_gëdúd©a
(
roŸöode
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
p
,
dbuff
,
Êags
&
GETDIR_FLAG_WITHATTR
);

4598 
°©s_ªaddú
++;

4599 
	}
}

4602 
uöt8_t
 
	$fs_checkfûe
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
chunkcou¡
[11]) {

4603 
f¢ode
 *
p
,*
∫
;

4604 ()
£sÊags
;

4605 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

4606 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4607 i‡(!
p
) {

4608  
ERROR_ENOENT
;

4610 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4611  
ERROR_EPERM
;

4614 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4615 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4616  
ERROR_ENOENT
;

4618 i‡(
öode
==
MFS_ROOT_ID
) {

4619 
öode
 = 
roŸöode
;

4620 
p
 = 
∫
;

4622 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4623 i‡(!
p
) {

4624  
ERROR_ENOENT
;

4626 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

4627  
ERROR_EPERM
;

4631 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4632  
ERROR_EPERM
;

4634 
	`f¢odes_checkfûe
(
p
,
chunkcou¡
);

4635  
STATUS_OK
;

4636 
	}
}

4638 
uöt8_t
 
	$fs_›ícheck
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
Êags
,uöt8_à
©å
[35]) {

4639 
f¢ode
 *
p
,*
∫
;

4640 i‡((
£sÊags
&
SESFLAG_READONLY
Ë&& (
Êags
&
WANT_WRITE
)) {

4641  
ERROR_EROFS
;

4643 i‡(
roŸöode
==
MFS_ROOT_ID
) {

4644 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4645 i‡(!
p
) {

4646  
ERROR_ENOENT
;

4649 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

4650 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

4651  
ERROR_ENOENT
;

4653 i‡(
öode
==
MFS_ROOT_ID
) {

4654 
öode
 = 
roŸöode
;

4655 
p
 = 
∫
;

4657 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4658 i‡(!
p
) {

4659  
ERROR_ENOENT
;

4661 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

4662  
ERROR_EPERM
;

4666 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4667  
ERROR_EPERM
;

4669 i‡((
Êags
&
AFTER_CREATE
)==0) {

4670 
uöt8_t
 
modemask
=0;

4671 i‡(
Êags
&
WANT_READ
) {

4672 
modemask
|=
MODE_MASK_R
;

4674 i‡(
Êags
&
WANT_WRITE
) {

4675 
modemask
|=
MODE_MASK_W
;

4677 i‡(!
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
modemask
,
£sÊags
)) {

4678  
ERROR_EACCES
;

4681 
	`f¢odes_fûl_©å
(
p
,
NULL
,
uid
,
gid
,
auid
,
agid
,
£sÊags
,
©å
);

4682 
°©s_›í
++;

4683  
STATUS_OK
;

4684 
	}
}

4688 
uöt8_t
 
	$fs_acquúe
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
) {

4689 
f¢ode
 *
p
;

4690 
£ssi⁄idªc
 *
¸
;

4691 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4692 i‡(!
p
) {

4693  
ERROR_ENOENT
;

4695 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4696  
ERROR_EPERM
;

4698 
¸
=
p
->
d©a
.
fd©a
.
£ssi⁄ids
 ; c∏; cr=¸->
√xt
) {

4699 i‡(
¸
->
£ssi⁄id
==sessionid) {

4700  
ERROR_EINVAL
;

4703 
¸
 = 
	`£ssi⁄idªc_mÆloc
();

4704 
¸
->
£ssi⁄id
 = sessionid;

4705 
¸
->
√xt
 = 
p
->
d©a
.
fd©a
.
£ssi⁄ids
;

4706 
p
->
d©a
.
fd©a
.
£ssi⁄ids
 = 
¸
;

4707 #i‚de‡
METARESTORE


4708 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|ACQUIRE(%"PRIu32",%"PRIu32")",(
uöt32_t
)
	`maö_time
(),
öode
,
£ssi⁄id
);

4710 
vîsi⁄
++;

4712  
STATUS_OK
;

4713 
	}
}

4715 
uöt8_t
 
	$fs_ªÀa£
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
) {

4716 
f¢ode
 *
p
;

4717 
£ssi⁄idªc
 *
¸
,**
¸p
;

4718 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4719 i‡(!
p
) {

4720  
ERROR_ENOENT
;

4722 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4723  
ERROR_EPERM
;

4725 
¸p
 = &(
p
->
d©a
.
fd©a
.
£ssi⁄ids
);

4726 (
¸
=*
¸p
)) {

4727 i‡(
¸
->
£ssi⁄id
==sessionid) {

4728 *
¸p
 = 
¸
->
√xt
;

4729 
	`£ssi⁄idªc_‰ì
(
¸
);

4730 #i‚de‡
METARESTORE


4731 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|RELEASE(%"PRIu32",%"PRIu32")",(
uöt32_t
)
	`maö_time
(),
öode
,
£ssi⁄id
);

4733 
vîsi⁄
++;

4735  
STATUS_OK
;

4737 
¸p
 = &(
¸
->
√xt
);

4740 #i‚de‡
METARESTORE


4741 
	`sy¶og
(
LOG_WARNING
,"release: sessionÇot found");

4743  
ERROR_EINVAL
;

4744 
	}
}

4746 #i‚de‡
METARESTORE


4747 
uöt32_t
 
	$fs_√w£ssi⁄id
() {

4748 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SESSION():%"PRIu32,(
uöt32_t
)
	`maö_time
(),
√xt£ssi⁄id
);

4749  
√xt£ssi⁄id
++;

4750 
	}
}

4752 
uöt8_t
 
	$fs_£ssi⁄
(
uöt32_t
 
£ssi⁄id
) {

4753 i‡(
£ssi⁄id
!=
√xt£ssi⁄id
) {

4754  
ERROR_MISMATCH
;

4756 
vîsi⁄
++;

4757 
√xt£ssi⁄id
++;

4758  
STATUS_OK
;

4759 
	}
}

4762 #i‚de‡
METARESTORE


4763 
uöt8_t
 
	$fs_ªadchunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
chunkid
,uöt64_à*
Àngth
) {

4764 
f¢ode
 *
p
;

4765 
uöt32_t
 
ts
 = 
	`maö_time
();

4767 *
chunkid
 = 0;

4768 *
Àngth
 = 0;

4769 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4770 i‡(!
p
) {

4771  
ERROR_ENOENT
;

4773 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4774  
ERROR_EPERM
;

4776 i‡(
ödx
>
MAX_INDEX
) {

4777  
ERROR_INDEXTOOBIG
;

4779 i‡(
ödx
<
p
->
d©a
.
fd©a
.
chunks
) {

4780 *
chunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
];

4782 *
Àngth
 = 
p
->
d©a
.
fd©a
.length;

4783 i‡(
p
->
©ime
!=
ts
) {

4784 
p
->
©ime
 = 
ts
;

4785 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|ACCESS(%"PRIu32")",
ts
,
öode
);

4792 
°©s_ªad
++;

4793  
STATUS_OK
;

4794 
	}
}

4797 #i‚de‡
METARESTORE


4798 
uöt8_t
 
	$fs_wrôechunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
chunkid
,uöt64_à*
Àngth
,
uöt8_t
 *
›Êag
) {

4799 
°©us
;

4800 
uöt32_t
 
i
;

4801 
uöt64_t
 
ochunkid
,
nchunkid
;

4802 
°©§ec‹d
 
p§
,
n§
;

4803 
f£dge
 *
e
;

4804 
f¢ode
 *
p
;

4805 
uöt32_t
 
ts
 = 
	`maö_time
();

4807 *
chunkid
 = 0;

4808 *
Àngth
 = 0;

4809 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4810 i‡(!
p
) {

4811  
ERROR_ENOENT
;

4813 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4814  
ERROR_EPERM
;

4816 i‡(
	`f¢odes_ã°_quŸa
(
p
)) {

4817  
ERROR_QUOTA
;

4819 i‡(
ödx
>
MAX_INDEX
) {

4820  
ERROR_INDEXTOOBIG
;

4822 
	`f¢odes_gë_°©s
(
p
,&
p§
);

4824 i‡(
ödx
>=
p
->
d©a
.
fd©a
.
chunks
) {

4825 
uöt32_t
 
√wsize
;

4826 i‡(
ödx
<8) {

4827 
√wsize
=
ödx
+1;

4828 } i‡(
ödx
<64) {

4829 
√wsize
=(
ödx
&0xFFFFFFF8)+8;

4831 
√wsize
 = (
ödx
&0xFFFFFFC0)+64;

4833 i‡(
p
->
d©a
.
fd©a
.
chunkèb
==
NULL
) {

4834 
p
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`mÆloc
((uöt64_t)*
√wsize
);

4836 
p
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`ªÆloc
’->d©a.fd©a.chunkèb,(uöt64_t)*
√wsize
);

4838 
	`∑s£π
(
p
->
d©a
.
fd©a
.
chunkèb
);

4839 
i
=
p
->
d©a
.
fd©a
.
chunks
 ; i<
√wsize
 ; i++) {

4840 
p
->
d©a
.
fd©a
.
chunkèb
[
i
]=0;

4842 
p
->
d©a
.
fd©a
.
chunks
 = 
√wsize
;

4844 
ochunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
];

4845 
°©us
 = 
	`chunk_mu…i_modify
(&
nchunkid
,
ochunkid
,
öode
,
ödx
,
p
->
gﬂl
,
›Êag
);

4854 i‡(
°©us
!=
STATUS_OK
) {

4855  
°©us
;

4857 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
nchunkid
;

4858 
	`f¢odes_gë_°©s
(
p
,&
n§
);

4859 
e
=
p
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

4860 
	`f¢odes_add_sub_°©s
(
e
->
∑ª¡
,&
n§
,&
p§
);

4862 *
chunkid
 = 
nchunkid
;

4863 *
Àngth
 = 
p
->
d©a
.
fd©a
.length;

4864 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|WRITE(%"PRIu32",%"PRIu32",%"
PRIu8
"):%"
PRIu64
,
ts
,
öode
,
ödx
,*
›Êag
,
nchunkid
);

4865 i‡(
p
->
mtime
!=
ts
 ||Ö->
˘ime
!=ts) {

4866 
p
->
mtime
 =Ö->
˘ime
 = 
ts
;

4873 
°©s_wrôe
++;

4874  
STATUS_OK
;

4875 
	}
}

4877 
uöt8_t
 
	$fs_wrôe
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,
uöt8_t
 
›Êag
,
uöt64_t
 
chunkid
) {

4878 
°©us
;

4879 
uöt32_t
 
i
;

4880 
uöt64_t
 
ochunkid
,
nchunkid
;

4881 
f¢ode
 *
p
;

4882 
p
 = 
	`f¢odes_id_to_node
(
öode
);

4883 i‡(!
p
) {

4884  
ERROR_ENOENT
;

4886 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

4887  
ERROR_EPERM
;

4889 i‡(
	`f¢odes_ã°_quŸa
(
p
)) {

4890  
ERROR_QUOTA
;

4892 i‡(
ödx
>
MAX_INDEX
) {

4893  
ERROR_INDEXTOOBIG
;

4896 i‡(
ödx
>=
p
->
d©a
.
fd©a
.
chunks
) {

4897 
uöt32_t
 
√wsize
;

4898 i‡(
ödx
<8) {

4899 
√wsize
=
ödx
+1;

4900 } i‡(
ödx
<64) {

4901 
√wsize
=(
ödx
&0xFFFFFFF8)+8;

4903 
√wsize
 = (
ödx
&0xFFFFFFC0)+64;

4905 i‡(
p
->
d©a
.
fd©a
.
chunkèb
==
NULL
) {

4906 
p
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`mÆloc
((uöt64_t)*
√wsize
);

4908 
p
->
d©a
.
fd©a
.
chunkèb
 = (
uöt64_t
*)
	`ªÆloc
’->d©a.fd©a.chunkèb,(uöt64_t)*
√wsize
);

4910 
	`∑s£π
(
p
->
d©a
.
fd©a
.
chunkèb
);

4911 
i
=
p
->
d©a
.
fd©a
.
chunks
 ; i<
√wsize
 ; i++) {

4912 
p
->
d©a
.
fd©a
.
chunkèb
[
i
]=0;

4914 
p
->
d©a
.
fd©a
.
chunks
 = 
√wsize
;

4916 
ochunkid
 = 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
];

4917 
°©us
 = 
	`chunk_mu…i_modify
(
ts
,&
nchunkid
,
ochunkid
,
öode
,
ödx
,
p
->
gﬂl
,
›Êag
);

4918 i‡(
°©us
!=
STATUS_OK
) {

4919  
°©us
;

4921 i‡(
nchunkid
!=
chunkid
) {

4922  
ERROR_MISMATCH
;

4924 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
nchunkid
;

4925 
vîsi⁄
++;

4926 
p
->
mtime
 =Ö->
˘ime
 = 
ts
;

4927  
STATUS_OK
;

4928 
	}
}

5000 #i‚de‡
METARESTORE


5001 
uöt8_t
 
	$fs_wrôìnd
(
uöt32_t
 
öode
,
uöt64_t
 
Àngth
,uöt64_à
chunkid
) {

5002 
uöt32_t
 
ts
 = 
	`maö_time
();

5003 i‡(
Àngth
>0) {

5004 
f¢ode
 *
p
;

5005 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5006 i‡(!
p
) {

5007  
ERROR_ENOENT
;

5009 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5010  
ERROR_EPERM
;

5012 i‡(
Àngth
>
p
->
d©a
.
fd©a
.length) {

5013 
	`f¢odes_£éígth
(
p
,
Àngth
);

5014 
p
->
mtime
 =Ö->
˘ime
 = 
ts
;

5015 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|LENGTH(%"PRIu32",%"
PRIu64
")",
ts
,
öode
,
Àngth
);

5023 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|UNLOCK(%"
PRIu64
")",
ts
,
chunkid
);

5024  
	`chunk_u∆ock
(
chunkid
);

5025 
	}
}

5028 #i‚de‡
METARESTORE


5029 
	$fs_öcvîsi⁄
(
uöt64_t
 
chunkid
) {

5030 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|INCVERSION(%"
PRIu64
")",(
uöt32_t
)
	`maö_time
(),
chunkid
);

5031 
	}
}

5033 
uöt8_t
 
	$fs_öcvîsi⁄
(
uöt64_t
 
chunkid
) {

5034 
vîsi⁄
++;

5035  
	`chunk_ö¸ó£_vîsi⁄
(
chunkid
);

5036 
	}
}

5040 #i‚de‡
METARESTORE


5041 
uöt8_t
 
	$fs_ª∑ú
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
nŸch™ged
,uöt32_à*
îa£d
,uöt32_à*
ª∑úed
) {

5042 
uöt32_t
 
nvîsi⁄
,
ödx
;

5043 
°©§ec‹d
 
p§
,
n§
;

5044 
f£dge
 *
e
;

5045 
f¢ode
 *
p
,*
∫
;

5046 
uöt32_t
 
ts
 = 
	`maö_time
();

5048 *
nŸch™ged
 = 0;

5049 *
îa£d
 = 0;

5050 *
ª∑úed
 = 0;

5051 i‡(
£sÊags
&
SESFLAG_READONLY
) {

5052  
ERROR_EROFS
;

5054 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5055 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5056 i‡(!
p
) {

5057  
ERROR_ENOENT
;

5059 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5060  
ERROR_EPERM
;

5063 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5064 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5065  
ERROR_ENOENT
;

5067 i‡(
öode
==
MFS_ROOT_ID
) {

5068 
öode
 = 
roŸöode
;

5069 
p
 = 
∫
;

5071 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5072 i‡(!
p
) {

5073  
ERROR_ENOENT
;

5075 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5076  
ERROR_EPERM
;

5080 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5081  
ERROR_EPERM
;

5083 i‡(!
	`f¢odes_ac˚ss
(
p
,
uid
,
gid
,
MODE_MASK_W
,
£sÊags
)) {

5084  
ERROR_EACCES
;

5086 
	`f¢odes_gë_°©s
(
p
,&
p§
);

5087 
ödx
=0 ; indx<
p
->
d©a
.
fd©a
.
chunks
 ; indx++) {

5088 i‡(
	`chunk_ª∑ú
(
öode
,
ödx
,
p
->
d©a
.
fd©a
.
chunkèb
[ödx],&
nvîsi⁄
)) {

5089 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|REPAIR(%"PRIu32",%"PRIu32"):%"PRIu32,
ts
,
öode
,
ödx
,
nvîsi⁄
);

5090 i‡(
nvîsi⁄
>0) {

5091 (*
ª∑úed
)++;

5093 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 0;

5094 (*
îa£d
)++;

5097 (*
nŸch™ged
)++;

5100 
	`f¢odes_gë_°©s
(
p
,&
n§
);

5101 
e
=
p
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

5102 
	`f¢odes_add_sub_°©s
(
e
->
∑ª¡
,&
n§
,&
p§
);

5104 i‡(
p
->
mtime
!=
ts
 ||Ö->
˘ime
!=ts) {

5105 
p
->
mtime
 =Ö->
˘ime
 = 
ts
;

5112  
STATUS_OK
;

5113 
	}
}

5115 
uöt8_t
 
	$fs_ª∑ú
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,uöt32_à
nvîsi⁄
) {

5116 
f¢ode
 *
p
;

5117 
uöt8_t
 
°©us
;

5118 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5119 i‡(!
p
) {

5120  
ERROR_ENOENT
;

5122 i‡(
p
->
ty≥
!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5123  
ERROR_EPERM
;

5125 i‡(
ödx
>
MAX_INDEX
) {

5126  
ERROR_INDEXTOOBIG
;

5128 i‡(
ödx
>=
p
->
d©a
.
fd©a
.
chunks
) {

5129  
ERROR_NOCHUNK
;

5131 i‡(
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
]==0) {

5132  
ERROR_NOCHUNK
;

5134 i‡(
nvîsi⁄
==0) {

5135 
°©us
 = 
	`chunk_dñëe_fûe
(
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
],
öode
,indx);

5136 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
]=0;

5138 
°©us
 = 
	`chunk_£t_vîsi⁄
(
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
],
nvîsi⁄
);

5140 
vîsi⁄
++;

5141 
p
->
mtime
 =Ö->
˘ime
 = 
ts
;

5142  
°©us
;

5143 
	}
}

5146 #i‚de‡
METARESTORE


5147 
uöt8_t
 
	$fs_gëgﬂl
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,uöt32_à
fgèb
[10],uöt32_à
dgèb
[10]) {

5148 
f¢ode
 *
p
,*
∫
;

5149 ()
£sÊags
;

5150 
	`mem£t
(
fgèb
,0,10*(
uöt32_t
));

5151 
	`mem£t
(
dgèb
,0,10*(
uöt32_t
));

5152 i‡(!
	`GMODE_ISVALID
(
gmode
)) {

5153  
ERROR_EINVAL
;

5155 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5156 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5157 i‡(!
p
) {

5158  
ERROR_ENOENT
;

5160 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5161  
ERROR_EPERM
;

5164 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5165 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5166  
ERROR_ENOENT
;

5168 i‡(
öode
==
MFS_ROOT_ID
) {

5169 
öode
 = 
roŸöode
;

5170 
p
 = 
∫
;

5172 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5173 i‡(!
p
) {

5174  
ERROR_ENOENT
;

5176 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5177  
ERROR_EPERM
;

5181 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
 &&Ö->ty≥!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5182  
ERROR_EPERM
;

5184 
	`f¢odes_gëgﬂl_ªcursive
(
p
,
gmode
,
fgèb
,
dgèb
);

5185  
STATUS_OK
;

5186 
	}
}

5188 
uöt8_t
 
	$fs_gëåashtime_¥ï¨e
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,**
Âå
,**
d±r
,uöt32_à*
‚odes
,uöt32_à*
dnodes
) {

5189 
f¢ode
 *
p
,*
∫
;

5190 
b°node
 *
‰oŸ
,*
droŸ
;

5191 ()
£sÊags
;

5192 
‰oŸ
 = 
NULL
;

5193 
droŸ
 = 
NULL
;

5194 *
Âå
 = 
NULL
;

5195 *
d±r
 = 
NULL
;

5196 *
‚odes
 = 0;

5197 *
dnodes
 = 0;

5198 i‡(!
	`GMODE_ISVALID
(
gmode
)) {

5199  
ERROR_EINVAL
;

5201 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5202 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5203 i‡(!
p
) {

5204  
ERROR_ENOENT
;

5206 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5207  
ERROR_EPERM
;

5210 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5211 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5212  
ERROR_ENOENT
;

5214 i‡(
öode
==
MFS_ROOT_ID
) {

5215 
öode
 = 
roŸöode
;

5216 
p
 = 
∫
;

5218 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5219 i‡(!
p
) {

5220  
ERROR_ENOENT
;

5222 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5223  
ERROR_EPERM
;

5227 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
 &&Ö->ty≥!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5228  
ERROR_EPERM
;

5230 
	`f¢odes_gëåashtime_ªcursive
(
p
,
gmode
,&
‰oŸ
,&
droŸ
);

5231 *
Âå
 = 
‰oŸ
;

5232 *
d±r
 = 
droŸ
;

5233 *
‚odes
 = 
	`f¢odes_b°_nodes
(
‰oŸ
);

5234 *
dnodes
 = 
	`f¢odes_b°_nodes
(
droŸ
);

5235  
STATUS_OK
;

5236 
	}
}

5238 
	$fs_gëåashtime_°‹e
(*
Âå
,*
d±r
,
uöt8_t
 *
buff
) {

5239 
b°node
 *
‰oŸ
,*
droŸ
;

5240 
‰oŸ
 = (
b°node
*)
Âå
;

5241 
droŸ
 = (
b°node
*)
d±r
;

5242 
	`f¢odes_b°_°‹ed©a
(
‰oŸ
,&
buff
);

5243 
	`f¢odes_b°_°‹ed©a
(
droŸ
,&
buff
);

5244 
	`f¢odes_b°_‰ì
(
‰oŸ
);

5245 
	`f¢odes_b°_‰ì
(
droŸ
);

5246 
	}
}

5248 
uöt8_t
 
	$fs_gëóâr
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,uöt32_à
„©åèb
[16],uöt32_à
dóâπab
[16]) {

5249 
f¢ode
 *
p
,*
∫
;

5250 ()
£sÊags
;

5251 
	`mem£t
(
„©åèb
,0,16*(
uöt32_t
));

5252 
	`mem£t
(
dóâπab
,0,16*(
uöt32_t
));

5253 i‡(!
	`GMODE_ISVALID
(
gmode
)) {

5254  
ERROR_EINVAL
;

5256 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5257 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5258 i‡(!
p
) {

5259  
ERROR_ENOENT
;

5261 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5262  
ERROR_EPERM
;

5265 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5266 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5267  
ERROR_ENOENT
;

5269 i‡(
öode
==
MFS_ROOT_ID
) {

5270 
öode
 = 
roŸöode
;

5271 
p
 = 
∫
;

5273 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5274 i‡(!
p
) {

5275  
ERROR_ENOENT
;

5277 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5278  
ERROR_EPERM
;

5282 
	`f¢odes_gëóâr_ªcursive
(
p
,
gmode
,
„©åèb
,
dóâπab
);

5283  
STATUS_OK
;

5284 
	}
}

5288 #i‚de‡
METARESTORE


5289 #i‡
VERSHEX
>=0x010700

5290 
uöt8_t
 
	$fs_£tgﬂl
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
,uöt32_à*
qeöodes
) {

5292 
uöt8_t
 
	$fs_£tgﬂl
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

5294 
uöt32_t
 
ts
;

5295 
f¢ode
 *
∫
;

5297 #i‡
VERSHEX
>=0x010700

5298 
uöt8_t
 
	$fs_£tgﬂl
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,
uöt8_t
 
gﬂl
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
,uöt32_à
qeöodes
) {

5299 
uöt32_t
 
si
,
nci
,
nsi
,
qei
;

5301 
uöt8_t
 
	$fs_£tgﬂl
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,
uöt8_t
 
gﬂl
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
) {

5302 
uöt32_t
 
si
,
nci
,
nsi
;

5305 #i‡
VERSHEX
>=0x010700

5306 
uöt8_t
 
quŸa
;

5308 
f¢ode
 *
p
;

5310 #i‚de‡
METARESTORE


5311 ()
£sÊags
;

5312 
ts
 = 
	`maö_time
();

5313 *
söodes
 = 0;

5314 *
ncöodes
 = 0;

5315 *
nsöodes
 = 0;

5316 #i‡
VERSHEX
>=0x010700

5317 *
qeöodes
 = 0;

5320 
si
 = 0;

5321 
nci
 = 0;

5322 
nsi
 = 0;

5323 #i‡
VERSHEX
>=0x010700

5324 
qei
 = 0;

5327 i‡(!
	`SMODE_ISVALID
(
smode
Ë|| 
gﬂl
>9 || goal<1) {

5328  
ERROR_EINVAL
;

5330 #i‚de‡
METARESTORE


5331 i‡(
£sÊags
&
SESFLAG_READONLY
) {

5332  
ERROR_EROFS
;

5334 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5335 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5336 i‡(!
p
) {

5337  
ERROR_ENOENT
;

5339 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5340  
ERROR_EPERM
;

5343 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5344 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5345  
ERROR_ENOENT
;

5347 i‡(
öode
==
MFS_ROOT_ID
) {

5348 
öode
 = 
roŸöode
;

5349 
p
 = 
∫
;

5351 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5352 i‡(!
p
) {

5353  
ERROR_ENOENT
;

5355 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5356  
ERROR_EPERM
;

5361 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5362 i‡(!
p
) {

5363  
ERROR_ENOENT
;

5366 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
 &&Ö->ty≥!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5367  
ERROR_EPERM
;

5370 #i‡
VERSHEX
>=0x010700

5371 
quŸa
 = 
	`f¢odes_ã°_quŸa
(
p
);

5373 #i‚de‡
METARESTORE


5374 #i‡
VERSHEX
>=0x010700

5375 
	`f¢odes_£tgﬂl_ªcursive
(
p
,
ts
,
uid
,
quŸa
,
gﬂl
,
smode
,
söodes
,
ncöodes
,
nsöodes
,
qeöodes
);

5377 
	`f¢odes_£tgﬂl_ªcursive
(
p
,
ts
,
uid
,
gﬂl
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

5379 i‡((
smode
&
SMODE_RMASK
)==0 && *
nsöodes
>0 && *
söodes
==0 && *
ncöodes
==0) {

5380  
ERROR_EPERM
;

5383 #i‡
VERSHEX
>=0x010700

5384 
	`f¢odes_£tgﬂl_ªcursive
(
p
,
ts
,
uid
,
quŸa
,
gﬂl
,
smode
,&
si
,&
nci
,&
nsi
,&
qei
);

5386 
	`f¢odes_£tgﬂl_ªcursive
(
p
,
ts
,
uid
,
gﬂl
,
smode
,&
si
,&
nci
,&
nsi
);

5390 #i‚de‡
METARESTORE


5391 #i‡
VERSHEX
>=0x010700

5392 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SETGOAL(%"PRIu32",%"PRIu32",%"
PRIu8
",%"PRIu8"):%"PRIu32",%"PRIu32",%"PRIu32",%"PRIu32,
ts
,
öode
,
uid
,
gﬂl
,
smode
,*
söodes
,*
ncöodes
,*
nsöodes
,*
qeöodes
);

5394 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SETGOAL(%"PRIu32",%"PRIu32",%"
PRIu8
",%"PRIu8"):%"PRIu32",%"PRIu32",%"PRIu32,
ts
,
öode
,
uid
,
gﬂl
,
smode
,*
söodes
,*
ncöodes
,*
nsöodes
);

5396  
STATUS_OK
;

5398 
vîsi⁄
++;

5399 #i‡
VERSHEX
>=0x010700

5400 i‡(
söodes
!=
si
 || 
ncöodes
!=
nci
 || 
nsöodes
!=
nsi
 || (
qeöodes
!=
qei
 && qeöodes!=
	`UINT32_C
(0xFFFFFFFF))) {

5402 i‡(
söodes
!=
si
 || 
ncöodes
!=
nci
 || 
nsöodes
!=
nsi
) {

5404  
ERROR_MISMATCH
;

5406  
STATUS_OK
;

5408 
	}
}

5410 #i‚de‡
METARESTORE


5411 
uöt8_t
 
	$fs_£âøshtime
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
åashtime
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

5412 
uöt32_t
 
ts
;

5413 
f¢ode
 *
∫
;

5415 
uöt8_t
 
	$fs_£âøshtime
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
åashtime
,
uöt8_t
 
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
) {

5416 
uöt32_t
 
si
,
nci
,
nsi
;

5418 
f¢ode
 *
p
;

5420 #i‚de‡
METARESTORE


5421 ()
£sÊags
;

5422 
ts
 = 
	`maö_time
();

5423 *
söodes
 = 0;

5424 *
ncöodes
 = 0;

5425 *
nsöodes
 = 0;

5427 
si
 = 0;

5428 
nci
 = 0;

5429 
nsi
 = 0;

5431 i‡(!
	`SMODE_ISVALID
(
smode
)) {

5432  
ERROR_EINVAL
;

5434 #i‚de‡
METARESTORE


5435 i‡(
£sÊags
&
SESFLAG_READONLY
) {

5436  
ERROR_EROFS
;

5438 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5439 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5440 i‡(!
p
) {

5441  
ERROR_ENOENT
;

5443 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5444  
ERROR_EPERM
;

5447 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5448 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5449  
ERROR_ENOENT
;

5451 i‡(
öode
==
MFS_ROOT_ID
) {

5452 
öode
 = 
roŸöode
;

5453 
p
 = 
∫
;

5455 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5456 i‡(!
p
) {

5457  
ERROR_ENOENT
;

5459 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5460  
ERROR_EPERM
;

5465 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5466 i‡(!
p
) {

5467  
ERROR_ENOENT
;

5470 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
 &&Ö->ty≥!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5471  
ERROR_EPERM
;

5474 #i‚de‡
METARESTORE


5475 
	`f¢odes_£âøshtime_ªcursive
(
p
,
ts
,
uid
,
åashtime
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

5476 i‡((
smode
&
SMODE_RMASK
)==0 && *
nsöodes
>0 && *
söodes
==0 && *
ncöodes
==0) {

5477  
ERROR_EPERM
;

5480 
	`f¢odes_£âøshtime_ªcursive
(
p
,
ts
,
uid
,
åashtime
,
smode
,&
si
,&
nci
,&
nsi
);

5483 #i‚de‡
METARESTORE


5484 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SETTRASHTIME(%"PRIu32",%"PRIu32",%"PRIu32",%"
PRIu8
"):%"PRIu32",%"PRIu32",%"PRIu32,
ts
,
öode
,
uid
,
åashtime
,
smode
,*
söodes
,*
ncöodes
,*
nsöodes
);

5485  
STATUS_OK
;

5487 
vîsi⁄
++;

5488 i‡(
söodes
!=
si
 || 
ncöodes
!=
nci
 || 
nsöodes
!=
nsi
) {

5489  
ERROR_MISMATCH
;

5491  
STATUS_OK
;

5493 
	}
}

5495 #i‚de‡
METARESTORE


5496 
uöt8_t
 
	$fs_£ã©å
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
óâr
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
) {

5497 
uöt32_t
 
ts
;

5498 
f¢ode
 *
∫
;

5500 
uöt8_t
 
	$fs_£ã©å
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,
uöt8_t
 
óâr
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
) {

5501 
uöt32_t
 
si
,
nci
,
nsi
;

5503 
f¢ode
 *
p
;

5505 #i‚de‡
METARESTORE


5506 ()
£sÊags
;

5507 
ts
 = 
	`maö_time
();

5508 *
söodes
 = 0;

5509 *
ncöodes
 = 0;

5510 *
nsöodes
 = 0;

5512 
si
 = 0;

5513 
nci
 = 0;

5514 
nsi
 = 0;

5516 i‡(!
	`SMODE_ISVALID
(
smode
Ë|| (
óâr
&(~(
EATTR_NOOWNER
|
EATTR_NOACACHE
|
EATTR_NOECACHE
|
EATTR_NODATACACHE
)))) {

5517  
ERROR_EINVAL
;

5519 #i‚de‡
METARESTORE


5520 i‡(
£sÊags
&
SESFLAG_READONLY
) {

5521  
ERROR_EROFS
;

5523 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5524 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5525 i‡(!
p
) {

5526  
ERROR_ENOENT
;

5528 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5529  
ERROR_EPERM
;

5532 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5533 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5534  
ERROR_ENOENT
;

5536 i‡(
öode
==
MFS_ROOT_ID
) {

5537 
öode
 = 
roŸöode
;

5538 
p
 = 
∫
;

5540 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5541 i‡(!
p
) {

5542  
ERROR_ENOENT
;

5544 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5545  
ERROR_EPERM
;

5550 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5551 i‡(!
p
) {

5552  
ERROR_ENOENT
;

5556 #i‚de‡
METARESTORE


5557 
	`f¢odes_£ã©å_ªcursive
(
p
,
ts
,
uid
,
óâr
,
smode
,
söodes
,
ncöodes
,
nsöodes
);

5558 i‡((
smode
&
SMODE_RMASK
)==0 && *
nsöodes
>0 && *
söodes
==0 && *
ncöodes
==0) {

5559  
ERROR_EPERM
;

5562 
	`f¢odes_£ã©å_ªcursive
(
p
,
ts
,
uid
,
óâr
,
smode
,&
si
,&
nci
,&
nsi
);

5565 #i‚de‡
METARESTORE


5566 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|SETEATTR(%"PRIu32",%"PRIu32",%"
PRIu8
",%"PRIu8"):%"PRIu32",%"PRIu32",%"PRIu32 ,
ts
,
öode
,
uid
,
óâr
,
smode
,*
söodes
,*
ncöodes
,*
nsöodes
 );

5567  
STATUS_OK
;

5569 
vîsi⁄
++;

5570 i‡(
söodes
!=
si
 || 
ncöodes
!=
nci
 || 
nsöodes
!=
nsi
 ) {

5571  
ERROR_MISMATCH
;

5573  
STATUS_OK
;

5575 
	}
}

5649 #i‚de‡
METARESTORE


5650 
uöt8_t
 
	$fs_quŸac⁄åﬁ
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt8_à
dñÊag
,uöt8_à*
Êags
,uöt32_à*
söodes
,
uöt64_t
 *
¶ígth
,uöt64_à*
ssize
,uöt64_à*
§ólsize
,uöt32_à*
höodes
,uöt64_à*
hÀngth
,uöt64_à*
hsize
,uöt64_à*
hªÆsize
,uöt32_à*
curöodes
,uöt64_à*
cuæígth
,uöt64_à*
cursize
,uöt64_à*
cuºólsize
) {

5651 
f¢ode
 *
p
,*
∫
;

5652 
quŸ™ode
 *
qn
;

5653 
°©§ec‹d
 *
p§
;

5654 
uöt8_t
 
chg
;

5656 i‡(*
Êags
) {

5657 i‡(
£sÊags
&
SESFLAG_READONLY
) {

5658  
ERROR_EROFS
;

5660 i‡((
£sÊags
&
SESFLAG_CANCHANGEQUOTA
)==0) {

5661  
ERROR_EPERM
;

5664 i‡(
roŸöode
==0) {

5665  
ERROR_EPERM
;

5667 i‡(
roŸöode
==
MFS_ROOT_ID
) {

5668 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5669 i‡(!
p
) {

5670  
ERROR_ENOENT
;

5673 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5674 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5675  
ERROR_ENOENT
;

5677 i‡(
öode
==
MFS_ROOT_ID
) {

5678 
öode
 = 
roŸöode
;

5679 
p
 = 
∫
;

5681 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5682 i‡(!
p
) {

5683  
ERROR_ENOENT
;

5685 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5686  
ERROR_EPERM
;

5690 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

5691  
ERROR_EPERM
;

5693 
qn
 = 
p
->
d©a
.
dd©a
.
quŸa
;

5694 
chg
 = (*
Êags
)?1:0;

5695 i‡(
dñÊag
) {

5696 i‡(
qn
) {

5697 
qn
->
Êags
 &= ~(*flags);

5698 i‡(
qn
->
Êags
==0) {

5699 
chg
 = 1;

5700 
	`f¢odes_dñëe_quŸ™ode
(
p
);

5701 
qn
=
NULL
;

5705 i‡(
qn
==
NULL
 && (*
Êags
)!=0) {

5706 
qn
 = 
	`f¢odes_√w_quŸ™ode
(
p
);

5708 i‡(
qn
) {

5709 
qn
->
Êags
 |= *flags;

5710 i‡((*
Êags
)&
QUOTA_FLAG_SINODES
) {

5711 
qn
->
söodes
 = *sinodes;

5713 i‡((*
Êags
)&
QUOTA_FLAG_SLENGTH
) {

5714 
qn
->
¶ígth
 = *slength;

5716 i‡((*
Êags
)&
QUOTA_FLAG_SSIZE
) {

5717 
qn
->
ssize
 = *ssize;

5719 i‡((*
Êags
)&
QUOTA_FLAG_SREALSIZE
) {

5720 
qn
->
§ólsize
 = *srealsize;

5722 i‡((*
Êags
)&
QUOTA_FLAG_HINODES
) {

5723 
qn
->
höodes
 = *hinodes;

5725 i‡((*
Êags
)&
QUOTA_FLAG_HLENGTH
) {

5726 
qn
->
hÀngth
 = *hlength;

5728 i‡((*
Êags
)&
QUOTA_FLAG_HSIZE
) {

5729 
qn
->
hsize
 = *hsize;

5731 i‡((*
Êags
)&
QUOTA_FLAG_HREALSIZE
) {

5732 
qn
->
hªÆsize
 = *hrealsize;

5736 i‡(
qn
) {

5737 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_SINODES
)==0) {

5738 
qn
->
söodes
 = 0;

5740 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_HINODES
)==0) {

5741 
qn
->
höodes
 = 0;

5743 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_SLENGTH
)==0) {

5744 
qn
->
¶ígth
 = 0;

5746 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_HLENGTH
)==0) {

5747 
qn
->
hÀngth
 = 0;

5749 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_SSIZE
)==0) {

5750 
qn
->
ssize
 = 0;

5752 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_HSIZE
)==0) {

5753 
qn
->
hsize
 = 0;

5755 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_SREALSIZE
)==0) {

5756 
qn
->
§ólsize
 = 0;

5758 i‡(((
qn
->
Êags
)&
QUOTA_FLAG_HREALSIZE
)==0) {

5759 
qn
->
hªÆsize
 = 0;

5761 *
Êags
 = 
qn
->flags;

5762 *
söodes
 = 
qn
->sinodes;

5763 *
¶ígth
 = 
qn
->slength;

5764 *
ssize
 = 
qn
->ssize;

5765 *
§ólsize
 = 
qn
->srealsize;

5766 *
höodes
 = 
qn
->hinodes;

5767 *
hÀngth
 = 
qn
->hlength;

5768 *
hsize
 = 
qn
->hsize;

5769 *
hªÆsize
 = 
qn
->hrealsize;

5771 *
Êags
 = 0;

5772 *
söodes
 = 0;

5773 *
¶ígth
 = 0;

5774 *
ssize
 = 0;

5775 *
§ólsize
 = 0;

5776 *
höodes
 = 0;

5777 *
hÀngth
 = 0;

5778 *
hsize
 = 0;

5779 *
hªÆsize
 = 0;

5781 
p§
 = 
p
->
d©a
.
dd©a
.
°©s
;

5782 *
curöodes
 = 
p§
->
öodes
;

5783 *
cuæígth
 = 
p§
->
Àngth
;

5784 *
cursize
 = 
p§
->
size
;

5785 *
cuºólsize
 = 
p§
->
ªÆsize
;

5786 #i‡
VERSHEX
>=0x010700

5787 i‡(
chg
) {

5788 i‡(
qn
) {

5789 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|QUOTA(%"PRIu32",%"
PRIu8
",%"PRIu8",%"PRIu32",%"PRIu32",%"PRIu32",%"
PRIu64
",%"PRIu64",%"PRIu64",%"PRIu64",%"PRIu64",%"PRIu64")",
	`maö_time
(),
öode
,
qn
->
ex˚eded
,qn->
Êags
,qn->
°ime°amp
,qn->
söodes
,qn->
höodes
,qn->
¶ígth
,qn->
hÀngth
,qn->
ssize
,qn->
hsize
,qn->
§ólsize
,qn->
hªÆsize
);

5791 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|QUOTA(%"PRIu32",0,0,0,0,0,0,0,0,0,0,0)",
	`maö_time
(),
öode
);

5795  
STATUS_OK
;

5796 
	}
}

5798 
uöt8_t
 
	$fs_quŸa
(
uöt32_t
 
ts
,uöt32_à
öode
,
uöt8_t
 
ex˚eded
,uöt8_à
Êags
,uöt32_à
°ime°amp
,uöt32_à
söodes
,uöt32_à
höodes
,
uöt64_t
 
¶ígth
,uöt64_à
hÀngth
,uöt64_à
ssize
,uöt64_à
hsize
,uöt64_à
§ólsize
,uöt64_à
hªÆsize
) {

5799 
f¢ode
 *
p
;

5800 #i‡
VERSHEX
>=0x010700

5801 
quŸ™ode
 *
qn
;

5804 ()
ts
;

5805 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5806 i‡(!
p
) {

5807  
ERROR_ENOENT
;

5809 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
) {

5810  
ERROR_EPERM
;

5812 #i‡
VERSHEX
>=0x010700

5813 
qn
 = 
p
->
d©a
.
dd©a
.
quŸa
;

5814 i‡(
Êags
==0) {

5815 i‡(
qn
!=
NULL
) {

5816 
	`f¢odes_dñëe_quŸ™ode
(
p
);

5819 i‡(
qn
==
NULL
) {

5820 
qn
 = 
	`f¢odes_√w_quŸ™ode
(
p
);

5822 
qn
->
Êags
 = flags;

5823 
qn
->
ex˚eded
 =Éxceeded;

5824 
qn
->
°ime°amp
 = stimestamp;

5825 
qn
->
söodes
 = sinodes;

5826 
qn
->
¶ígth
 = slength;

5827 
qn
->
ssize
 = ssize;

5828 
qn
->
§ólsize
 = srealsize;

5829 
qn
->
höodes
 = hinodes;

5830 
qn
->
hÀngth
 = hlength;

5831 
qn
->
hsize
 = hsize;

5832 
qn
->
hªÆsize
 = hrealsize;

5835 ()
Êags
;

5836 ()
ex˚eded
;

5837 ()
°ime°amp
;

5838 ()
söodes
;

5839 ()
¶ígth
;

5840 ()
ssize
;

5841 ()
§ólsize
;

5842 ()
höodes
;

5843 ()
hÀngth
;

5844 ()
hsize
;

5845 ()
hªÆsize
;

5847 
vîsi⁄
++;

5848  
STATUS_OK
;

5849 
	}
}

5852 #i‚de‡
METARESTORE


5853 
uöt32_t
 
	$fs_gëquŸaöfo_size
() {

5854 
quŸ™ode
 *
qn
;

5855 
uöt32_t
 
s
=0,
size
;

5857 
qn
=
quŸahód
 ; q¿; qn=qn->
√xt
) {

5858 
size
=
	`f¢odes_gë∑th_size
(
qn
->
node
->
∑ª¡s
);

5859 
s
+=4+4+1+1+4+3*(4+8+8+8)+1+
size
;

5861  
s
;

5862 
	}
}

5864 
	$fs_gëquŸaöfo_d©a
(
uöt8_t
 * 
buff
) {

5865 
quŸ™ode
 *
qn
;

5866 
°©§ec‹d
 *
p§
;

5867 
uöt32_t
 
size
;

5868 
uöt32_t
 
ts
 = 
	`maö_time
();

5870 
qn
=
quŸahód
 ; q¿; qn=qn->
√xt
) {

5871 
p§
 = 
qn
->
node
->
d©a
.
dd©a
.
°©s
;

5872 
	`put32bô
(&
buff
,
qn
->
node
->
id
);

5873 
size
=
	`f¢odes_gë∑th_size
(
qn
->
node
->
∑ª¡s
);

5874 
	`put32bô
(&
buff
,
size
+1);

5875 
	`put8bô
(&
buff
,'/');

5876 
	`f¢odes_gë∑th_d©a
(
qn
->
node
->
∑ª¡s
,
buff
,
size
);

5877 
buff
+=
size
;

5878 
	`put8bô
(&
buff
,
qn
->
ex˚eded
);

5879 
	`put8bô
(&
buff
,
qn
->
Êags
);

5880 i‡(
qn
->
°ime°amp
==0) {

5881 
	`put32bô
(&
buff
,0xFFFFFFFF);

5882 } i‡(
qn
->
°ime°amp
+
QuŸaTimeLimô
<
ts
) {

5883 
	`put32bô
(&
buff
,0);

5885 
	`put32bô
(&
buff
,
qn
->
°ime°amp
+
QuŸaTimeLimô
-
ts
);

5887 i‡(
qn
->
Êags
&
QUOTA_FLAG_SINODES
) {

5888 
	`put32bô
(&
buff
,
qn
->
söodes
);

5890 
	`put32bô
(&
buff
,0);

5892 i‡(
qn
->
Êags
&
QUOTA_FLAG_SLENGTH
) {

5893 
	`put64bô
(&
buff
,
qn
->
¶ígth
);

5895 
	`put64bô
(&
buff
,0);

5897 i‡(
qn
->
Êags
&
QUOTA_FLAG_SSIZE
) {

5898 
	`put64bô
(&
buff
,
qn
->
ssize
);

5900 
	`put64bô
(&
buff
,0);

5902 i‡(
qn
->
Êags
&
QUOTA_FLAG_SREALSIZE
) {

5903 
	`put64bô
(&
buff
,
qn
->
§ólsize
);

5905 
	`put64bô
(&
buff
,0);

5907 i‡(
qn
->
Êags
&
QUOTA_FLAG_HINODES
) {

5908 
	`put32bô
(&
buff
,
qn
->
höodes
);

5910 
	`put32bô
(&
buff
,0);

5912 i‡(
qn
->
Êags
&
QUOTA_FLAG_HLENGTH
) {

5913 
	`put64bô
(&
buff
,
qn
->
hÀngth
);

5915 
	`put64bô
(&
buff
,0);

5917 i‡(
qn
->
Êags
&
QUOTA_FLAG_HSIZE
) {

5918 
	`put64bô
(&
buff
,
qn
->
hsize
);

5920 
	`put64bô
(&
buff
,0);

5922 i‡(
qn
->
Êags
&
QUOTA_FLAG_HREALSIZE
) {

5923 
	`put64bô
(&
buff
,
qn
->
hªÆsize
);

5925 
	`put64bô
(&
buff
,0);

5927 
	`put32bô
(&
buff
,
p§
->
öodes
);

5928 
	`put64bô
(&
buff
,
p§
->
Àngth
);

5929 
	`put64bô
(&
buff
,
p§
->
size
);

5930 
	`put64bô
(&
buff
,
p§
->
ªÆsize
);

5932 
	}
}

5934 
uöt32_t
 
	$fs_gëdú∑th_size
(
uöt32_t
 
öode
) {

5935 
f¢ode
 *
node
;

5936 
node
 = 
	`f¢odes_id_to_node
(
öode
);

5937 i‡(
node
) {

5938 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

5941  1+
	`f¢odes_gë∑th_size
(
node
->
∑ª¡s
);

5947 
	}
}

5949 
	$fs_gëdú∑th_d©a
(
uöt32_t
 
öode
,
uöt8_t
 *
buff
,uöt32_à
size
) {

5950 
f¢ode
 *
node
;

5951 
node
 = 
	`f¢odes_id_to_node
(
öode
);

5952 i‡(
node
) {

5953 i‡(
node
->
ty≥
!=
TYPE_DIRECTORY
) {

5954 i‡(
size
>=15) {

5955 
	`mem˝y
(
buff
,"(not directory)",15);

5959 i‡(
size
>0) {

5960 
buff
[0]='/';

5961 
	`f¢odes_gë∑th_d©a
(
node
->
∑ª¡s
,
buff
+1,
size
-1);

5966 i‡(
size
>=11) {

5967 
	`mem˝y
(
buff
,"(not found)",11);

5971 
	}
}

5973 
uöt8_t
 
	$fs_gë_dú_°©s
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
öode
,uöt32_à*
öodes
,uöt32_à*
dús
,uöt32_à*
fûes
,uöt32_à*
chunks
,
uöt64_t
 *
Àngth
,uöt64_à*
size
,uöt64_à*
rsize
) {

5974 
f¢ode
 *
p
,*
∫
;

5975 
°©§ec‹d
 
§
;

5976 ()
£sÊags
;

5977 i‡(
roŸöode
==
MFS_ROOT_ID
 ||Ñootinode==0) {

5978 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5979 i‡(!
p
) {

5980  
ERROR_ENOENT
;

5982 i‡(
roŸöode
==0 && 
p
->
ty≥
!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

5983  
ERROR_EPERM
;

5986 
∫
 = 
	`f¢odes_id_to_node
(
roŸöode
);

5987 i‡(!
∫
 ||Ñn->
ty≥
!=
TYPE_DIRECTORY
) {

5988  
ERROR_ENOENT
;

5990 i‡(
öode
==
MFS_ROOT_ID
) {

5991 
öode
 = 
roŸöode
;

5992 
p
 = 
∫
;

5994 
p
 = 
	`f¢odes_id_to_node
(
öode
);

5995 i‡(!
p
) {

5996  
ERROR_ENOENT
;

5998 i‡(!
	`f¢odes_ißn˚°‹
(
∫
,
p
)) {

5999  
ERROR_EPERM
;

6003 i‡(
p
->
ty≥
!=
TYPE_DIRECTORY
 &&Ö->ty≥!=
TYPE_FILE
 &&Ö->ty≥!=
TYPE_TRASH
 &&Ö->ty≥!=
TYPE_RESERVED
) {

6004  
ERROR_EPERM
;

6006 
	`f¢odes_gë_°©s
(
p
,&
§
);

6007 *
öodes
 = 
§
.inodes;

6008 *
dús
 = 
§
.dirs;

6009 *
fûes
 = 
§
.files;

6010 *
chunks
 = 
§
.chunks;

6011 *
Àngth
 = 
§
.length;

6012 *
size
 = 
§
.size;

6013 *
rsize
 = 
§
.
ªÆsize
;

6015  
STATUS_OK
;

6016 
	}
}

6019 
	$fs_add_fûes_to_chunks
() {

6020 
uöt32_t
 
i
,
j
;

6021 
uöt64_t
 
chunkid
;

6022 
f¢ode
 *
f
;

6023 
i
=0 ; i<
NODEHASHSIZE
 ; i++) {

6024 
f
=
nodehash
[
i
] ; f ; f=f->
√xt
) {

6025 i‡(
f
->
ty≥
==
TYPE_FILE
 || f->ty≥==
TYPE_TRASH
 || f->ty≥==
TYPE_RESERVED
) {

6026 
j
=0 ; j<
f
->
d©a
.
fd©a
.
chunks
 ; j++) {

6027 
chunkid
 = 
f
->
d©a
.
fd©a
.
chunkèb
[
j
];

6028 i‡(
chunkid
>0) {

6029 
	`chunk_add_fûe
(
chunkid
,
f
->
id
,
j
,f->
gﬂl
);

6035 
	}
}

6037 #i‚de‡
METARESTORE


6039 
	$fs_ã°_gëd©a
(
uöt32_t
 *
lo›°¨t
,uöt32_à*
lo›íd
,uöt32_à*
fûes
,uöt32_à*
ugfûes
,uöt32_à*
mfûes
,uöt32_à*
chunks
,uöt32_à*
ugchunks
,uöt32_à*
mchunks
,**
msgbuff
,uöt32_à*
msgbufÊíg
) {

6040 *
lo›°¨t
 = 
fsöfo_lo›°¨t
;

6041 *
lo›íd
 = 
fsöfo_lo›íd
;

6042 *
fûes
 = 
fsöfo_fûes
;

6043 *
ugfûes
 = 
fsöfo_ugfûes
;

6044 *
mfûes
 = 
fsöfo_mfûes
;

6045 *
chunks
 = 
fsöfo_chunks
;

6046 *
ugchunks
 = 
fsöfo_ugchunks
;

6047 *
mchunks
 = 
fsöfo_mchunks
;

6048 *
msgbuff
 = 
fsöfo_msgbuff
;

6049 *
msgbufÊíg
 = 
fsöfo_msgbufÊíg
;

6050 
	}
}

6052 
uöt32_t
 
	$fs_ã°_log_öc⁄si°ícy
(
f£dge
 *
e
,c⁄° *
öame
,*
buff
,
uöt32_t
 
size
) {

6053 
uöt32_t
 
Àng
;

6054 
Àng
=0;

6055 i‡(
e
->
∑ª¡
) {

6056 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: %"
PRIu32
",%†-> %"PRIu32")",
öame
,
e
->
∑ª¡
->
id
,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6057 i‡(
Àng
<
size
) {

6058 
Àng
 +
	`¢¥ötf
(
buff
+Àng,
size
-Àng,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: %"
PRIu32
",%†-> %"PRIu32")\n",
öame
,
e
->
∑ª¡
->
id
,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6061 i‡(
e
->
chûd
->
ty≥
==
TYPE_TRASH
) {

6062 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: TRASH,%†-> %"
PRIu32
")",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6063 i‡(
Àng
<
size
) {

6064 
Àng
 +
	`¢¥ötf
(
buff
+Àng,
size
-Àng,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: TRASH,%†-> %"
PRIu32
")\n",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6066 } i‡(
e
->
chûd
->
ty≥
==
TYPE_RESERVED
) {

6067 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: RESERVED,%†-> %"
PRIu32
")",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6068 i‡(
Àng
<
size
) {

6069 
Àng
 +
	`¢¥ötf
(
buff
+Àng,
size
-Àng,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: RESERVED,%†-> %"
PRIu32
")\n",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6072 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: NULL,%†-> %"
PRIu32
")",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6073 i‡(
Àng
<
size
) {

6074 
Àng
 +
	`¢¥ötf
(
buff
+Àng,
size
-Àng,"°ru˘uªÉº‹ - %†öc⁄si°ícy (edge: NULL,%†-> %"
PRIu32
")\n",
öame
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->
id
);

6078  
Àng
;

6079 
	}
}

6081 
	$fs_ã°_fûes
() {

6082 
uöt32_t
 
i
=0;

6083 
uöt32_t
 
j
;

6084 
uöt32_t
 
k
;

6085 
uöt64_t
 
chunkid
;

6086 
uöt8_t
 
vc
,
vÆid
,
ugÊag
;

6087 
uöt32_t
 
fûes
=0;

6088 
uöt32_t
 
ugfûes
=0;

6089 
uöt32_t
 
mfûes
=0;

6090 
uöt32_t
 
chunks
=0;

6091 
uöt32_t
 
ugchunks
=0;

6092 
uöt32_t
 
mchunks
=0;

6093 
uöt32_t
 
îr‹s
=0;

6094 
uöt32_t
 
nŸfoundchunks
=0;

6095 
uöt32_t
 
u«vaûchunks
=0;

6096 
uöt32_t
 
u«vaûfûes
=0;

6097 
uöt32_t
 
u«vaûåashfûes
=0;

6098 
uöt32_t
 
u«vaûª£rvedfûes
=0;

6099 *
msgbuff
=
NULL
,*
tmp
;

6100 
uöt32_t
 
Àng
=0;

6101 
f¢ode
 *
f
;

6102 
f£dge
 *
e
;

6104 i‡((
uöt32_t
)(
	`maö_time
())<=
ã°_°¨t_time
) {

6107 i‡(
i
>=
NODEHASHSIZE
) {

6108 
	`sy¶og
(
LOG_NOTICE
,"structure checkÜoop");

6109 
i
=0;

6110 
îr‹s
=0;

6112 i‡(
i
==0) {

6113 i‡(
îr‹s
==
ERRORS_LOG_MAX
) {

6114 
	`sy¶og
(
LOG_ERR
,"⁄ly fú° %uÉº‹†(u«vaûabÀ chunks/fûesËwîêlogged",
ERRORS_LOG_MAX
);

6115 i‡(
Àng
<
MSGBUFFSIZE
) {

6116 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"⁄ly fú° %uÉº‹†(u«vaûabÀ chunks/fûesËwîêlogged\n",
ERRORS_LOG_MAX
);

6119 i‡(
nŸfoundchunks
>0) {

6120 
	`sy¶og
(
LOG_ERR
,"unknow¿chunks: %"
PRIu32
,
nŸfoundchunks
);

6121 i‡(
Àng
<
MSGBUFFSIZE
) {

6122 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"unknow¿chunks: %"
PRIu32
"\n",
nŸfoundchunks
);

6124 
nŸfoundchunks
=0;

6126 i‡(
u«vaûchunks
>0) {

6127 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀ chunks: %"
PRIu32
,
u«vaûchunks
);

6128 i‡(
Àng
<
MSGBUFFSIZE
) {

6129 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"u«vaûabÀ chunks: %"
PRIu32
"\n",
u«vaûchunks
);

6131 
u«vaûchunks
=0;

6133 i‡(
u«vaûåashfûes
>0) {

6134 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀÅøsh fûes: %"
PRIu32
,
u«vaûåashfûes
);

6135 i‡(
Àng
<
MSGBUFFSIZE
) {

6136 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"u«vaûabÀÅøsh fûes: %"
PRIu32
"\n",
u«vaûåashfûes
);

6138 
u«vaûåashfûes
=0;

6140 i‡(
u«vaûª£rvedfûes
>0) {

6141 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀÑe£rved fûes: %"
PRIu32
,
u«vaûª£rvedfûes
);

6142 i‡(
Àng
<
MSGBUFFSIZE
) {

6143 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"u«vaûabÀÑe£rved fûes: %"
PRIu32
"\n",
u«vaûª£rvedfûes
);

6145 
u«vaûª£rvedfûes
=0;

6147 i‡(
u«vaûfûes
>0) {

6148 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀ fûes: %"
PRIu32
,
u«vaûfûes
);

6149 i‡(
Àng
<
MSGBUFFSIZE
) {

6150 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"u«vaûabÀ fûes: %"
PRIu32
"\n",
u«vaûfûes
);

6152 
u«vaûfûes
=0;

6154 
fsöfo_fûes
=
fûes
;

6155 
fsöfo_ugfûes
=
ugfûes
;

6156 
fsöfo_mfûes
=
mfûes
;

6157 
fsöfo_chunks
=
chunks
;

6158 
fsöfo_ugchunks
=
ugchunks
;

6159 
fsöfo_mchunks
=
mchunks
;

6160 
fûes
=0;

6161 
ugfûes
=0;

6162 
mfûes
=0;

6163 
chunks
=0;

6164 
ugchunks
=0;

6165 
mchunks
=0;

6167 i‡(
fsöfo_msgbuff
==
NULL
) {

6168 
fsöfo_msgbuff
=
	`mÆloc
(
MSGBUFFSIZE
);

6169 
	`∑s£π
(
fsöfo_msgbuff
);

6171 
tmp
 = 
fsöfo_msgbuff
;

6172 
fsöfo_msgbuff
=
msgbuff
;

6173 
msgbuff
 = 
tmp
;

6174 i‡(
Àng
>
MSGBUFFSIZE
) {

6175 
fsöfo_msgbufÊíg
=
MSGBUFFSIZE
;

6177 
fsöfo_msgbufÊíg
=
Àng
;

6179 
Àng
=0;

6181 
fsöfo_lo›°¨t
 = 
fsöfo_lo›íd
;

6182 
fsöfo_lo›íd
 = 
	`maö_time
();

6184 
k
=0 ; k<(
NODEHASHSIZE
/14400Ë&& 
i
<NODEHASHSIZE ; k++,i++) {

6185 
f
=
nodehash
[
i
] ; f ; f=f->
√xt
) {

6186 i‡(
f
->
ty≥
==
TYPE_FILE
 || f->ty≥==
TYPE_TRASH
 || f->ty≥==
TYPE_RESERVED
) {

6187 
vÆid
 = 1;

6188 
ugÊag
 = 0;

6189 
j
=0 ; j<
f
->
d©a
.
fd©a
.
chunks
 ; j++) {

6190 
chunkid
 = 
f
->
d©a
.
fd©a
.
chunkèb
[
j
];

6191 i‡(
chunkid
>0) {

6192 i‡(
	`chunk_gë_vÆidc›õs
(
chunkid
,&
vc
)!=
STATUS_OK
) {

6193 i‡(
îr‹s
<
ERRORS_LOG_MAX
) {

6194 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
f
->
id
,
j
);

6195 i‡(
Àng
<
MSGBUFFSIZE
) {

6196 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"°ru˘uªÉº‹ - chunk %016"
PRIX64
"ÇŸ found (öode: %"
PRIu32
" ; index: %"PRIu32")\n",
chunkid
,
f
->
id
,
j
);

6198 
îr‹s
++;

6200 
nŸfoundchunks
++;

6201 i‡((
nŸfoundchunks
%1000)==0) {

6202 
	`sy¶og
(
LOG_ERR
,"unknow¿chunks: %"
PRIu32
" ...",
nŸfoundchunks
);

6204 
vÆid
 =0;

6205 
mchunks
++;

6206 } i‡(
vc
==0) {

6207 i‡(
îr‹s
<
ERRORS_LOG_MAX
) {

6208 
	`sy¶og
(
LOG_ERR
,"cuºíéy u«vaûabÀ chunk %016"
PRIX64
" (öode: %"
PRIu32
" ; index: %"PRIu32")",
chunkid
,
f
->
id
,
j
);

6209 i‡(
Àng
<
MSGBUFFSIZE
) {

6210 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"cuºíéy u«vaûabÀ chunk %016"
PRIX64
" (öode: %"
PRIu32
" ; index: %"PRIu32")\n",
chunkid
,
f
->
id
,
j
);

6212 
îr‹s
++;

6214 
u«vaûchunks
++;

6215 i‡((
u«vaûchunks
%1000)==0) {

6216 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀ chunks: %"
PRIu32
" ...",
u«vaûchunks
);

6218 
vÆid
 = 0;

6219 
mchunks
++;

6220 } i‡(
vc
<
f
->
gﬂl
) {

6221 
ugÊag
 = 1;

6222 
ugchunks
++;

6224 
chunks
++;

6227 i‡(
vÆid
==0) {

6228 
mfûes
++;

6229 i‡(
f
->
ty≥
==
TYPE_TRASH
) {

6230 i‡(
îr‹s
<
ERRORS_LOG_MAX
) {

6231 
	`sy¶og
(
LOG_ERR
,"- cuºíéy u«vaûabÀ fûêöÅøsh %"
PRIu32
": %s",
f
->
id
,
	`f¢odes_esˇ≥_«me
(f->
∑ª¡s
->
∆íg
,f->∑ª¡s->
«me
));

6232 i‡(
Àng
<
MSGBUFFSIZE
) {

6233 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"- cuºíéy u«vaûabÀ fûêöÅøsh %"
PRIu32
": %s\n",
f
->
id
,
	`f¢odes_esˇ≥_«me
(f->
∑ª¡s
->
∆íg
,f->∑ª¡s->
«me
));

6235 
îr‹s
++;

6236 
u«vaûåashfûes
++;

6237 i‡((
u«vaûåashfûes
%1000)==0) {

6238 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀÅøsh fûes: %"
PRIu32
" ...",
u«vaûåashfûes
);

6241 } i‡(
f
->
ty≥
==
TYPE_RESERVED
) {

6242 i‡(
îr‹s
<
ERRORS_LOG_MAX
) {

6243 
	`sy¶og
(
LOG_ERR
,"+ cuºíéy u«vaûabÀÑe£rved fûê%"
PRIu32
": %s",
f
->
id
,
	`f¢odes_esˇ≥_«me
(f->
∑ª¡s
->
∆íg
,f->∑ª¡s->
«me
));

6244 i‡(
Àng
<
MSGBUFFSIZE
) {

6245 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"+ cuºíéy u«vaûabÀÑe£rved fûê%"
PRIu32
": %s\n",
f
->
id
,
	`f¢odes_esˇ≥_«me
(f->
∑ª¡s
->
∆íg
,f->∑ª¡s->
«me
));

6247 
îr‹s
++;

6248 
u«vaûª£rvedfûes
++;

6249 i‡((
u«vaûª£rvedfûes
%1000)==0) {

6250 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀÑe£rved fûes: %"
PRIu32
" ...",
u«vaûª£rvedfûes
);

6254 
uöt8_t
 *
∑th
;

6255 
uöt16_t
 
∂íg
;

6256 
e
=
f
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

6257 i‡(
îr‹s
<
ERRORS_LOG_MAX
) {

6258 
	`f¢odes_gë∑th
(
e
,&
∂íg
,&
∑th
);

6259 
	`sy¶og
(
LOG_ERR
,"* cuºíéy u«vaûabÀ fûê%"
PRIu32
": %s",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
∂íg
,
∑th
));

6260 i‡(
Àng
<
MSGBUFFSIZE
) {

6261 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"* cuºíéy u«vaûabÀ fûê%"
PRIu32
": %s\n",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
∂íg
,
∑th
));

6263 
	`‰ì
(
∑th
);

6264 
îr‹s
++;

6266 
u«vaûfûes
++;

6267 i‡((
u«vaûfûes
%1000)==0) {

6268 
	`sy¶og
(
LOG_ERR
,"u«vaûabÀ fûes: %"
PRIu32
" ...",
u«vaûfûes
);

6272 } i‡(
ugÊag
) {

6273 
ugfûes
++;

6275 
fûes
++;

6277 
e
=
f
->
∑ª¡s
 ;É ;ÉÛ->
√xç¨ít
) {

6278 i‡(
e
->
chûd
 !
f
) {

6279 i‡(
e
->
∑ª¡
) {

6280 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ -Édge->chûd/chûd->edge†“ode: %"
PRIu32
" ;Édge: %"PRIu32",%†-> %"PRIu32")",
f
->
id
,
e
->
∑ª¡
->id,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6281 i‡(
Àng
<
MSGBUFFSIZE
) {

6282 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"°ru˘uªÉº‹ -Édge->chûd/chûd->edge†“ode: %"
PRIu32
" ;Édge: %"PRIu32",%†-> %"PRIu32")\n",
f
->
id
,
e
->
∑ª¡
->id,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6285 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ -Édge->chûd/chûd->edge†“ode: %"
PRIu32
" ;Édge: NULL,%†-> %"PRIu32")",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->id);

6286 i‡(
Àng
<
MSGBUFFSIZE
) {

6287 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"°ru˘uªÉº‹ -Édge->chûd/chûd->edge†“ode: %"
PRIu32
" ;Édge: NULL,%†-> %"PRIu32")\n",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->id);

6290 } i‡(
e
->
√xtchûd
) {

6291 i‡(
e
->
√xtchûd
->
¥evchûd
 != &(e->nextchild)) {

6292 i‡(
Àng
<
MSGBUFFSIZE
) {

6293 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xtchûd/¥evchûd",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6295 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xtchûd/¥evchûd",
NULL
,0);

6298 } i‡(
e
->
√xç¨ít
) {

6299 i‡(
e
->
√xç¨ít
->
¥ev∑ª¡
 != &(e->nextparent)) {

6300 i‡(
Àng
<
MSGBUFFSIZE
) {

6301 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xç¨ít/¥ev∑ª¡",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6303 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xç¨ít/¥ev∑ª¡",
NULL
,0);

6306 #ifde‡
EDGEHASH


6307 } i‡(
e
->
√xt
) {

6308 i‡(
e
->
√xt
->
¥ev
 != &(e->next)) {

6309 i‡(
Àng
<
MSGBUFFSIZE
) {

6310 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xthash/¥evhash",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6312 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xthash/¥evhash",
NULL
,0);

6318 i‡(
f
->
ty≥
 =
TYPE_DIRECTORY
) {

6319 
e
=
f
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

6320 i‡(
e
->
∑ª¡
 !
f
) {

6321 i‡(
e
->
∑ª¡
) {

6322 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ -Édge->∑ª¡/∑ª¡->edge†“ode: %"
PRIu32
" ;Édge: %"PRIu32",%†-> %"PRIu32")",
f
->
id
,
e
->
∑ª¡
->id,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6323 i‡(
Àng
<
MSGBUFFSIZE
) {

6324 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"°ru˘uªÉº‹ -Édge->∑ª¡/∑ª¡->edge†“ode: %"
PRIu32
" ;Édge: %"PRIu32",%†-> %"PRIu32")\n",
f
->
id
,
e
->
∑ª¡
->id,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
),e->
chûd
->id);

6327 
	`sy¶og
(
LOG_ERR
,"°ru˘uªÉº‹ -Édge->∑ª¡/∑ª¡->edge†“ode: %"
PRIu32
" ;Édge: NULL,%†-> %"PRIu32")",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->id);

6328 i‡(
Àng
<
MSGBUFFSIZE
) {

6329 
Àng
 +
	`¢¥ötf
(
msgbuff
+Àng,
MSGBUFFSIZE
-Àng,"°ru˘uªÉº‹ -Édge->∑ª¡/∑ª¡->edge†“ode: %"
PRIu32
" ;Édge: NULL,%†-> %"PRIu32")\n",
f
->
id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),e->
chûd
->id);

6332 } i‡(
e
->
√xtchûd
) {

6333 i‡(
e
->
√xtchûd
->
¥evchûd
 != &(e->nextchild)) {

6334 i‡(
Àng
<
MSGBUFFSIZE
) {

6335 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xtchûd/¥evchûd",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6337 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xtchûd/¥evchûd",
NULL
,0);

6340 } i‡(
e
->
√xç¨ít
) {

6341 i‡(
e
->
√xç¨ít
->
¥ev∑ª¡
 != &(e->nextparent)) {

6342 i‡(
Àng
<
MSGBUFFSIZE
) {

6343 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xç¨ít/¥ev∑ª¡",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6345 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xç¨ít/¥ev∑ª¡",
NULL
,0);

6348 #ifde‡
EDGEHASH


6349 } i‡(
e
->
√xt
) {

6350 i‡(
e
->
√xt
->
¥ev
 != &(e->next)) {

6351 i‡(
Àng
<
MSGBUFFSIZE
) {

6352 
Àng
 +
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xthash/¥evhash",
msgbuff
+Àng,
MSGBUFFSIZE
-leng);

6354 
	`fs_ã°_log_öc⁄si°ícy
(
e
,"√xthash/¥evhash",
NULL
,0);

6363 
	}
}

6367 #i‚de‡
METARESTORE


6368 
	$fs_em±yåash
() {

6369 
uöt32_t
 
ts
;

6371 
uöt8_t
 
	$fs_em±yåash
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
,uöt32_à
ª£rvedöodes
) {

6373 
uöt32_t
 
fi
,
ri
;

6374 
f£dge
 *
e
;

6375 
f¢ode
 *
p
;

6376 #i‚de‡
METARESTORE


6377 
ts
 = 
	`maö_time
();

6379 
fi
=0;

6380 
ri
=0;

6381 
e
 = 
åash
;

6382 
e
) {

6383 
p
 = 
e
->
chûd
;

6384 
e
 =É->
√xtchûd
;

6385 i‡(((
uöt64_t
)(
p
->
©ime
Ë+ (uöt64_t)’->
åashtime
Ë< (uöt64_t)
ts
Ë&& ((uöt64_t)’->
mtime
Ë+ (uöt64_t)’->åashtimeË< (uöt64_tÈsË&& ((uöt64_t)’->
˘ime
) + (uint64_t)(p->trashtime) < (uint64_t)ts)) {

6386 i‡(
	`f¢odes_purge
(
ts
,
p
)) {

6387 
fi
++;

6389 
ri
++;

6393 #i‚de‡
METARESTORE


6394 i‡((
fi
|
ri
)>0) {

6395 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|EMPTYTRASH():%"PRIu32",%"PRIu32,
ts
,
fi
,
ri
);

6398 
vîsi⁄
++;

6399 i‡(
‰ìöodes
!=
fi
 || 
ª£rvedöodes
!=
ri
) {

6400  
ERROR_MISMATCH
;

6402  
STATUS_OK
;

6404 
	}
}

6406 #i‚de‡
METARESTORE


6407 
	$fs_em±yª£rved
() {

6408 
uöt32_t
 
ts
;

6410 
uöt8_t
 
	$fs_em±yª£rved
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
) {

6412 
f£dge
 *
e
;

6413 
f¢ode
 *
p
;

6414 
uöt32_t
 
fi
;

6415 #i‚de‡
METARESTORE


6416 
ts
 = 
	`maö_time
();

6418 
fi
=0;

6419 
e
 = 
ª£rved
;

6420 
e
) {

6421 
p
 = 
e
->
chûd
;

6422 
e
 =É->
√xtchûd
;

6423 i‡(
p
->
d©a
.
fd©a
.
£ssi⁄ids
==
NULL
) {

6424 
	`f¢odes_purge
(
ts
,
p
);

6425 
fi
++;

6428 #i‚de‡
METARESTORE


6429 i‡(
fi
>0) {

6430 
	`ch™gñog
(
vîsi⁄
++,"%"
PRIu32
"|EMPTYRESERVED():%"PRIu32,
ts
,
fi
);

6433 
vîsi⁄
++;

6434 i‡(
‰ìöodes
!=
fi
) {

6435  
ERROR_MISMATCH
;

6437  
STATUS_OK
;

6439 
	}
}

6442 #ifde‡
METARESTORE


6444 
uöt64_t
 
	$fs_gëvîsi⁄
() {

6445  
vîsi⁄
;

6446 
	}
}

6450 íum {
	mFLAG_TREE
,
	mFLAG_TRASH
,
	mFLAG_RESERVED
};

6452 #ifde‡
METARESTORE


6455 
	$fs_dum≥dge
(
f£dge
 *
e
) {

6456 i‡(
e
->
∑ª¡
==
NULL
) {

6457 i‡(
e
->
chûd
->
ty≥
==
TYPE_TRASH
) {

6458 
	`¥ötf
("E|p: TRASH|c:%10"
PRIu32
"|n:%s\n",
e
->
chûd
->
id
,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
));

6459 } i‡(
e
->
chûd
->
ty≥
==
TYPE_RESERVED
) {

6460 
	`¥ötf
("E|p: RESERVED|c:%10"
PRIu32
"|n:%s\n",
e
->
chûd
->
id
,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
));

6462 
	`¥ötf
("E|p: NULL|c:%10"
PRIu32
"|n:%s\n",
e
->
chûd
->
id
,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
));

6465 
	`¥ötf
("E|p:%10"
PRIu32
"|c:%10"PRIu32"|n:%s\n",
e
->
∑ª¡
->
id
,e->
chûd
->id,
	`f¢odes_esˇ≥_«me
”->
∆íg
,e->
«me
));

6467 
	}
}

6469 
	$fs_dum≤ode
(
f¢ode
 *
f
) {

6470 
c
;

6471 
uöt32_t
 
i
,
ch
;

6472 
£ssi⁄idªc
 *
£ssi⁄id±r
;

6474 
c
='?';

6475 
f
->
ty≥
) {

6476 
TYPE_DIRECTORY
:

6477 
c
='D';

6479 
TYPE_SOCKET
:

6480 
c
='S';

6482 
TYPE_FIFO
:

6483 
c
='F';

6485 
TYPE_BLOCKDEV
:

6486 
c
='B';

6488 
TYPE_CHARDEV
:

6489 
c
='C';

6491 
TYPE_SYMLINK
:

6492 
c
='L';

6494 
TYPE_FILE
:

6495 
c
='-';

6497 
TYPE_TRASH
:

6498 
c
='T';

6500 
TYPE_RESERVED
:

6501 
c
='R';

6510 
	`¥ötf
("%c|i:%10"
PRIu32
"|#:%"
PRIu8
"|e:%1"
PRIX16
"|m:%04"
PRIo16
"|u:%10"PRIu32"|g:%10"PRIu32"|a:%10"PRIu32",m:%10"PRIu32",c:%10"PRIu32"|t:%10"PRIu32,
c
,
f
->
id
,f->
gﬂl
,(
uöt16_t
)(f->
mode
>>12),(uöt16_t)(f->mode&0xFFF),f->
uid
,f->
gid
,f->
©ime
,f->
mtime
,f->
˘ime
,f->
åashtime
);

6512 i‡(
f
->
ty≥
==
TYPE_BLOCKDEV
 || f->ty≥==
TYPE_CHARDEV
) {

6513 
	`¥ötf
("|d:%5"
PRIu32
",%5"PRIu32"\n",
f
->
d©a
.
devd©a
.
rdev
>>16,f->data.devdata.rdev&0xFFFF);

6514 } i‡(
f
->
ty≥
==
TYPE_SYMLINK
) {

6515 
	`¥ötf
("|p:%s\n",
	`f¢odes_esˇ≥_«me
(
f
->
d©a
.
sd©a
.
∂íg
,f->d©a.sd©a.
∑th
));

6516 } i‡(
f
->
ty≥
==
TYPE_FILE
 || f->ty≥==
TYPE_TRASH
 || f->ty≥==
TYPE_RESERVED
) {

6517 
	`¥ötf
("|l:%20"
PRIu64
"|c:(",
f
->
d©a
.
fd©a
.
Àngth
);

6518 
ch
 = 0;

6519 
i
=0 ; i<
f
->
d©a
.
fd©a
.
chunks
 ; i++) {

6520 i‡(
f
->
d©a
.
fd©a
.
chunkèb
[
i
]!=0) {

6521 
ch
=
i
+1;

6524 
i
=0 ; i<
ch
 ; i++) {

6525 i‡(
f
->
d©a
.
fd©a
.
chunkèb
[
i
]!=0) {

6526 
	`¥ötf
("%016"
PRIX64
,
f
->
d©a
.
fd©a
.
chunkèb
[
i
]);

6528 
	`¥ötf
("N");

6530 i‡(
i
+1<
ch
) {

6531 
	`¥ötf
(",");

6534 
	`¥ötf
(")|r:(");

6535 
£ssi⁄id±r
=
f
->
d©a
.
fd©a
.
£ssi⁄ids
 ; sessi⁄id±∏; sessi⁄id±r=£ssi⁄id±r->
√xt
) {

6536 
	`¥ötf
("%"
PRIu32
,
£ssi⁄id±r
->
£ssi⁄id
);

6537 i‡(
£ssi⁄id±r
->
√xt
) {

6538 
	`¥ötf
(",");

6541 
	`¥ötf
(")\n");

6543 
	`¥ötf
("\n");

6545 
	}
}

6547 
	$fs_dum≤odes
() {

6548 
uöt32_t
 
i
;

6549 
f¢ode
 *
p
;

6550 
i
=0 ; i<
NODEHASHSIZE
 ; i++) {

6551 
p
=
nodehash
[
i
] ;Ö ;Öı->
√xt
) {

6552 
	`fs_dum≤ode
(
p
);

6555 
	}
}

6557 
	$fs_dum≥dgñi°
(
f£dge
 *
e
) {

6558 
e
) {

6559 
	`fs_dum≥dge
(
e
);

6560 
e
Û->
√xtchûd
;

6562 
	}
}

6564 
	$fs_dum≥dges
(
f¢ode
 *
f
) {

6565 
f£dge
 *
e
;

6566 
	`fs_dum≥dgñi°
(
f
->
d©a
.
dd©a
.
chûdªn
);

6567 
e
=
f
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

6568 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

6569 
	`fs_dum≥dges
(
e
->
chûd
);

6572 
	}
}

6574 
	$fs_dump‰ì
() {

6575 
‰ìnode
 *
n
;

6576 
n
=
‰ìli°
 ;Ç ;ÇÚ->
√xt
) {

6577 
	`¥ötf
("I|i:%10"
PRIu32
"|f:%10"PRIu32"\n",
n
->
id
,n->
·ime
);

6579 
	}
}

6581 
	$fs_dump
() {

6582 
	`fs_dum≤odes
();

6583 
	`fs_dum≥dges
(
roŸ
);

6584 
	`fs_dum≥dgñi°
(
åash
);

6585 
	`fs_dum≥dgñi°
(
ª£rved
);

6586 
	`fs_dump‰ì
();

6587 
	}
}

6591 
	$fs_°‹ìdge
(
f£dge
 *
e
,
FILE
 *
fd
) {

6592 
size_t
 
h≠py
;

6593 
uöt8_t
 
uedgebuff
[4+4+2+65535];

6594 
uöt8_t
 *
±r
;

6595 i‡(
e
==
NULL
) {

6596 
	`mem£t
(
uedgebuff
,0,4+4+2);

6597 
h≠py
 = 
	`fwrôe
(
uedgebuff
,1,4+4+2,
fd
);

6600 
±r
 = 
uedgebuff
;

6601 i‡(
e
->
∑ª¡
==
NULL
) {

6602 
	`put32bô
(&
±r
,0);

6604 
	`put32bô
(&
±r
,
e
->
∑ª¡
->
id
);

6606 
	`put32bô
(&
±r
,
e
->
chûd
->
id
);

6607 
	`put16bô
(&
±r
,
e
->
∆íg
);

6608 
	`mem˝y
(
±r
,
e
->
«me
,e->
∆íg
);

6609 
h≠py
 = 
	`fwrôe
(
uedgebuff
,1,4+4+2+
e
->
∆íg
,
fd
);

6610 
	}
}

6612 
	$fs_lﬂdedge
(
FILE
 *
fd
,
ign‹eÊag
) {

6613 
uöt8_t
 
uedgebuff
[4+4+2];

6614 c⁄° 
uöt8_t
 *
±r
;

6615 
uöt32_t
 
∑ª¡_id
;

6616 
uöt32_t
 
chûd_id
;

6617 #ifde‡
EDGEHASH


6618 
uöt32_t
 
hpos
;

6620 
f£dge
 *
e
;

6621 #i‚de‡
METARESTORE


6622 
°©§ec‹d
 
§
;

6624 
f£dge
 **
roŸ_èû
;

6625 
f£dge
 **
cuºít_èû
;

6626 
uöt32_t
 
cuºít_∑ª¡_id
;

6627 
uöt8_t
 
∆
;

6629 i‡(
fd
==
NULL
) {

6630 
cuºít_∑ª¡_id
 = 0;

6631 
cuºít_èû
 = 
NULL
;

6632 
roŸ_èû
 = 
NULL
;

6633 
∆
 = 1;

6637 i‡(
	`‰ód
(
uedgebuff
,1,4+4+2,
fd
)!=4+4+2) {

6638 
îr
 = 
î∫o
;

6639 i‡(
∆
) {

6640 
	`Âutc
('\n',
°dîr
);

6641 
∆
=0;

6643 
î∫o
 = 
îr
;

6644 
	`mfs_îæog
(
LOG_ERR
,"loadingÉdge:ÑeadÉrror");

6647 
±r
 = 
uedgebuff
;

6648 
∑ª¡_id
 = 
	`gë32bô
(&
±r
);

6649 
chûd_id
 = 
	`gë32bô
(&
±r
);

6650 i‡(
∑ª¡_id
==0 && 
chûd_id
==0) {

6653 
e
 = 
	`mÆloc
((
f£dge
));

6654 
	`∑s£π
(
e
);

6655 
e
->
∆íg
 = 
	`gë16bô
(&
±r
);

6656 i‡(
e
->
∆íg
==0) {

6657 i‡(
∆
) {

6658 
	`Âutc
('\n',
°dîr
);

6659 
∆
=0;

6661 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
"->%"PRIu32"Éº‹:Ém±yÇame",
∑ª¡_id
,
chûd_id
);

6662 
	`‰ì
(
e
);

6665 
e
->
«me
 = 
	`mÆloc
”->
∆íg
);

6666 
	`∑s£π
(
e
->
«me
);

6667 i‡(
	`‰ód
(
e
->
«me
,1,e->
∆íg
,
fd
)!=e->nleng) {

6668 
îr
 = 
î∫o
;

6669 i‡(
∆
) {

6670 
	`Âutc
('\n',
°dîr
);

6671 
∆
=0;

6673 
î∫o
 = 
îr
;

6674 
	`mfs_îæog
(
LOG_ERR
,"loadingÉdge:ÑeadÉrror");

6675 
	`‰ì
(
e
->
«me
);

6676 
	`‰ì
(
e
);

6679 
e
->
chûd
 = 
	`f¢odes_id_to_node
(
chûd_id
);

6680 i‡(
e
->
chûd
==
NULL
) {

6681 i‡(
∆
) {

6682 
	`Âutc
('\n',
°dîr
);

6683 
∆
=0;

6685 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹: chûdÇŸ found",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6686 
	`‰ì
(
e
->
«me
);

6687 
	`‰ì
(
e
);

6688 i‡(
ign‹eÊag
) {

6693 i‡(
∑ª¡_id
==0) {

6694 i‡(
e
->
chûd
->
ty≥
==
TYPE_TRASH
) {

6695 
e
->
∑ª¡
 = 
NULL
;

6696 
e
->
√xtchûd
 = 
åash
;

6697 i‡(
e
->
√xtchûd
) {

6698 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

6700 
åash
 = 
e
;

6701 
e
->
¥evchûd
 = &
åash
;

6702 #ifde‡
EDGEHASH


6703 
e
->
√xt
 = 
NULL
;

6704 
e
->
¥ev
 = 
NULL
;

6706 
åash•a˚
 +
e
->
chûd
->
d©a
.
fd©a
.
Àngth
;

6707 
åashnodes
++;

6708 } i‡(
e
->
chûd
->
ty≥
==
TYPE_RESERVED
) {

6709 
e
->
∑ª¡
 = 
NULL
;

6710 
e
->
√xtchûd
 = 
ª£rved
;

6711 i‡(
e
->
√xtchûd
) {

6712 
e
->
√xtchûd
->
¥evchûd
 = &(e->nextchild);

6714 
ª£rved
 = 
e
;

6715 
e
->
¥evchûd
 = &
ª£rved
;

6716 #ifde‡
EDGEHASH


6717 
e
->
√xt
 = 
NULL
;

6718 
e
->
¥ev
 = 
NULL
;

6720 
ª£rved•a˚
 +
e
->
chûd
->
d©a
.
fd©a
.
Àngth
;

6721 
ª£rvednodes
++;

6723 i‡(
∆
) {

6724 
	`Âutc
('\n',
°dîr
);

6725 
∆
=0;

6727 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹: bad chûdÅy≥ (%c)\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
,e->
chûd
->
ty≥
);

6728 #i‚de‡
METARESTORE


6729 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹: bad chûdÅy≥ (%c)",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
,e->
chûd
->
ty≥
);

6731 
	`‰ì
(
e
->
«me
);

6732 
	`‰ì
(
e
);

6736 
e
->
∑ª¡
 = 
	`f¢odes_id_to_node
(
∑ª¡_id
);

6737 i‡(
e
->
∑ª¡
==
NULL
) {

6738 i‡(
∆
) {

6739 
	`Âutc
('\n',
°dîr
);

6740 
∆
=0;

6742 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹:Ö¨íànŸ found\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6743 #i‚de‡
METARESTORE


6744 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹:Ö¨íànŸ found",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6746 i‡(
ign‹eÊag
) {

6747 
e
->
∑ª¡
 = 
	`f¢odes_id_to_node
(
MFS_ROOT_ID
);

6748 i‡(
e
->
∑ª¡
==
NULL
 ||É->∑ª¡->
ty≥
!=
TYPE_DIRECTORY
) {

6749 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"ÑoŸ dúÇŸ found !!!\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6750 #i‚de‡
METARESTORE


6751 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"ÑoŸ dúÇŸ found !!!",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6753 
	`‰ì
(
e
->
«me
);

6754 
	`‰ì
(
e
);

6757 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"áâachögÇodêtÿroŸ dú\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6758 #i‚de‡
METARESTORE


6759 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"áâachögÇodêtÿroŸ dú",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6761 
∑ª¡_id
 = 
MFS_ROOT_ID
;

6763 
	`Ârötf
(
°dîr
,"use mfsmetarestore (option -i)ÅoáttachÅhisÇodeÅoÑoot dir\n");

6764 
	`‰ì
(
e
->
«me
);

6765 
	`‰ì
(
e
);

6769 i‡(
e
->
∑ª¡
->
ty≥
!=
TYPE_DIRECTORY
) {

6770 i‡(
∆
) {

6771 
	`Âutc
('\n',
°dîr
);

6772 
∆
=0;

6774 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹: badÖ¨íàty≥ (%c)\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
,e->
∑ª¡
->
ty≥
);

6775 #i‚de‡
METARESTORE


6776 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹: badÖ¨íàty≥ (%c)",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
,e->
∑ª¡
->
ty≥
);

6778 i‡(
ign‹eÊag
) {

6779 
e
->
∑ª¡
 = 
	`f¢odes_id_to_node
(
MFS_ROOT_ID
);

6780 i‡(
e
->
∑ª¡
==
NULL
 ||É->∑ª¡->
ty≥
!=
TYPE_DIRECTORY
) {

6781 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"ÑoŸ dúÇŸ found !!!\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6782 #i‚de‡
METARESTORE


6783 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"ÑoŸ dúÇŸ found !!!",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6785 
	`‰ì
(
e
->
«me
);

6786 
	`‰ì
(
e
);

6789 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"áâachögÇodêtÿroŸ dú\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6790 #i‚de‡
METARESTORE


6791 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"áâachögÇodêtÿroŸ dú",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6793 
∑ª¡_id
 = 
MFS_ROOT_ID
;

6795 
	`Ârötf
(
°dîr
,"use mfsmetarestore (option -i)ÅoáttachÅhisÇodeÅoÑoot dir\n");

6796 
	`‰ì
(
e
->
«me
);

6797 
	`‰ì
(
e
);

6801 i‡(
∑ª¡_id
==
MFS_ROOT_ID
) {

6802 i‡(
roŸ_èû
==
NULL
) {

6803 
roŸ_èû
 = &(
e
->
∑ª¡
->
d©a
.
dd©a
.
chûdªn
);

6805 } i‡(
cuºít_∑ª¡_id
!=
∑ª¡_id
) {

6806 i‡(
e
->
∑ª¡
->
d©a
.
dd©a
.
chûdªn
) {

6807 i‡(
∆
) {

6808 
	`Âutc
('\n',
°dîr
);

6809 
∆
=0;

6811 
	`Ârötf
(
°dîr
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹:Ö¨íànodê£quí˚Éº‹\n",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6812 #i‚de‡
METARESTORE


6813 
	`sy¶og
(
LOG_ERR
,"lﬂdögÉdge: %"
PRIu32
",%s->%"PRIu32"Éº‹:Ö¨íànodê£quí˚Éº‹",
∑ª¡_id
,
	`f¢odes_esˇ≥_«me
(
e
->
∆íg
,e->
«me
),
chûd_id
);

6815 i‡(
ign‹eÊag
) {

6816 
cuºít_èû
 = &(
e
->
∑ª¡
->
d©a
.
dd©a
.
chûdªn
);

6817 *
cuºít_èû
) {

6818 
cuºít_èû
 = &((*cuºít_èû)->
√xtchûd
);

6821 
	`‰ì
(
e
->
«me
);

6822 
	`‰ì
(
e
);

6826 
cuºít_èû
 = &(
e
->
∑ª¡
->
d©a
.
dd©a
.
chûdªn
);

6828 
cuºít_∑ª¡_id
 = 
∑ª¡_id
;

6830 
e
->
√xtchûd
 = 
NULL
;

6831 i‡(
∑ª¡_id
==
MFS_ROOT_ID
) {

6832 *(
roŸ_èû
Ë
e
;

6833 
e
->
¥evchûd
 = 
roŸ_èû
;

6834 
roŸ_èû
 = &(
e
->
√xtchûd
);

6836 *(
cuºít_èû
Ë
e
;

6837 
e
->
¥evchûd
 = 
cuºít_èû
;

6838 
cuºít_èû
 = &(
e
->
√xtchûd
);

6846 
e
->
∑ª¡
->
d©a
.
dd©a
.
ñemíts
++;

6847 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

6848 
e
->
∑ª¡
->
d©a
.
dd©a
.
∆ök
++;

6850 #ifde‡
EDGEHASH


6851 
hpos
 = 
	`EDGEHASHPOS
(
	`f¢odes_hash
(
e
->
∑ª¡
->
id
,e->
∆íg
,e->
«me
));

6852 
e
->
√xt
 = 
edgehash
[
hpos
];

6853 i‡(
e
->
√xt
) {

6854 
e
->
√xt
->
¥ev
 = &(e->next);

6856 
edgehash
[
hpos
] = 
e
;

6857 
e
->
¥ev
 = &(
edgehash
[
hpos
]);

6860 
e
->
√xç¨ít
 =É->
chûd
->
∑ª¡s
;

6861 i‡(
e
->
√xç¨ít
) {

6862 
e
->
√xç¨ít
->
¥ev∑ª¡
 = &(e->nextparent);

6864 
e
->
chûd
->
∑ª¡s
 =É;

6865 
e
->
¥ev∑ª¡
 = &”->
chûd
->
∑ª¡s
);

6866 #i‚de‡
METARESTORE


6867 i‡(
e
->
∑ª¡
) {

6868 
	`f¢odes_gë_°©s
(
e
->
chûd
,&
§
);

6869 
	`f¢odes_add_°©s
(
e
->
∑ª¡
,&
§
);

6873 
	}
}

6875 
	$fs_°‹íode
(
f¢ode
 *
f
,
FILE
 *
fd
) {

6876 
uöt8_t
 
unodebuff
[1+4+1+2+4+4+4+4+4+4+8+4+2+8*65536+4*65536+4];

6877 
uöt8_t
 *
±r
,*
ch±r
;

6878 
uöt32_t
 
i
,
ödx
,
ch
,
£ssi⁄ids
;

6879 
size_t
 
h≠py
;

6880 
£ssi⁄idªc
 *
£ssi⁄id±r
;

6882 i‡(
f
==
NULL
) {

6883 
	`Âutc
(0,
fd
);

6886 
±r
 = 
unodebuff
;

6887 
	`put8bô
(&
±r
,
f
->
ty≥
);

6888 
	`put32bô
(&
±r
,
f
->
id
);

6889 
	`put8bô
(&
±r
,
f
->
gﬂl
);

6890 
	`put16bô
(&
±r
,
f
->
mode
);

6891 
	`put32bô
(&
±r
,
f
->
uid
);

6892 
	`put32bô
(&
±r
,
f
->
gid
);

6893 
	`put32bô
(&
±r
,
f
->
©ime
);

6894 
	`put32bô
(&
±r
,
f
->
mtime
);

6895 
	`put32bô
(&
±r
,
f
->
˘ime
);

6896 
	`put32bô
(&
±r
,
f
->
åashtime
);

6897 
f
->
ty≥
) {

6898 
TYPE_DIRECTORY
:

6899 
TYPE_SOCKET
:

6900 
TYPE_FIFO
:

6901 
h≠py
 = 
	`fwrôe
(
unodebuff
,1,1+4+1+2+4+4+4+4+4+4,
fd
);

6903 
TYPE_BLOCKDEV
:

6904 
TYPE_CHARDEV
:

6905 
	`put32bô
(&
±r
,
f
->
d©a
.
devd©a
.
rdev
);

6906 
h≠py
 = 
	`fwrôe
(
unodebuff
,1,1+4+1+2+4+4+4+4+4+4+4,
fd
);

6908 
TYPE_SYMLINK
:

6909 
	`put32bô
(&
±r
,
f
->
d©a
.
sd©a
.
∂íg
);

6910 
h≠py
 = 
	`fwrôe
(
unodebuff
,1,1+4+1+2+4+4+4+4+4+4+4,
fd
);

6911 
h≠py
 = 
	`fwrôe
(
f
->
d©a
.
sd©a
.
∑th
,1,f->d©a.sd©a.
∂íg
,
fd
);

6913 
TYPE_FILE
:

6914 
TYPE_TRASH
:

6915 
TYPE_RESERVED
:

6916 
	`put64bô
(&
±r
,
f
->
d©a
.
fd©a
.
Àngth
);

6917 
ch
 = 0;

6918 
ödx
=0 ; indx<
f
->
d©a
.
fd©a
.
chunks
 ; indx++) {

6919 i‡(
f
->
d©a
.
fd©a
.
chunkèb
[
ödx
]!=0) {

6920 
ch
=
ödx
+1;

6923 
	`put32bô
(&
±r
,
ch
);

6924 
£ssi⁄ids
=0;

6925 
£ssi⁄id±r
=
f
->
d©a
.
fd©a
.
£ssi⁄ids
 ; sessi⁄id±∏&& sessi⁄ids<65535; sessi⁄id±r=£ssi⁄id±r->
√xt
) {

6926 
£ssi⁄ids
++;

6928 
	`put16bô
(&
±r
,
£ssi⁄ids
);

6930 
h≠py
 = 
	`fwrôe
(
unodebuff
,1,1+4+1+2+4+4+4+4+4+4+8+4+2,
fd
);

6932 
ödx
 = 0;

6933 
ch
>65536) {

6934 
ch±r
 = 
±r
;

6935 
i
=0 ; i<65536 ; i++) {

6936 
	`put64bô
(&
ch±r
,
f
->
d©a
.
fd©a
.
chunkèb
[
ödx
]);

6937 
ödx
++;

6939 
h≠py
 = 
	`fwrôe
(
±r
,1,8*65536,
fd
);

6940 
ch
-=65536;

6943 
ch±r
 = 
±r
;

6944 
i
=0 ; i<
ch
 ; i++) {

6945 
	`put64bô
(&
ch±r
,
f
->
d©a
.
fd©a
.
chunkèb
[
ödx
]);

6946 
ödx
++;

6949 
£ssi⁄ids
=0;

6950 
£ssi⁄id±r
=
f
->
d©a
.
fd©a
.
£ssi⁄ids
 ; sessi⁄id±∏&& sessi⁄ids<65535; sessi⁄id±r=£ssi⁄id±r->
√xt
) {

6951 
	`put32bô
(&
ch±r
,
£ssi⁄id±r
->
£ssi⁄id
);

6952 
£ssi⁄ids
++;

6955 
h≠py
 = 
	`fwrôe
(
±r
,1,8*
ch
+4*
£ssi⁄ids
,
fd
);

6957 
	}
}

6959 
	$fs_lﬂdnode
(
FILE
 *
fd
) {

6960 
uöt8_t
 
unodebuff
[4+1+2+4+4+4+4+4+4+8+4+2+8*65536+4*65536+4];

6961 c⁄° 
uöt8_t
 *
±r
,*
ch±r
;

6962 
uöt8_t
 
ty≥
;

6963 
uöt32_t
 
i
,
ödx
,
∂íg
,
ch
,
£ssi⁄ids
,
£ssi⁄id
;

6964 
f¢ode
 *
p
;

6965 
£ssi⁄idªc
 *
£ssi⁄id±r
;

6966 
uöt32_t
 
nodïos
;

6967 #i‚de‡
METARESTORE


6968 
°©§ec‹d
 *
§
;

6970 
uöt8_t
 
∆
;

6972 i‡(
fd
==
NULL
) {

6973 
∆
=1;

6977 
ty≥
 = 
	`fgëc
(
fd
);

6978 i‡(
ty≥
==0) {

6981 
p
 = 
	`mÆloc
((
f¢ode
));

6982 
	`∑s£π
(
p
);

6983 
p
->
ty≥
 =Åype;

6984 
ty≥
) {

6985 
TYPE_DIRECTORY
:

6986 
TYPE_FIFO
:

6987 
TYPE_SOCKET
:

6988 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4,
fd
)!=4+1+2+4+4+4+4+4+4) {

6989 
îr
 = 
î∫o
;

6990 i‡(
∆
) {

6991 
	`Âutc
('\n',
°dîr
);

6992 
∆
=0;

6994 
î∫o
 = 
îr
;

6995 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

6996 
	`‰ì
(
p
);

7000 
TYPE_BLOCKDEV
:

7001 
TYPE_CHARDEV
:

7002 
TYPE_SYMLINK
:

7003 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4+4,
fd
)!=4+1+2+4+4+4+4+4+4+4) {

7004 
îr
 = 
î∫o
;

7005 i‡(
∆
) {

7006 
	`Âutc
('\n',
°dîr
);

7007 
∆
=0;

7009 
î∫o
 = 
îr
;

7010 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

7011 
	`‰ì
(
p
);

7015 
TYPE_FILE
:

7016 
TYPE_TRASH
:

7017 
TYPE_RESERVED
:

7018 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4+8+4+2,
fd
)!=4+1+2+4+4+4+4+4+4+8+4+2) {

7019 
îr
 = 
î∫o
;

7020 i‡(
∆
) {

7021 
	`Âutc
('\n',
°dîr
);

7022 
∆
=0;

7024 
î∫o
 = 
îr
;

7025 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

7026 
	`‰ì
(
p
);

7031 i‡(
∆
) {

7032 
	`Âutc
('\n',
°dîr
);

7033 
∆
=0;

7035 
	`mfs_¨g_sy¶og
(
LOG_ERR
,"lﬂdögÇode: uƒecognizedÇodêty≥: %c",
ty≥
);

7036 
	`‰ì
(
p
);

7039 
±r
 = 
unodebuff
;

7040 
p
->
id
 = 
	`gë32bô
(&
±r
);

7041 
p
->
gﬂl
 = 
	`gë8bô
(&
±r
);

7042 
p
->
mode
 = 
	`gë16bô
(&
±r
);

7043 
p
->
uid
 = 
	`gë32bô
(&
±r
);

7044 
p
->
gid
 = 
	`gë32bô
(&
±r
);

7045 
p
->
©ime
 = 
	`gë32bô
(&
±r
);

7046 
p
->
mtime
 = 
	`gë32bô
(&
±r
);

7047 
p
->
˘ime
 = 
	`gë32bô
(&
±r
);

7048 
p
->
åashtime
 = 
	`gë32bô
(&
±r
);

7049 
ty≥
) {

7050 
TYPE_DIRECTORY
:

7051 #i‚de‡
METARESTORE


7052 
§
 = 
	`mÆloc
((
°©§ec‹d
));

7053 
	`∑s£π
(
§
);

7054 
	`mem£t
(
§
,0,(
°©§ec‹d
));

7055 
p
->
d©a
.
dd©a
.
°©s
 = 
§
;

7057 
p
->
d©a
.
dd©a
.
quŸa
 = 
NULL
;

7058 
p
->
d©a
.
dd©a
.
chûdªn
 = 
NULL
;

7059 
p
->
d©a
.
dd©a
.
∆ök
 = 2;

7060 
p
->
d©a
.
dd©a
.
ñemíts
 = 0;

7061 
TYPE_SOCKET
:

7062 
TYPE_FIFO
:

7069 
TYPE_BLOCKDEV
:

7070 
TYPE_CHARDEV
:

7071 
p
->
d©a
.
devd©a
.
rdev
 = 
	`gë32bô
(&
±r
);

7078 
TYPE_SYMLINK
:

7079 
∂íg
 = 
	`gë32bô
(&
±r
);

7080 
p
->
d©a
.
sd©a
.
∂íg
 =Öleng;

7081 i‡(
∂íg
>0) {

7082 
p
->
d©a
.
sd©a
.
∑th
 = 
	`mÆloc
(
∂íg
);

7083 
	`∑s£π
(
p
->
d©a
.
sd©a
.
∑th
);

7084 i‡(
	`‰ód
(
p
->
d©a
.
sd©a
.
∑th
,1,
∂íg
,
fd
)!=pleng) {

7085 
îr
 = 
î∫o
;

7086 i‡(
∆
) {

7087 
	`Âutc
('\n',
°dîr
);

7088 
∆
=0;

7090 
î∫o
 = 
îr
;

7091 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

7092 
	`‰ì
(
p
->
d©a
.
sd©a
.
∑th
);

7093 
	`‰ì
(
p
);

7097 
p
->
d©a
.
sd©a
.
∑th
 = 
NULL
;

7105 
TYPE_FILE
:

7106 
TYPE_TRASH
:

7107 
TYPE_RESERVED
:

7108 
p
->
d©a
.
fd©a
.
Àngth
 = 
	`gë64bô
(&
±r
);

7109 
ch
 = 
	`gë32bô
(&
±r
);

7110 
p
->
d©a
.
fd©a
.
chunks
 = 
ch
;

7111 
£ssi⁄ids
 = 
	`gë16bô
(&
±r
);

7112 i‡(
ch
>0) {

7113 
p
->
d©a
.
fd©a
.
chunkèb
 = 
	`mÆloc
((
uöt64_t
)*
ch
);

7114 
	`∑s£π
(
p
->
d©a
.
fd©a
.
chunkèb
);

7116 
p
->
d©a
.
fd©a
.
chunkèb
 = 
NULL
;

7118 
ödx
 = 0;

7119 
ch
>65536) {

7120 
ch±r
 = 
±r
;

7121 i‡(
	`‰ód
((
uöt8_t
*)
±r
,1,8*65536,
fd
)!=8*65536) {

7122 
îr
 = 
î∫o
;

7123 i‡(
∆
) {

7124 
	`Âutc
('\n',
°dîr
);

7125 
∆
=0;

7127 
î∫o
 = 
îr
;

7128 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

7129 i‡(
p
->
d©a
.
fd©a
.
chunkèb
) {

7130 
	`‰ì
(
p
->
d©a
.
fd©a
.
chunkèb
);

7132 
	`‰ì
(
p
);

7135 
i
=0 ; i<65536 ; i++) {

7136 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
	`gë64bô
(&
ch±r
);

7137 
ödx
++;

7139 
ch
-=65536;

7141 i‡(
	`‰ód
((
uöt8_t
*)
±r
,1,8*
ch
+4*
£ssi⁄ids
,
fd
)!=8*ch+4*sessionids) {

7142 
îr
 = 
î∫o
;

7143 i‡(
∆
) {

7144 
	`Âutc
('\n',
°dîr
);

7145 
∆
=0;

7147 
î∫o
 = 
îr
;

7148 
	`mfs_îæog
(
LOG_ERR
,"loadingÇode:ÑeadÉrror");

7149 i‡(
p
->
d©a
.
fd©a
.
chunkèb
) {

7150 
	`‰ì
(
p
->
d©a
.
fd©a
.
chunkèb
);

7152 
	`‰ì
(
p
);

7155 
i
=0 ; i<
ch
 ; i++) {

7156 
p
->
d©a
.
fd©a
.
chunkèb
[
ödx
] = 
	`gë64bô
(&
±r
);

7157 
ödx
++;

7159 
p
->
d©a
.
fd©a
.
£ssi⁄ids
=
NULL
;

7160 
£ssi⁄ids
) {

7161 
£ssi⁄id
 = 
	`gë32bô
(&
±r
);

7162 
£ssi⁄id±r
 = 
	`£ssi⁄idªc_mÆloc
();

7163 
£ssi⁄id±r
->
£ssi⁄id
 = sessionid;

7164 
£ssi⁄id±r
->
√xt
 = 
p
->
d©a
.
fd©a
.
£ssi⁄ids
;

7165 
p
->
d©a
.
fd©a
.
£ssi⁄ids
 = 
£ssi⁄id±r
;

7166 #i‚de‡
METARESTORE


7167 
	`m©o˛£rv_öô_£ssi⁄s
(
£ssi⁄id
,
p
->
id
);

7169 
£ssi⁄ids
--;

7177 
p
->
∑ª¡s
 = 
NULL
;

7178 
nodïos
 = 
	`NODEHASHPOS
(
p
->
id
);

7179 
p
->
√xt
 = 
nodehash
[
nodïos
];

7180 
nodehash
[
nodïos
] = 
p
;

7181 
	`f¢odes_u£d_öode
(
p
->
id
);

7182 
nodes
++;

7183 i‡(
ty≥
==
TYPE_DIRECTORY
) {

7184 
dúnodes
++;

7186 i‡(
ty≥
==
TYPE_FILE
 ||Åy≥==
TYPE_TRASH
 ||Åy≥==
TYPE_RESERVED
) {

7187 
fûíodes
++;

7190 
	}
}

7192 
	$fs_°‹íodes
(
FILE
 *
fd
) {

7193 
uöt32_t
 
i
;

7194 
f¢ode
 *
p
;

7195 
i
=0 ; i<
NODEHASHSIZE
 ; i++) {

7196 
p
=
nodehash
[
i
] ;Ö ;Öı->
√xt
) {

7197 
	`fs_°‹íode
(
p
,
fd
);

7200 
	`fs_°‹íode
(
NULL
,
fd
);

7201 
	}
}

7203 
	$fs_°‹ìdgñi°
(
f£dge
 *
e
,
FILE
 *
fd
) {

7204 
e
) {

7205 
	`fs_°‹ìdge
(
e
,
fd
);

7206 
e
Û->
√xtchûd
;

7208 
	}
}

7210 
	$fs_°‹ìdges_ªc
(
f¢ode
 *
f
,
FILE
 *
fd
) {

7211 
f£dge
 *
e
;

7212 
	`fs_°‹ìdgñi°
(
f
->
d©a
.
dd©a
.
chûdªn
,
fd
);

7213 
e
=
f
->
d©a
.
dd©a
.
chûdªn
 ;É ;ÉÛ->
√xtchûd
) {

7214 i‡(
e
->
chûd
->
ty≥
==
TYPE_DIRECTORY
) {

7215 
	`fs_°‹ìdges_ªc
(
e
->
chûd
,
fd
);

7218 
	}
}

7220 
	$fs_°‹ìdges
(
FILE
 *
fd
) {

7221 
	`fs_°‹ìdges_ªc
(
roŸ
,
fd
);

7222 
	`fs_°‹ìdgñi°
(
åash
,
fd
);

7223 
	`fs_°‹ìdgñi°
(
ª£rved
,
fd
);

7224 
	`fs_°‹ìdge
(
NULL
,
fd
);

7225 
	}
}

7227 
	$fs_lo°node
(
f¢ode
 *
p
) {

7228 
uöt8_t
 
¨äame
[40];

7229 
uöt32_t
 
i
,
l
;

7230 
i
=0;

7232 i‡(
i
==0) {

7233 
l
 = 
	`¢¥ötf
((*)
¨äame
,40,"lo°_node_%"
PRIu32
,
p
->
id
);

7235 
l
 = 
	`¢¥ötf
((*)
¨äame
,40,"lo°_node_%"
PRIu32
".%"PRIu32,
p
->
id
,
i
);

7237 i‡(!
	`f¢odes_«meisu£d
(
roŸ
,
l
,
¨äame
)) {

7238 
	`f¢odes_lök
(0,
roŸ
,
p
,
l
,
¨äame
);

7241 
i
++;

7242 } 
i
);

7244 
	}
}

7246 
	$fs_checknodes
(
ign‹eÊag
) {

7247 
uöt32_t
 
i
;

7248 
uöt8_t
 
∆
;

7249 
f¢ode
 *
p
;

7250 
∆
=1;

7251 
i
=0 ; i<
NODEHASHSIZE
 ; i++) {

7252 
p
=
nodehash
[
i
] ;Ö ;Öı->
√xt
) {

7253 i‡(
p
->
∑ª¡s
==
NULL
 &&Ö!=
roŸ
) {

7254 i‡(
∆
) {

7255 
	`Âutc
('\n',
°dîr
);

7256 
∆
=0;

7258 
	`Ârötf
(
°dîr
,"found oΩh™ed inode: %"
PRIu32
"\n",
p
->
id
);

7259 #i‚de‡
METARESTORE


7260 
	`sy¶og
(
LOG_ERR
,"found oΩh™ed inode: %"
PRIu32
,
p
->
id
);

7262 i‡(
ign‹eÊag
) {

7263 i‡(
	`fs_lo°node
(
p
)<0) {

7267 
	`Ârötf
(
°dîr
,"use mfsmetarestore (option -i)ÅoáttachÅhisÇodeÅoÑoot dir\n");

7274 
	}
}

7276 
	$fs_lﬂdnodes
(
FILE
 *
fd
) {

7277 
s
;

7278 
	`fs_lﬂdnode
(
NULL
);

7280 
s
 = 
	`fs_lﬂdnode
(
fd
);

7281 i‡(
s
<0) {

7284 } 
s
==0);

7286 
	}
}

7288 
	$fs_lﬂdedges
(
FILE
 *
fd
,
ign‹eÊag
) {

7289 
s
;

7290 
	`fs_lﬂdedge
(
NULL
,
ign‹eÊag
);

7292 
s
 = 
	`fs_lﬂdedge
(
fd
,
ign‹eÊag
);

7293 i‡(
s
<0) {

7296 } 
s
==0);

7298 
	}
}

7300 
	$fs_°‹e‰ì
(
FILE
 *
fd
) {

7301 
uöt8_t
 
wbuff
[8*1024],*
±r
;

7302 
‰ìnode
 *
n
;

7303 
uöt32_t
 
l
;

7304 
size_t
 
h≠py
;

7305 
l
=0;

7306 
n
=
‰ìli°
 ;Ç ;ÇÚ->
√xt
) {

7307 
l
++;

7309 
±r
 = 
wbuff
;

7310 
	`put32bô
(&
±r
,
l
);

7311 
h≠py
 = 
	`fwrôe
(
wbuff
,1,4,
fd
);

7312 
l
=0;

7313 
±r
=
wbuff
;

7314 
n
=
‰ìli°
 ;Ç ;ÇÚ->
√xt
) {

7315 i‡(
l
==1024) {

7316 
h≠py
 = 
	`fwrôe
(
wbuff
,1,8*1024,
fd
);

7317 
l
=0;

7318 
±r
=
wbuff
;

7320 
	`put32bô
(&
±r
,
n
->
id
);

7321 
	`put32bô
(&
±r
,
n
->
·ime
);

7322 
l
++;

7324 i‡(
l
>0) {

7325 
h≠py
 = 
	`fwrôe
(
wbuff
,1,8*
l
,
fd
);

7327 
	}
}

7329 
	$fs_lﬂd‰ì
(
FILE
 *
fd
) {

7330 
uöt8_t
 
rbuff
[8*1024];

7331 c⁄° 
uöt8_t
 *
±r
;

7332 
‰ìnode
 *
n
;

7333 
uöt32_t
 
l
,
t
;

7334 
uöt8_t
 
∆
=1;

7336 i‡(
	`‰ód
(
rbuff
,1,4,
fd
)!=4) {

7337 
îr
 = 
î∫o
;

7338 i‡(
∆
) {

7339 
	`Âutc
('\n',
°dîr
);

7340 
∆
=0;

7342 
î∫o
 = 
îr
;

7343 
	`mfs_îæog
(
LOG_ERR
,"loading freeÇodes:ÑeadÉrror");

7346 
±r
=
rbuff
;

7347 
t
 = 
	`gë32bô
(&
±r
);

7348 
‰ìli°
 = 
NULL
;

7349 
‰ìèû
 = &(
‰ìli°
);

7350 
l
=0;

7351 
t
>0) {

7352 i‡(
l
==0) {

7353 i‡(
t
>1024) {

7354 i‡(
	`‰ód
(
rbuff
,1,8*1024,
fd
)!=8*1024) {

7355 
îr
 = 
î∫o
;

7356 i‡(
∆
) {

7357 
	`Âutc
('\n',
°dîr
);

7358 
∆
=0;

7360 
î∫o
 = 
îr
;

7361 
	`mfs_îæog
(
LOG_ERR
,"loading freeÇodes:ÑeadÉrror");

7364 
l
=1024;

7366 i‡(
	`‰ód
(
rbuff
,1,8*
t
,
fd
)!=8*t) {

7367 
îr
 = 
î∫o
;

7368 i‡(
∆
) {

7369 
	`Âutc
('\n',
°dîr
);

7370 
∆
=0;

7372 
î∫o
 = 
îr
;

7373 
	`mfs_îæog
(
LOG_ERR
,"loading freeÇodes:ÑeadÉrror");

7376 
l
=
t
;

7378 
±r
 = 
rbuff
;

7380 
n
 = 
	`‰ìnode_mÆloc
();

7381 
n
->
id
 = 
	`gë32bô
(&
±r
);

7382 
n
->
·ime
 = 
	`gë32bô
(&
±r
);

7383 
n
->
√xt
 = 
NULL
;

7384 *
‰ìèû
 = 
n
;

7385 
‰ìèû
 = &(
n
->
√xt
);

7386 
	`f¢odes_u£d_öode
(
n
->
id
);

7387 
l
--;

7388 
t
--;

7391 
	}
}

7396 
	$fs_°‹equŸa
(
FILE
 *
fd
) {

7397 
uöt8_t
 
wbuff
[66*100],*
±r
;

7398 
quŸ™ode
 *
qn
;

7399 
uöt32_t
 
l
;

7400 
size_t
 
h≠py
;

7401 
l
=0;

7402 
qn
 = 
quŸahód
 ; q¿; qn=qn->
√xt
) {

7403 
l
++;

7405 
±r
 = 
wbuff
;

7406 
	`put32bô
(&
±r
,
l
);

7407 
h≠py
 = 
	`fwrôe
(
wbuff
,1,4,
fd
);

7408 
l
=0;

7409 
±r
=
wbuff
;

7410 
qn
 = 
quŸahód
 ; q¿; qn=qn->
√xt
) {

7411 i‡(
l
==100) {

7412 
h≠py
 = 
	`fwrôe
(
wbuff
,1,66*100,
fd
);

7413 
l
=0;

7414 
±r
=
wbuff
;

7416 
	`put32bô
(&
±r
,
qn
->
node
->
id
);

7417 
	`put8bô
(&
±r
,
qn
->
ex˚eded
);

7418 
	`put8bô
(&
±r
,
qn
->
Êags
);

7419 
	`put32bô
(&
±r
,
qn
->
°ime°amp
);

7420 
	`put32bô
(&
±r
,
qn
->
söodes
);

7421 
	`put32bô
(&
±r
,
qn
->
höodes
);

7422 
	`put64bô
(&
±r
,
qn
->
¶ígth
);

7423 
	`put64bô
(&
±r
,
qn
->
hÀngth
);

7424 
	`put64bô
(&
±r
,
qn
->
ssize
);

7425 
	`put64bô
(&
±r
,
qn
->
hsize
);

7426 
	`put64bô
(&
±r
,
qn
->
§ólsize
);

7427 
	`put64bô
(&
±r
,
qn
->
hªÆsize
);

7428 
l
++;

7430 i‡(
l
>0) {

7431 
h≠py
 = 
	`fwrôe
(
wbuff
,1,66*
l
,
fd
);

7433 
	}
}

7435 
	$fs_lﬂdquŸa
(
FILE
 *
fd
,
ign‹eÊag
) {

7436 
uöt8_t
 
rbuff
[66*100];

7437 c⁄° 
uöt8_t
 *
±r
;

7438 
quŸ™ode
 *
qn
;

7439 
f¢ode
 *
‚
;

7440 
uöt32_t
 
l
,
t
,
id
;

7441 
uöt8_t
 
∆
=1;

7443 i‡(
	`‰ód
(
rbuff
,1,4,
fd
)!=4) {

7444 
îr
 = 
î∫o
;

7445 i‡(
∆
) {

7446 
	`Âutc
('\n',
°dîr
);

7447 
∆
=0;

7449 
î∫o
 = 
îr
;

7450 
	`mfs_îæog
(
LOG_ERR
,"loading quota:ÑeadÉrror");

7453 
±r
=
rbuff
;

7454 
t
 = 
	`gë32bô
(&
±r
);

7455 
quŸahód
 = 
NULL
;

7457 
l
=0;

7458 
t
>0) {

7459 i‡(
l
==0) {

7460 i‡(
t
>100) {

7461 i‡(
	`‰ód
(
rbuff
,1,66*100,
fd
)!=66*100) {

7462 
îr
 = 
î∫o
;

7463 i‡(
∆
) {

7464 
	`Âutc
('\n',
°dîr
);

7465 
∆
=0;

7467 
î∫o
 = 
îr
;

7468 
	`mfs_îæog
(
LOG_ERR
,"loading quota:ÑeadÉrror");

7471 
l
=100;

7473 i‡(
	`‰ód
(
rbuff
,1,66*
t
,
fd
)!=66*t) {

7474 
îr
 = 
î∫o
;

7475 i‡(
∆
) {

7476 
	`Âutc
('\n',
°dîr
);

7477 
∆
=0;

7479 
î∫o
 = 
îr
;

7480 
	`mfs_îæog
(
LOG_ERR
,"loading freeÇodes:ÑeadÉrror");

7483 
l
=
t
;

7485 
±r
 = 
rbuff
;

7487 
id
 = 
	`gë32bô
(&
±r
);

7488 
‚
 = 
	`f¢odes_id_to_node
(
id
);

7489 i‡(
‚
==
NULL
 || fn->
ty≥
!=
TYPE_DIRECTORY
) {

7490 i‡(
∆
) {

7491 
	`Âutc
('\n',
°dîr
);

7492 
∆
=0;

7494 
	`Ârötf
(
°dîr
,"quŸ®deföed f‹ %†öode: %"
PRIu32
"\n",(
‚
==
NULL
)?"n⁄Éxi°ög":"nŸ dúe˘‹y",
id
);

7495 #i‚de‡
METARESTORE


7496 
	`sy¶og
(
LOG_ERR
,"quŸ®deföed f‹ %†öode: %"
PRIu32
,(
‚
==
NULL
)?"n⁄Éxi°ög":"nŸ dúe˘‹y",
id
);

7498 i‡(
ign‹eÊag
) {

7499 
±r
+=62;

7501 
	`Ârötf
(
°dîr
,"use mfsmetarestore (option -i)ÅoÑemoveÅhis quota definition");

7505 
qn
 = 
	`f¢odes_√w_quŸ™ode
(
‚
);

7506 
qn
->
ex˚eded
 = 
	`gë8bô
(&
±r
);

7507 
qn
->
Êags
 = 
	`gë8bô
(&
±r
);

7508 
qn
->
°ime°amp
 = 
	`gë32bô
(&
±r
);

7509 
qn
->
söodes
 = 
	`gë32bô
(&
±r
);

7510 
qn
->
höodes
 = 
	`gë32bô
(&
±r
);

7511 
qn
->
¶ígth
 = 
	`gë64bô
(&
±r
);

7512 
qn
->
hÀngth
 = 
	`gë64bô
(&
±r
);

7513 
qn
->
ssize
 = 
	`gë64bô
(&
±r
);

7514 
qn
->
hsize
 = 
	`gë64bô
(&
±r
);

7515 
qn
->
§ólsize
 = 
	`gë64bô
(&
±r
);

7516 
qn
->
hªÆsize
 = 
	`gë64bô
(&
±r
);

7518 
l
--;

7519 
t
--;

7522 
	}
}

7524 
	$fs_°‹e
(
FILE
 *
fd
,
uöt8_t
 
fvî
) {

7525 
uöt8_t
 
hdr
[16];

7526 
uöt8_t
 *
±r
;

7527 
size_t
 
h≠py
;

7528 
off_t
 
offbegö
,
of„nd
;

7530 
±r
 = 
hdr
;

7531 
	`put32bô
(&
±r
,
maxnodeid
);

7532 
	`put64bô
(&
±r
,
vîsi⁄
);

7533 
	`put32bô
(&
±r
,
√xt£ssi⁄id
);

7534 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7535 i‡(
fvî
>=0x16) {

7536 
offbegö
 = 
	`·ñlo
(
fd
);

7537 
	`f£eko
(
fd
,
offbegö
+16,
SEEK_SET
);

7539 
offbegö
 = 0;

7541 
	`fs_°‹íodes
(
fd
);

7542 i‡(
fvî
>=0x16) {

7543 
of„nd
 = 
	`·ñlo
(
fd
);

7544 
	`mem˝y
(
hdr
,"NODE 1.0",8);

7545 
±r
 = 
hdr
+8;

7546 
	`put64bô
(&
±r
,
of„nd
-
offbegö
-16);

7547 
	`f£eko
(
fd
,
offbegö
,
SEEK_SET
);

7548 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7550 
offbegö
 = 
of„nd
;

7551 
	`f£eko
(
fd
,
offbegö
+16,
SEEK_SET
);

7553 
	`fs_°‹ìdges
(
fd
);

7554 i‡(
fvî
>=0x16) {

7555 
of„nd
 = 
	`·ñlo
(
fd
);

7556 
	`mem˝y
(
hdr
,"EDGE 1.0",8);

7557 
±r
 = 
hdr
+8;

7558 
	`put64bô
(&
±r
,
of„nd
-
offbegö
-16);

7559 
	`f£eko
(
fd
,
offbegö
,
SEEK_SET
);

7560 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7562 
offbegö
 = 
of„nd
;

7563 
	`f£eko
(
fd
,
offbegö
+16,
SEEK_SET
);

7565 
	`fs_°‹e‰ì
(
fd
);

7566 i‡(
fvî
>=0x16) {

7567 
of„nd
 = 
	`·ñlo
(
fd
);

7568 
	`mem˝y
(
hdr
,"FREE 1.0",8);

7569 
±r
 = 
hdr
+8;

7570 
	`put64bô
(&
±r
,
of„nd
-
offbegö
-16);

7571 
	`f£eko
(
fd
,
offbegö
,
SEEK_SET
);

7572 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7574 
offbegö
 = 
of„nd
;

7575 
	`f£eko
(
fd
,
offbegö
+16,
SEEK_SET
);

7577 
	`fs_°‹equŸa
(
fd
);

7579 
of„nd
 = 
	`·ñlo
(
fd
);

7580 
	`mem˝y
(
hdr
,"QUOT 1.0",8);

7581 
±r
 = 
hdr
+8;

7582 
	`put64bô
(&
±r
,
of„nd
-
offbegö
-16);

7583 
	`f£eko
(
fd
,
offbegö
,
SEEK_SET
);

7584 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7586 
offbegö
 = 
of„nd
;

7587 
	`f£eko
(
fd
,
offbegö
+16,
SEEK_SET
);

7589 
	`chunk_°‹e
(
fd
);

7590 i‡(
fvî
>=0x16) {

7591 
of„nd
 = 
	`·ñlo
(
fd
);

7592 
	`mem˝y
(
hdr
,"CHNK 1.0",8);

7593 
±r
 = 
hdr
+8;

7594 
	`put64bô
(&
±r
,
of„nd
-
offbegö
-16);

7595 
	`f£eko
(
fd
,
offbegö
,
SEEK_SET
);

7596 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7598 
	`f£eko
(
fd
,
of„nd
,
SEEK_SET
);

7599 
	`mem˝y
(
hdr
,"[MFS EOF MARKER]",16);

7600 
h≠py
 = 
	`fwrôe
(
hdr
,1,16,
fd
);

7602 
	}
}

7604 
uöt64_t
 
	$fs_lﬂdvîsi⁄
(
FILE
 *
fd
) {

7605 
uöt8_t
 
hdr
[12];

7606 c⁄° 
uöt8_t
 *
±r
;

7607 
uöt64_t
 
fvîsi⁄
;

7609 i‡(
	`‰ód
(
hdr
,1,12,
fd
)!=12) {

7612 
±r
 = 
hdr
+4;

7614 
fvîsi⁄
 = 
	`gë64bô
(&
±r
);

7616  
fvîsi⁄
;

7617 
	}
}

7619 
	$fs_lﬂd
(
FILE
 *
fd
,
ign‹eÊag
,
uöt8_t
 
fvî
) {

7620 
uöt8_t
 
hdr
[16];

7621 c⁄° 
uöt8_t
 *
±r
;

7622 
off_t
 
offbegö
;

7623 
uöt64_t
 
¶íg
;

7625 i‡(
	`‰ód
(
hdr
,1,16,
fd
)!=16) {

7626 
	`Ârötf
(
°dîr
,"errorÜoading header\n");

7629 
±r
 = 
hdr
;

7630 
maxnodeid
 = 
	`gë32bô
(&
±r
);

7631 
vîsi⁄
 = 
	`gë64bô
(&
±r
);

7632 
√xt£ssi⁄id
 = 
	`gë32bô
(&
±r
);

7633 
	`f¢odes_öô_‰ìbômask
();

7635 i‡(
fvî
<0x16) {

7636 
	`Ârötf
(
°dîr
,"loading objects (files,directories,etc.) ... ");

7637 
	`fÊush
(
°dîr
);

7638 i‡(
	`fs_lﬂdnodes
(
fd
)<0) {

7639 #i‚de‡
METARESTORE


7640 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (node)");

7644 
	`Ârötf
(
°dîr
,"ok\n");

7645 
	`Ârötf
(
°dîr
,"loadingÇames ... ");

7646 
	`fÊush
(
°dîr
);

7647 i‡(
	`fs_lﬂdedges
(
fd
,
ign‹eÊag
)<0) {

7648 #i‚de‡
METARESTORE


7649 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (edge)");

7653 
	`Ârötf
(
°dîr
,"ok\n");

7654 
	`Ârötf
(
°dîr
,"loading deletionÅimestamps ... ");

7655 
	`fÊush
(
°dîr
);

7656 i‡(
	`fs_lﬂd‰ì
(
fd
)<0) {

7657 #i‚de‡
METARESTORE


7658 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (free)");

7662 
	`Ârötf
(
°dîr
,"ok\n");

7663 
	`Ârötf
(
°dîr
,"loading chunks data ... ");

7664 
	`fÊush
(
°dîr
);

7665 i‡(
	`chunk_lﬂd
(
fd
)<0) {

7666 
	`Ârötf
(
°dîr
,"error\n");

7667 #i‚de‡
METARESTORE


7668 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (chunks)");

7670 
	`f˛o£
(
fd
);

7673 
	`Ârötf
(
°dîr
,"ok\n");

7676 i‡(
	`‰ód
(
hdr
,1,16,
fd
)!=16) {

7677 
	`Ârötf
(
°dîr
,"error section header\n");

7680 i‡(
	`memcmp
(
hdr
,"[MFS EOF MARKER]",16)==0) {

7683 
±r
 = 
hdr
+8;

7684 
¶íg
 = 
	`gë64bô
(&
±r
);

7685 
offbegö
 = 
	`·ñlo
(
fd
);

7686 i‡(
	`memcmp
(
hdr
,"NODE 1.0",8)==0) {

7687 
	`Ârötf
(
°dîr
,"loading objects (files,directories,etc.) ... ");

7688 
	`fÊush
(
°dîr
);

7689 i‡(
	`fs_lﬂdnodes
(
fd
)<0) {

7690 #i‚de‡
METARESTORE


7691 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (node)");

7695 } i‡(
	`memcmp
(
hdr
,"EDGE 1.0",8)==0) {

7696 
	`Ârötf
(
°dîr
,"loadingÇames ... ");

7697 
	`fÊush
(
°dîr
);

7698 i‡(
	`fs_lﬂdedges
(
fd
,
ign‹eÊag
)<0) {

7699 #i‚de‡
METARESTORE


7700 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (edge)");

7704 } i‡(
	`memcmp
(
hdr
,"FREE 1.0",8)==0) {

7705 
	`Ârötf
(
°dîr
,"loading deletionÅimestamps ... ");

7706 
	`fÊush
(
°dîr
);

7707 i‡(
	`fs_lﬂd‰ì
(
fd
)<0) {

7708 #i‚de‡
METARESTORE


7709 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (free)");

7713 } i‡(
	`memcmp
(
hdr
,"QUOT 1.0",8)==0) {

7714 
	`Ârötf
(
°dîr
,"loading quota definitions ... ");

7715 
	`fÊush
(
°dîr
);

7716 i‡(
	`fs_lﬂdquŸa
(
fd
,
ign‹eÊag
)<0) {

7717 #i‚de‡
METARESTORE


7718 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (quota)");

7722 } i‡(
	`memcmp
(
hdr
,"XATR 1.0",8)==0) {

7723 
	`Ârötf
(
°dîr
,"ignoring xattrs\n");

7724 
	`f£eko
(
fd
,
¶íg
,
SEEK_CUR
);

7725 } i‡(
	`memcmp
(
hdr
,"LOCK 1.0",8)==0) {

7726 
	`Ârötf
(
°dîr
,"ignoringÜocks\n");

7727 
	`f£eko
(
fd
,
¶íg
,
SEEK_CUR
);

7728 } i‡(
	`memcmp
(
hdr
,"CHNK 1.0",8)==0) {

7729 
	`Ârötf
(
°dîr
,"loading chunks data ... ");

7730 
	`fÊush
(
°dîr
);

7731 i‡(
	`chunk_lﬂd
(
fd
)<0) {

7732 
	`Ârötf
(
°dîr
,"error\n");

7733 #i‚de‡
METARESTORE


7734 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (chunks)");

7736 
	`f˛o£
(
fd
);

7740 
hdr
[8]=0;

7741 i‡(
ign‹eÊag
) {

7742 
	`Ârötf
(
°dîr
,"unknow¿£˘i⁄ found (Àng:%"
PRIu64
",«me:%sË-áŒ d©®‰omÅhi†£˘i⁄ wû»bêlo° !!!\n",
¶íg
,
hdr
);

7743 
	`f£eko
(
fd
,
¶íg
,
SEEK_CUR
);

7745 
	`Ârötf
(
°dîr
,"îr‹: unknow¿£˘i⁄ found (Àng:%"
PRIu64
",«me:%s)\n",
¶íg
,
hdr
);

7749 i‡((
off_t
)(
offbegö
+
¶íg
)!=
	`·ñlo
(
fd
)) {

7750 
	`Ârötf
(
°dîr
,"notáll section has beenÑead - file corrupted\n");

7751 i‡(
ign‹eÊag
==0) {

7755 
	`Ârötf
(
°dîr
,"ok\n");

7759 
	`Ârötf
(
°dîr
,"checking filesystem consistency ... ");

7760 
	`fÊush
(
°dîr
);

7761 
roŸ
 = 
	`f¢odes_id_to_node
(
MFS_ROOT_ID
);

7762 i‡(
roŸ
==
NULL
) {

7763 
	`Ârötf
(
°dîr
,"rootÇodeÇot found !!!\n");

7764 #i‚de‡
METARESTORE


7765 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (noÑoot)");

7769 i‡(
	`fs_checknodes
(
ign‹eÊag
)<0) {

7772 
	`Ârötf
(
°dîr
,"ok\n");

7774 
	}
}

7844 #i‚de‡
METARESTORE


7845 
	$fs_√w
() {

7846 
uöt32_t
 
nodïos
;

7848 
°©§ec‹d
 *
§
;

7850 
maxnodeid
 = 
MFS_ROOT_ID
;

7851 
vîsi⁄
 = 0;

7852 
√xt£ssi⁄id
 = 1;

7853 
	`f¢odes_öô_‰ìbômask
();

7854 
roŸ
 = 
	`mÆloc
((
f¢ode
));

7855 
	`∑s£π
(
roŸ
);

7856 
roŸ
->
id
 = 
MFS_ROOT_ID
;

7857 
roŸ
->
ty≥
 = 
TYPE_DIRECTORY
;

7858 
roŸ
->
˘ime
 =ÑoŸ->
mtime
 =ÑoŸ->
©ime
 = 
	`maö_time
();

7859 
roŸ
->
gﬂl
 = 
DEFAULT_GOAL
;

7860 
roŸ
->
åashtime
 = 
DEFAULT_TRASHTIME
;

7861 
roŸ
->
mode
 = 0777;

7862 
roŸ
->
uid
 = 0;

7863 
roŸ
->
gid
 = 0;

7865 
§
 = 
	`mÆloc
((
°©§ec‹d
));

7866 
	`∑s£π
(
§
);

7867 
	`mem£t
(
§
,0,(
°©§ec‹d
));

7868 
roŸ
->
d©a
.
dd©a
.
°©s
 = 
§
;

7869 
roŸ
->
d©a
.
dd©a
.
quŸa
 = 
NULL
;

7871 
roŸ
->
d©a
.
dd©a
.
chûdªn
 = 
NULL
;

7872 
roŸ
->
d©a
.
dd©a
.
ñemíts
 = 0;

7873 
roŸ
->
d©a
.
dd©a
.
∆ök
 = 2;

7874 
roŸ
->
∑ª¡s
 = 
NULL
;

7875 
nodïos
 = 
	`NODEHASHPOS
(
roŸ
->
id
);

7876 
roŸ
->
√xt
 = 
nodehash
[
nodïos
];

7877 
nodehash
[
nodïos
] = 
roŸ
;

7878 
	`f¢odes_u£d_öode
(
roŸ
->
id
);

7879 
	`chunk_√wfs
();

7880 
nodes
=1;

7881 
dúnodes
=1;

7882 
fûíodes
=0;

7883 
	}
}

7886 
	$fs_emîgícy_°‹óŒ
(c⁄° *
‚ame
) {

7887 
FILE
 *
fd
;

7888 
size_t
 
h≠py
;

7889 
fd
 = 
	`f›í
(
‚ame
,"w");

7890 i‡(
fd
==
NULL
) {

7893 #i‡
VERSHEX
>=0x010700

7894 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.7",1,8,
fd
);

7895 
	`fs_°‹e
(
fd
,0x17);

7897 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.5",1,8,
fd
);

7898 
	`fs_°‹e
(
fd
,0x15);

7900 i‡(
	`„º‹
(
fd
)!=0) {

7901 
	`f˛o£
(
fd
);

7904 
	`f˛o£
(
fd
);

7905 
	`sy¶og
(
LOG_WARNING
,"mëad©®wîê°‹edÅÿemîgícy fûe: %†-ÖÀa£ c›yÅhi†fûêtÿyou∏deÁu…Üoˇti⁄á†'mëad©a.mfs'",
‚ame
);

7907 
	}
}

7909 
	$fs_emîgícy_ßves
() {

7910 #i‡
	`deföed
(
HAVE_PWD_H
Ë&& deföed(
HAVE_GETPWUID
)

7911 
∑sswd
 *
p
;

7913 i‡(
	`fs_emîgícy_°‹óŒ
("metadata.mfs.emergency")==0) {

7916 #i‡
	`deföed
(
HAVE_PWD_H
Ë&& deföed(
HAVE_GETPWUID
)

7917 
p
 = 
	`gëpwuid
(
	`gëuid
());

7918 i‡(
p
) {

7919 *
‚ame
;

7920 
l
;

7921 
l
 = 
	`°æí
(
p
->
pw_dú
);

7922 
‚ame
 = 
	`mÆloc
(
l
+24);

7923 i‡(
‚ame
) {

7924 
	`mem˝y
(
‚ame
,
p
->
pw_dú
,
l
);

7925 
‚ame
[
l
]='/';

7926 
	`mem˝y
(
‚ame
+
l
+1,"metadata.mfs.emergency",22);

7927 
‚ame
[
l
+23]=0;

7928 i‡(
	`fs_emîgícy_°‹óŒ
(
‚ame
)==0) {

7929 
	`‰ì
(
‚ame
);

7932 
	`‰ì
(
‚ame
);

7936 i‡(
	`fs_emîgícy_°‹óŒ
("/metadata.mfs.emergency")==0) {

7939 i‡(
	`fs_emîgícy_°‹óŒ
("/tmp/metadata.mfs.emergency")==0) {

7942 i‡(
	`fs_emîgícy_°‹óŒ
("/var/metadata.mfs.emergency")==0) {

7945 i‡(
	`fs_emîgícy_°‹óŒ
("/usr/metadata.mfs.emergency")==0) {

7948 i‡(
	`fs_emîgícy_°‹óŒ
("/usr/share/metadata.mfs.emergency")==0) {

7951 i‡(
	`fs_emîgícy_°‹óŒ
("/usr/local/metadata.mfs.emergency")==0) {

7954 i‡(
	`fs_emîgícy_°‹óŒ
("/usr/local/var/metadata.mfs.emergency")==0) {

7957 i‡(
	`fs_emîgícy_°‹óŒ
("/usr/local/share/metadata.mfs.emergency")==0) {

7961 
	}
}

7963 #i‚de‡
METARESTORE


7964 
	$fs_°‹óŒ
(
bg
) {

7965 
FILE
 *
fd
;

7966 
size_t
 
h≠py
;

7967 #ifde‡
BACKGROUND_METASTORE


7968 
i
;

7969 
°©
 
sb
;

7970 i‡(
	`°©
("mëad©a.mfs.back.tmp",&
sb
)==0) {

7971 
	`sy¶og
(
LOG_ERR
,"previous metadata saveÖrocess hasn't finished yet - doÇot startánother one");

7975 ()
bg
;

7977 
	`ch™gñog_rŸ©e
();

7978 #ifde‡
BACKGROUND_METASTORE


7979 i‡(
bg
) {

7980 
i
 = 
	`f‹k
();

7982 
i
 = -1;

7985 i‡(
i
<=0) {

7987 i‡(
	`ª«me
("metadata.mfs.back","metadata.mfs.back.tmp")<0) {

7988 i‡(
î∫o
!=
ENOENT
) {

7989 
	`mfs_îæog
(
LOG_ERR
,"can'tÑename metadata.mfs.back -> metadata.mfs.back.tmp");

7990 #ifde‡
BACKGROUND_METASTORE


7991 i‡(
i
==0) {

7992 
	`exô
(0);

7998 
fd
 = 
	`f›í
("metadata.mfs.back","w");

7999 i‡(
fd
==
NULL
) {

8000 
	`sy¶og
(
LOG_ERR
,"can't open metadata file");

8001 #ifde‡
BACKGROUND_METASTORE


8002 i‡(
i
==0) {

8003 
	`exô
(0);

8008 #i‡
VERSHEX
>=0x010700

8009 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.7",1,8,
fd
);

8010 
	`fs_°‹e
(
fd
,0x17);

8012 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.5",1,8,
fd
);

8013 
	`fs_°‹e
(
fd
,0x15);

8015 i‡(
	`„º‹
(
fd
)!=0) {

8016 
	`sy¶og
(
LOG_ERR
,"can't write metadata");

8017 
	`fs_emîgícy_ßves
();

8019 
	`f˛o£
(
fd
);

8020 
	`u∆ök
("metadata.mfs.back.tmp");

8021 
	`u∆ök
("metadata.mfs");

8022 #ifde‡
BACKGROUND_METASTORE


8023 i‡(
i
==0) {

8024 
	`exô
(0);

8029 
	}
}

8031 
	$fs_do°‹óŒ
() {

8032 
	`fs_°‹óŒ
(1);

8033 
	}
}

8035 
	$fs_ãrm
() {

8037 i‡(
	`fs_°‹óŒ
(0)==1) {

8038 i‡(
	`ª«me
("metadata.mfs.back","metadata.mfs")<0) {

8039 
	`mfs_îæog
(
LOG_WARNING
,"can'tÑename metadata.mfs.back -> metadata.mfs");

8041 
	`chunk_ãrm
();

8045 
	`fs_emîgícy_ßves
();

8046 
	`sy¶og
(
LOG_ERR
,"can't store metadata -ÅryÅo make more space on your hdd or changeÖrivieleges -Ñetryingáfter 10 seconds");

8047 
	`¶ìp
(10);

8049 
	}
}

8052 
	$fs_°‹óŒ
(c⁄° *
‚ame
) {

8053 
FILE
 *
fd
;

8054 
size_t
 
h≠py
;

8055 
fd
 = 
	`f›í
(
‚ame
,"w");

8056 i‡(
fd
==
NULL
) {

8057 
	`¥ötf
("can't open metadata file\n");

8060 #i‡
VERSHEX
>=0x010700

8061 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.7",1,8,
fd
);

8062 
	`fs_°‹e
(
fd
,0x17);

8064 
h≠py
 = 
	`fwrôe
(
MFSSIGNATURE
 "M 1.5",1,8,
fd
);

8065 
	`fs_°‹e
(
fd
,0x15);

8067 i‡(
	`„º‹
(
fd
)!=0) {

8068 
	`¥ötf
("can't write metadata\n");

8070 
	`f˛o£
(
fd
);

8071 
	}
}

8073 
	$fs_ãrm
(c⁄° *
‚ame
) {

8074 
	`fs_°‹óŒ
(
‚ame
);

8075 
	}
}

8078 #i‚de‡
METARESTORE


8079 
	$fs_lﬂdÆl
() {

8081 
	$fs_lﬂdÆl
(c⁄° *
‚ame
,
ign‹eÊag
) {

8083 
FILE
 *
fd
;

8084 
uöt8_t
 
hdr
[8];

8085 #i‚de‡
METARESTORE


8086 
uöt8_t
 
bhdr
[8];

8087 
uöt64_t
 
backvîsi⁄
;

8088 
c⁄vîãd
=0;

8091 #ifde‡
METARESTORE


8092 
fd
 = 
	`f›í
(
‚ame
,"r");

8094 
backvîsi⁄
 = 0;

8095 
fd
 = 
	`f›í
("metadata.mfs.back","r");

8096 i‡(
fd
!=
NULL
) {

8097 i‡(
	`‰ód
(
bhdr
,1,8,
fd
)==8) {

8101 i‡(
	`memcmp
(
bhdr
,
MFSSIGNATURE
 "M 1.",7)==0 && (bhdr[7]=='5' || bhdr[7]=='7')) {

8102 
backvîsi⁄
 = 
	`fs_lﬂdvîsi⁄
(
fd
);

8105 
	`f˛o£
(
fd
);

8108 
fd
 = 
	`f›í
("metadata.mfs","r");

8110 i‡(
fd
==
NULL
) {

8111 
	`Ârötf
(
°dîr
,"can't open metadata file\n");

8112 #i‚de‡
METARESTORE


8114 #i‡
	`deföed
(
HAVE_GETCWD
)

8115 #i‚de‡
PATH_MAX


8116 
	#PATH_MAX
 10000

	)

8118 
cwdbuf
[
PATH_MAX
+1];

8119 
cwdÀn
;

8120 i‡(
	`gëcwd
(
cwdbuf
,
PATH_MAX
)==
NULL
) {

8121 
cwdbuf
[0]=0;

8123 
cwdÀn
 = 
	`°æí
(
cwdbuf
);

8124 i‡(
cwdÀn
>0 && cwdÀn<
PATH_MAX
-1 && 
cwdbuf
[cwdlen-1]!='/') {

8125 
cwdbuf
[
cwdÀn
]='/';

8126 
cwdbuf
[
cwdÀn
+1]=0;

8128 
cwdbuf
[0]=0;

8133 
cwdbuf
[1];

8134 
cwdbuf
[0]=0;

8136 i‡(
cwdbuf
[0]) {

8137 
	`Ârötf
(
°dîr
,"i‡thi†i†√w in°Æ©i⁄ÅhíÑíamê%smëad©a.mfs.em±yá†%smëad©a.mfs\n",
cwdbuf
,cwdbuf);

8139 
	`Ârötf
(
°dîr
,"ifÅhis isÇew instalationÅhenÑename metadata.mfs.emptyás metadata.mfs (in current working directory)\n");

8142 
	`sy¶og
(
LOG_ERR
,"can't open metadata file");

8146 i‡(
	`‰ód
(
hdr
,1,8,
fd
)!=8) {

8147 
	`Ârötf
(
°dîr
,"can'tÑead metadata header\n");

8148 #i‚de‡
METARESTORE


8149 
	`sy¶og
(
LOG_ERR
,"can'tÑead metadata header");

8153 #i‚de‡
METARESTORE


8154 i‡(
	`memcmp
(
hdr
,"MFSM NEW",8)==0) {

8155 
	`f˛o£
(
fd
);

8156 i‡(
backvîsi⁄
>0) {

8157 
	`Ârötf
(
°dîr
,"backup file isÇewerÅhan current file -Ölease check it manually -Öropably you shouldÑun metarestore\n");

8158 
	`sy¶og
(
LOG_ERR
,"backup file isÇewerÅhan current file -Ölease check it manually -Öropably you shouldÑun metarestore");

8161 i‡(
	`ª«me
("metadata.mfs","metadata.mfs.back")<0) {

8162 
	`mfs_îæog
(
LOG_ERR
,"can'tÑename metadata.mfs -> metadata.mfs.back");

8165 
	`Ârötf
(
°dîr
,"createÇewÉmpty filesystem");

8166 
	`sy¶og
(
LOG_NOTICE
,"createÇewÉmpty filesystem");

8167 
	`fs_√w
();

8168 
	`fs_°‹óŒ
(0);

8189 i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "M 1.5",8)==0) {

8190 #i‚de‡
METARESTORE


8191 i‡(
	`fs_lﬂd
(
fd
,0,0x15)<0) {

8193 i‡(
	`fs_lﬂd
(
fd
,
ign‹eÊag
,0x15)<0) {

8195 #i‚de‡
METARESTORE


8196 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (structure)");

8198 
	`f˛o£
(
fd
);

8201 } i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "M 1.7",8)==0) {

8202 #i‚de‡
METARESTORE


8203 i‡(
	`fs_lﬂd
(
fd
,0,0x17)<0) {

8205 i‡(
	`fs_lﬂd
(
fd
,
ign‹eÊag
,0x17)<0) {

8207 #i‚de‡
METARESTORE


8208 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata (structure)");

8210 
	`f˛o£
(
fd
);

8214 
	`Ârötf
(
°dîr
,"wrong metadata header\n");

8215 #i‚de‡
METARESTORE


8216 
	`sy¶og
(
LOG_ERR
,"wrong metadata header");

8218 
	`f˛o£
(
fd
);

8221 i‡(
	`„º‹
(
fd
)!=0) {

8222 
	`Ârötf
(
°dîr
,"errorÑeading metadata\n");

8223 #i‚de‡
METARESTORE


8224 
	`sy¶og
(
LOG_ERR
,"errorÑeading metadata");

8226 
	`f˛o£
(
fd
);

8229 
	`f˛o£
(
fd
);

8230 #i‚de‡
METARESTORE


8231 i‡(
backvîsi⁄
>
vîsi⁄
) {

8232 
	`mfs_sy¶og
(
LOG_ERR
,"backup file isÇewerÅhan current file -Ölease check it manually -Örobably you shouldÑun metarestore");

8235 i‡(
c⁄vîãd
==1) {

8236 i‡(
	`ª«me
("metadata.mfs","metadata.mfs.back.1.4")<0) {

8237 
	`mfs_îæog
(
LOG_ERR
,"can'tÑename metadata.mfs -> metadata.mfs.back.1.4");

8240 
	`fs_°‹óŒ
(0);

8245 i‡(
	`ª«me
("metadata.mfs","metadata.mfs.back")<0) {

8246 
	`mfs_îæog
(
LOG_ERR
,"can'tÑename metadata.mfs -> metadata.mfs.back");

8251 
	`Ârötf
(
°dîr
,"connecting filesánd chunks ... ");

8252 
	`fÊush
(
°dîr
);

8253 
	`fs_add_fûes_to_chunks
();

8254 
	`Ârötf
(
°dîr
,"ok\n");

8255 #i‚de‡
METARESTORE


8256 
	`Ârötf
(
°dîr
,"Æ»öodes: %"
PRIu32
"\n",
nodes
);

8257 
	`Ârötf
(
°dîr
,"dúe˘‹y inodes: %"
PRIu32
"\n",
dúnodes
);

8258 
	`Ârötf
(
°dîr
,"fûêöodes: %"
PRIu32
"\n",
fûíodes
);

8259 
	`Ârötf
(
°dîr
,"chunks: %"
PRIu32
"\n",
	`chunk_cou¡
());

8262 
	}
}

8264 
	$fs_°röô
() {

8265 
uöt32_t
 
i
;

8266 
roŸ
 = 
NULL
;

8267 
åash
 = 
NULL
;

8268 
ª£rved
 = 
NULL
;

8269 
åash•a˚
 = 0;

8270 
ª£rved•a˚
 = 0;

8271 
åashnodes
 = 0;

8272 
ª£rvednodes
 = 0;

8273 #i‚de‡
METARESTORE


8274 
quŸahód
 = 
NULL
;

8276 
i
=0 ; i<
NODEHASHSIZE
 ; i++) {

8277 
nodehash
[
i
]=
NULL
;

8279 #ifde‡
EDGEHASH


8280 
i
=0 ; i<
EDGEHASHSIZE
 ; i++) {

8281 
edgehash
[
i
]=
NULL
;

8284 
	}
}

8286 #i‚de‡
METARESTORE


8288 
	$fs_cs_disc⁄√˘ed
() {

8289 
ã°_°¨t_time
 = 
	`maö_time
()+600;

8290 
	}
}

8292 
	$fs_öô
() {

8293 
	`Ârötf
(
°dîr
,"loading metadata ...\n");

8294 
	`fs_°röô
();

8295 
	`chunk_°röô
();

8296 
ã°_°¨t_time
 = 
	`maö_time
()+900;

8297 i‡(
	`fs_lﬂdÆl
()<0) {

8300 
	`Ârötf
(
°dîr
,"metadata file has beenÜoaded\n");

8301 #i‡
VERSHEX
>=0x010700

8302 
QuŸaTimeLimô
 = 
	`cfg_gëuöt32
("QUOTA_TIME_LIMIT",7*86400);

8304 
QuŸaTimeLimô
 = 7*86400;

8306 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,1,0,
fs_ã°_fûes
);

8307 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,1,0,
f¢odes_check_Æl_quŸas
);

8308 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,3600,0,
fs_do°‹óŒ
);

8309 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,300,0,
fs_em±yåash
);

8310 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
fs_em±yª£rved
);

8311 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
f¢odes_‰ìöodes
);

8312 
	`maö_de°ru˘ªgi°î
(
fs_ãrm
);

8314 
	}
}

8316 
	$fs_öô
(c⁄° *
‚ame
,
ign‹eÊag
) {

8317 
	`fs_°röô
();

8318 
	`chunk_°röô
();

8319 i‡(
	`fs_lﬂdÆl
(
‚ame
,
ign‹eÊag
)<0) {

8323 
	}
}

	@mfsmaster/filesystem.h

19 #i‚de‡
_FILESYSTEM_H_


20 
	#_FILESYSTEM_H_


	)

22 
	~<öây≥s.h
>

24 #ifde‡
METARESTORE


27 
uöt64_t
 
fs_gëvîsi⁄
();

29 
uöt8_t
 
fs_ac˚ss
(
uöt32_t
 
ts
,uöt32_à
öode
);

30 
uöt8_t
 
fs_≠≥nd
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
öode_§c
);

31 
uöt8_t
 
fs_acquúe
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

32 
uöt8_t
 
fs_©å
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
©ime
,uöt32_à
mtime
);

34 
uöt8_t
 
fs_¸óã
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° uöt8_à*
«me
,uöt8_à
ty≥
,uöt32_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
rdev
,uöt32_à
öode
);

35 
uöt8_t
 
fs_£ssi⁄
(
uöt32_t
 
£ssi⁄id
);

36 
uöt8_t
 
fs_em±yåash
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
,uöt32_à
ª£rvedöodes
);

37 
uöt8_t
 
fs_em±yª£rved
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
);

38 
uöt8_t
 
fs_‰ìöodes
(
uöt32_t
 
ts
,uöt32_à
‰ìöodes
);

39 
uöt8_t
 
fs_lök
(
uöt32_t
 
ts
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,uöt32_à
∆íg_d°
,uöt8_à*
«me_d°
);

40 
uöt8_t
 
fs_Àngth
(
uöt32_t
 
ts
,uöt32_à
öode
,
uöt64_t
 
Àngth
);

41 
uöt8_t
 
fs_move
(
uöt32_t
 
ts
,uöt32_à
∑ª¡_§c
,uöt32_à
∆íg_§c
,c⁄° uöt8_à*
«me_§c
,uöt32_à
∑ª¡_d°
,uöt32_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
öode
);

42 
uöt8_t
 
fs_ª∑ú
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,uöt32_à
nvîsi⁄
);

44 
uöt8_t
 
fs_ªÀa£
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

45 
uöt8_t
 
fs_symlök
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° uöt8_à*
«me
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
öode
);

46 
uöt8_t
 
fs_£ç©h
(
uöt32_t
 
öode
,c⁄° uöt8_à*
∑th
);

47 
uöt8_t
 
fs_¢≠shŸ
(
uöt32_t
 
ts
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,uöt8_à*
«me_d°
,uöt8_à
ˇnovîwrôe
);

48 
uöt8_t
 
fs_u∆ök
(
uöt32_t
 
ts
,uöt32_à
∑ª¡
,uöt32_à
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
öode
);

49 
uöt8_t
 
fs_purge
(
uöt32_t
 
ts
,uöt32_à
öode
);

50 
uöt8_t
 
fs_undñ
(
uöt32_t
 
ts
,uöt32_à
öode
);

51 
uöt8_t
 
fs_åunc
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,
uöt64_t
 
chunkid
);

52 
uöt8_t
 
fs_wrôe
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
ödx
,uöt8_à
›Êag
,
uöt64_t
 
chunkid
);

53 
uöt8_t
 
fs_u∆ock
(
uöt64_t
 
chunkid
);

54 
uöt8_t
 
fs_öcvîsi⁄
(
uöt64_t
 
chunkid
);

55 #i‡
VERSHEX
>=0x010700

56 
uöt8_t
 
fs_£tgﬂl
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
,uöt32_à
qeöodes
);

58 
uöt8_t
 
fs_£tgﬂl
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
);

60 
uöt8_t
 
fs_£âøshtime
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
åashtime
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
);

61 
uöt8_t
 
fs_£ã©å
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
óâr
,uöt8_à
smode
,uöt32_à
söodes
,uöt32_à
ncöodes
,uöt32_à
nsöodes
);

62 
uöt8_t
 
fs_quŸa
(
uöt32_t
 
ts
,uöt32_à
öode
,uöt8_à
ex˚eded
,uöt8_à
Êags
,uöt32_à
°ime°amp
,uöt32_à
söodes
,uöt32_à
höodes
,
uöt64_t
 
¶ígth
,uöt64_à
hÀngth
,uöt64_à
ssize
,uöt64_à
hsize
,uöt64_à
§ólsize
,uöt64_à
hªÆsize
);

64 
fs_dump
();

65 
fs_ãrm
(c⁄° *
‚ame
);

66 
fs_öô
(c⁄° *
‚ame
,
ign‹eÊag
);

71 
fs_°©s
(
uöt32_t
 
°©s
[16]);

72 
fs_öfo
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
å•a˚
,
uöt32_t
 *
ånodes
,uöt64_à*
ª•a˚
,uöt32_à*
ªnodes
,uöt32_à*
öodes
,uöt32_à*
dnodes
,uöt32_à*
‚odes
);

73 
fs_ã°_gëd©a
(
uöt32_t
 *
lo›°¨t
,uöt32_à*
lo›íd
,uöt32_à*
fûes
,uöt32_à*
ugfûes
,uöt32_à*
mfûes
,uöt32_à*
chunks
,uöt32_à*
ugchunks
,uöt32_à*
mchunks
,**
msgbuff
,uöt32_à*
msgbufÊíg
);

77 
uöt32_t
 
fs_gëdú∑th_size
(uöt32_à
öode
);

78 
fs_gëdú∑th_d©a
(
uöt32_t
 
öode
,
uöt8_t
 *
buff
,uöt32_à
size
);

79 
uöt8_t
 
fs_gëroŸöode
(
uöt32_t
 *
roŸöode
,c⁄° uöt8_à*
∑th
);

81 
fs_°©fs
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
åash•a˚
,uöt64_à*
ª£rved•a˚
,uöt32_à*
öodes
);

82 
uöt8_t
 
fs_ac˚ss
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,
modemask
);

83 
uöt8_t
 
fs_lookup
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

84 
uöt8_t
 
fs_gë©å
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
©å
[35]);

85 
uöt8_t
 
fs_£èâr
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
£tmask
,
uöt16_t
 
©åmode
,uöt32_à
©åuid
,uöt32_à
©ågid
,uöt32_à
©å©ime
,uöt32_à
©åmtime
,uöt8_à
sugid˛órmode
,uöt8_à
©å
[35]);

87 
uöt8_t
 
fs_åy_£éígth
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
›íed
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt64_t
 
Àngth
,uöt8_à
©å
[35],uöt64_à*
chunkid
);

88 
uöt8_t
 
fs_íd_£éígth
(
uöt64_t
 
chunkid
);

89 
uöt8_t
 
fs_do_£éígth
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,
uöt64_t
 
Àngth
,uöt8_à
©å
[35]);

91 
uöt8_t
 
fs_ªadlök
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à*
∂íg
,uöt8_à**
∑th
);

92 
uöt8_t
 
fs_symlök
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
∂íg
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

93 
uöt8_t
 
fs_mknod
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt8_à
ty≥
,uöt16_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à
rdev
,uöt32_à*
öode
,uöt8_à
©å
[35]);

94 
uöt8_t
 
fs_mkdú
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt16_à
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
c›ysgid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

95 
uöt8_t
 
fs_u∆ök
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
);

96 
uöt8_t
 
fs_rmdú
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡
,
uöt16_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
);

97 
uöt8_t
 
fs_ª«me
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
∑ª¡_§c
,
uöt16_t
 
∆íg_§c
,c⁄° uöt8_à*
«me_§c
,uöt32_à
∑ª¡_d°
,uöt16_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

98 
uöt8_t
 
fs_lök
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

99 
uöt8_t
 
fs_¢≠shŸ
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt16_t
 
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
ˇnovîwrôe
);

100 
uöt8_t
 
fs_≠≥nd
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
öode_§c
,uöt32_à
uid
,uöt32_à
gid
);

102 
uöt8_t
 
fs_ªaddú_size
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
Êags
,**
dnode
,uöt32_à*
dbuffsize
);

103 
fs_ªaddú_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
Êags
,*
dnode
,uöt8_à*
dbuff
);

105 
uöt8_t
 
fs_checkfûe
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
chunkcou¡
[11]);

107 
uöt8_t
 
fs_›ícheck
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
auid
,uöt32_à
agid
,uöt8_à
Êags
,uöt8_à
©å
[35]);

109 
uöt8_t
 
fs_ªadchunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
chunkid
,uöt64_à*
Àngth
);

110 
uöt8_t
 
fs_wrôechunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
chunkid
,uöt64_à*
Àngth
,uöt8_à*
›Êag
);

112 
uöt8_t
 
fs_wrôìnd
(
uöt32_t
 
öode
,
uöt64_t
 
Àngth
,uöt64_à
chunkid
);

114 
uöt8_t
 
fs_ª∑ú
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
nŸch™ged
,uöt32_à*
îa£d
,uöt32_à*
ª∑úed
);

116 
uöt8_t
 
fs_gëgﬂl
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,uöt32_à
fgèb
[10],uöt32_à
dgèb
[10]);

117 #i‡
VERSHEX
>=0x010700

118 
uöt8_t
 
fs_£tgﬂl
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
,uöt32_à*
qeöodes
);

120 
uöt8_t
 
fs_£tgﬂl
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
gﬂl
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
);

123 
uöt8_t
 
fs_gëåashtime_¥ï¨e
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,**
Âå
,**
d±r
,uöt32_à*
‚odes
,uöt32_à*
dnodes
);

124 
fs_gëåashtime_°‹e
(*
Âå
,*
d±r
,
uöt8_t
 *
buff
);

125 
uöt8_t
 
fs_£âøshtime
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt32_à
åashtime
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
);

127 
uöt8_t
 
fs_gëóâr
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
gmode
,uöt32_à
„©åèb
[16],uöt32_à
dóâπab
[16]);

128 
uöt8_t
 
fs_£ã©å
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
uid
,uöt8_à
óâr
,uöt8_à
smode
,uöt32_à*
söodes
,uöt32_à*
ncöodes
,uöt32_à*
nsöodes
);

131 
uöt8_t
 
fs_acquúe
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

132 
uöt8_t
 
fs_ªÀa£
(
uöt32_t
 
öode
,uöt32_à
£ssi⁄id
);

133 
uöt32_t
 
fs_√w£ssi⁄id
();

135 
uöt8_t
 
fs_ªadª£rved_size
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à*
dbuffsize
);

136 
fs_ªadª£rved_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt8_à*
dbuff
);

139 
uöt8_t
 
fs_ªadåash_size
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à*
dbuffsize
);

140 
fs_ªadåash_d©a
(
uöt32_t
 
roŸöode
,
uöt8_t
 
£sÊags
,uöt8_à*
dbuff
);

141 
uöt8_t
 
fs_gëåash∑th
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à*
∂íg
,uöt8_à**
∑th
);

142 
uöt8_t
 
fs_£âøsh∑th
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à
∂íg
,c⁄° uöt8_à*
∑th
);

143 
uöt8_t
 
fs_purge
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
);

144 
uöt8_t
 
fs_undñ
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
);

147 
uöt8_t
 
fs_gëdëached©å
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
©å
[35],uöt8_à
dty≥
);

150 
uöt8_t
 
fs_gë_dú_°©s
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt32_à*
öodes
,uöt32_à*
dús
,uöt32_à*
fûes
,uöt32_à*
chunks
,
uöt64_t
 *
Àngth
,uöt64_à*
size
,uöt64_à*
rsize
);

153 
uöt8_t
 
fs_quŸac⁄åﬁ
(
uöt32_t
 
roŸöode
,uöt8_à
£sÊags
,uöt32_à
öode
,uöt8_à
dñÊag
,uöt8_à*
Êags
,uöt32_à*
söodes
,
uöt64_t
 *
¶ígth
,uöt64_à*
ssize
,uöt64_à*
§ólsize
,uöt32_à*
höodes
,uöt64_à*
hÀngth
,uöt64_à*
hsize
,uöt64_à*
hªÆsize
,uöt32_à*
curöodes
,uöt64_à*
cuæígth
,uöt64_à*
cursize
,uöt64_à*
cuºólsize
);

157 
uöt32_t
 
fs_gëquŸaöfo_size
();

158 
fs_gëquŸaöfo_d©a
(
uöt8_t
 *
buff
);

161 
fs_öcvîsi⁄
(
uöt64_t
 
chunkid
);

163 
fs_cs_disc⁄√˘ed
();

165 
fs_öô
();

	@mfsmaster/init.h

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

23 
	~"t›ﬁogy.h
"

24 
	~"exp‹ts.h
"

25 
	~"d©aˇchemgr.h
"

26 
	~"m©oml£rv.h
"

27 
	~"m©ocs£rv.h
"

28 
	~"m©o˛£rv.h
"

29 
	~"fûesy°em.h
"

30 
	~"øndom.h
"

31 
	~"ch™gñog.h
"

32 
	~"ch¨tsd©a.h
"

34 
	#STR_AUX
(
x
Ë#x

	)

35 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

36 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

39 (*
	trun‚
)();

41 
run‚
 
‚
;

42 *
«me
;

43 } 
RunTab
[]={

44 {
ch™gñog_öô
,"changeÜog"},

45 {
∫d_öô
,"random generator"},

46 {
dcm_öô
,"data cache manager"},

47 {
m©o˛£rv_£ssi⁄söô
,"load stored sessions"},

48 {
exp‹ts_öô
,"exports manager"},

49 {
t›ﬁogy_öô
,"netÅopology module"},

50 {
fs_öô
,"file system manager"},

51 {
ch¨tsd©a_öô
,"charts module"},

52 {
m©oml£rv_öô
,"communication with metalogger"},

53 {
m©ocs£rv_öô
,"communication with chunkserver"},

54 {
m©o˛£rv_√tw‹köô
,"communication with clients"},

55 {(
run‚
)0,"****"}

56 
	}
};

	@mfsmaster/itree.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

23 
	~"mas£π.h
"

24 
	~"ôªe.h
"

26 
	s_ônode
 {

27 
uöt32_t
 
	m‰om
,
	mto
;

28 
uöt32_t
 
	mid
;

29 
_ônode
 *
	mÀ·
,*
	mright
;

30 } 
	tônode
;

32 
ölöe
 
	$ôªe_‰ì
(
ônode
 *
n
) {

33 i‡(
n
) {

34 
	`ôªe_‰ì
(
n
->
À·
);

35 
	`ôªe_‰ì
(
n
->
right
);

36 
	`‰ì
(
n
);

38 
	}
}

40 
ölöe
 
	$ôªe_ªmove
(
ônode
 **
p
) {

41 
ônode
 *
n
 = *
p
;

42 
ônode
 *
nô
,**
≈å
;

43 
uöt32_t
 
l
,
r
;

44 i‡(
n
->
À·
==
NULL
) {

45 *
p
 = 
n
->
right
;

46 
	`‰ì
(
n
);

47 } i‡(
n
->
right
==
NULL
) {

48 *
p
 = 
n
->
À·
;

49 
	`‰ì
(
n
);

51 
l
 = 
r
 = 0;

52 
nô
=
n
->
À·
->
right
 ;Çit ;Çit=nit->right) {

53 
l
++;

55 
nô
=
n
->
right
->
À·
 ;Çit ;Çit=nit->left) {

56 
r
++;

58 i‡(
l
==
r
) {

59 
l
+=((
n
->
‰om
)^“->
to
))&1;

61 i‡(
r
>
l
) {

62 
≈å
 = &(
n
->
right
);

63 (
nô
=*
≈å
Ë&&Çô->
À·
) {

64 
≈å
 = &(
nô
->
À·
);

66 *
≈å
 = 
nô
->
right
;

68 
≈å
 = &(
n
->
À·
);

69 (
nô
=*
≈å
Ë&&Çô->
right
) {

70 
≈å
 = &(
nô
->
right
);

72 *
≈å
 = 
nô
->
À·
;

74 
nô
->
À·
 = 
n
->left;

75 
nô
->
right
 = 
n
->right;

76 *
p
 = 
nô
;

78 
	}
}

80 
ölöe
 
ôªe_dñëe
(
ônode
 **
p
,
uöt32_t
 
f
,uöt32_à
t
);

81 
ölöe
 
ôªe_add
(
ônode
 **
p
,
uöt32_t
 
f
,uöt32_à
t
,uöt32_à
id
);

83 
ölöe
 
	$ôªe_dñëe
(
ônode
 **
p
,
uöt32_t
 
f
,uöt32_à
t
) {

84 
ônode
 *
n
 = *
p
;

85 i‡(
n
) {

86 i‡(
t
<
n
->
‰om
) {

87 
	`ôªe_dñëe
(&(
n
->
À·
),
f
,
t
);

88 } i‡(
f
>
n
->
to
) {

89 
	`ôªe_dñëe
(&(
n
->
right
),
f
,
t
);

90 } i‡(
f
<=
n
->
‰om
 && 
t
>Ú->
to
) {

91 i‡(
f
<
n
->
‰om
) {

92 
	`ôªe_dñëe
(&(
n
->
À·
),
f
,n->
‰om
-1);

94 i‡(
t
>
n
->
to
) {

95 
	`ôªe_dñëe
(&(
n
->
right
),n->
to
+1,
t
);

97 
	`ôªe_ªmove
(
p
);

98 } i‡(
f
>=
n
->
‰om
 && 
t
<Ú->
to
) {

99 i‡(
f
==
n
->
‰om
) {

100 
n
->
‰om
 = 
t
+1;

101 } i‡(
t
==
n
->
to
) {

102 
n
->
to
 = 
f
-1;

104 i‡((
t
^
f
)&1) {

105 
	`ôªe_add
(&(
n
->
right
),
t
+1,n->
to
,n->
id
);

106 
n
->
to
 = 
f
-1;

108 
	`ôªe_add
(&(
n
->
À·
),n->
‰om
,
f
-1,n->
id
);

109 
n
->
‰om
 = 
t
+1;

112 } i‡(
f
<
n
->
‰om
) {

113 
n
->
‰om
 = 
t
+1;

114 
	`ôªe_dñëe
(&(
n
->
À·
),
f
,
t
);

115 } i‡(
t
>
n
->
to
) {

116 
n
->
to
 = 
f
-1;

117 
	`ôªe_dñëe
(&(
n
->
right
),
f
,
t
);

120 
	}
}

122 
ölöe
 
	$ôªe_add
(
ônode
 **
p
,
uöt32_t
 
f
,uöt32_à
t
,uöt32_à
id
) {

123 
ônode
 *
n
 = *
p
;

124 i‡(
n
) {

125 i‡(
t
<
n
->
‰om
) {

126 
	`ôªe_add
(&(
n
->
À·
),
f
,
t
,
id
);

127 } i‡(
f
>
n
->
to
) {

128 
	`ôªe_add
(&(
n
->
right
),
f
,
t
,
id
);

129 } i‡(
f
<=
n
->
‰om
 && 
t
>Ú->
to
) {

130 i‡(
f
<
n
->
‰om
) {

131 
	`ôªe_dñëe
(&(
n
->
À·
),
f
,n->
‰om
-1);

133 i‡(
t
>
n
->
to
) {

134 
	`ôªe_dñëe
(&(
n
->
right
),n->
to
+1,
t
);

136 
n
->
‰om
 = 
f
;

137 
n
->
to
 = 
t
;

138 
n
->
id
 = id;

139 } i‡(
f
>=
n
->
‰om
 && 
t
<Ú->
to
) {

140 i‡(
f
>
n
->
‰om
) {

141 
	`ôªe_add
(&(
n
->
À·
),n->
‰om
,
f
-1,n->
id
);

143 i‡(
t
<
n
->
to
) {

144 
	`ôªe_add
(&(
n
->
right
),
t
+1,n->
to
,n->
id
);

146 
n
->
‰om
 = 
f
;

147 
n
->
to
 = 
t
;

148 
n
->
id
 = id;

149 } i‡(
f
<
n
->
‰om
) {

150 
n
->
‰om
 = 
t
+1;

151 
	`ôªe_add
(&(
n
->
À·
),
f
,
t
,
id
);

152 } i‡(
t
>
n
->
to
) {

153 
n
->
to
 = 
f
-1;

154 
	`ôªe_add
(&(
n
->
right
),
f
,
t
,
id
);

157 *
p
 = 
n
 = 
	`mÆloc
((
ônode
));

158 
	`∑s£π
(
n
);

159 
n
->
‰om
 = 
f
;

160 
n
->
to
 = 
t
;

161 
n
->
id
 = id;

162 
n
->
À·
 = 
NULL
;

163 
n
->
right
 = 
NULL
;

165 
	}
}

167 
ônode
** 
	$ôªe_tﬁi°
(
ônode
 *
n
,ônodê**
èû
) {

168 i‡(
n
) {

169 
èû
 = 
	`ôªe_tﬁi°
(
n
->
À·
,tail);

170 
n
->
À·
 = 
NULL
;

171 *
èû
 = 
n
;

172 
èû
 = 
	`ôªe_tﬁi°
(
n
->
right
,&“->
À·
));

173 
n
->
right
 = 
NULL
;

175  
èû
;

176 
	}
}

178 
	$ôªe_sim∂ify
(
ônode
 *
n
) {

179 
ônode
 *
f
;

180 
n
 &&Ç->
À·
) {

181 i‡(
n
->
id
 =n->
À·
->id &&Ç->
to
+1 =n->À·->
‰om
) {

182 
n
->
to
 =Ç->
À·
->to;

183 
f
 = 
n
->
À·
;

184 
n
->
À·
 =Ç->left->left;

185 
	`‰ì
(
f
);

187 
n
 =Ç->
À·
;

190 
	}
}

192 
	$ôªe_tŸªe
(
ônode
 *
l
,ônodê**
p
) {

193 
ônode
 **
m
,*
i
;

194 i‡(
l
) {

195 
i
 = 
l
;

196 
m
 = &
l
;

197 
i
 && i->
À·
) {

198 
m
 = &((*m)->
À·
);

199 
i
 = i->
À·
->left;

201 *
p
 = 
i
 = *
m
;

202 (*
m
Ë
NULL
;

203 
	`ôªe_tŸªe
(
i
->
À·
,&(i->
right
));

204 
	`ôªe_tŸªe
(
l
,&(
i
->
À·
));

206 *
p
 = 
NULL
;

208 
	}
}

215 * 
	$ôªe_ªbÆ™˚
(*
o
) {

216 
ônode
 *
hód
;

217 
ônode
 *
roŸ
 = (ônode*)
o
;

219 
hód
 = 
NULL
;

220 
	`ôªe_tﬁi°
(
roŸ
,&
hód
);

221 
	`ôªe_sim∂ify
(
hód
);

222 
roŸ
 = 
NULL
;

223 
	`ôªe_tŸªe
(
hód
,&
roŸ
);

224  (*)
roŸ
;

225 
	}
}

227 * 
	$ôªe_add_öãrvÆ
(*
o
,
uöt32_t
 
f
,uöt32_à
t
,uöt32_à
id
) {

228 
ônode
 *
roŸ
 = (ônode*)
o
;

229 i‡(
id
==0) {

230 i‡(
t
<
f
) {

231 
	`ôªe_dñëe
(&
roŸ
,
t
,
f
);

233 
	`ôªe_dñëe
(&
roŸ
,
f
,
t
);

236 i‡(
t
<
f
) {

237 
	`ôªe_add
(&
roŸ
,
t
,
f
,
id
);

239 
	`ôªe_add
(&
roŸ
,
f
,
t
,
id
);

242  
roŸ
;

243 
	}
}

245 
uöt32_t
 
	$ôªe_föd
(*
o
,
uöt32_t
 
v
) {

246 
ônode
 *
n
;

248 
n
 = (
ônode
*)
o
 ;Ç ;Ç = (
v
<n->
‰om
)?n->
À·
:n->
right
) {

249 i‡(
v
>=
n
->
‰om
 && v<Ú->
to
) {

250  
n
->
id
;

255 
	}
}

257 
	$ôªe_‰ìÆl
(*
o
) {

258 
	`ôªe_‰ì
((
ônode
*)
o
);

259 
	}
}

	@mfsmaster/itree.h

19 #i‚de‡
_ITREE_H_


20 
	#_ITREE_H_


	)

22 
	~<öây≥s.h
>

24 * 
ôªe_ªbÆ™˚
(*
o
);

25 * 
ôªe_add_öãrvÆ
(*
o
,
uöt32_t
 
f
,uöt32_à
t
,uöt32_à
id
);

26 
uöt32_t
 
ôªe_föd
(*
o
,uöt32_à
v
);

27 
ôªe_‰ìÆl
(*
o
);

	@mfsmaster/matoclserv.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<time.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/uio.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<sy¶og.h
>

30 
	~<î∫o.h
>

31 
	~<öây≥s.h
>

32 
	~<√töë/ö.h
>

33 
	~<sys/ªsour˚.h
>

35 
	~"MFSCommuniˇti⁄.h
"

37 
	~"d©≠ack.h
"

38 
	~"m©o˛£rv.h
"

39 
	~"m©ocs£rv.h
"

40 
	~"m©oml£rv.h
"

41 
	~"chunks.h
"

42 
	~"fûesy°em.h
"

43 
	~"øndom.h
"

44 
	~"exp‹ts.h
"

45 
	~"d©aˇchemgr.h
"

46 
	~"ch¨ts.h
"

47 
	~"ch¨tsd©a.h
"

48 
	~"cfg.h
"

49 
	~"maö.h
"

50 
	~"sockës.h
"

51 
	~"¶oggî.h
"

52 
	~"mas£π.h
"

54 
	#MaxPackëSize
 1000000

	)

57 íum {
	mKILL
,
	mHEADER
,
	mDATA
};

59 íum {
	mFUSE_WRITE
,
	mFUSE_TRUNCATE
};

61 
	#SESSION_STATS
 16

	)

63 
	#NEWSESSION_TIMEOUT
 (7*86400)

	)

64 
	#OLDSESSION_TIMEOUT
 7200

	)

74 
	gm©o˛£rvíåy
;

89 
	schunkli°
 {

90 
uöt64_t
 
	mchunkid
;

91 
uöt64_t
 
	mÊíg
;

92 
uöt32_t
 
	mqid
;

93 
uöt32_t
 
	möode
;

94 
uöt32_t
 
	muid
;

95 
uöt32_t
 
	mgid
;

96 
uöt32_t
 
	mauid
;

97 
uöt32_t
 
	magid
;

98 
uöt8_t
 
	mty≥
;

99 
chunkli°
 *
	m√xt
;

100 } 
	tchunkli°
;

103 
	sfûñi°
 {

104 
uöt32_t
 
	möode
;

105 
fûñi°
 *
	m√xt
;

106 } 
	tfûñi°
;

108 
	s£ssi⁄
 {

109 
uöt32_t
 
	m£ssi⁄id
;

110 *
	möfo
;

111 
uöt32_t
 
	m≥îù
;

112 
uöt8_t
 
	m√w£ssi⁄
;

113 
uöt8_t
 
	m£sÊags
;

114 
uöt32_t
 
	mroŸuid
;

115 
uöt32_t
 
	mroŸgid
;

116 
uöt32_t
 
	mm≠Æluid
;

117 
uöt32_t
 
	mm≠Ælgid
;

118 
uöt32_t
 
	mroŸöode
;

119 
uöt32_t
 
	mdisc⁄√˘ed
;

120 
uöt32_t
 
	mnsocks
;

121 
uöt32_t
 
	mcuºít›°©s
[
SESSION_STATS
];

122 
uöt32_t
 
	mœ°hour›°©s
[
SESSION_STATS
];

123 
fûñi°
 *
	m›íedfûes
;

124 
£ssi⁄
 *
	m√xt
;

125 } 
	t£ssi⁄
;

127 
	s∑ckë°ru˘
 {

128 
∑ckë°ru˘
 *
	m√xt
;

129 
uöt8_t
 *
	m°¨çå
;

130 
uöt32_t
 
	mbyã¶e·
;

131 
uöt8_t
 *
	m∑ckë
;

132 } 
	t∑ckë°ru˘
;

134 
	sm©o˛£rvíåy
 {

135 
uöt8_t
 
	mªgi°îed
;

136 
uöt8_t
 
	mmode
;

140 
	msock
;

141 
öt32_t
 
	mpdes˝os
;

142 
uöt32_t
 
	mœ°ªad
,
	mœ°wrôe
;

143 
uöt32_t
 
	mvîsi⁄
;

144 
uöt32_t
 
	m≥îù
;

145 
uöt8_t
 
	mhdrbuff
[8];

146 
∑ckë°ru˘
 
	möpuçackë
;

147 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

149 
uöt8_t
 
	m∑ssw‹d∫d
[32];

150 
£ssi⁄
 *
	m£sd©a
;

151 
chunkli°
 *
	mchunkdñayed›s
;

157 
m©o˛£rvíåy
 *
	m√xt
;

158 } 
	tm©o˛£rvíåy
;

160 
£ssi⁄
 *
	g£ssi⁄shód
=
NULL
;

161 
m©o˛£rvíåy
 *
	gm©o˛£rvhód
=
NULL
;

162 
	glsock
;

163 
öt32_t
 
	glsockpdes˝os
;

164 
	gexôög
,
	g°¨tög
;

167 *
	gLi°íHo°
;

168 *
	gLi°íP‹t
;

169 
uöt32_t
 
	gReje˘Old
;

172 
uöt32_t
 
	g°©s_¥cvd
 = 0;

173 
uöt32_t
 
	g°©s_p£¡
 = 0;

174 
uöt64_t
 
	g°©s_brcvd
 = 0;

175 
uöt64_t
 
	g°©s_b£¡
 = 0;

177 
	$m©o˛£rv_°©s
(
uöt64_t
 
°©s
[5]) {

178 
°©s
[0] = 
°©s_¥cvd
;

179 
°©s
[1] = 
°©s_p£¡
;

180 
°©s
[2] = 
°©s_brcvd
;

181 
°©s
[3] = 
°©s_b£¡
;

182 
°©s_¥cvd
 = 0;

183 
°©s_p£¡
 = 0;

184 
°©s_brcvd
 = 0;

185 
°©s_b£¡
 = 0;

186 
	}
}

266 
£ssi⁄
* 
	$m©o˛£rv_√w_£ssi⁄
(
uöt8_t
 
√w£ssi⁄
,uöt8_à
n⁄ewid
) {

267 
£ssi⁄
 *
a£sd©a
;

268 
a£sd©a
 = (
£ssi⁄
*)
	`mÆloc
((session));

269 
	`∑s£π
(
a£sd©a
);

270 i‡(
√w£ssi⁄
==0 && 
n⁄ewid
) {

271 
a£sd©a
->
£ssi⁄id
 = 0;

273 
a£sd©a
->
£ssi⁄id
 = 
	`fs_√w£ssi⁄id
();

275 
a£sd©a
->
öfo
 = 
NULL
;

276 
a£sd©a
->
≥îù
 = 0;

277 
a£sd©a
->
£sÊags
 = 0;

278 
a£sd©a
->
roŸuid
 = 0;

279 
a£sd©a
->
roŸgid
 = 0;

280 
a£sd©a
->
m≠Æluid
 = 0;

281 
a£sd©a
->
m≠Ælgid
 = 0;

282 
a£sd©a
->
√w£ssi⁄
 =Çewsession;

283 
a£sd©a
->
roŸöode
 = 
MFS_ROOT_ID
;

284 
a£sd©a
->
›íedfûes
 = 
NULL
;

285 
a£sd©a
->
disc⁄√˘ed
 = 0;

286 
a£sd©a
->
nsocks
 = 1;

287 
	`mem£t
(
a£sd©a
->
cuºít›°©s
,0,4*
SESSION_STATS
);

288 
	`mem£t
(
a£sd©a
->
œ°hour›°©s
,0,4*
SESSION_STATS
);

289 
a£sd©a
->
√xt
 = 
£ssi⁄shód
;

290 
£ssi⁄shód
 = 
a£sd©a
;

291  
a£sd©a
;

292 
	}
}

294 
£ssi⁄
* 
	$m©o˛£rv_föd_£ssi⁄
(
uöt32_t
 
£ssi⁄id
) {

295 
£ssi⁄
 *
a£sd©a
;

296 i‡(
£ssi⁄id
==0) {

297  
NULL
;

299 
a£sd©a
 = 
£ssi⁄shód
 ;á£sd©®;á£sd©a˜£sd©a->
√xt
) {

300 i‡(
a£sd©a
->
£ssi⁄id
==sessionid) {

302 i‡(
a£sd©a
->
√w£ssi⁄
>=2) {

303 
a£sd©a
->
√w£ssi⁄
-=2;

305 
a£sd©a
->
nsocks
++;

307 
a£sd©a
->
disc⁄√˘ed
 = 0;

308  
a£sd©a
;

311  
NULL
;

312 
	}
}

314 
	$m©o˛£rv_˛o£_£ssi⁄
(
uöt32_t
 
£ssi⁄id
) {

315 
£ssi⁄
 *
a£sd©a
;

316 i‡(
£ssi⁄id
==0) {

319 
a£sd©a
 = 
£ssi⁄shód
 ;á£sd©®;á£sd©a˜£sd©a->
√xt
) {

320 i‡(
a£sd©a
->
£ssi⁄id
==sessionid) {

322 i‡(
a£sd©a
->
nsocks
==1 &&á£sd©a->
√w£ssi⁄
<2) {

323 
a£sd©a
->
√w£ssi⁄
+=2;

329 
	}
}

331 
	$m©o˛£rv_°‹e_£ssi⁄s
() {

332 
£ssi⁄
 *
a£sd©a
;

333 
uöt32_t
 
ûíg
;

334 
uöt8_t
 
f£§ec‹d
[33+
SESSION_STATS
*8];

335 
uöt8_t
 *
±r
;

336 
i
;

337 
FILE
 *
fd
;

339 
fd
 = 
	`f›í
("sessions.mfs.tmp","w");

340 i‡(
fd
==
NULL
) {

341 
	`mfs_îæog_sûít
(
LOG_WARNING
,"can't store sessions, openÉrror");

344 
	`mem˝y
(
f£§ec‹d
,
MFSSIGNATURE
 "S \001\006\003",8);

345 
±r
 = 
f£§ec‹d
+8;

346 
	`put16bô
(&
±r
,
SESSION_STATS
);

347 i‡(
	`fwrôe
(
f£§ec‹d
,10,1,
fd
)!=1) {

348 
	`sy¶og
(
LOG_WARNING
,"can't store sessions, fwriteÉrror");

349 
	`f˛o£
(
fd
);

352 
a£sd©a
 = 
£ssi⁄shód
 ;á£sd©®;á£sd©a˜£sd©a->
√xt
) {

353 i‡(
a£sd©a
->
√w£ssi⁄
==1) {

354 
±r
 = 
f£§ec‹d
;

355 i‡(
a£sd©a
->
öfo
) {

356 
ûíg
 = 
	`°æí
(
a£sd©a
->
öfo
);

358 
ûíg
 = 0;

360 
	`put32bô
(&
±r
,
a£sd©a
->
£ssi⁄id
);

361 
	`put32bô
(&
±r
,
ûíg
);

362 
	`put32bô
(&
±r
,
a£sd©a
->
≥îù
);

363 
	`put32bô
(&
±r
,
a£sd©a
->
roŸöode
);

364 
	`put8bô
(&
±r
,
a£sd©a
->
£sÊags
);

365 
	`put32bô
(&
±r
,
a£sd©a
->
roŸuid
);

366 
	`put32bô
(&
±r
,
a£sd©a
->
roŸgid
);

367 
	`put32bô
(&
±r
,
a£sd©a
->
m≠Æluid
);

368 
	`put32bô
(&
±r
,
a£sd©a
->
m≠Ælgid
);

369 
i
=0 ; i<
SESSION_STATS
 ; i++) {

370 
	`put32bô
(&
±r
,
a£sd©a
->
cuºít›°©s
[
i
]);

372 
i
=0 ; i<
SESSION_STATS
 ; i++) {

373 
	`put32bô
(&
±r
,
a£sd©a
->
œ°hour›°©s
[
i
]);

375 i‡(
	`fwrôe
(
f£§ec‹d
,(33+
SESSION_STATS
*8),1,
fd
)!=1) {

376 
	`sy¶og
(
LOG_WARNING
,"can't store sessions, fwriteÉrror");

377 
	`f˛o£
(
fd
);

380 i‡(
ûíg
>0) {

381 i‡(
	`fwrôe
(
a£sd©a
->
öfo
,
ûíg
,1,
fd
)!=1) {

382 
	`sy¶og
(
LOG_WARNING
,"can't store sessions, fwriteÉrror");

383 
	`f˛o£
(
fd
);

389 i‡(
	`f˛o£
(
fd
)!=0) {

390 
	`mfs_îæog_sûít
(
LOG_WARNING
,"can't store sessions, fcloseÉrror");

393 i‡(
	`ª«me
("sessions.mfs.tmp","sessions.mfs")<0) {

394 
	`mfs_îæog_sûít
(
LOG_WARNING
,"can't store sessions,ÑenameÉrror");

396 
	}
}

398 
	$m©o˛£rv_lﬂd_£ssi⁄s
() {

399 
£ssi⁄
 *
a£sd©a
;

400 
uöt32_t
 
ûíg
;

402 
uöt8_t
 
hdr
[8];

403 
uöt8_t
 *
f£§ec‹d
;

404 c⁄° 
uöt8_t
 *
±r
;

405 
uöt8_t
 
impﬁd
;

406 
uöt32_t
 
i
,
°©söfûe
;

407 
r
;

408 
FILE
 *
fd
;

410 
fd
 = 
	`f›í
("sessions.mfs","r");

411 i‡(
fd
==
NULL
) {

412 
	`mfs_îæog_sûít
(
LOG_WARNING
,"can'tÜoad sessions, fopenÉrror");

413 i‡(
î∫o
==
ENOENT
) {

419 i‡(
	`‰ód
(
hdr
,8,1,
fd
)!=1) {

420 
	`sy¶og
(
LOG_WARNING
,"can'tÜoad sessions, freadÉrror");

421 
	`f˛o£
(
fd
);

424 i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "S 1.5",8)==0) {

425 
impﬁd
 = 1;

426 
°©söfûe
 = 16;

427 } i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "S \001\006\001",8)==0) {

428 
impﬁd
 = 0;

429 
°©söfûe
 = 16;

430 } i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "S \001\006\002",8)==0) {

431 
impﬁd
 = 0;

432 
°©söfûe
 = 21;

433 } i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "S \001\006\003",8)==0) {

434 
impﬁd
 = 0;

435 i‡(
	`‰ód
(
hdr
,2,1,
fd
)!=1) {

436 
	`sy¶og
(
LOG_WARNING
,"can'tÜoad sessions, freadÉrror");

437 
	`f˛o£
(
fd
);

440 
±r
 = 
hdr
;

441 
°©söfûe
 = 
	`gë16bô
(&
±r
);

443 
	`sy¶og
(
LOG_WARNING
,"can'tÜoad sessions, bad header");

444 
	`f˛o£
(
fd
);

448 i‡(
impﬁd
==2) {

449 
f£§ec‹d
 = 
	`mÆloc
(25+
°©söfûe
*8);

451 
f£§ec‹d
 = 
	`mÆloc
(33+
°©söfûe
*8);

453 
	`∑s£π
(
f£§ec‹d
);

455 !
	`„of
(
fd
)) {

456 i‡(
impﬁd
) {

457 
r
 = 
	`‰ód
(
f£§ec‹d
,25+
°©söfûe
*8,1,
fd
);

459 
r
 = 
	`‰ód
(
f£§ec‹d
,33+
°©söfûe
*8,1,
fd
);

461 i‡(
r
==1) {

462 
±r
 = 
f£§ec‹d
;

463 
a£sd©a
 = (
£ssi⁄
*)
	`mÆloc
((session));

464 
	`∑s£π
(
a£sd©a
);

465 
a£sd©a
->
£ssi⁄id
 = 
	`gë32bô
(&
±r
);

466 
ûíg
 = 
	`gë32bô
(&
±r
);

467 
a£sd©a
->
≥îù
 = 
	`gë32bô
(&
±r
);

468 
a£sd©a
->
roŸöode
 = 
	`gë32bô
(&
±r
);

469 
a£sd©a
->
£sÊags
 = 
	`gë8bô
(&
±r
);

470 
a£sd©a
->
roŸuid
 = 
	`gë32bô
(&
±r
);

471 
a£sd©a
->
roŸgid
 = 
	`gë32bô
(&
±r
);

472 i‡(
impﬁd
) {

473 
a£sd©a
->
m≠Æluid
 = 0;

474 
a£sd©a
->
m≠Ælgid
 = 0;

476 
a£sd©a
->
m≠Æluid
 = 
	`gë32bô
(&
±r
);

477 
a£sd©a
->
m≠Ælgid
 = 
	`gë32bô
(&
±r
);

479 
a£sd©a
->
öfo
 = 
NULL
;

480 
a£sd©a
->
√w£ssi⁄
 = 1;

481 
a£sd©a
->
›íedfûes
 = 
NULL
;

482 
a£sd©a
->
disc⁄√˘ed
 = 
	`maö_time
();

483 
a£sd©a
->
nsocks
 = 0;

484 
i
=0 ; i<
SESSION_STATS
 ; i++) {

485 
a£sd©a
->
cuºít›°©s
[
i
] = (i<
°©söfûe
)?
	`gë32bô
(&
±r
):0;

487 i‡(
°©söfûe
>
SESSION_STATS
) {

488 
±r
+=4*(
°©söfûe
-
SESSION_STATS
);

490 
i
=0 ; i<
SESSION_STATS
 ; i++) {

491 
a£sd©a
->
œ°hour›°©s
[
i
] = (i<
°©söfûe
)?
	`gë32bô
(&
±r
):0;

493 i‡(
ûíg
>0) {

494 
a£sd©a
->
öfo
 = 
	`mÆloc
(
ûíg
+1);

495 
	`∑s£π
(
a£sd©a
->
öfo
);

496 i‡(
	`‰ód
(
a£sd©a
->
öfo
,
ûíg
,1,
fd
)!=1) {

497 
	`‰ì
(
a£sd©a
->
öfo
);

498 
	`‰ì
(
a£sd©a
);

499 
	`‰ì
(
f£§ec‹d
);

500 
	`sy¶og
(
LOG_WARNING
,"can'tÜoad sessions, freadÉrror");

501 
	`f˛o£
(
fd
);

504 
a£sd©a
->
öfo
[
ûíg
]=0;

506 
a£sd©a
->
√xt
 = 
£ssi⁄shód
;

507 
£ssi⁄shód
 = 
a£sd©a
;

509 i‡(
	`„º‹
(
fd
)) {

510 
	`‰ì
(
f£§ec‹d
);

511 
	`sy¶og
(
LOG_WARNING
,"can'tÜoad sessions, freadÉrror");

512 
	`f˛o£
(
fd
);

516 
	`‰ì
(
f£§ec‹d
);

517 
	`sy¶og
(
LOG_NOTICE
,"sessions have beenÜoaded");

518 
	`f˛o£
(
fd
);

520 
	}
}

555 
	$m©o˛£rv_ö£π_›ífûe
(
£ssi⁄
* 
¸
,
uöt32_t
 
öode
) {

556 
fûñi°
 *
oÂå
,**
oÂ±r
;

557 
°©us
;

559 
oÂ±r
 = &(
¸
->
›íedfûes
);

560 (
oÂå
=*
oÂ±r
)) {

561 i‡(
oÂå
->
öode
==inode) {

562  
STATUS_OK
;

564 i‡(
oÂå
->
öode
>inode) {

567 
oÂ±r
 = &(
oÂå
->
√xt
);

569 
°©us
 = 
	`fs_acquúe
(
öode
,
¸
->
£ssi⁄id
);

570 i‡(
°©us
==
STATUS_OK
) {

571 
oÂå
 = (
fûñi°
*)
	`mÆloc
((filelist));

572 
	`∑s£π
(
oÂå
);

573 
oÂå
->
öode
 = inode;

574 
oÂå
->
√xt
 = *
oÂ±r
;

575 *
oÂ±r
 = 
oÂå
;

577  
°©us
;

578 
	}
}

580 
	$m©o˛£rv_öô_£ssi⁄s
(
uöt32_t
 
£ssi⁄id
,uöt32_à
öode
) {

581 
£ssi⁄
 *
a£sd©a
;

582 
fûñi°
 *
oÂå
,**
oÂ±r
;

584 
a£sd©a
 = 
£ssi⁄shód
 ;á£sd©®&&á£sd©a->
£ssi⁄id
!=£ssi⁄id;á£sd©a˜£sd©a->
√xt
) ;

585 i‡(
a£sd©a
==
NULL
) {

586 
a£sd©a
 = (
£ssi⁄
*)
	`mÆloc
((session));

587 
	`∑s£π
(
a£sd©a
);

588 
a£sd©a
->
£ssi⁄id
 = sessionid;

590 
a£sd©a
->
öfo
 = 
NULL
;

591 
a£sd©a
->
≥îù
 = 0;

592 
a£sd©a
->
£sÊags
 = 0;

593 
a£sd©a
->
roŸuid
 = 0;

594 
a£sd©a
->
roŸgid
 = 0;

595 
a£sd©a
->
m≠Æluid
 = 0;

596 
a£sd©a
->
m≠Ælgid
 = 0;

597 
a£sd©a
->
√w£ssi⁄
 = 0;

598 
a£sd©a
->
roŸöode
 = 
MFS_ROOT_ID
;

599 
a£sd©a
->
›íedfûes
 = 
NULL
;

600 
a£sd©a
->
disc⁄√˘ed
 = 
	`maö_time
();

601 
a£sd©a
->
nsocks
 = 0;

602 
	`mem£t
(
a£sd©a
->
cuºít›°©s
,0,4*
SESSION_STATS
);

603 
	`mem£t
(
a£sd©a
->
œ°hour›°©s
,0,4*
SESSION_STATS
);

604 
a£sd©a
->
√xt
 = 
£ssi⁄shód
;

605 
£ssi⁄shód
 = 
a£sd©a
;

608 
oÂ±r
 = &(
a£sd©a
->
›íedfûes
);

609 (
oÂå
=*
oÂ±r
)) {

610 i‡(
oÂå
->
öode
==inode) {

613 i‡(
oÂå
->
öode
>inode) {

616 
oÂ±r
 = &(
oÂå
->
√xt
);

618 
oÂå
 = (
fûñi°
*)
	`mÆloc
((filelist));

619 
	`∑s£π
(
oÂå
);

620 
oÂå
->
öode
 = inode;

621 
oÂå
->
√xt
 = *
oÂ±r
;

622 *
oÂ±r
 = 
oÂå
;

623 
	}
}

625 
uöt8_t
* 
	$m©o˛£rv_¸óã∑ckë
(
m©o˛£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

626 
∑ckë°ru˘
 *
ouçackë
;

627 
uöt8_t
 *
±r
;

628 
uöt32_t
 
psize
;

630 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

631 
	`∑s£π
(
ouçackë
);

632 
psize
 = 
size
+8;

633 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

634 
	`∑s£π
(
ouçackë
->
∑ckë
);

635 
ouçackë
->
byã¶e·
 = 
psize
;

636 
±r
 = 
ouçackë
->
∑ckë
;

637 
	`put32bô
(&
±r
,
ty≥
);

638 
	`put32bô
(&
±r
,
size
);

639 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

640 
ouçackë
->
√xt
 = 
NULL
;

641 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

642 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

643  
±r
;

644 
	}
}

658 
	$m©o˛£rv_chunk_°©us
(
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
) {

659 
uöt32_t
 
qid
,
öode
,
uid
,
gid
,
auid
,
agid
;

660 
uöt64_t
 
Êíg
;

661 
uöt8_t
 
ty≥
,
©å
[35];

662 
uöt32_t
 
vîsi⁄
;

666 
uöt8_t
 *
±r
;

667 
uöt8_t
 
cou¡
;

668 
uöt8_t
 
loc
[100*6];

669 
chunkli°
 *
˛
,**
a˛
;

670 
m©o˛£rvíåy
 *
ïå
,*
ó±r
;

672 
ïå
=
NULL
;

673 
qid
=0;

674 
Êíg
=0;

675 
ty≥
=0;

676 
öode
=0;

677 
uid
=0;

678 
gid
=0;

679 
auid
=0;

680 
agid
=0;

681 
ó±r
 = 
m©o˛£rvhód
 ;É≠å && 
ïå
==
NULL
 ;É≠åÛ≠å->
√xt
) {

682 i‡(
ó±r
->
mode
!=
KILL
) {

683 
a˛
 = &(
ó±r
->
chunkdñayed›s
);

684 *
a˛
 && 
ïå
==
NULL
) {

685 
˛
 = *
a˛
;

686 i‡(
˛
->
chunkid
==chunkid) {

687 
ïå
 = 
ó±r
;

688 
qid
 = 
˛
->qid;

689 
Êíg
 = 
˛
->fleng;

690 
ty≥
 = 
˛
->type;

691 
öode
 = 
˛
->inode;

692 
uid
 = 
˛
->uid;

693 
gid
 = 
˛
->gid;

694 
auid
 = 
˛
->auid;

695 
agid
 = 
˛
->agid;

697 *
a˛
 = 
˛
->
√xt
;

698 
	`‰ì
(
˛
);

700 
a˛
 = &(
˛
->
√xt
);

706 i‡(!
ïå
) {

707 
	`sy¶og
(
LOG_WARNING
,"got chunk status, but don't want it");

710 i‡(
°©us
==
STATUS_OK
) {

711 
	`dcm_modify
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

713 
ty≥
) {

714 
FUSE_WRITE
:

715 i‡(
°©us
==
STATUS_OK
) {

716 
°©us
=
	`chunk_gëvîsi⁄™dloˇti⁄s
(
chunkid
,
ïå
->
≥îù
,&
vîsi⁄
,&
cou¡
,
loc
);

719 i‡(
°©us
!=
STATUS_OK
) {

720 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK
,5);

721 
	`put32bô
(&
±r
,
qid
);

722 
	`put8bô
(&
±r
,
°©us
);

723 
	`fs_wrôìnd
(0,0,
chunkid
);

726 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK
,24+
cou¡
*6);

727 
	`put32bô
(&
±r
,
qid
);

728 
	`put64bô
(&
±r
,
Êíg
);

729 
	`put64bô
(&
±r
,
chunkid
);

730 
	`put32bô
(&
±r
,
vîsi⁄
);

731 
	`mem˝y
(
±r
,
loc
,
cou¡
*6);

742 
FUSE_TRUNCATE
:

743 
	`fs_íd_£éígth
(
chunkid
);

745 i‡(
°©us
!=
STATUS_OK
) {

746 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_TRUNCATE
,5);

747 
	`put32bô
(&
±r
,
qid
);

748 
	`put8bô
(&
±r
,
°©us
);

751 
	`fs_do_£éígth
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
auid
,
agid
,
Êíg
,
©å
);

752 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_TRUNCATE
,39);

753 
	`put32bô
(&
±r
,
qid
);

754 
	`mem˝y
(
±r
,
©å
,35);

757 
	`sy¶og
(
LOG_WARNING
,"got chunk status, but operationÅype is unknown");

759 
	}
}

761 
	$m©o˛£rv_c£rv_li°
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

762 
uöt8_t
 *
±r
;

763 ()
d©a
;

764 i‡(
Àngth
!=0) {

765 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_CSERV_LIST - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

766 
ïå
->
mode
 = 
KILL
;

769 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_CSERV_LIST
,
	`m©ocs£rv_c£rvli°_size
());

770 
	`m©ocs£rv_c£rvli°_d©a
(
±r
);

771 
	}
}

773 
	$m©o˛£rv_£ssi⁄_li°
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

774 
uöt8_t
 *
±r
;

775 
m©o˛£rvíåy
 *
ó±r
;

776 
uöt32_t
 
size
,
ûíg
,
∂íg
,
i
;

777 ()
d©a
;

778 i‡(
Àngth
!=0) {

779 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_SESSION_LIST - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

780 
ïå
->
mode
 = 
KILL
;

783 
size
 = 2;

784 
ó±r
 = 
m©o˛£rvhód
 ;É≠å ;É≠åÛ≠å->
√xt
) {

785 i‡(
ó±r
->
mode
!=
KILL
 &&É≠å->
£sd©a
 &&É≠å->
ªgi°îed
>0 &&Éaptr->registered<100) {

786 
size
 +37+
SESSION_STATS
*8;

787 i‡(
ó±r
->
£sd©a
->
öfo
) {

788 
size
 +
	`°æí
(
ó±r
->
£sd©a
->
öfo
);

790 i‡(
ó±r
->
£sd©a
->
roŸöode
==0) {

791 
size
 += 1;

793 
size
 +
	`fs_gëdú∑th_size
(
ó±r
->
£sd©a
->
roŸöode
);

797 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_SESSION_LIST
,
size
);

798 
	`put16bô
(&
±r
,
SESSION_STATS
);

799 
ó±r
 = 
m©o˛£rvhód
 ;É≠å ;É≠åÛ≠å->
√xt
) {

800 i‡(
ó±r
->
mode
!=
KILL
 &&É≠å->
£sd©a
 &&É≠å->
ªgi°îed
>0 &&Éaptr->registered<100) {

802 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
£ssi⁄id
);

803 
	`put32bô
(&
±r
,
ó±r
->
≥îù
);

804 
	`put32bô
(&
±r
,
ó±r
->
vîsi⁄
);

805 i‡(
ó±r
->
£sd©a
->
öfo
) {

806 
ûíg
 = 
	`°æí
(
ó±r
->
£sd©a
->
öfo
);

807 
	`put32bô
(&
±r
,
ûíg
);

808 
	`mem˝y
(
±r
,
ó±r
->
£sd©a
->
öfo
,
ûíg
);

809 
±r
+=
ûíg
;

811 
	`put32bô
(&
±r
,0);

813 i‡(
ó±r
->
£sd©a
->
roŸöode
==0) {

814 
	`put32bô
(&
±r
,1);

815 
	`put8bô
(&
±r
,'.');

817 
∂íg
 = 
	`fs_gëdú∑th_size
(
ó±r
->
£sd©a
->
roŸöode
);

818 
	`put32bô
(&
±r
,
∂íg
);

819 i‡(
∂íg
>0) {

820 
	`fs_gëdú∑th_d©a
(
ó±r
->
£sd©a
->
roŸöode
,
±r
,
∂íg
);

821 
±r
+=
∂íg
;

824 
	`put8bô
(&
±r
,
ó±r
->
£sd©a
->
£sÊags
);

825 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
roŸuid
);

826 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
roŸgid
);

827 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
m≠Æluid
);

828 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
m≠Ælgid
);

829 i‡(
ó±r
->
£sd©a
) {

830 
i
=0 ; i<
SESSION_STATS
 ; i++) {

831 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
cuºít›°©s
[
i
]);

833 
i
=0 ; i<
SESSION_STATS
 ; i++) {

834 
	`put32bô
(&
±r
,
ó±r
->
£sd©a
->
œ°hour›°©s
[
i
]);

837 
	`mem£t
(
±r
,0xFF,8*
SESSION_STATS
);

838 
±r
+=8*
SESSION_STATS
;

842 
	}
}

844 
	$m©o˛£rv_ch¨t
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

845 
uöt32_t
 
ch¨tid
;

846 
uöt8_t
 *
±r
;

847 
uöt32_t
 
l
;

849 i‡(
Àngth
!=4) {

850 
	`sy¶og
(
LOG_NOTICE
,"CLTOAN_CHART - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

851 
ïå
->
mode
 = 
KILL
;

854 
ch¨tid
 = 
	`gë32bô
(&
d©a
);

855 
l
 = 
	`ch¨ts_make_≤g
(
ch¨tid
);

856 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
ANTOCL_CHART
,
l
);

857 i‡(
l
>0) {

858 
	`ch¨ts_gë_≤g
(
±r
);

860 
	}
}

862 
	$m©o˛£rv_ch¨t_d©a
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

863 
uöt32_t
 
ch¨tid
;

864 
uöt8_t
 *
±r
;

865 
uöt32_t
 
l
;

867 i‡(
Àngth
!=4) {

868 
	`sy¶og
(
LOG_NOTICE
,"CLTOAN_CHART_DATA - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

869 
ïå
->
mode
 = 
KILL
;

872 
ch¨tid
 = 
	`gë32bô
(&
d©a
);

873 
l
 = 
	`ch¨ts_d©asize
(
ch¨tid
);

874 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
ANTOCL_CHART_DATA
,
l
);

875 i‡(
l
>0) {

876 
	`ch¨ts_maked©a
(
±r
,
ch¨tid
);

878 
	}
}

880 
	$m©o˛£rv_öfo
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

881 
uöt64_t
 
tŸÆ•a˚
,
avaû•a˚
,
å•a˚
,
ª•a˚
;

882 
uöt64_t
 
memußge
;

883 
uöt32_t
 
ånodes
,
ªnodes
,
öodes
,
dnodes
,
‚odes
;

884 
uöt32_t
 
chunks
,
chunkc›õs
,
tdc›õs
;

885 
uöt8_t
 *
±r
;

889 ()
d©a
;

890 i‡(
Àngth
!=0) {

891 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_INFO - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

892 
ïå
->
mode
 = 
KILL
;

899 
	`fs_öfo
(&
tŸÆ•a˚
,&
avaû•a˚
,&
å•a˚
,&
ånodes
,&
ª•a˚
,&
ªnodes
,&
öodes
,&
dnodes
,&
‚odes
);

900 
	`chunk_öfo
(&
chunks
,&
chunkc›õs
,&
tdc›õs
);

901 
memußge
 = 
	`ch¨tsd©a_memußge
();

902 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_INFO
,76);

904 
	`put16bô
(&
±r
,
VERSMAJ
);

905 
	`put8bô
(&
±r
,
VERSMID
);

906 
	`put8bô
(&
±r
,
VERSMIN
);

908 
	`put64bô
(&
±r
,
memußge
);

910 
	`put64bô
(&
±r
,
tŸÆ•a˚
);

911 
	`put64bô
(&
±r
,
avaû•a˚
);

912 
	`put64bô
(&
±r
,
å•a˚
);

913 
	`put32bô
(&
±r
,
ånodes
);

914 
	`put64bô
(&
±r
,
ª•a˚
);

915 
	`put32bô
(&
±r
,
ªnodes
);

916 
	`put32bô
(&
±r
,
öodes
);

917 
	`put32bô
(&
±r
,
dnodes
);

918 
	`put32bô
(&
±r
,
‚odes
);

919 
	`put32bô
(&
±r
,
chunks
);

920 
	`put32bô
(&
±r
,
chunkc›õs
);

921 
	`put32bô
(&
±r
,
tdc›õs
);

922 
	}
}

924 
	$m©o˛£rv_f°e°_öfo
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

925 
uöt32_t
 
lo›°¨t
,
lo›íd
,
fûes
,
ugfûes
,
mfûes
,
chunks
,
ugchunks
,
mchunks
,
msgbufÊíg
;

926 *
msgbuff
;

927 
uöt8_t
 *
±r
;

928 ()
d©a
;

929 i‡(
Àngth
!=0) {

930 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FSTEST_INFO - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

931 
ïå
->
mode
 = 
KILL
;

934 
	`fs_ã°_gëd©a
(&
lo›°¨t
,&
lo›íd
,&
fûes
,&
ugfûes
,&
mfûes
,&
chunks
,&
ugchunks
,&
mchunks
,&
msgbuff
,&
msgbufÊíg
);

935 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FSTEST_INFO
,
msgbufÊíg
+36);

936 
	`put32bô
(&
±r
,
lo›°¨t
);

937 
	`put32bô
(&
±r
,
lo›íd
);

938 
	`put32bô
(&
±r
,
fûes
);

939 
	`put32bô
(&
±r
,
ugfûes
);

940 
	`put32bô
(&
±r
,
mfûes
);

941 
	`put32bô
(&
±r
,
chunks
);

942 
	`put32bô
(&
±r
,
ugchunks
);

943 
	`put32bô
(&
±r
,
mchunks
);

944 
	`put32bô
(&
±r
,
msgbufÊíg
);

945 i‡(
msgbufÊíg
>0) {

946 
	`mem˝y
(
±r
,
msgbuff
,
msgbufÊíg
);

948 
	}
}

950 
	$m©o˛£rv_chunk°e°_öfo
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

951 
uöt8_t
 *
±r
;

952 ()
d©a
;

953 i‡(
Àngth
!=0) {

954 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_CHUNKSTEST_INFO - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

955 
ïå
->
mode
 = 
KILL
;

958 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_CHUNKSTEST_INFO
,52);

959 
	`chunk_°‹e_öfo
(
±r
);

960 
	}
}

962 
	$m©o˛£rv_chunks_m©rix
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

963 
uöt8_t
 *
±r
;

964 
uöt8_t
 
m©rixid
;

965 ()
d©a
;

966 i‡(
Àngth
>1) {

967 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_CHUNKS_MATRIX - wr⁄g sizê(%"
PRIu32
"/0|1)",
Àngth
);

968 
ïå
->
mode
 = 
KILL
;

971 i‡(
Àngth
==1) {

972 
m©rixid
 = 
	`gë8bô
(&
d©a
);

974 
m©rixid
 = 0;

976 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_CHUNKS_MATRIX
,484);

977 
	`chunk_°‹e_chunkcou¡îs
(
±r
,
m©rixid
);

978 
	}
}

980 
	$m©o˛£rv_quŸa_öfo
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

981 
uöt8_t
 *
±r
;

982 ()
d©a
;

983 i‡(
Àngth
!=0) {

984 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_QUOTA_INFO - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

985 
ïå
->
mode
 = 
KILL
;

988 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_QUOTA_INFO
,
	`fs_gëquŸaöfo_size
());

989 
	`fs_gëquŸaöfo_d©a
(
±r
);

990 
	}
}

992 
	$m©o˛£rv_exp‹ts_öfo
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

993 
uöt8_t
 *
±r
;

994 ()
d©a
;

995 i‡(
Àngth
!=0) {

996 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_EXPORTS_INFO - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

997 
ïå
->
mode
 = 
KILL
;

1000 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_EXPORTS_INFO
,
	`exp‹ts_öfo_size
());

1001 
	`exp‹ts_öfo_d©a
(
±r
);

1002 
	}
}

1004 
	$m©o˛£rv_mlog_li°
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1005 
uöt8_t
 *
±r
;

1006 ()
d©a
;

1007 i‡(
Àngth
!=0) {

1008 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_MLOG_LIST - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

1009 
ïå
->
mode
 = 
KILL
;

1012 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_MLOG_LIST
,
	`m©oml£rv_mlogli°_size
());

1013 
	`m©oml£rv_mlogli°_d©a
(
±r
);

1014 
	}
}

1155 
	$m©o˛£rv_fu£_ªgi°î
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1156 c⁄° 
uöt8_t
 *
Ωå
;

1157 
uöt8_t
 *
w±r
;

1158 
uöt32_t
 
£ssi⁄id
;

1159 
uöt8_t
 
°©us
;

1160 
uöt8_t
 
toﬁs
;

1162 i‡(
°¨tög
) {

1163 
ïå
->
mode
 = 
KILL
;

1166 i‡(
Àngth
<64) {

1167 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER - wr⁄g sizê(%"
PRIu32
"/<64)",
Àngth
);

1168 
ïå
->
mode
 = 
KILL
;

1171 
toﬁs
 = (
	`memcmp
(
d©a
,
FUSE_REGISTER_BLOB_TOOLS_NOACL
,64)==0)?1:0;

1172 i‡(
ïå
->
ªgi°îed
==0 && (
	`memcmp
(
d©a
,
FUSE_REGISTER_BLOB_NOACL
,64)==0 || 
toﬁs
)) {

1173 i‡(
Reje˘Old
) {

1174 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/NOACL -Ñejected (option REJECT_OLD_CLIENTS is set)");

1175 
ïå
->
mode
 = 
KILL
;

1178 i‡(
toﬁs
) {

1179 i‡(
Àngth
!=64 &&Üength!=68) {

1180 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/NOACL-TOOLS - wr⁄g sizê(%"
PRIu32
"/64|68)",
Àngth
);

1181 
ïå
->
mode
 = 
KILL
;

1185 i‡(
Àngth
!=68 &&Üength!=72) {

1186 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/NOACL-MOUNT - wr⁄g sizê(%"
PRIu32
"/68|72)",
Àngth
);

1187 
ïå
->
mode
 = 
KILL
;

1191 
Ωå
 = 
d©a
+64;

1192 i‡(
toﬁs
) {

1193 
£ssi⁄id
 = 0;

1194 i‡(
Àngth
==68) {

1195 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1198 
£ssi⁄id
 = 
	`gë32bô
(&
Ωå
);

1199 i‡(
Àngth
==72) {

1200 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1203 i‡(
ïå
->
vîsi⁄
<0x010500 && !
toﬁs
) {

1204 
	`sy¶og
(
LOG_NOTICE
,"gotÑegisterÖacket from mount olderÅhan 1.5 -Ñejecting");

1205 
ïå
->
mode
 = 
KILL
;

1208 i‡(
£ssi⁄id
==0) {

1209 
°©us
 = 
STATUS_OK
;

1211 
ïå
->
£sd©a
 = 
	`m©o˛£rv_√w_£ssi⁄
(0,
toﬁs
);

1212 i‡(
ïå
->
£sd©a
==
NULL
) {

1213 
	`sy¶og
(
LOG_NOTICE
,"can'tállocate sessionÑecord");

1214 
ïå
->
mode
 = 
KILL
;

1217 
ïå
->
£sd©a
->
roŸöode
 = 
MFS_ROOT_ID
;

1218 
ïå
->
£sd©a
->
£sÊags
 = 0;

1219 
ïå
->
£sd©a
->
≥îù
 =Éptr->peerip;

1222 
ïå
->
£sd©a
 = 
	`m©o˛£rv_föd_£ssi⁄
(
£ssi⁄id
);

1223 i‡(
ïå
->
£sd©a
==
NULL
) {

1224 
ïå
->
£sd©a
 = 
	`m©o˛£rv_√w_£ssi⁄
(0,0);

1225 i‡(
ïå
->
£sd©a
==
NULL
) {

1226 
	`sy¶og
(
LOG_NOTICE
,"can'tállocate sessionÑecord");

1227 
ïå
->
mode
 = 
KILL
;

1230 
ïå
->
£sd©a
->
roŸöode
 = 
MFS_ROOT_ID
;

1231 
ïå
->
£sd©a
->
£sÊags
 = 0;

1232 
ïå
->
£sd©a
->
≥îù
 =Éptr->peerip;

1233 
°©us
 = 
STATUS_OK
;

1234 } i‡(
ïå
->
£sd©a
->
≥îù
==0) {

1235 
ïå
->
£sd©a
->
≥îù
 =Éptr->peerip;

1236 
°©us
 = 
STATUS_OK
;

1237 } i‡(
ïå
->
£sd©a
->
≥îù
==eptr->peerip) {

1238 
°©us
 = 
STATUS_OK
;

1240 
°©us
 = 
ERROR_EACCES
;

1243 i‡(
toﬁs
) {

1244 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,1);

1246 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,(
°©us
!=
STATUS_OK
)?1:4);

1248 i‡(
°©us
!=
STATUS_OK
) {

1249 
	`put8bô
(&
w±r
,
°©us
);

1252 i‡(
toﬁs
) {

1253 
	`put8bô
(&
w±r
,
°©us
);

1255 
£ssi⁄id
 = 
ïå
->
£sd©a
->sessionid;

1256 
	`put32bô
(&
w±r
,
£ssi⁄id
);

1258 
ïå
->
ªgi°îed
 = (
toﬁs
)?100:1;

1260 } i‡(
	`memcmp
(
d©a
,
FUSE_REGISTER_BLOB_ACL
,64)==0) {

1261 
uöt32_t
 
roŸöode
;

1262 
uöt8_t
 
£sÊags
;

1263 
uöt32_t
 
roŸuid
,
roŸgid
;

1264 
uöt32_t
 
m≠Æluid
,
m≠Ælgid
;

1265 
uöt32_t
 
ûíg
,
∂íg
;

1266 
uöt8_t
 
i
,
rcode
;

1267 c⁄° 
uöt8_t
 *
∑th
;

1268 c⁄° *
öfo
;

1270 i‡(
Àngth
<65) {

1271 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL - wr⁄g sizê(%"
PRIu32
"/<65)",
Àngth
);

1272 
ïå
->
mode
 = 
KILL
;

1276 
Ωå
 = 
d©a
+64;

1277 
rcode
 = 
	`gë8bô
(&
Ωå
);

1279 i‡((
ïå
->
ªgi°îed
==0 && 
rcode
==
REGISTER_CLOSESESSION
) || (eptr->registered &&Ñcode!=REGISTER_CLOSESESSION)) {

1280 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL - wr⁄gÑcodê(%dËf‹Ñegi°îed sètu†(%d)",
rcode
,
ïå
->
ªgi°îed
);

1281 
ïå
->
mode
 = 
KILL
;

1285 
rcode
) {

1286 
REGISTER_GETRANDOM
:

1287 i‡(
Àngth
!=65) {

1288 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.1 - wr⁄g sizê(%"
PRIu32
"/65)",
Àngth
);

1289 
ïå
->
mode
 = 
KILL
;

1292 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,32);

1293 
i
=0 ; i<32 ; i++) {

1294 
ïå
->
∑ssw‹d∫d
[
i
]=
	`∫du8
();

1296 
	`mem˝y
(
w±r
,
ïå
->
∑ssw‹d∫d
,32);

1298 
REGISTER_NEWSESSION
:

1299 i‡(
Àngth
<77) {

1300 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.2 - wr⁄g sizê(%"
PRIu32
"/>=77)",
Àngth
);

1301 
ïå
->
mode
 = 
KILL
;

1304 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1305 
ûíg
 = 
	`gë32bô
(&
Ωå
);

1306 i‡(
Àngth
<77+
ûíg
) {

1307 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.2 - wr⁄g sizê(%"
PRIu32
"/>=77+ûíg(%"PRIu32"))",
Àngth
,
ûíg
);

1308 
ïå
->
mode
 = 
KILL
;

1311 
öfo
 = (c⁄° *)
Ωå
;

1312 
Ωå
+=
ûíg
;

1313 
∂íg
 = 
	`gë32bô
(&
Ωå
);

1314 i‡(
Àngth
!=77+
ûíg
+
∂íg
 &&Üength!=77+16+ileng+pleng) {

1315 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.2 - wr⁄g sizê(%"
PRIu32
"/77+ûíg(%"PRIu32")+∂íg(%"PRIu32")[+16])",
Àngth
,
ûíg
,
∂íg
);

1316 
ïå
->
mode
 = 
KILL
;

1319 
∑th
 = 
Ωå
;

1320 
Ωå
+=
∂íg
;

1321 i‡(
∂íg
>0 && 
Ωå
[-1]!=0) {

1322 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.2 -ÑeceivedÖath withoutÉnding zero");

1323 
ïå
->
mode
 = 
KILL
;

1326 i‡(
∂íg
==0) {

1327 
∑th
 = (c⁄° 
uöt8_t
*)"";

1329 i‡(
Àngth
==77+16+
ûíg
+
∂íg
) {

1330 
°©us
 = 
	`exp‹ts_check
(
ïå
->
≥îù
,ïå->
vîsi⁄
,0,
∑th
,ïå->
∑ssw‹d∫d
,
Ωå
,&
£sÊags
,&
roŸuid
,&
roŸgid
,&
m≠Æluid
,&
m≠Ælgid
);

1332 
°©us
 = 
	`exp‹ts_check
(
ïå
->
≥îù
,ïå->
vîsi⁄
,0,
∑th
,
NULL
,NULL,&
£sÊags
,&
roŸuid
,&
roŸgid
,&
m≠Æluid
,&
m≠Ælgid
);

1334 i‡(
°©us
==
STATUS_OK
) {

1335 
°©us
 = 
	`fs_gëroŸöode
(&
roŸöode
,
∑th
);

1337 i‡(
°©us
==
STATUS_OK
) {

1338 
ïå
->
£sd©a
 = 
	`m©o˛£rv_√w_£ssi⁄
(1,0);

1339 i‡(
ïå
->
£sd©a
==
NULL
) {

1340 
	`sy¶og
(
LOG_NOTICE
,"can'tállocate sessionÑecord");

1341 
ïå
->
mode
 = 
KILL
;

1344 
ïå
->
£sd©a
->
roŸöode
 =Ñootinode;

1345 
ïå
->
£sd©a
->
£sÊags
 = sesflags;

1346 
ïå
->
£sd©a
->
roŸuid
 =Ñootuid;

1347 
ïå
->
£sd©a
->
roŸgid
 =Ñootgid;

1348 
ïå
->
£sd©a
->
m≠Æluid
 = mapalluid;

1349 
ïå
->
£sd©a
->
m≠Ælgid
 = mapallgid;

1350 
ïå
->
£sd©a
->
≥îù
 =Éptr->peerip;

1351 i‡(
ûíg
>0) {

1352 i‡(
öfo
[
ûíg
-1]==0) {

1353 
ïå
->
£sd©a
->
öfo
 = 
	`°rdup
(info);

1354 
	`∑s£π
(
ïå
->
£sd©a
->
öfo
);

1356 
ïå
->
£sd©a
->
öfo
 = 
	`mÆloc
(
ûíg
+1);

1357 
	`∑s£π
(
ïå
->
£sd©a
->
öfo
);

1358 
	`mem˝y
(
ïå
->
£sd©a
->
öfo
,öfo,
ûíg
);

1359 
ïå
->
£sd©a
->
öfo
[
ûíg
]=0;

1362 
	`m©o˛£rv_°‹e_£ssi⁄s
();

1364 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,(
°©us
==
STATUS_OK
)?(”±r->
vîsi⁄
>=0x010615)?25:(eptr->version>=0x010601)?21:13):1);

1365 i‡(
°©us
!=
STATUS_OK
) {

1366 
	`put8bô
(&
w±r
,
°©us
);

1369 
£ssi⁄id
 = 
ïå
->
£sd©a
->sessionid;

1370 i‡(
ïå
->
vîsi⁄
==0x010615) {

1371 
	`put32bô
(&
w±r
,0);

1372 } i‡(
ïå
->
vîsi⁄
>=0x010616) {

1373 
	`put16bô
(&
w±r
,
VERSMAJ
);

1374 
	`put8bô
(&
w±r
,
VERSMID
);

1375 
	`put8bô
(&
w±r
,
VERSMIN
);

1377 
	`put32bô
(&
w±r
,
£ssi⁄id
);

1378 
	`put8bô
(&
w±r
,
£sÊags
);

1379 
	`put32bô
(&
w±r
,
roŸuid
);

1380 
	`put32bô
(&
w±r
,
roŸgid
);

1381 i‡(
ïå
->
vîsi⁄
>=0x010601) {

1382 
	`put32bô
(&
w±r
,
m≠Æluid
);

1383 
	`put32bô
(&
w±r
,
m≠Ælgid
);

1385 
ïå
->
ªgi°îed
 = 1;

1387 
REGISTER_NEWMETASESSION
:

1388 i‡(
Àngth
<73) {

1389 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.5 - wr⁄g sizê(%"
PRIu32
"/>=73)",
Àngth
);

1390 
ïå
->
mode
 = 
KILL
;

1393 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1394 
ûíg
 = 
	`gë32bô
(&
Ωå
);

1395 i‡(
Àngth
!=73+
ûíg
 &&Üength!=73+16+ileng) {

1396 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.5 - wr⁄g sizê(%"
PRIu32
"/73+ûíg(%"PRIu32")[+16])",
Àngth
,
ûíg
);

1397 
ïå
->
mode
 = 
KILL
;

1400 
öfo
 = (c⁄° *)
Ωå
;

1401 
Ωå
+=
ûíg
;

1402 i‡(
Àngth
==73+16+
ûíg
) {

1403 
°©us
 = 
	`exp‹ts_check
(
ïå
->
≥îù
,ïå->
vîsi⁄
,1,
NULL
,ïå->
∑ssw‹d∫d
,
Ωå
,&
£sÊags
,&
roŸuid
,&
roŸgid
,&
m≠Æluid
,&
m≠Ælgid
);

1405 
°©us
 = 
	`exp‹ts_check
(
ïå
->
≥îù
,ïå->
vîsi⁄
,1,
NULL
,NULL,NULL,&
£sÊags
,&
roŸuid
,&
roŸgid
,&
m≠Æluid
,&
m≠Ælgid
);

1407 i‡(
°©us
==
STATUS_OK
) {

1408 
ïå
->
£sd©a
 = 
	`m©o˛£rv_√w_£ssi⁄
(1,0);

1409 i‡(
ïå
->
£sd©a
==
NULL
) {

1410 
	`sy¶og
(
LOG_NOTICE
,"can'tállocate sessionÑecord");

1411 
ïå
->
mode
 = 
KILL
;

1414 
ïå
->
£sd©a
->
roŸöode
 = 0;

1415 
ïå
->
£sd©a
->
£sÊags
 = sesflags;

1416 
ïå
->
£sd©a
->
roŸuid
 = 0;

1417 
ïå
->
£sd©a
->
roŸgid
 = 0;

1418 
ïå
->
£sd©a
->
m≠Æluid
 = 0;

1419 
ïå
->
£sd©a
->
m≠Ælgid
 = 0;

1420 
ïå
->
£sd©a
->
≥îù
 =Éptr->peerip;

1421 i‡(
ûíg
>0) {

1422 i‡(
öfo
[
ûíg
-1]==0) {

1423 
ïå
->
£sd©a
->
öfo
 = 
	`°rdup
(info);

1424 
	`∑s£π
(
ïå
->
£sd©a
->
öfo
);

1426 
ïå
->
£sd©a
->
öfo
 = 
	`mÆloc
(
ûíg
+1);

1427 
	`∑s£π
(
ïå
->
£sd©a
->
öfo
);

1428 
	`mem˝y
(
ïå
->
£sd©a
->
öfo
,öfo,
ûíg
);

1429 
ïå
->
£sd©a
->
öfo
[
ûíg
]=0;

1432 
	`m©o˛£rv_°‹e_£ssi⁄s
();

1434 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,(
°©us
==
STATUS_OK
)?(”±r->
vîsi⁄
>=0x010615)?9:5):1);

1435 i‡(
°©us
!=
STATUS_OK
) {

1436 
	`put8bô
(&
w±r
,
°©us
);

1439 
£ssi⁄id
 = 
ïå
->
£sd©a
->sessionid;

1440 i‡(
ïå
->
vîsi⁄
>=0x010615) {

1441 
	`put16bô
(&
w±r
,
VERSMAJ
);

1442 
	`put8bô
(&
w±r
,
VERSMID
);

1443 
	`put8bô
(&
w±r
,
VERSMIN
);

1445 
	`put32bô
(&
w±r
,
£ssi⁄id
);

1446 
	`put8bô
(&
w±r
,
£sÊags
);

1447 
ïå
->
ªgi°îed
 = 1;

1449 
REGISTER_RECONNECT
:

1450 
REGISTER_TOOLS
:

1451 i‡(
Àngth
<73) {

1452 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.%"
PRIu8
" - wr⁄g sizê(%"
PRIu32
"/73)",
rcode
,
Àngth
);

1453 
ïå
->
mode
 = 
KILL
;

1456 
£ssi⁄id
 = 
	`gë32bô
(&
Ωå
);

1457 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1458 
ïå
->
£sd©a
 = 
	`m©o˛£rv_föd_£ssi⁄
(
£ssi⁄id
);

1459 i‡(
ïå
->
£sd©a
==
NULL
) {

1460 
°©us
 = 
ERROR_BADSESSIONID
;

1462 i‡((
ïå
->
£sd©a
->
£sÊags
&
SESFLAG_DYNAMICIP
)==0 &&É±r->
≥îù
!=eptr->sesdata->peerip) {

1463 
°©us
 = 
ERROR_EACCES
;

1465 
°©us
 = 
STATUS_OK
;

1468 
w±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REGISTER
,1);

1469 
	`put8bô
(&
w±r
,
°©us
);

1470 i‡(
°©us
!=
STATUS_OK
) {

1473 
ïå
->
ªgi°îed
 = (
rcode
==3)?1:100;

1475 
REGISTER_CLOSESESSION
:

1476 i‡(
Àngth
<69) {

1477 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL.6 - wr⁄g sizê(%"
PRIu32
"/69)",
Àngth
);

1478 
ïå
->
mode
 = 
KILL
;

1481 
£ssi⁄id
 = 
	`gë32bô
(&
Ωå
);

1482 
	`m©o˛£rv_˛o£_£ssi⁄
(
£ssi⁄id
);

1483 
ïå
->
mode
 = 
KILL
;

1486 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER/ACL - wr⁄gÑcodê(%"
PRIu8
")",
rcode
);

1487 
ïå
->
mode
 = 
KILL
;

1490 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REGISTER - wrongÑegister blob");

1491 
ïå
->
mode
 = 
KILL
;

1494 
	}
}

1496 
	$m©o˛£rv_fu£_ª£rved_öodes
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1497 c⁄° 
uöt8_t
 *
±r
;

1498 
fûñi°
 *
oÂå
,**
oÂ±r
;

1499 
uöt32_t
 
öode
;

1501 i‡((
Àngth
&0x3)!=0) {

1502 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RESERVED_INODES - wr⁄g sizê(%"
PRIu32
"/N*4)",
Àngth
);

1503 
ïå
->
mode
 = 
KILL
;

1507 
±r
 = 
d©a
;

1509 
oÂ±r
 = &(
ïå
->
£sd©a
->
›íedfûes
);

1510 
Àngth
 >>= 2;

1511 i‡(
Àngth
) {

1512 
Àngth
--;

1513 
öode
 = 
	`gë32bô
(&
±r
);

1515 
öode
=0;

1518 (
oÂå
=*
oÂ±r
Ë&& 
öode
>0) {

1519 i‡(
oÂå
->
öode
<inode) {

1520 
	`fs_ªÀa£
(
oÂå
->
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

1521 *
oÂ±r
 = 
oÂå
->
√xt
;

1522 
	`‰ì
(
oÂå
);

1523 } i‡(
oÂå
->
öode
>inode) {

1524 i‡(
	`fs_acquúe
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
)==
STATUS_OK
) {

1525 
oÂå
 = (
fûñi°
*)
	`mÆloc
((filelist));

1526 
	`∑s£π
(
oÂå
);

1527 
oÂå
->
√xt
 = *
oÂ±r
;

1528 
oÂå
->
öode
 = inode;

1529 *
oÂ±r
 = 
oÂå
;

1530 
oÂ±r
 = &(
oÂå
->
√xt
);

1532 i‡(
Àngth
) {

1533 
Àngth
--;

1534 
öode
 = 
	`gë32bô
(&
±r
);

1536 
öode
=0;

1539 
oÂ±r
 = &(
oÂå
->
√xt
);

1540 i‡(
Àngth
) {

1541 
Àngth
--;

1542 
öode
 = 
	`gë32bô
(&
±r
);

1544 
öode
=0;

1548 
öode
>0) {

1549 i‡(
	`fs_acquúe
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
)==
STATUS_OK
) {

1550 
oÂå
 = (
fûñi°
*)
	`mÆloc
((filelist));

1551 
	`∑s£π
(
oÂå
);

1552 
oÂå
->
√xt
 = *
oÂ±r
;

1553 
oÂå
->
öode
 = inode;

1554 *
oÂ±r
 = 
oÂå
;

1555 
oÂ±r
 = &(
oÂå
->
√xt
);

1557 i‡(
Àngth
) {

1558 
Àngth
--;

1559 
öode
 = 
	`gë32bô
(&
±r
);

1561 
öode
=0;

1564 (
oÂå
=*
oÂ±r
)) {

1565 
	`fs_ªÀa£
(
oÂå
->
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

1566 *
oÂ±r
 = 
oÂå
->
√xt
;

1567 
	`‰ì
(
oÂå
);

1570 
	}
}

1572 
ölöe
 
	$m©o˛£rv_ugid_ªm≠
(
m©o˛£rvíåy
 *
ïå
,
uöt32_t
 *
auid
,uöt32_à*
agid
) {

1573 i‡(*
auid
==0) {

1574 *
auid
 = 
ïå
->
£sd©a
->
roŸuid
;

1575 i‡(
agid
) {

1576 *
agid
 = 
ïå
->
£sd©a
->
roŸgid
;

1578 } i‡(
ïå
->
£sd©a
->
£sÊags
&
SESFLAG_MAPALL
) {

1579 *
auid
 = 
ïå
->
£sd©a
->
m≠Æluid
;

1580 i‡(
agid
) {

1581 *
agid
 = 
ïå
->
£sd©a
->
m≠Ælgid
;

1584 
	}
}

1603 
	$m©o˛£rv_fu£_°©fs
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1604 
uöt64_t
 
tŸÆ•a˚
,
avaû•a˚
,
åash•a˚
,
ª£rved•a˚
;

1605 
uöt32_t
 
msgid
,
öodes
;

1606 
uöt8_t
 *
±r
;

1607 i‡(
Àngth
!=4) {

1608 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_STATFS - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

1609 
ïå
->
mode
 = 
KILL
;

1612 
msgid
 = 
	`gë32bô
(&
d©a
);

1613 
	`fs_°©fs
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,&
tŸÆ•a˚
,&
avaû•a˚
,&
åash•a˚
,&
ª£rved•a˚
,&
öodes
);

1614 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_STATFS
,40);

1615 
	`put32bô
(&
±r
,
msgid
);

1616 
	`put64bô
(&
±r
,
tŸÆ•a˚
);

1617 
	`put64bô
(&
±r
,
avaû•a˚
);

1618 
	`put64bô
(&
±r
,
åash•a˚
);

1619 
	`put64bô
(&
±r
,
ª£rved•a˚
);

1620 
	`put32bô
(&
±r
,
öodes
);

1621 i‡(
ïå
->
£sd©a
) {

1622 
ïå
->
£sd©a
->
cuºít›°©s
[0]++;

1624 
	}
}

1626 
	$m©o˛£rv_fu£_ac˚ss
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1627 
uöt32_t
 
öode
,
uid
,
gid
;

1628 
uöt8_t
 
modemask
;

1629 
uöt32_t
 
msgid
;

1630 
uöt8_t
 *
±r
;

1631 
uöt8_t
 
°©us
;

1632 i‡(
Àngth
!=17) {

1633 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_ACCESS - wr⁄g sizê(%"
PRIu32
"/17)",
Àngth
);

1634 
ïå
->
mode
 = 
KILL
;

1637 
msgid
 = 
	`gë32bô
(&
d©a
);

1638 
öode
 = 
	`gë32bô
(&
d©a
);

1639 
uid
 = 
	`gë32bô
(&
d©a
);

1640 
gid
 = 
	`gë32bô
(&
d©a
);

1641 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1642 
modemask
 = 
	`gë8bô
(&
d©a
);

1643 
°©us
 = 
	`fs_ac˚ss
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
modemask
);

1644 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_ACCESS
,5);

1645 
	`put32bô
(&
±r
,
msgid
);

1646 
	`put8bô
(&
±r
,
°©us
);

1647 
	}
}

1649 
	$m©o˛£rv_fu£_lookup
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1650 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

1651 
uöt8_t
 
∆íg
;

1652 c⁄° 
uöt8_t
 *
«me
;

1653 
uöt32_t
 
√wöode
;

1654 
uöt8_t
 
©å
[35];

1655 
uöt32_t
 
msgid
;

1656 
uöt8_t
 *
±r
;

1657 
uöt8_t
 
°©us
;

1658 i‡(
Àngth
<17) {

1659 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_LOOKUP - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

1660 
ïå
->
mode
 = 
KILL
;

1663 
msgid
 = 
	`gë32bô
(&
d©a
);

1664 
öode
 = 
	`gë32bô
(&
d©a
);

1665 
∆íg
 = 
	`gë8bô
(&
d©a
);

1666 i‡(
Àngth
!=17U+
∆íg
) {

1667 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_LOOKUP - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

1668 
ïå
->
mode
 = 
KILL
;

1671 
«me
 = 
d©a
;

1672 
d©a
 +
∆íg
;

1673 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1674 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1675 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1676 
°©us
 = 
	`fs_lookup
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
uid
,
gid
,
auid
,
agid
,&
√wöode
,
©å
);

1677 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_LOOKUP
,(
°©us
!=
STATUS_OK
)?5:43);

1678 
	`put32bô
(&
±r
,
msgid
);

1679 i‡(
°©us
!=
STATUS_OK
) {

1680 
	`put8bô
(&
±r
,
°©us
);

1682 
	`put32bô
(&
±r
,
√wöode
);

1683 
	`mem˝y
(
±r
,
©å
,35);

1685 i‡(
ïå
->
£sd©a
) {

1686 
ïå
->
£sd©a
->
cuºít›°©s
[3]++;

1688 
	}
}

1690 
	$m©o˛£rv_fu£_gë©å
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1691 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

1692 
uöt8_t
 
©å
[35];

1693 
uöt32_t
 
msgid
;

1694 
uöt8_t
 *
±r
;

1695 
uöt8_t
 
°©us
;

1696 i‡(
Àngth
!=8 &&Üength!=16) {

1697 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETATTR - wr⁄g sizê(%"
PRIu32
"/8,16)",
Àngth
);

1698 
ïå
->
mode
 = 
KILL
;

1701 
msgid
 = 
	`gë32bô
(&
d©a
);

1702 
öode
 = 
	`gë32bô
(&
d©a
);

1703 i‡(
Àngth
==16) {

1704 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1705 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1706 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1708 
auid
 = 
uid
 = 12345;

1709 
agid
 = 
gid
 = 12345;

1711 
°©us
 = 
	`fs_gë©å
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
auid
,
agid
,
©å
);

1712 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETATTR
,(
°©us
!=
STATUS_OK
)?5:39);

1713 
	`put32bô
(&
±r
,
msgid
);

1714 i‡(
°©us
!=
STATUS_OK
) {

1715 
	`put8bô
(&
±r
,
°©us
);

1717 
	`mem˝y
(
±r
,
©å
,35);

1719 i‡(
ïå
->
£sd©a
) {

1720 
ïå
->
£sd©a
->
cuºít›°©s
[1]++;

1722 
	}
}

1724 
	$m©o˛£rv_fu£_£èâr
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1725 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

1726 
uöt16_t
 
£tmask
;

1727 
uöt8_t
 
©å
[35];

1728 
uöt32_t
 
msgid
;

1729 
uöt8_t
 *
±r
;

1730 
uöt8_t
 
°©us
;

1731 
uöt8_t
 
sugid˛órmode
;

1732 
uöt16_t
 
©åmode
;

1733 
uöt32_t
 
©åuid
,
©ågid
,
©å©ime
,
©åmtime
;

1734 i‡(
Àngth
!=35 &&Üength!=36) {

1735 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETATTR - wr⁄g sizê(%"
PRIu32
"/35|36)",
Àngth
);

1736 
ïå
->
mode
 = 
KILL
;

1739 
msgid
 = 
	`gë32bô
(&
d©a
);

1740 
öode
 = 
	`gë32bô
(&
d©a
);

1741 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1742 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1743 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1744 
£tmask
 = 
	`gë8bô
(&
d©a
);

1745 
©åmode
 = 
	`gë16bô
(&
d©a
);

1746 
©åuid
 = 
	`gë32bô
(&
d©a
);

1747 
©ågid
 = 
	`gë32bô
(&
d©a
);

1748 
©å©ime
 = 
	`gë32bô
(&
d©a
);

1749 
©åmtime
 = 
	`gë32bô
(&
d©a
);

1750 i‡(
Àngth
==36) {

1751 
sugid˛órmode
 = 
	`gë8bô
(&
d©a
);

1753 
sugid˛órmode
 = 
SUGID_CLEAR_MODE_ALWAYS
;

1755 i‡(
£tmask
&(
SET_GOAL_FLAG
|
SET_LENGTH_FLAG
|
SET_OPENED_FLAG
)) {

1756 
°©us
 = 
ERROR_EINVAL
;

1758 
°©us
 = 
	`fs_£èâr
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
auid
,
agid
,
£tmask
,
©åmode
,
©åuid
,
©ågid
,
©å©ime
,
©åmtime
,
sugid˛órmode
,
©å
);

1760 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETATTR
,(
°©us
!=
STATUS_OK
)?5:39);

1761 
	`put32bô
(&
±r
,
msgid
);

1762 i‡(
°©us
!=
STATUS_OK
) {

1763 
	`put8bô
(&
±r
,
°©us
);

1765 
	`mem˝y
(
±r
,
©å
,35);

1767 i‡(
ïå
->
£sd©a
) {

1768 
ïå
->
£sd©a
->
cuºít›°©s
[2]++;

1770 
	}
}

1772 
	$m©o˛£rv_fu£_åunˇã
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1773 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

1774 
uöt8_t
 
©å
[35];

1775 
uöt32_t
 
msgid
;

1776 
uöt8_t
 *
±r
;

1777 
uöt8_t
 
›íed
;

1778 
uöt8_t
 
°©us
;

1779 
uöt64_t
 
©åÀngth
;

1780 
chunkli°
 *
˛
;

1781 
uöt64_t
 
chunkid
;

1782 i‡(
Àngth
!=24 &&Üength!=25) {

1783 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_TRUNCATE - wr⁄g sizê(%"
PRIu32
"/24|25)",
Àngth
);

1784 
ïå
->
mode
 = 
KILL
;

1787 
›íed
 = 0;

1788 
msgid
 = 
	`gë32bô
(&
d©a
);

1789 
öode
 = 
	`gë32bô
(&
d©a
);

1790 i‡(
Àngth
==25) {

1791 
›íed
 = 
	`gë8bô
(&
d©a
);

1793 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1794 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1795 i‡(
Àngth
==24) {

1796 i‡(
uid
==0 && 
gid
!=0) {

1797 
›íed
 = 1;

1800 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1801 
©åÀngth
 = 
	`gë64bô
(&
d©a
);

1802 
°©us
 = 
	`fs_åy_£éígth
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
›íed
,
uid
,
gid
,
auid
,
agid
,
©åÀngth
,
©å
,&
chunkid
);

1803 i‡(
°©us
==
ERROR_DELAYED
) {

1804 
˛
 = (
chunkli°
*)
	`mÆloc
((chunklist));

1805 
	`∑s£π
(
˛
);

1806 
˛
->
chunkid
 = chunkid;

1807 
˛
->
qid
 = 
msgid
;

1808 
˛
->
öode
 = inode;

1809 
˛
->
uid
 = uid;

1810 
˛
->
gid
 = gid;

1811 
˛
->
auid
 =áuid;

1812 
˛
->
agid
 =ágid;

1813 
˛
->
Êíg
 = 
©åÀngth
;

1814 
˛
->
ty≥
 = 
FUSE_TRUNCATE
;

1815 
˛
->
√xt
 = 
ïå
->
chunkdñayed›s
;

1816 
ïå
->
chunkdñayed›s
 = 
˛
;

1817 i‡(
ïå
->
£sd©a
) {

1818 
ïå
->
£sd©a
->
cuºít›°©s
[2]++;

1822 i‡(
°©us
==
STATUS_OK
) {

1823 
°©us
 = 
	`fs_do_£éígth
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
auid
,
agid
,
©åÀngth
,
©å
);

1825 i‡(
°©us
==
STATUS_OK
) {

1826 
	`dcm_modify
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

1828 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_TRUNCATE
,(
°©us
!=
STATUS_OK
)?5:39);

1829 
	`put32bô
(&
±r
,
msgid
);

1830 i‡(
°©us
!=
STATUS_OK
) {

1831 
	`put8bô
(&
±r
,
°©us
);

1833 
	`mem˝y
(
±r
,
©å
,35);

1835 i‡(
ïå
->
£sd©a
) {

1836 
ïå
->
£sd©a
->
cuºít›°©s
[2]++;

1838 
	}
}

1840 
	$m©o˛£rv_fu£_ªadlök
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1841 
uöt32_t
 
öode
;

1842 
uöt32_t
 
∂íg
;

1843 
uöt8_t
 *
∑th
;

1844 
uöt32_t
 
msgid
;

1845 
uöt8_t
 *
±r
;

1846 
uöt8_t
 
°©us
;

1847 i‡(
Àngth
!=8) {

1848 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_READLINK - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

1849 
ïå
->
mode
 = 
KILL
;

1852 
msgid
 = 
	`gë32bô
(&
d©a
);

1853 
öode
 = 
	`gë32bô
(&
d©a
);

1854 
°©us
 = 
	`fs_ªadlök
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,&
∂íg
,&
∑th
);

1855 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_READLINK
,(
°©us
!=
STATUS_OK
)?5:8+
∂íg
+1);

1856 
	`put32bô
(&
±r
,
msgid
);

1857 i‡(
°©us
!=
STATUS_OK
) {

1858 
	`put8bô
(&
±r
,
°©us
);

1860 
	`put32bô
(&
±r
,
∂íg
+1);

1861 i‡(
∂íg
>0) {

1862 
	`mem˝y
(
±r
,
∑th
,
∂íg
);

1864 
±r
[
∂íg
]=0;

1866 i‡(
ïå
->
£sd©a
) {

1867 
ïå
->
£sd©a
->
cuºít›°©s
[7]++;

1869 
	}
}

1871 
	$m©o˛£rv_fu£_symlök
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1872 
uöt32_t
 
öode
;

1873 
uöt8_t
 
∆íg
;

1874 c⁄° 
uöt8_t
 *
«me
,*
∑th
;

1875 
uöt32_t
 
uid
,
gid
,
auid
,
agid
;

1876 
uöt32_t
 
∂íg
;

1877 
uöt32_t
 
√wöode
;

1878 
uöt8_t
 
©å
[35];

1879 
uöt32_t
 
msgid
;

1880 
uöt8_t
 
°©us
;

1881 
uöt8_t
 *
±r
;

1882 i‡(
Àngth
<21) {

1883 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SYMLINK - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

1884 
ïå
->
mode
 = 
KILL
;

1887 
msgid
 = 
	`gë32bô
(&
d©a
);

1888 
öode
 = 
	`gë32bô
(&
d©a
);

1889 
∆íg
 = 
	`gë8bô
(&
d©a
);

1890 i‡(
Àngth
<21U+
∆íg
) {

1891 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SYMLINK - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

1892 
ïå
->
mode
 = 
KILL
;

1895 
«me
 = 
d©a
;

1896 
d©a
 +
∆íg
;

1897 
∂íg
 = 
	`gë32bô
(&
d©a
);

1898 i‡(
Àngth
!=21U+
∆íg
+
∂íg
) {

1899 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SYMLINK - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
":∂íg=%"PRIu32")",
Àngth
,
∆íg
,
∂íg
);

1900 
ïå
->
mode
 = 
KILL
;

1903 
∑th
 = 
d©a
;

1904 
d©a
 +
∂íg
;

1905 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1906 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1907 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1908 
∂íg
>0 && 
∑th
[pleng-1]==0) {

1909 
∂íg
--;

1911 
°©us
 = 
	`fs_symlök
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
∂íg
,
∑th
,
uid
,
gid
,
auid
,
agid
,&
√wöode
,
©å
);

1912 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SYMLINK
,(
°©us
!=
STATUS_OK
)?5:43);

1913 
	`put32bô
(&
±r
,
msgid
);

1914 i‡(
°©us
!=
STATUS_OK
) {

1915 
	`put8bô
(&
±r
,
°©us
);

1917 
	`put32bô
(&
±r
,
√wöode
);

1918 
	`mem˝y
(
±r
,
©å
,35);

1920 i‡(
ïå
->
£sd©a
) {

1921 
ïå
->
£sd©a
->
cuºít›°©s
[6]++;

1923 
	}
}

1925 
	$m©o˛£rv_fu£_mknod
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1926 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
,
rdev
;

1927 
uöt8_t
 
∆íg
;

1928 c⁄° 
uöt8_t
 *
«me
;

1929 
uöt8_t
 
ty≥
;

1930 
uöt16_t
 
mode
;

1931 
uöt32_t
 
√wöode
;

1932 
uöt8_t
 
©å
[35];

1933 
uöt32_t
 
msgid
;

1934 
uöt8_t
 *
±r
;

1935 
uöt8_t
 
°©us
;

1936 i‡(
Àngth
<24) {

1937 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_MKNOD - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

1938 
ïå
->
mode
 = 
KILL
;

1941 
msgid
 = 
	`gë32bô
(&
d©a
);

1942 
öode
 = 
	`gë32bô
(&
d©a
);

1943 
∆íg
 = 
	`gë8bô
(&
d©a
);

1944 i‡(
Àngth
!=24U+
∆íg
) {

1945 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_MKNOD - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

1946 
ïå
->
mode
 = 
KILL
;

1949 
«me
 = 
d©a
;

1950 
d©a
 +
∆íg
;

1951 
ty≥
 = 
	`gë8bô
(&
d©a
);

1952 
mode
 = 
	`gë16bô
(&
d©a
);

1953 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1954 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

1955 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

1956 
rdev
 = 
	`gë32bô
(&
d©a
);

1957 
°©us
 = 
	`fs_mknod
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
ty≥
,
mode
,
uid
,
gid
,
auid
,
agid
,
rdev
,&
√wöode
,
©å
);

1958 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_MKNOD
,(
°©us
!=
STATUS_OK
)?5:43);

1959 
	`put32bô
(&
±r
,
msgid
);

1960 i‡(
°©us
!=
STATUS_OK
) {

1961 
	`put8bô
(&
±r
,
°©us
);

1963 
	`put32bô
(&
±r
,
√wöode
);

1964 
	`mem˝y
(
±r
,
©å
,35);

1966 i‡(
ïå
->
£sd©a
) {

1967 
ïå
->
£sd©a
->
cuºít›°©s
[8]++;

1969 
	}
}

1971 
	$m©o˛£rv_fu£_mkdú
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1972 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

1973 
uöt8_t
 
∆íg
;

1974 c⁄° 
uöt8_t
 *
«me
;

1975 
uöt16_t
 
mode
;

1976 
uöt32_t
 
√wöode
;

1977 
uöt8_t
 
©å
[35];

1978 
uöt32_t
 
msgid
;

1979 
uöt8_t
 *
±r
;

1980 
uöt8_t
 
°©us
;

1981 
uöt8_t
 
c›ysgid
;

1982 i‡(
Àngth
<19) {

1983 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_MKDIR - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

1984 
ïå
->
mode
 = 
KILL
;

1987 
msgid
 = 
	`gë32bô
(&
d©a
);

1988 
öode
 = 
	`gë32bô
(&
d©a
);

1989 
∆íg
 = 
	`gë8bô
(&
d©a
);

1990 i‡(
Àngth
!=19U+
∆íg
 &&Üength!=20U+nleng) {

1991 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_MKDIR - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

1992 
ïå
->
mode
 = 
KILL
;

1995 
«me
 = 
d©a
;

1996 
d©a
 +
∆íg
;

1997 
mode
 = 
	`gë16bô
(&
d©a
);

1998 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

1999 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

2000 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2001 i‡(
Àngth
==20U+
∆íg
) {

2002 
c›ysgid
 = 
	`gë8bô
(&
d©a
);

2004 
c›ysgid
 = 0;

2006 
°©us
 = 
	`fs_mkdú
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
mode
,
uid
,
gid
,
auid
,
agid
,
c›ysgid
,&
√wöode
,
©å
);

2007 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_MKDIR
,(
°©us
!=
STATUS_OK
)?5:43);

2008 
	`put32bô
(&
±r
,
msgid
);

2009 i‡(
°©us
!=
STATUS_OK
) {

2010 
	`put8bô
(&
±r
,
°©us
);

2012 
	`put32bô
(&
±r
,
√wöode
);

2013 
	`mem˝y
(
±r
,
©å
,35);

2015 i‡(
ïå
->
£sd©a
) {

2016 
ïå
->
£sd©a
->
cuºít›°©s
[4]++;

2018 
	}
}

2020 
	$m©o˛£rv_fu£_u∆ök
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2021 
uöt32_t
 
öode
,
uid
,
gid
;

2022 
uöt8_t
 
∆íg
;

2023 c⁄° 
uöt8_t
 *
«me
;

2024 
uöt32_t
 
msgid
;

2025 
uöt8_t
 *
±r
;

2026 
uöt8_t
 
°©us
;

2027 i‡(
Àngth
<17) {

2028 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_UNLINK - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2029 
ïå
->
mode
 = 
KILL
;

2032 
msgid
 = 
	`gë32bô
(&
d©a
);

2033 
öode
 = 
	`gë32bô
(&
d©a
);

2034 
∆íg
 = 
	`gë8bô
(&
d©a
);

2035 i‡(
Àngth
!=17U+
∆íg
) {

2036 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_UNLINK - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

2037 
ïå
->
mode
 = 
KILL
;

2040 
«me
 = 
d©a
;

2041 
d©a
 +
∆íg
;

2042 
uid
 = 
	`gë32bô
(&
d©a
);

2043 
gid
 = 
	`gë32bô
(&
d©a
);

2044 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2045 
°©us
 = 
	`fs_u∆ök
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
uid
,
gid
);

2046 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_UNLINK
,5);

2047 
	`put32bô
(&
±r
,
msgid
);

2048 
	`put8bô
(&
±r
,
°©us
);

2049 i‡(
ïå
->
£sd©a
) {

2050 
ïå
->
£sd©a
->
cuºít›°©s
[9]++;

2052 
	}
}

2054 
	$m©o˛£rv_fu£_rmdú
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2055 
uöt32_t
 
öode
,
uid
,
gid
;

2056 
uöt8_t
 
∆íg
;

2057 c⁄° 
uöt8_t
 *
«me
;

2058 
uöt32_t
 
msgid
;

2059 
uöt8_t
 *
±r
;

2060 
uöt8_t
 
°©us
;

2061 i‡(
Àngth
<17) {

2062 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RMDIR - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2063 
ïå
->
mode
 = 
KILL
;

2066 
msgid
 = 
	`gë32bô
(&
d©a
);

2067 
öode
 = 
	`gë32bô
(&
d©a
);

2068 
∆íg
 = 
	`gë8bô
(&
d©a
);

2069 i‡(
Àngth
!=17U+
∆íg
) {

2070 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RMDIR - wr⁄g sizê(%"
PRIu32
":∆íg=%"
PRIu8
")",
Àngth
,
∆íg
);

2071 
ïå
->
mode
 = 
KILL
;

2074 
«me
 = 
d©a
;

2075 
d©a
 +
∆íg
;

2076 
uid
 = 
	`gë32bô
(&
d©a
);

2077 
gid
 = 
	`gë32bô
(&
d©a
);

2078 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2079 
°©us
 = 
	`fs_rmdú
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∆íg
,
«me
,
uid
,
gid
);

2080 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_RMDIR
,5);

2081 
	`put32bô
(&
±r
,
msgid
);

2082 
	`put8bô
(&
±r
,
°©us
);

2083 i‡(
ïå
->
£sd©a
) {

2084 
ïå
->
£sd©a
->
cuºít›°©s
[5]++;

2086 
	}
}

2088 
	$m©o˛£rv_fu£_ª«me
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2089 
uöt32_t
 
öode
,
öode_§c
,
öode_d°
;

2090 
uöt8_t
 
∆íg_§c
,
∆íg_d°
;

2091 c⁄° 
uöt8_t
 *
«me_§c
,*
«me_d°
;

2092 
uöt32_t
 
uid
,
gid
,
auid
,
agid
;

2093 
uöt8_t
 
©å
[35];

2094 
uöt32_t
 
msgid
;

2095 
uöt8_t
 
°©us
;

2096 
uöt8_t
 *
±r
;

2097 i‡(
Àngth
<22) {

2098 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RENAME - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2099 
ïå
->
mode
 = 
KILL
;

2102 
msgid
 = 
	`gë32bô
(&
d©a
);

2103 
öode_§c
 = 
	`gë32bô
(&
d©a
);

2104 
∆íg_§c
 = 
	`gë8bô
(&
d©a
);

2105 i‡(
Àngth
<22U+
∆íg_§c
) {

2106 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RENAME - wr⁄g sizê(%"
PRIu32
":∆íg_§c=%"
PRIu8
")",
Àngth
,
∆íg_§c
);

2107 
ïå
->
mode
 = 
KILL
;

2110 
«me_§c
 = 
d©a
;

2111 
d©a
 +
∆íg_§c
;

2112 
öode_d°
 = 
	`gë32bô
(&
d©a
);

2113 
∆íg_d°
 = 
	`gë8bô
(&
d©a
);

2114 i‡(
Àngth
!=22U+
∆íg_§c
+
∆íg_d°
) {

2115 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_RENAME - wr⁄g sizê(%"
PRIu32
":∆íg_§c=%"
PRIu8
":∆íg_d°=%"PRIu8")",
Àngth
,
∆íg_§c
,
∆íg_d°
);

2116 
ïå
->
mode
 = 
KILL
;

2119 
«me_d°
 = 
d©a
;

2120 
d©a
 +
∆íg_d°
;

2121 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

2122 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

2123 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2124 
°©us
 = 
	`fs_ª«me
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode_§c
,
∆íg_§c
,
«me_§c
,
öode_d°
,
∆íg_d°
,
«me_d°
,
uid
,
gid
,
auid
,
agid
,&
öode
,
©å
);

2125 i‡(
ïå
->
vîsi⁄
>=0x010615 && 
°©us
==
STATUS_OK
) {

2126 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_RENAME
,43);

2128 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_RENAME
,5);

2130 
	`put32bô
(&
±r
,
msgid
);

2131 i‡(
ïå
->
vîsi⁄
>=0x010615 && 
°©us
==
STATUS_OK
) {

2132 
	`put32bô
(&
±r
,
öode
);

2133 
	`mem˝y
(
±r
,
©å
,35);

2135 
	`put8bô
(&
±r
,
°©us
);

2137 i‡(
ïå
->
£sd©a
) {

2138 
ïå
->
£sd©a
->
cuºít›°©s
[10]++;

2140 
	}
}

2142 
	$m©o˛£rv_fu£_lök
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2143 
uöt32_t
 
öode
,
öode_d°
;

2144 
uöt8_t
 
∆íg_d°
;

2145 c⁄° 
uöt8_t
 *
«me_d°
;

2146 
uöt32_t
 
uid
,
gid
,
auid
,
agid
;

2147 
uöt32_t
 
√wöode
;

2148 
uöt8_t
 
©å
[35];

2149 
uöt32_t
 
msgid
;

2150 
uöt8_t
 *
±r
;

2151 
uöt8_t
 
°©us
;

2152 i‡(
Àngth
<21) {

2153 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_LINK - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2154 
ïå
->
mode
 = 
KILL
;

2157 
msgid
 = 
	`gë32bô
(&
d©a
);

2158 
öode
 = 
	`gë32bô
(&
d©a
);

2159 
öode_d°
 = 
	`gë32bô
(&
d©a
);

2160 
∆íg_d°
 = 
	`gë8bô
(&
d©a
);

2161 i‡(
Àngth
!=21U+
∆íg_d°
) {

2162 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_LINK - wr⁄g sizê(%"
PRIu32
":∆íg_d°=%"
PRIu8
")",
Àngth
,
∆íg_d°
);

2163 
ïå
->
mode
 = 
KILL
;

2166 
«me_d°
 = 
d©a
;

2167 
d©a
 +
∆íg_d°
;

2168 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

2169 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

2170 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2171 
°©us
 = 
	`fs_lök
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
öode_d°
,
∆íg_d°
,
«me_d°
,
uid
,
gid
,
auid
,
agid
,&
√wöode
,
©å
);

2172 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_LINK
,(
°©us
!=
STATUS_OK
)?5:43);

2173 
	`put32bô
(&
±r
,
msgid
);

2174 i‡(
°©us
!=
STATUS_OK
) {

2175 
	`put8bô
(&
±r
,
°©us
);

2177 
	`put32bô
(&
±r
,
√wöode
);

2178 
	`mem˝y
(
±r
,
©å
,35);

2180 i‡(
ïå
->
£sd©a
) {

2181 
ïå
->
£sd©a
->
cuºít›°©s
[11]++;

2183 
	}
}

2185 
	$m©o˛£rv_fu£_gëdú
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2186 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

2187 
uöt8_t
 
Êags
;

2188 
uöt32_t
 
msgid
;

2189 
uöt8_t
 *
±r
;

2190 
uöt8_t
 
°©us
;

2191 
uöt32_t
 
dÀng
;

2192 *
cu°om
;

2193 i‡(
Àngth
!=16 &&Üength!=17) {

2194 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETDIR - wr⁄g sizê(%"
PRIu32
"/16|17)",
Àngth
);

2195 
ïå
->
mode
 = 
KILL
;

2198 
msgid
 = 
	`gë32bô
(&
d©a
);

2199 
öode
 = 
	`gë32bô
(&
d©a
);

2200 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

2201 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

2202 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2203 i‡(
Àngth
==17) {

2204 
Êags
 = 
	`gë8bô
(&
d©a
);

2206 
Êags
 = 0;

2208 
°©us
 = 
	`fs_ªaddú_size
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
Êags
,&
cu°om
,&
dÀng
);

2209 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETDIR
,(
°©us
!=
STATUS_OK
)?5:4+
dÀng
);

2210 
	`put32bô
(&
±r
,
msgid
);

2211 i‡(
°©us
!=
STATUS_OK
) {

2212 
	`put8bô
(&
±r
,
°©us
);

2214 
	`fs_ªaddú_d©a
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
uid
,
gid
,
auid
,
agid
,
Êags
,
cu°om
,
±r
);

2225 i‡(
ïå
->
£sd©a
) {

2226 
ïå
->
£sd©a
->
cuºít›°©s
[12]++;

2228 
	}
}

2256 
	$m©o˛£rv_fu£_›í
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2257 
uöt32_t
 
öode
,
uid
,
gid
,
auid
,
agid
;

2258 
uöt8_t
 
Êags
;

2259 
uöt8_t
 
©å
[35];

2260 
uöt32_t
 
msgid
;

2261 
uöt8_t
 *
±r
;

2262 
uöt8_t
 
°©us
;

2263 
Ælowˇche
;

2264 i‡(
Àngth
!=17) {

2265 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_OPEN - wr⁄g sizê(%"
PRIu32
"/17)",
Àngth
);

2266 
ïå
->
mode
 = 
KILL
;

2269 
msgid
 = 
	`gë32bô
(&
d©a
);

2270 
öode
 = 
	`gë32bô
(&
d©a
);

2271 
auid
 = 
uid
 = 
	`gë32bô
(&
d©a
);

2272 
agid
 = 
gid
 = 
	`gë32bô
(&
d©a
);

2273 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2274 
Êags
 = 
	`gë8bô
(&
d©a
);

2275 
°©us
 = 
	`m©o˛£rv_ö£π_›ífûe
(
ïå
->
£sd©a
,
öode
);

2276 i‡(
°©us
==
STATUS_OK
) {

2277 
°©us
 = 
	`fs_›ícheck
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,
auid
,
agid
,
Êags
,
©å
);

2279 i‡(
ïå
->
vîsi⁄
>=0x010609 && 
°©us
==
STATUS_OK
) {

2280 
Ælowˇche
 = 
	`dcm_›í
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

2281 i‡(
Ælowˇche
==0) {

2282 
©å
[1]&=(0xFF^(
MATTR_ALLOWDATACACHE
<<4));

2284 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_OPEN
,39);

2286 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_OPEN
,5);

2288 
	`put32bô
(&
±r
,
msgid
);

2289 i‡(
ïå
->
vîsi⁄
>=0x010609 && 
°©us
==
STATUS_OK
) {

2290 
	`mem˝y
(
±r
,
©å
,35);

2292 
	`put8bô
(&
±r
,
°©us
);

2294 i‡(
ïå
->
£sd©a
) {

2295 
ïå
->
£sd©a
->
cuºít›°©s
[13]++;

2297 
	}
}

2299 
	$m©o˛£rv_fu£_ªad_chunk
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2300 
uöt8_t
 *
±r
;

2301 
uöt8_t
 
°©us
;

2302 
uöt32_t
 
öode
;

2303 
uöt32_t
 
ödx
;

2304 
uöt64_t
 
chunkid
;

2305 
uöt64_t
 
Êíg
;

2306 
uöt32_t
 
vîsi⁄
;

2309 
uöt8_t
 
cou¡
;

2310 
uöt8_t
 
loc
[100*6];

2311 
uöt32_t
 
msgid
;

2312 i‡(
Àngth
!=12) {

2313 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_READ_CHUNK - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

2314 
ïå
->
mode
 = 
KILL
;

2317 
msgid
 = 
	`gë32bô
(&
d©a
);

2318 
öode
 = 
	`gë32bô
(&
d©a
);

2319 
ödx
 = 
	`gë32bô
(&
d©a
);

2323 
°©us
 = 
	`fs_ªadchunk
(
öode
,
ödx
,&
chunkid
,&
Êíg
);

2325 i‡(
°©us
==
STATUS_OK
) {

2326 i‡(
chunkid
>0) {

2327 
°©us
 = 
	`chunk_gëvîsi⁄™dloˇti⁄s
(
chunkid
,
ïå
->
≥îù
,&
vîsi⁄
,&
cou¡
,
loc
);

2329 
vîsi⁄
 = 0;

2330 
cou¡
 = 0;

2333 i‡(
°©us
!=
STATUS_OK
) {

2334 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_READ_CHUNK
,5);

2335 
	`put32bô
(&
±r
,
msgid
);

2336 
	`put8bô
(&
±r
,
°©us
);

2339 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_READ_CHUNK
,24+
cou¡
*6);

2340 
	`put32bô
(&
±r
,
msgid
);

2341 
	`put64bô
(&
±r
,
Êíg
);

2342 
	`put64bô
(&
±r
,
chunkid
);

2343 
	`put32bô
(&
±r
,
vîsi⁄
);

2344 
	`mem˝y
(
±r
,
loc
,
cou¡
*6);

2345 i‡(
ïå
->
£sd©a
) {

2346 
ïå
->
£sd©a
->
cuºít›°©s
[14]++;

2348 
	}
}

2350 
	$m©o˛£rv_fu£_wrôe_chunk
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2351 
uöt8_t
 *
±r
;

2352 
uöt8_t
 
°©us
;

2353 
uöt32_t
 
öode
;

2354 
uöt32_t
 
ödx
;

2355 
uöt64_t
 
Êíg
;

2356 
uöt64_t
 
chunkid
;

2357 
uöt32_t
 
msgid
;

2358 
uöt8_t
 
›Êag
;

2359 
chunkli°
 *
˛
;

2360 
uöt32_t
 
vîsi⁄
;

2361 
uöt8_t
 
cou¡
;

2362 
uöt8_t
 
loc
[100*6];

2364 i‡(
Àngth
!=12) {

2365 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_WRITE_CHUNK - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

2366 
ïå
->
mode
 = 
KILL
;

2369 
msgid
 = 
	`gë32bô
(&
d©a
);

2370 
öode
 = 
	`gë32bô
(&
d©a
);

2371 
ödx
 = 
	`gë32bô
(&
d©a
);

2372 i‡(
ïå
->
£sd©a
->
£sÊags
&
SESFLAG_READONLY
) {

2373 
°©us
 = 
ERROR_EROFS
;

2375 
°©us
 = 
	`fs_wrôechunk
(
öode
,
ödx
,&
chunkid
,&
Êíg
,&
›Êag
);

2377 i‡(
°©us
!=
STATUS_OK
) {

2378 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK
,5);

2379 
	`put32bô
(&
±r
,
msgid
);

2380 
	`put8bô
(&
±r
,
°©us
);

2383 i‡(
›Êag
) {

2384 
˛
 = (
chunkli°
*)
	`mÆloc
((chunklist));

2385 
	`∑s£π
(
˛
);

2386 
˛
->
öode
 = inode;

2387 
˛
->
chunkid
 = chunkid;

2388 
˛
->
qid
 = 
msgid
;

2389 
˛
->
Êíg
 = fleng;

2390 
˛
->
ty≥
 = 
FUSE_WRITE
;

2391 
˛
->
√xt
 = 
ïå
->
chunkdñayed›s
;

2392 
ïå
->
chunkdñayed›s
 = 
˛
;

2394 
	`dcm_modify
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

2395 
°©us
=
	`chunk_gëvîsi⁄™dloˇti⁄s
(
chunkid
,
ïå
->
≥îù
,&
vîsi⁄
,&
cou¡
,
loc
);

2396 i‡(
°©us
!=
STATUS_OK
) {

2397 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK
,5);

2398 
	`put32bô
(&
±r
,
msgid
);

2399 
	`put8bô
(&
±r
,
°©us
);

2400 
	`fs_wrôìnd
(0,0,
chunkid
);

2403 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK
,24+
cou¡
*6);

2404 
	`put32bô
(&
±r
,
msgid
);

2405 
	`put64bô
(&
±r
,
Êíg
);

2406 
	`put64bô
(&
±r
,
chunkid
);

2407 
	`put32bô
(&
±r
,
vîsi⁄
);

2408 
	`mem˝y
(
±r
,
loc
,
cou¡
*6);

2410 i‡(
ïå
->
£sd©a
) {

2411 
ïå
->
£sd©a
->
cuºít›°©s
[15]++;

2413 
	}
}

2415 
	$m©o˛£rv_fu£_wrôe_chunk_íd
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2416 
uöt8_t
 *
±r
;

2417 
uöt32_t
 
msgid
;

2418 
uöt32_t
 
öode
;

2419 
uöt64_t
 
Êíg
;

2420 
uöt64_t
 
chunkid
;

2421 
uöt8_t
 
°©us
;

2423 i‡(
Àngth
!=24) {

2424 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_WRITE_CHUNK_END - wr⁄g sizê(%"
PRIu32
"/24)",
Àngth
);

2425 
ïå
->
mode
 = 
KILL
;

2428 
msgid
 = 
	`gë32bô
(&
d©a
);

2429 
chunkid
 = 
	`gë64bô
(&
d©a
);

2430 
öode
 = 
	`gë32bô
(&
d©a
);

2431 
Êíg
 = 
	`gë64bô
(&
d©a
);

2432 i‡(
ïå
->
£sd©a
->
£sÊags
&
SESFLAG_READONLY
) {

2433 
°©us
 = 
ERROR_EROFS
;

2435 
°©us
 = 
	`fs_wrôìnd
(
öode
,
Êíg
,
chunkid
);

2436 
	`dcm_modify
(
öode
,
ïå
->
£sd©a
->
£ssi⁄id
);

2438 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_WRITE_CHUNK_END
,5);

2439 
	`put32bô
(&
±r
,
msgid
);

2440 
	`put8bô
(&
±r
,
°©us
);

2441 
	}
}

2443 
	$m©o˛£rv_fu£_ª∑ú
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2444 
uöt32_t
 
öode
,
uid
,
gid
;

2445 
uöt32_t
 
msgid
;

2446 
uöt32_t
 
chunk¢Ÿch™ged
,
chunk£ø£d
,
chunk§ïaúed
;

2447 
uöt8_t
 *
±r
;

2448 
uöt8_t
 
°©us
;

2449 i‡(
Àngth
!=16) {

2450 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_REPAIR - wr⁄g sizê(%"
PRIu32
"/16)",
Àngth
);

2451 
ïå
->
mode
 = 
KILL
;

2454 
msgid
 = 
	`gë32bô
(&
d©a
);

2455 
öode
 = 
	`gë32bô
(&
d©a
);

2456 
uid
 = 
	`gë32bô
(&
d©a
);

2457 
gid
 = 
	`gë32bô
(&
d©a
);

2458 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2459 
°©us
 = 
	`fs_ª∑ú
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gid
,&
chunk¢Ÿch™ged
,&
chunk£ø£d
,&
chunk§ïaúed
);

2460 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_REPAIR
,(
°©us
!=
STATUS_OK
)?5:16);

2461 
	`put32bô
(&
±r
,
msgid
);

2462 i‡(
°©us
!=0) {

2463 
	`put8bô
(&
±r
,
°©us
);

2465 
	`put32bô
(&
±r
,
chunk¢Ÿch™ged
);

2466 
	`put32bô
(&
±r
,
chunk£ø£d
);

2467 
	`put32bô
(&
±r
,
chunk§ïaúed
);

2469 
	}
}

2471 
	$m©o˛£rv_fu£_check
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2472 
uöt32_t
 
öode
;

2473 
uöt32_t
 
i
,
chunkcou¡
[11];

2474 
uöt32_t
 
msgid
;

2475 
uöt8_t
 *
±r
;

2476 
uöt8_t
 
°©us
;

2477 i‡(
Àngth
!=8) {

2478 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_CHECK - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

2479 
ïå
->
mode
 = 
KILL
;

2482 
msgid
 = 
	`gë32bô
(&
d©a
);

2483 
öode
 = 
	`gë32bô
(&
d©a
);

2484 
°©us
 = 
	`fs_checkfûe
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
chunkcou¡
);

2485 i‡(
°©us
!=
STATUS_OK
) {

2486 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_CHECK
,5);

2487 
	`put32bô
(&
±r
,
msgid
);

2488 
	`put8bô
(&
±r
,
°©us
);

2490 i‡(
ïå
->
vîsi⁄
>=0x010617) {

2491 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_CHECK
,48);

2492 
	`put32bô
(&
±r
,
msgid
);

2493 
i
=0 ; i<11 ; i++) {

2494 
	`put32bô
(&
±r
,
chunkcou¡
[
i
]);

2497 
uöt8_t
 
j
;

2498 
j
=0;

2499 
i
=0 ; i<11 ; i++) {

2500 i‡(
chunkcou¡
[
i
]>0) {

2501 
j
++;

2504 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_CHECK
,4+3*
j
);

2505 
	`put32bô
(&
±r
,
msgid
);

2506 
i
=0 ; i<11 ; i++) {

2507 i‡(
chunkcou¡
[
i
]>0) {

2508 
	`put8bô
(&
±r
,
i
);

2509 i‡(
chunkcou¡
[
i
]<=65535) {

2510 
	`put16bô
(&
±r
,
chunkcou¡
[
i
]);

2512 
	`put16bô
(&
±r
,65535);

2518 
	}
}

2521 
	$m©o˛£rv_fu£_gëåashtime
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2522 
uöt32_t
 
öode
;

2523 
uöt8_t
 
gmode
;

2524 *
Âå
,*
d±r
;

2525 
uöt32_t
 
‚odes
,
dnodes
;

2526 
uöt32_t
 
msgid
;

2527 
uöt8_t
 *
±r
;

2528 
uöt8_t
 
°©us
;

2529 i‡(
Àngth
!=9) {

2530 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETTRASHTIME - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

2531 
ïå
->
mode
 = 
KILL
;

2534 
msgid
 = 
	`gë32bô
(&
d©a
);

2535 
öode
 = 
	`gë32bô
(&
d©a
);

2536 
gmode
 = 
	`gë8bô
(&
d©a
);

2537 
°©us
 = 
	`fs_gëåashtime_¥ï¨e
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
gmode
,&
Âå
,&
d±r
,&
‚odes
,&
dnodes
);

2538 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETTRASHTIME
,(
°©us
!=
STATUS_OK
)?5:12+8*(
‚odes
+
dnodes
));

2539 
	`put32bô
(&
±r
,
msgid
);

2540 i‡(
°©us
!=
STATUS_OK
) {

2541 
	`put8bô
(&
±r
,
°©us
);

2543 
	`put32bô
(&
±r
,
‚odes
);

2544 
	`put32bô
(&
±r
,
dnodes
);

2545 
	`fs_gëåashtime_°‹e
(
Âå
,
d±r
,
±r
);

2547 
	}
}

2549 
	$m©o˛£rv_fu£_£âøshtime
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2550 
uöt32_t
 
öode
,
uid
,
åashtime
;

2551 
uöt32_t
 
msgid
;

2552 
uöt8_t
 
smode
;

2553 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
;

2554 
uöt8_t
 *
±r
;

2555 
uöt8_t
 
°©us
;

2556 i‡(
Àngth
!=17) {

2557 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETTRASHTIME - wr⁄g sizê(%"
PRIu32
"/17)",
Àngth
);

2558 
ïå
->
mode
 = 
KILL
;

2561 
msgid
 = 
	`gë32bô
(&
d©a
);

2562 
öode
 = 
	`gë32bô
(&
d©a
);

2563 
uid
 = 
	`gë32bô
(&
d©a
);

2564 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,
NULL
);

2565 
åashtime
 = 
	`gë32bô
(&
d©a
);

2566 
smode
 = 
	`gë8bô
(&
d©a
);

2567 
°©us
 = 
	`fs_£âøshtime
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
åashtime
,
smode
,&
ch™ged
,&
nŸch™ged
,&
nŸ≥rmôãd
);

2568 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETTRASHTIME
,(
°©us
!=
STATUS_OK
)?5:16);

2569 
	`put32bô
(&
±r
,
msgid
);

2570 i‡(
°©us
!=
STATUS_OK
) {

2571 
	`put8bô
(&
±r
,
°©us
);

2573 
	`put32bô
(&
±r
,
ch™ged
);

2574 
	`put32bô
(&
±r
,
nŸch™ged
);

2575 
	`put32bô
(&
±r
,
nŸ≥rmôãd
);

2577 
	}
}

2579 
	$m©o˛£rv_fu£_gëgﬂl
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2580 
uöt32_t
 
öode
;

2581 
uöt32_t
 
msgid
;

2582 
uöt32_t
 
fgèb
[10],
dgèb
[10];

2583 
uöt8_t
 
i
,
‚
,
dn
,
gmode
;

2584 
uöt8_t
 *
±r
;

2585 
uöt8_t
 
°©us
;

2586 i‡(
Àngth
!=9) {

2587 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETGOAL - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

2588 
ïå
->
mode
 = 
KILL
;

2591 
msgid
 = 
	`gë32bô
(&
d©a
);

2592 
öode
 = 
	`gë32bô
(&
d©a
);

2593 
gmode
 = 
	`gë8bô
(&
d©a
);

2594 
°©us
 = 
	`fs_gëgﬂl
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
gmode
,
fgèb
,
dgèb
);

2595 
‚
=0;

2596 
dn
=0;

2597 i‡(
°©us
==
STATUS_OK
) {

2598 
i
=1 ; i<10 ; i++) {

2599 i‡(
fgèb
[
i
]) {

2600 
‚
++;

2602 i‡(
dgèb
[
i
]) {

2603 
dn
++;

2607 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETGOAL
,(
°©us
!=
STATUS_OK
)?5:6+5*(
‚
+
dn
));

2608 
	`put32bô
(&
±r
,
msgid
);

2609 i‡(
°©us
!=
STATUS_OK
) {

2610 
	`put8bô
(&
±r
,
°©us
);

2612 
	`put8bô
(&
±r
,
‚
);

2613 
	`put8bô
(&
±r
,
dn
);

2614 
i
=1 ; i<10 ; i++) {

2615 i‡(
fgèb
[
i
]) {

2616 
	`put8bô
(&
±r
,
i
);

2617 
	`put32bô
(&
±r
,
fgèb
[
i
]);

2620 
i
=1 ; i<10 ; i++) {

2621 i‡(
dgèb
[
i
]) {

2622 
	`put8bô
(&
±r
,
i
);

2623 
	`put32bô
(&
±r
,
dgèb
[
i
]);

2627 
	}
}

2629 
	$m©o˛£rv_fu£_£tgﬂl
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2630 
uöt32_t
 
öode
,
uid
;

2631 
uöt32_t
 
msgid
;

2632 
uöt8_t
 
gﬂl
,
smode
;

2633 #i‡
VERSHEX
>=0x010700

2634 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
,
quŸ´x˚eded
;

2636 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
;

2638 
uöt8_t
 *
±r
;

2639 
uöt8_t
 
°©us
;

2640 i‡(
Àngth
!=14) {

2641 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETGOAL - wr⁄g sizê(%"
PRIu32
"/14)",
Àngth
);

2642 
ïå
->
mode
 = 
KILL
;

2645 
msgid
 = 
	`gë32bô
(&
d©a
);

2646 
öode
 = 
	`gë32bô
(&
d©a
);

2647 
uid
 = 
	`gë32bô
(&
d©a
);

2648 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,
NULL
);

2649 
gﬂl
 = 
	`gë8bô
(&
d©a
);

2650 
smode
 = 
	`gë8bô
(&
d©a
);

2651 #i‡
VERSHEX
>=0x010700

2652 
°©us
 = 
	`fs_£tgﬂl
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gﬂl
,
smode
,&
ch™ged
,&
nŸch™ged
,&
nŸ≥rmôãd
,&
quŸ´x˚eded
);

2654 
°©us
 = 
	`fs_£tgﬂl
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
gﬂl
,
smode
,&
ch™ged
,&
nŸch™ged
,&
nŸ≥rmôãd
);

2656 i‡(
ïå
->
vîsi⁄
>=0x010700) {

2657 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETGOAL
,(
°©us
!=
STATUS_OK
)?5:20);

2659 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETGOAL
,(
°©us
!=
STATUS_OK
)?5:16);

2661 
	`put32bô
(&
±r
,
msgid
);

2662 i‡(
°©us
!=
STATUS_OK
) {

2663 
	`put8bô
(&
±r
,
°©us
);

2665 
	`put32bô
(&
±r
,
ch™ged
);

2666 
	`put32bô
(&
±r
,
nŸch™ged
);

2667 
	`put32bô
(&
±r
,
nŸ≥rmôãd
);

2668 i‡(
ïå
->
vîsi⁄
>=0x010700) {

2669 #i‡
VERSHEX
>=0x010700

2670 
	`put32bô
(&
±r
,
quŸ´x˚eded
);

2672 
	`put32bô
(&
±r
,0);

2676 
	}
}

2678 
	$m©o˛£rv_fu£_gëóâr
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2679 
uöt32_t
 
öode
;

2680 
uöt32_t
 
msgid
;

2681 
uöt32_t
 
„©åèb
[16],
dóâπab
[16];

2682 
uöt8_t
 
i
,
‚
,
dn
,
gmode
;

2683 
uöt8_t
 *
±r
;

2684 
uöt8_t
 
°©us
;

2685 i‡(
Àngth
!=9) {

2686 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETEATTR - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

2687 
ïå
->
mode
 = 
KILL
;

2690 
msgid
 = 
	`gë32bô
(&
d©a
);

2691 
öode
 = 
	`gë32bô
(&
d©a
);

2692 
gmode
 = 
	`gë8bô
(&
d©a
);

2693 
°©us
 = 
	`fs_gëóâr
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
gmode
,
„©åèb
,
dóâπab
);

2694 
‚
=0;

2695 
dn
=0;

2696 i‡(
°©us
==
STATUS_OK
) {

2697 
i
=0 ; i<16 ; i++) {

2698 i‡(
„©åèb
[
i
]) {

2699 
‚
++;

2701 i‡(
dóâπab
[
i
]) {

2702 
dn
++;

2706 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETEATTR
,(
°©us
!=
STATUS_OK
)?5:6+5*(
‚
+
dn
));

2707 
	`put32bô
(&
±r
,
msgid
);

2708 i‡(
°©us
!=
STATUS_OK
) {

2709 
	`put8bô
(&
±r
,
°©us
);

2711 
	`put8bô
(&
±r
,
‚
);

2712 
	`put8bô
(&
±r
,
dn
);

2713 
i
=0 ; i<16 ; i++) {

2714 i‡(
„©åèb
[
i
]) {

2715 
	`put8bô
(&
±r
,
i
);

2716 
	`put32bô
(&
±r
,
„©åèb
[
i
]);

2719 
i
=0 ; i<16 ; i++) {

2720 i‡(
dóâπab
[
i
]) {

2721 
	`put8bô
(&
±r
,
i
);

2722 
	`put32bô
(&
±r
,
dóâπab
[
i
]);

2726 
	}
}

2728 
	$m©o˛£rv_fu£_£ã©å
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2729 
uöt32_t
 
öode
,
uid
;

2730 
uöt32_t
 
msgid
;

2731 
uöt8_t
 
óâr
,
smode
;

2732 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
;

2733 
uöt8_t
 *
±r
;

2734 
uöt8_t
 
°©us
;

2735 i‡(
Àngth
!=14) {

2736 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETEATTR - wr⁄g sizê(%"
PRIu32
"/14)",
Àngth
);

2737 
ïå
->
mode
 = 
KILL
;

2740 
msgid
 = 
	`gë32bô
(&
d©a
);

2741 
öode
 = 
	`gë32bô
(&
d©a
);

2742 
uid
 = 
	`gë32bô
(&
d©a
);

2743 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,
NULL
);

2744 
óâr
 = 
	`gë8bô
(&
d©a
);

2745 
smode
 = 
	`gë8bô
(&
d©a
);

2746 
°©us
 = 
	`fs_£ã©å
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
uid
,
óâr
,
smode
,&
ch™ged
,&
nŸch™ged
,&
nŸ≥rmôãd
);

2747 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETEATTR
,(
°©us
!=
STATUS_OK
)?5:16);

2748 
	`put32bô
(&
±r
,
msgid
);

2749 i‡(
°©us
!=
STATUS_OK
) {

2750 
	`put8bô
(&
±r
,
°©us
);

2752 
	`put32bô
(&
±r
,
ch™ged
);

2753 
	`put32bô
(&
±r
,
nŸch™ged
);

2754 
	`put32bô
(&
±r
,
nŸ≥rmôãd
);

2756 
	}
}

2758 
	$m©o˛£rv_fu£_≠≥nd
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2759 
uöt32_t
 
öode
,
öode_§c
,
uid
,
gid
;

2760 
uöt32_t
 
msgid
;

2761 
uöt8_t
 *
±r
;

2762 
uöt8_t
 
°©us
;

2763 i‡(
Àngth
!=20) {

2764 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_APPEND - wr⁄g sizê(%"
PRIu32
"/20)",
Àngth
);

2765 
ïå
->
mode
 = 
KILL
;

2768 
msgid
 = 
	`gë32bô
(&
d©a
);

2769 
öode
 = 
	`gë32bô
(&
d©a
);

2770 
öode_§c
 = 
	`gë32bô
(&
d©a
);

2771 
uid
 = 
	`gë32bô
(&
d©a
);

2772 
gid
 = 
	`gë32bô
(&
d©a
);

2773 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2774 
°©us
 = 
	`fs_≠≥nd
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
öode_§c
,
uid
,
gid
);

2775 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_APPEND
,5);

2776 
	`put32bô
(&
±r
,
msgid
);

2777 
	`put8bô
(&
±r
,
°©us
);

2778 
	}
}

2780 
	$m©o˛£rv_fu£_¢≠shŸ
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2781 
uöt32_t
 
öode
,
öode_d°
;

2782 
uöt8_t
 
∆íg_d°
;

2783 c⁄° 
uöt8_t
 *
«me_d°
;

2784 
uöt32_t
 
uid
,
gid
;

2785 
uöt8_t
 
ˇnovîwrôe
;

2786 
uöt32_t
 
msgid
;

2787 
uöt8_t
 *
±r
;

2788 
uöt8_t
 
°©us
;

2789 i‡(
Àngth
<22) {

2790 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SNAPSHOT - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2791 
ïå
->
mode
 = 
KILL
;

2794 
msgid
 = 
	`gë32bô
(&
d©a
);

2795 
öode
 = 
	`gë32bô
(&
d©a
);

2796 
öode_d°
 = 
	`gë32bô
(&
d©a
);

2797 
∆íg_d°
 = 
	`gë8bô
(&
d©a
);

2798 i‡(
Àngth
!=22U+
∆íg_d°
) {

2799 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SNAPSHOT - wr⁄g sizê(%"
PRIu32
":∆íg_d°=%"
PRIu8
")",
Àngth
,
∆íg_d°
);

2800 
ïå
->
mode
 = 
KILL
;

2803 
«me_d°
 = 
d©a
;

2804 
d©a
 +
∆íg_d°
;

2805 
uid
 = 
	`gë32bô
(&
d©a
);

2806 
gid
 = 
	`gë32bô
(&
d©a
);

2807 
	`m©o˛£rv_ugid_ªm≠
(
ïå
,&
uid
,&
gid
);

2808 
ˇnovîwrôe
 = 
	`gë8bô
(&
d©a
);

2809 
°©us
 = 
	`fs_¢≠shŸ
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
öode_d°
,
∆íg_d°
,
«me_d°
,
uid
,
gid
,
ˇnovîwrôe
);

2810 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SNAPSHOT
,5);

2811 
	`put32bô
(&
±r
,
msgid
);

2812 
	`put8bô
(&
±r
,
°©us
);

2813 
	}
}

2815 
	$m©o˛£rv_fu£_quŸac⁄åﬁ
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2816 
uöt8_t
 
Êags
,
dñ
;

2817 
uöt32_t
 
söodes
,
höodes
,
curöodes
;

2818 
uöt64_t
 
¶ígth
,
ssize
,
§ólsize
,
hÀngth
,
hsize
,
hªÆsize
,
cuæígth
,
cursize
,
cuºólsize
;

2819 
uöt32_t
 
msgid
,
öode
;

2820 
uöt8_t
 *
±r
;

2821 
uöt8_t
 
°©us
;

2822 i‡(
Àngth
!=65 &&Üength!=9) {

2823 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_QUOTACONTROL - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

2824 
ïå
->
mode
 = 
KILL
;

2827 
msgid
 = 
	`gë32bô
(&
d©a
);

2828 
öode
 = 
	`gë32bô
(&
d©a
);

2829 
Êags
 = 
	`gë8bô
(&
d©a
);

2830 i‡(
Àngth
==65) {

2831 
söodes
 = 
	`gë32bô
(&
d©a
);

2832 
¶ígth
 = 
	`gë64bô
(&
d©a
);

2833 
ssize
 = 
	`gë64bô
(&
d©a
);

2834 
§ólsize
 = 
	`gë64bô
(&
d©a
);

2835 
höodes
 = 
	`gë32bô
(&
d©a
);

2836 
hÀngth
 = 
	`gë64bô
(&
d©a
);

2837 
hsize
 = 
	`gë64bô
(&
d©a
);

2838 
hªÆsize
 = 
	`gë64bô
(&
d©a
);

2839 
dñ
=0;

2841 
dñ
=1;

2843 i‡(
Êags
 && 
ïå
->
£sd©a
->
roŸuid
!=0) {

2844 
°©us
 = 
ERROR_EACCES
;

2846 
°©us
 = 
	`fs_quŸac⁄åﬁ
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
dñ
,&
Êags
,&
söodes
,&
¶ígth
,&
ssize
,&
§ólsize
,&
höodes
,&
hÀngth
,&
hsize
,&
hªÆsize
,&
curöodes
,&
cuæígth
,&
cursize
,&
cuºólsize
);

2848 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_QUOTACONTROL
,(
°©us
!=
STATUS_OK
)?5:89);

2849 
	`put32bô
(&
±r
,
msgid
);

2850 i‡(
°©us
!=
STATUS_OK
) {

2851 
	`put8bô
(&
±r
,
°©us
);

2853 
	`put8bô
(&
±r
,
Êags
);

2854 
	`put32bô
(&
±r
,
söodes
);

2855 
	`put64bô
(&
±r
,
¶ígth
);

2856 
	`put64bô
(&
±r
,
ssize
);

2857 
	`put64bô
(&
±r
,
§ólsize
);

2858 
	`put32bô
(&
±r
,
höodes
);

2859 
	`put64bô
(&
±r
,
hÀngth
);

2860 
	`put64bô
(&
±r
,
hsize
);

2861 
	`put64bô
(&
±r
,
hªÆsize
);

2862 
	`put32bô
(&
±r
,
curöodes
);

2863 
	`put64bô
(&
±r
,
cuæígth
);

2864 
	`put64bô
(&
±r
,
cursize
);

2865 
	`put64bô
(&
±r
,
cuºólsize
);

2867 
	}
}

2897 
	$m©o˛£rv_fu£_gëdú°©s_ﬁd
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2898 
uöt32_t
 
öode
,
öodes
,
fûes
,
dús
,
chunks
;

2899 
uöt64_t
 
Àng
,
size
,
rsize
;

2900 
uöt32_t
 
msgid
;

2901 
uöt8_t
 *
±r
;

2902 
uöt8_t
 
°©us
;

2903 i‡(
Àngth
!=8) {

2904 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETDIRSTATS - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

2905 
ïå
->
mode
 = 
KILL
;

2908 
msgid
 = 
	`gë32bô
(&
d©a
);

2909 
öode
 = 
	`gë32bô
(&
d©a
);

2910 
°©us
 = 
	`fs_gë_dú_°©s
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,&
öodes
,&
dús
,&
fûes
,&
chunks
,&
Àng
,&
size
,&
rsize
);

2911 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETDIRSTATS
,(
°©us
!=
STATUS_OK
)?5:60);

2912 
	`put32bô
(&
±r
,
msgid
);

2913 i‡(
°©us
!=
STATUS_OK
) {

2914 
	`put8bô
(&
±r
,
°©us
);

2916 
	`put32bô
(&
±r
,
öodes
);

2917 
	`put32bô
(&
±r
,
dús
);

2918 
	`put32bô
(&
±r
,
fûes
);

2919 
	`put32bô
(&
±r
,0);

2920 
	`put32bô
(&
±r
,0);

2921 
	`put32bô
(&
±r
,
chunks
);

2922 
	`put32bô
(&
±r
,0);

2923 
	`put32bô
(&
±r
,0);

2924 
	`put64bô
(&
±r
,
Àng
);

2925 
	`put64bô
(&
±r
,
size
);

2926 
	`put64bô
(&
±r
,
rsize
);

2928 
	}
}

2930 
	$m©o˛£rv_fu£_gëdú°©s
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2931 
uöt32_t
 
öode
,
öodes
,
fûes
,
dús
,
chunks
;

2932 
uöt64_t
 
Àng
,
size
,
rsize
;

2933 
uöt32_t
 
msgid
;

2934 
uöt8_t
 *
±r
;

2935 
uöt8_t
 
°©us
;

2936 i‡(
Àngth
!=8) {

2937 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETDIRSTATS - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

2938 
ïå
->
mode
 = 
KILL
;

2941 
msgid
 = 
	`gë32bô
(&
d©a
);

2942 
öode
 = 
	`gë32bô
(&
d©a
);

2943 
°©us
 = 
	`fs_gë_dú_°©s
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,&
öodes
,&
dús
,&
fûes
,&
chunks
,&
Àng
,&
size
,&
rsize
);

2944 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETDIRSTATS
,(
°©us
!=
STATUS_OK
)?5:44);

2945 
	`put32bô
(&
±r
,
msgid
);

2946 i‡(
°©us
!=
STATUS_OK
) {

2947 
	`put8bô
(&
±r
,
°©us
);

2949 
	`put32bô
(&
±r
,
öodes
);

2950 
	`put32bô
(&
±r
,
dús
);

2951 
	`put32bô
(&
±r
,
fûes
);

2952 
	`put32bô
(&
±r
,
chunks
);

2953 
	`put64bô
(&
±r
,
Àng
);

2954 
	`put64bô
(&
±r
,
size
);

2955 
	`put64bô
(&
±r
,
rsize
);

2957 
	}
}

2959 
	$m©o˛£rv_fu£_gëåash
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2960 
uöt32_t
 
msgid
;

2961 
uöt8_t
 *
±r
;

2962 
uöt8_t
 
°©us
;

2963 
uöt32_t
 
dÀng
;

2964 i‡(
Àngth
!=4) {

2965 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETTRASH - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

2966 
ïå
->
mode
 = 
KILL
;

2969 
msgid
 = 
	`gë32bô
(&
d©a
);

2970 
°©us
 = 
	`fs_ªadåash_size
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,&
dÀng
);

2971 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETTRASH
,(
°©us
!=
STATUS_OK
)?5:(4+
dÀng
));

2972 
	`put32bô
(&
±r
,
msgid
);

2973 i‡(
°©us
!=
STATUS_OK
) {

2974 
	`put8bô
(&
±r
,
°©us
);

2976 
	`fs_ªadåash_d©a
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
±r
);

2978 
	}
}

2980 
	$m©o˛£rv_fu£_gëdëached©å
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

2981 
uöt32_t
 
öode
;

2982 
uöt8_t
 
©å
[35];

2983 
uöt32_t
 
msgid
;

2984 
uöt8_t
 
dty≥
;

2985 
uöt8_t
 *
±r
;

2986 
uöt8_t
 
°©us
;

2987 i‡(
Àngth
<8 ||Üength>9) {

2988 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETDETACHEDATTR - wr⁄g sizê(%"
PRIu32
"/8,9)",
Àngth
);

2989 
ïå
->
mode
 = 
KILL
;

2992 
msgid
 = 
	`gë32bô
(&
d©a
);

2993 
öode
 = 
	`gë32bô
(&
d©a
);

2994 i‡(
Àngth
==9) {

2995 
dty≥
 = 
	`gë8bô
(&
d©a
);

2997 
dty≥
 = 
DTYPE_UNKNOWN
;

2999 
°©us
 = 
	`fs_gëdëached©å
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
©å
,
dty≥
);

3000 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETDETACHEDATTR
,(
°©us
!=
STATUS_OK
)?5:39);

3001 
	`put32bô
(&
±r
,
msgid
);

3002 i‡(
°©us
!=
STATUS_OK
) {

3003 
	`put8bô
(&
±r
,
°©us
);

3005 
	`mem˝y
(
±r
,
©å
,35);

3007 
	}
}

3009 
	$m©o˛£rv_fu£_gëåash∑th
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

3010 
uöt32_t
 
öode
;

3011 
uöt32_t
 
∂íg
;

3012 
uöt8_t
 *
∑th
;

3013 
uöt32_t
 
msgid
;

3014 
uöt8_t
 *
±r
;

3015 
uöt8_t
 
°©us
;

3016 i‡(
Àngth
!=8) {

3017 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETTRASHPATH - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

3018 
ïå
->
mode
 = 
KILL
;

3021 
msgid
 = 
	`gë32bô
(&
d©a
);

3022 
öode
 = 
	`gë32bô
(&
d©a
);

3023 
°©us
 = 
	`fs_gëåash∑th
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,&
∂íg
,&
∑th
);

3024 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETTRASHPATH
,(
°©us
!=
STATUS_OK
)?5:8+
∂íg
+1);

3025 
	`put32bô
(&
±r
,
msgid
);

3026 i‡(
°©us
!=
STATUS_OK
) {

3027 
	`put8bô
(&
±r
,
°©us
);

3029 
	`put32bô
(&
±r
,
∂íg
+1);

3030 i‡(
∂íg
>0) {

3031 
	`mem˝y
(
±r
,
∑th
,
∂íg
);

3033 
±r
[
∂íg
]=0;

3035 
	}
}

3037 
	$m©o˛£rv_fu£_£âøsh∑th
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

3038 
uöt32_t
 
öode
;

3039 c⁄° 
uöt8_t
 *
∑th
;

3040 
uöt32_t
 
∂íg
;

3041 
uöt32_t
 
msgid
;

3042 
uöt8_t
 
°©us
;

3043 
uöt8_t
 *
±r
;

3044 i‡(
Àngth
<12) {

3045 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETTRASHPATH - wr⁄g sizê(%"
PRIu32
"/>=12)",
Àngth
);

3046 
ïå
->
mode
 = 
KILL
;

3049 
msgid
 = 
	`gë32bô
(&
d©a
);

3050 
öode
 = 
	`gë32bô
(&
d©a
);

3051 
∂íg
 = 
	`gë32bô
(&
d©a
);

3052 i‡(
Àngth
!=12+
∂íg
) {

3053 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_SETTRASHPATH - wr⁄g sizê(%"
PRIu32
"/%"PRIu32")",
Àngth
,12+
∂íg
);

3054 
ïå
->
mode
 = 
KILL
;

3057 
∑th
 = 
d©a
;

3058 
d©a
 +
∂íg
;

3059 
∂íg
>0 && 
∑th
[pleng-1]==0) {

3060 
∂íg
--;

3062 
°©us
 = 
	`fs_£âøsh∑th
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
,
∂íg
,
∑th
);

3063 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_SETTRASHPATH
,5);

3064 
	`put32bô
(&
±r
,
msgid
);

3065 
	`put8bô
(&
±r
,
°©us
);

3066 
	}
}

3068 
	$m©o˛£rv_fu£_undñ
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

3069 
uöt32_t
 
öode
;

3070 
uöt32_t
 
msgid
;

3071 
uöt8_t
 
°©us
;

3072 
uöt8_t
 *
±r
;

3073 i‡(
Àngth
!=8) {

3074 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_UNDEL - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

3075 
ïå
->
mode
 = 
KILL
;

3078 
msgid
 = 
	`gë32bô
(&
d©a
);

3079 
öode
 = 
	`gë32bô
(&
d©a
);

3080 
°©us
 = 
	`fs_undñ
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
);

3081 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_UNDEL
,5);

3082 
	`put32bô
(&
±r
,
msgid
);

3083 
	`put8bô
(&
±r
,
°©us
);

3084 
	}
}

3086 
	$m©o˛£rv_fu£_purge
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

3087 
uöt32_t
 
öode
;

3088 
uöt32_t
 
msgid
;

3089 
uöt8_t
 *
±r
;

3090 
uöt8_t
 
°©us
;

3091 i‡(
Àngth
!=8) {

3092 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_PURGE - wr⁄g sizê(%"
PRIu32
"/8)",
Àngth
);

3093 
ïå
->
mode
 = 
KILL
;

3096 
msgid
 = 
	`gë32bô
(&
d©a
);

3097 
öode
 = 
	`gë32bô
(&
d©a
);

3098 
°©us
 = 
	`fs_purge
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
öode
);

3099 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_PURGE
,5);

3100 
	`put32bô
(&
±r
,
msgid
);

3101 
	`put8bô
(&
±r
,
°©us
);

3102 
	}
}

3105 
	$m©o˛£rv_fu£_gëª£rved
(
m©o˛£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

3106 
uöt32_t
 
msgid
;

3107 
uöt8_t
 *
±r
;

3108 
uöt8_t
 
°©us
;

3109 
uöt32_t
 
dÀng
;

3110 i‡(
Àngth
!=4) {

3111 
	`sy¶og
(
LOG_NOTICE
,"CLTOMA_FUSE_GETRESERVED - wr⁄g sizê(%"
PRIu32
"/4)",
Àngth
);

3112 
ïå
->
mode
 = 
KILL
;

3115 
msgid
 = 
	`gë32bô
(&
d©a
);

3116 
°©us
 = 
	`fs_ªadª£rved_size
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,&
dÀng
);

3117 
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
MATOCL_FUSE_GETRESERVED
,(
°©us
!=
STATUS_OK
)?5:(4+
dÀng
));

3118 
	`put32bô
(&
±r
,
msgid
);

3119 i‡(
°©us
!=
STATUS_OK
) {

3120 
	`put8bô
(&
±r
,
°©us
);

3122 
	`fs_ªadª£rved_d©a
(
ïå
->
£sd©a
->
roŸöode
,ïå->£sd©a->
£sÊags
,
±r
);

3124 
	}
}

3128 
	$m©o˛_£ssi⁄_timedout
(
£ssi⁄
 *
£sd©a
) {

3129 
fûñi°
 *
Ê
,*
aÊ
;

3130 
Ê
=
£sd©a
->
›íedfûes
;

3131 
Ê
) {

3132 
aÊ
 = 
Ê
;

3133 
Ê
=Ê->
√xt
;

3134 
	`fs_ªÀa£
(
aÊ
->
öode
,
£sd©a
->
£ssi⁄id
);

3135 
	`‰ì
(
aÊ
);

3137 
£sd©a
->
›íedfûes
=
NULL
;

3138 i‡(
£sd©a
->
öfo
) {

3139 
	`‰ì
(
£sd©a
->
öfo
);

3141 
	}
}

3143 
	$m©o˛_£ssi⁄_check
() {

3144 
£ssi⁄
 **
£sd©a
,*
a£sd©a
;

3145 
uöt32_t
 
now
;

3147 
now
 = 
	`maö_time
();

3148 
£sd©a
 = &(
£ssi⁄shód
);

3149 (
a£sd©a
=*
£sd©a
)) {

3151 i‡(
a£sd©a
->
nsocks
==0 && (◊£sd©a->
√w£ssi⁄
>1 &&á£sd©a->
disc⁄√˘ed
<
now
Ë|| (a£sd©a->√w£ssi⁄==1 &&á£sd©a->disc⁄√˘ed+
NEWSESSION_TIMEOUT
<nowË|| (a£sd©a->√w£ssi⁄==0 &&á£sd©a->disc⁄√˘ed+
OLDSESSION_TIMEOUT
<now))) {

3153 
	`m©o˛_£ssi⁄_timedout
(
a£sd©a
);

3154 *
£sd©a
 = 
a£sd©a
->
√xt
;

3155 
	`‰ì
(
a£sd©a
);

3157 
£sd©a
 = &(
a£sd©a
->
√xt
);

3161 
	}
}

3163 
	$m©o˛_£ssi⁄_°©smove
() {

3164 
£ssi⁄
 *
£sd©a
;

3165 
£sd©a
 = 
£ssi⁄shód
 ; sesd©®; sesd©a=£sd©a->
√xt
) {

3166 
	`mem˝y
(
£sd©a
->
œ°hour›°©s
,£sd©a->
cuºít›°©s
,4*
SESSION_STATS
);

3167 
	`mem£t
(
£sd©a
->
cuºít›°©s
,0,4*
SESSION_STATS
);

3169 
	`m©o˛£rv_°‹e_£ssi⁄s
();

3170 
	}
}

3172 
	$m©o˛_bef‹edisc⁄√˘
(
m©o˛£rvíåy
 *
ïå
) {

3173 
chunkli°
 *
˛
,*
a˛
;

3175 
˛
=
ïå
->
chunkdñayed›s
;

3176 
˛
) {

3177 
a˛
 = 
˛
;

3178 
˛
=˛->
√xt
;

3179 i‡(
a˛
->
ty≥
 =
FUSE_TRUNCATE
) {

3180 
	`fs_íd_£éígth
(
a˛
->
chunkid
);

3182 
	`‰ì
(
a˛
);

3184 
ïå
->
chunkdñayed›s
=
NULL
;

3185 i‡(
ïå
->
£sd©a
) {

3186 i‡(
ïå
->
£sd©a
->
nsocks
>0) {

3187 
ïå
->
£sd©a
->
nsocks
--;

3189 i‡(
ïå
->
£sd©a
->
nsocks
==0) {

3190 
ïå
->
£sd©a
->
disc⁄√˘ed
 = 
	`maö_time
();

3196 
	}
}

3198 
	$m©o˛£rv_gŸ∑ckë
(
m©o˛£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

3199 i‡(
ty≥
==
ANTOAN_NOP
) {

3202 i‡(
ïå
->
ªgi°îed
==0) {

3203 
ty≥
) {

3204 
CLTOMA_FUSE_REGISTER
:

3205 
	`m©o˛£rv_fu£_ªgi°î
(
ïå
,
d©a
,
Àngth
);

3207 
CLTOMA_CSERV_LIST
:

3208 
	`m©o˛£rv_c£rv_li°
(
ïå
,
d©a
,
Àngth
);

3210 
CLTOMA_SESSION_LIST
:

3211 
	`m©o˛£rv_£ssi⁄_li°
(
ïå
,
d©a
,
Àngth
);

3213 
CLTOAN_CHART
:

3214 
	`m©o˛£rv_ch¨t
(
ïå
,
d©a
,
Àngth
);

3216 
CLTOAN_CHART_DATA
:

3217 
	`m©o˛£rv_ch¨t_d©a
(
ïå
,
d©a
,
Àngth
);

3219 
CLTOMA_INFO
:

3220 
	`m©o˛£rv_öfo
(
ïå
,
d©a
,
Àngth
);

3222 
CLTOMA_FSTEST_INFO
:

3223 
	`m©o˛£rv_f°e°_öfo
(
ïå
,
d©a
,
Àngth
);

3225 
CLTOMA_CHUNKSTEST_INFO
:

3226 
	`m©o˛£rv_chunk°e°_öfo
(
ïå
,
d©a
,
Àngth
);

3228 
CLTOMA_CHUNKS_MATRIX
:

3229 
	`m©o˛£rv_chunks_m©rix
(
ïå
,
d©a
,
Àngth
);

3231 
CLTOMA_QUOTA_INFO
:

3232 
	`m©o˛£rv_quŸa_öfo
(
ïå
,
d©a
,
Àngth
);

3234 
CLTOMA_EXPORTS_INFO
:

3235 
	`m©o˛£rv_exp‹ts_öfo
(
ïå
,
d©a
,
Àngth
);

3237 
CLTOMA_MLOG_LIST
:

3238 
	`m©o˛£rv_mlog_li°
(
ïå
,
d©a
,
Àngth
);

3241 
	`sy¶og
(
LOG_NOTICE
,"m©o˛: gŸ unknow¿mesßgê‰om uƒegi°îed (ty≥:%"
PRIu32
")",
ty≥
);

3242 
ïå
->
mode
=
KILL
;

3244 } i‡(
ïå
->
ªgi°îed
<100) {

3245 i‡(
ïå
->
£sd©a
==
NULL
) {

3246 
	`sy¶og
(
LOG_ERR
,"registered connection without sesdata !!!");

3247 
ïå
->
mode
=
KILL
;

3250 
ty≥
) {

3251 
CLTOMA_FUSE_REGISTER
:

3252 
	`m©o˛£rv_fu£_ªgi°î
(
ïå
,
d©a
,
Àngth
);

3254 
CLTOMA_FUSE_RESERVED_INODES
:

3255 
	`m©o˛£rv_fu£_ª£rved_öodes
(
ïå
,
d©a
,
Àngth
);

3257 
CLTOMA_FUSE_STATFS
:

3258 
	`m©o˛£rv_fu£_°©fs
(
ïå
,
d©a
,
Àngth
);

3260 
CLTOMA_FUSE_ACCESS
:

3261 
	`m©o˛£rv_fu£_ac˚ss
(
ïå
,
d©a
,
Àngth
);

3263 
CLTOMA_FUSE_LOOKUP
:

3264 
	`m©o˛£rv_fu£_lookup
(
ïå
,
d©a
,
Àngth
);

3266 
CLTOMA_FUSE_GETATTR
:

3267 
	`m©o˛£rv_fu£_gë©å
(
ïå
,
d©a
,
Àngth
);

3269 
CLTOMA_FUSE_SETATTR
:

3270 
	`m©o˛£rv_fu£_£èâr
(
ïå
,
d©a
,
Àngth
);

3272 
CLTOMA_FUSE_READLINK
:

3273 
	`m©o˛£rv_fu£_ªadlök
(
ïå
,
d©a
,
Àngth
);

3275 
CLTOMA_FUSE_SYMLINK
:

3276 
	`m©o˛£rv_fu£_symlök
(
ïå
,
d©a
,
Àngth
);

3278 
CLTOMA_FUSE_MKNOD
:

3279 
	`m©o˛£rv_fu£_mknod
(
ïå
,
d©a
,
Àngth
);

3281 
CLTOMA_FUSE_MKDIR
:

3282 
	`m©o˛£rv_fu£_mkdú
(
ïå
,
d©a
,
Àngth
);

3284 
CLTOMA_FUSE_UNLINK
:

3285 
	`m©o˛£rv_fu£_u∆ök
(
ïå
,
d©a
,
Àngth
);

3287 
CLTOMA_FUSE_RMDIR
:

3288 
	`m©o˛£rv_fu£_rmdú
(
ïå
,
d©a
,
Àngth
);

3290 
CLTOMA_FUSE_RENAME
:

3291 
	`m©o˛£rv_fu£_ª«me
(
ïå
,
d©a
,
Àngth
);

3293 
CLTOMA_FUSE_LINK
:

3294 
	`m©o˛£rv_fu£_lök
(
ïå
,
d©a
,
Àngth
);

3296 
CLTOMA_FUSE_GETDIR
:

3297 
	`m©o˛£rv_fu£_gëdú
(
ïå
,
d©a
,
Àngth
);

3304 
CLTOMA_FUSE_OPEN
:

3305 
	`m©o˛£rv_fu£_›í
(
ïå
,
d©a
,
Àngth
);

3307 
CLTOMA_FUSE_READ_CHUNK
:

3308 
	`m©o˛£rv_fu£_ªad_chunk
(
ïå
,
d©a
,
Àngth
);

3310 
CLTOMA_FUSE_WRITE_CHUNK
:

3311 
	`m©o˛£rv_fu£_wrôe_chunk
(
ïå
,
d©a
,
Àngth
);

3313 
CLTOMA_FUSE_WRITE_CHUNK_END
:

3314 
	`m©o˛£rv_fu£_wrôe_chunk_íd
(
ïå
,
d©a
,
Àngth
);

3317 
CLTOMA_FUSE_GETTRASH
:

3318 
	`m©o˛£rv_fu£_gëåash
(
ïå
,
d©a
,
Àngth
);

3320 
CLTOMA_FUSE_GETDETACHEDATTR
:

3321 
	`m©o˛£rv_fu£_gëdëached©å
(
ïå
,
d©a
,
Àngth
);

3323 
CLTOMA_FUSE_GETTRASHPATH
:

3324 
	`m©o˛£rv_fu£_gëåash∑th
(
ïå
,
d©a
,
Àngth
);

3326 
CLTOMA_FUSE_SETTRASHPATH
:

3327 
	`m©o˛£rv_fu£_£âøsh∑th
(
ïå
,
d©a
,
Àngth
);

3329 
CLTOMA_FUSE_UNDEL
:

3330 
	`m©o˛£rv_fu£_undñ
(
ïå
,
d©a
,
Àngth
);

3332 
CLTOMA_FUSE_PURGE
:

3333 
	`m©o˛£rv_fu£_purge
(
ïå
,
d©a
,
Àngth
);

3335 
CLTOMA_FUSE_GETRESERVED
:

3336 
	`m©o˛£rv_fu£_gëª£rved
(
ïå
,
d©a
,
Àngth
);

3338 
CLTOMA_FUSE_CHECK
:

3339 
	`m©o˛£rv_fu£_check
(
ïå
,
d©a
,
Àngth
);

3341 
CLTOMA_FUSE_GETTRASHTIME
:

3342 
	`m©o˛£rv_fu£_gëåashtime
(
ïå
,
d©a
,
Àngth
);

3344 
CLTOMA_FUSE_SETTRASHTIME
:

3345 
	`m©o˛£rv_fu£_£âøshtime
(
ïå
,
d©a
,
Àngth
);

3347 
CLTOMA_FUSE_GETGOAL
:

3348 
	`m©o˛£rv_fu£_gëgﬂl
(
ïå
,
d©a
,
Àngth
);

3350 
CLTOMA_FUSE_SETGOAL
:

3351 
	`m©o˛£rv_fu£_£tgﬂl
(
ïå
,
d©a
,
Àngth
);

3353 
CLTOMA_FUSE_APPEND
:

3354 
	`m©o˛£rv_fu£_≠≥nd
(
ïå
,
d©a
,
Àngth
);

3356 
CLTOMA_FUSE_GETDIRSTATS
:

3357 
	`m©o˛£rv_fu£_gëdú°©s_ﬁd
(
ïå
,
d©a
,
Àngth
);

3359 
CLTOMA_FUSE_TRUNCATE
:

3360 
	`m©o˛£rv_fu£_åunˇã
(
ïå
,
d©a
,
Àngth
);

3362 
CLTOMA_FUSE_REPAIR
:

3363 
	`m©o˛£rv_fu£_ª∑ú
(
ïå
,
d©a
,
Àngth
);

3365 
CLTOMA_FUSE_SNAPSHOT
:

3366 
	`m©o˛£rv_fu£_¢≠shŸ
(
ïå
,
d©a
,
Àngth
);

3368 
CLTOMA_FUSE_GETEATTR
:

3369 
	`m©o˛£rv_fu£_gëóâr
(
ïå
,
d©a
,
Àngth
);

3371 
CLTOMA_FUSE_SETEATTR
:

3372 
	`m©o˛£rv_fu£_£ã©å
(
ïå
,
d©a
,
Àngth
);

3375 
CLTOMA_FUSE_QUOTACONTROL
:

3376 
	`m©o˛£rv_fu£_quŸac⁄åﬁ
(
ïå
,
d©a
,
Àngth
);

3379 
CLTOMA_CSERV_LIST
:

3380 
	`m©o˛£rv_c£rv_li°
(
ïå
,
d©a
,
Àngth
);

3382 
CLTOMA_SESSION_LIST
:

3383 
	`m©o˛£rv_£ssi⁄_li°
(
ïå
,
d©a
,
Àngth
);

3385 
CLTOAN_CHART
:

3386 
	`m©o˛£rv_ch¨t
(
ïå
,
d©a
,
Àngth
);

3388 
CLTOAN_CHART_DATA
:

3389 
	`m©o˛£rv_ch¨t_d©a
(
ïå
,
d©a
,
Àngth
);

3391 
CLTOMA_INFO
:

3392 
	`m©o˛£rv_öfo
(
ïå
,
d©a
,
Àngth
);

3394 
CLTOMA_FSTEST_INFO
:

3395 
	`m©o˛£rv_f°e°_öfo
(
ïå
,
d©a
,
Àngth
);

3397 
CLTOMA_CHUNKSTEST_INFO
:

3398 
	`m©o˛£rv_chunk°e°_öfo
(
ïå
,
d©a
,
Àngth
);

3400 
CLTOMA_CHUNKS_MATRIX
:

3401 
	`m©o˛£rv_chunks_m©rix
(
ïå
,
d©a
,
Àngth
);

3403 
CLTOMA_QUOTA_INFO
:

3404 
	`m©o˛£rv_quŸa_öfo
(
ïå
,
d©a
,
Àngth
);

3406 
CLTOMA_EXPORTS_INFO
:

3407 
	`m©o˛£rv_exp‹ts_öfo
(
ïå
,
d©a
,
Àngth
);

3409 
CLTOMA_MLOG_LIST
:

3410 
	`m©o˛£rv_mlog_li°
(
ïå
,
d©a
,
Àngth
);

3413 
	`sy¶og
(
LOG_NOTICE
,"m©o˛: gŸ unknow¿mesßgê‰om mfsmou¡ (ty≥:%"
PRIu32
")",
ty≥
);

3414 
ïå
->
mode
=
KILL
;

3417 i‡(
ïå
->
£sd©a
==
NULL
) {

3418 
	`sy¶og
(
LOG_ERR
,"registered connection (tools) without sesdata !!!");

3419 
ïå
->
mode
=
KILL
;

3422 
ty≥
) {

3424 
CLTOMA_FUSE_REGISTER
:

3425 
	`m©o˛£rv_fu£_ªgi°î
(
ïå
,
d©a
,
Àngth
);

3427 
CLTOMA_FUSE_READ_CHUNK
:

3428 
	`m©o˛£rv_fu£_ªad_chunk
(
ïå
,
d©a
,
Àngth
);

3430 
CLTOMA_FUSE_CHECK
:

3431 
	`m©o˛£rv_fu£_check
(
ïå
,
d©a
,
Àngth
);

3433 
CLTOMA_FUSE_GETTRASHTIME
:

3434 
	`m©o˛£rv_fu£_gëåashtime
(
ïå
,
d©a
,
Àngth
);

3436 
CLTOMA_FUSE_SETTRASHTIME
:

3437 
	`m©o˛£rv_fu£_£âøshtime
(
ïå
,
d©a
,
Àngth
);

3439 
CLTOMA_FUSE_GETGOAL
:

3440 
	`m©o˛£rv_fu£_gëgﬂl
(
ïå
,
d©a
,
Àngth
);

3442 
CLTOMA_FUSE_SETGOAL
:

3443 
	`m©o˛£rv_fu£_£tgﬂl
(
ïå
,
d©a
,
Àngth
);

3445 
CLTOMA_FUSE_APPEND
:

3446 
	`m©o˛£rv_fu£_≠≥nd
(
ïå
,
d©a
,
Àngth
);

3448 
CLTOMA_FUSE_GETDIRSTATS
:

3449 
	`m©o˛£rv_fu£_gëdú°©s
(
ïå
,
d©a
,
Àngth
);

3451 
CLTOMA_FUSE_TRUNCATE
:

3452 
	`m©o˛£rv_fu£_åunˇã
(
ïå
,
d©a
,
Àngth
);

3454 
CLTOMA_FUSE_REPAIR
:

3455 
	`m©o˛£rv_fu£_ª∑ú
(
ïå
,
d©a
,
Àngth
);

3457 
CLTOMA_FUSE_SNAPSHOT
:

3458 
	`m©o˛£rv_fu£_¢≠shŸ
(
ïå
,
d©a
,
Àngth
);

3460 
CLTOMA_FUSE_GETEATTR
:

3461 
	`m©o˛£rv_fu£_gëóâr
(
ïå
,
d©a
,
Àngth
);

3463 
CLTOMA_FUSE_SETEATTR
:

3464 
	`m©o˛£rv_fu£_£ã©å
(
ïå
,
d©a
,
Àngth
);

3467 
CLTOMA_FUSE_QUOTACONTROL
:

3468 
	`m©o˛£rv_fu£_quŸac⁄åﬁ
(
ïå
,
d©a
,
Àngth
);

3472 
	`sy¶og
(
LOG_NOTICE
,"m©o˛: gŸ unknow¿mesßgê‰om mf°oﬁ†—y≥:%"
PRIu32
")",
ty≥
);

3473 
ïå
->
mode
=
KILL
;

3476 
	}
}

3478 
	$m©o˛£rv_ãrm
() {

3479 
m©o˛£rvíåy
 *
ïå
,*
ïån
;

3480 
∑ckë°ru˘
 *
µå
,*
µån
;

3481 
chunkli°
 *
˛
,*
˛n
;

3482 
£ssi⁄
 *
ss
,*
s¢
;

3483 
fûñi°
 *
of
,*
o‚
;

3485 
	`sy¶og
(
LOG_NOTICE
,"m©o˛: closög %s:%s",
Li°íHo°
,
Li°íP‹t
);

3486 
	`t˝˛o£
(
lsock
);

3488 
ïå
 = 
m©o˛£rvhód
 ;É±∏;É±∏
ïån
) {

3489 
ïån
 = 
ïå
->
√xt
;

3490 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

3491 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

3493 
µå
 = 
ïå
->
ouçuthód
 ;Ö±∏;Ö±∏
µån
) {

3494 
µån
 = 
µå
->
√xt
;

3495 i‡(
µå
->
∑ckë
) {

3496 
	`‰ì
(
µå
->
∑ckë
);

3498 
	`‰ì
(
µå
);

3500 
˛
 = 
ïå
->
chunkdñayed›s
 ; c»; c»
˛n
) {

3501 
˛n
 = 
˛
->
√xt
;

3502 
	`‰ì
(
˛
);

3504 
	`‰ì
(
ïå
);

3506 
ss
 = 
£ssi⁄shód
 ; s†; s†
s¢
) {

3507 
s¢
 = 
ss
->
√xt
;

3508 
of
 = 
ss
->
›íedfûes
 ; o‡; o‡
o‚
) {

3509 
o‚
 = 
of
->
√xt
;

3510 
	`‰ì
(
of
);

3512 i‡(
ss
->
öfo
) {

3513 
	`‰ì
(
ss
->
öfo
);

3515 
	`‰ì
(
ss
);

3518 
	`‰ì
(
Li°íHo°
);

3519 
	`‰ì
(
Li°íP‹t
);

3520 
	}
}

3522 
	$m©o˛£rv_ªad
(
m©o˛£rvíåy
 *
ïå
) {

3523 
öt32_t
 
i
;

3524 
uöt32_t
 
ty≥
,
size
;

3525 c⁄° 
uöt8_t
 *
±r
;

3527 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

3528 i‡(
i
==0) {

3529 i‡(
ïå
->
ªgi°îed
>0 &&Éptr->registered<100) {

3530 
	`sy¶og
(
LOG_NOTICE
,"c⁄√˘i⁄ wôh clõ¡(ù:%u.%u.%u.%uËha†bì¿˛o£d byÖìr",(
ïå
->
≥îù
>>24)&0xFF,(eptr->peerip>>16)&0xFF,(eptr->peerip>>8)&0xFF,eptr->peerip&0xFF);

3532 
ïå
->
mode
 = 
KILL
;

3535 i‡(
i
<0) {

3536 i‡(
î∫o
!=
EAGAIN
) {

3537 #ifde‡
ECONNRESET


3538 i‡(
î∫o
!=
ECONNRESET
 || 
ïå
->
ªgi°îed
<100) {

3540 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"m©o˛: (ù:%u.%u.%u.%uËªadÉº‹",(
ïå
->
≥îù
>>24)&0xFF,(eptr->peerip>>16)&0xFF,(eptr->peerip>>8)&0xFF,eptr->peerip&0xFF);

3541 #ifde‡
ECONNRESET


3544 
ïå
->
mode
 = 
KILL
;

3548 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

3549 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

3550 
°©s_brcvd
+=
i
;

3552 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

3556 i‡(
ïå
->
mode
==
HEADER
) {

3557 
±r
 = 
ïå
->
hdrbuff
+4;

3558 
size
 = 
	`gë32bô
(&
±r
);

3560 i‡(
size
>0) {

3561 i‡(
size
>
MaxPackëSize
) {

3562 
	`sy¶og
(
LOG_WARNING
,"m©o˛:ÖackëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

3563 
ïå
->
mode
 = 
KILL
;

3566 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

3567 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

3568 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

3569 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

3570 
ïå
->
mode
 = 
DATA
;

3573 
ïå
->
mode
 = 
DATA
;

3576 i‡(
ïå
->
mode
==
DATA
) {

3577 
±r
 = 
ïå
->
hdrbuff
;

3578 
ty≥
 = 
	`gë32bô
(&
±r
);

3579 
size
 = 
	`gë32bô
(&
±r
);

3581 
ïå
->
mode
=
HEADER
;

3582 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

3583 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

3585 
	`m©o˛£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

3586 
°©s_¥cvd
++;

3588 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

3589 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

3591 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

3594 
	}
}

3596 
	$m©o˛£rv_wrôe
(
m©o˛£rvíåy
 *
ïå
) {

3597 
∑ckë°ru˘
 *
∑ck
;

3598 
öt32_t
 
i
;

3600 
∑ck
 = 
ïå
->
ouçuthód
;

3601 i‡(
∑ck
==
NULL
) {

3604 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

3605 i‡(
i
<0) {

3606 i‡(
î∫o
!=
EAGAIN
) {

3607 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"m©o˛: (ù:%u.%u.%u.%uËwrôêîr‹",(
ïå
->
≥îù
>>24)&0xFF,(eptr->peerip>>16)&0xFF,(eptr->peerip>>8)&0xFF,eptr->peerip&0xFF);

3608 
ïå
->
mode
 = 
KILL
;

3612 
∑ck
->
°¨çå
+=
i
;

3613 
∑ck
->
byã¶e·
-=
i
;

3614 
°©s_b£¡
+=
i
;

3615 i‡(
∑ck
->
byã¶e·
>0) {

3618 
	`‰ì
(
∑ck
->
∑ckë
);

3619 
°©s_p£¡
++;

3620 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

3621 i‡(
ïå
->
ouçuthód
==
NULL
) {

3622 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

3624 
	`‰ì
(
∑ck
);

3626 
	}
}

3628 
	$m©o˛£rv_w™ãxô
() {

3629 
exôög
=1;

3630 
	}
}

3632 
	$m©o˛£rv_ˇ√xô
() {

3633 
m©o˛£rvíåy
 *
ïå
;

3634 
ïå
=
m©o˛£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

3635 i‡(
ïå
->
ouçuthód
!=
NULL
) {

3638 i‡(
ïå
->
chunkdñayed›s
!=
NULL
) {

3643 
	}
}

3645 
	$m©o˛£rv_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

3646 
uöt32_t
 
pos
 = *
ndesc
;

3647 
m©o˛£rvíåy
 *
ïå
;

3649 i‡(
exôög
==0) {

3650 
pdesc
[
pos
].
fd
 = 
lsock
;

3651 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

3652 
lsockpdes˝os
 = 
pos
;

3653 
pos
++;

3657 
lsockpdes˝os
 = -1;

3660 
ïå
=
m©o˛£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

3661 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

3662 
pdesc
[
pos
].
evíts
 = 0;

3663 
ïå
->
pdes˝os
 = 
pos
;

3665 i‡(
exôög
==0) {

3666 
pdesc
[
pos
].
evíts
 |
POLLIN
;

3672 i‡(
ïå
->
ouçuthód
!=
NULL
) {

3673 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

3679 
pos
++;

3681 *
ndesc
 = 
pos
;

3683 
	}
}

3686 
	$m©o˛£rv_£rve
(
pﬁlfd
 *
pdesc
) {

3687 
uöt32_t
 
now
=
	`maö_time
();

3688 
m©o˛£rvíåy
 *
ïå
,**
k±r
;

3689 
∑ckë°ru˘
 *
µå
,*
∑±r
;

3690 
ns
;

3692 i‡(
lsockpdes˝os
>=0 && (
pdesc
[lsockpdes˝os].
ªvíts
 & 
POLLIN
)) {

3694 
ns
=
	`t˝ac˚±
(
lsock
);

3695 i‡(
ns
<0) {

3696 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"matocl:ácceptÉrror");

3698 
	`t˝n⁄block
(
ns
);

3699 
	`t˝nodñay
(
ns
);

3700 
ïå
 = 
	`mÆloc
((
m©o˛£rvíåy
));

3701 
	`∑s£π
(
ïå
);

3702 
ïå
->
√xt
 = 
m©o˛£rvhód
;

3703 
m©o˛£rvhód
 = 
ïå
;

3704 
ïå
->
sock
 = 
ns
;

3705 
ïå
->
pdes˝os
 = -1;

3706 
	`t˝gë≥î
(
ns
,&(
ïå
->
≥îù
),
NULL
);

3707 
ïå
->
ªgi°îed
 = 0;

3711 
ïå
->
vîsi⁄
 = 0;

3712 
ïå
->
mode
 = 
HEADER
;

3713 
ïå
->
œ°ªad
 = 
now
;

3714 
ïå
->
œ°wrôe
 = 
now
;

3715 
ïå
->
öpuçackë
.
√xt
 = 
NULL
;

3716 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

3717 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

3718 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

3719 
ïå
->
ouçuthód
 = 
NULL
;

3720 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

3722 
ïå
->
chunkdñayed›s
 = 
NULL
;

3723 
ïå
->
£sd©a
 = 
NULL
;

3727 
	`mem£t
(
ïå
->
∑ssw‹d∫d
,0,32);

3733 
ïå
=
m©o˛£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

3734 i‡(
ïå
->
pdes˝os
>=0) {

3735 i‡(
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

3736 
ïå
->
mode
 = 
KILL
;

3738 i‡((
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & 
POLLIN
Ë&&É±r->
mode
!=
KILL
) {

3739 
ïå
->
œ°ªad
 = 
now
;

3740 
	`m©o˛£rv_ªad
(
ïå
);

3746 
ïå
=
m©o˛£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

3747 i‡(
ïå
->
œ°wrôe
+2<
now
 &&É±r->
ªgi°îed
<100 &&É±r->
ouçuthód
==
NULL
) {

3748 
uöt8_t
 *
±r
 = 
	`m©o˛£rv_¸óã∑ckë
(
ïå
,
ANTOAN_NOP
,4);

3749 *((
uöt32_t
*)
±r
) = 0;

3751 i‡(
ïå
->
pdes˝os
>=0) {

3761 i‡((((
pdesc
[
ïå
->
pdes˝os
].
evíts
 & 
POLLOUT
)==0 && (ïå->
ouçuthód
)Ë|| (pdesc[ïå->pdes˝os].
ªvíts
 & POLLOUT)Ë&&É±r->
mode
!=
KILL
) {

3762 
ïå
->
œ°wrôe
 = 
now
;

3763 
	`m©o˛£rv_wrôe
(
ïå
);

3766 i‡(
ïå
->
œ°ªad
+10<
now
 && 
exôög
==0) {

3767 
ïå
->
mode
 = 
KILL
;

3772 
k±r
 = &
m©o˛£rvhód
;

3773 (
ïå
=*
k±r
)) {

3774 i‡(
ïå
->
mode
 =
KILL
) {

3775 
	`m©o˛_bef‹edisc⁄√˘
(
ïå
);

3776 
	`t˝˛o£
(
ïå
->
sock
);

3777 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

3778 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

3780 
µå
 = 
ïå
->
ouçuthód
;

3781 
µå
) {

3782 i‡(
µå
->
∑ckë
) {

3783 
	`‰ì
(
µå
->
∑ckë
);

3785 
∑±r
 = 
µå
;

3786 
µå
 =Ö±r->
√xt
;

3787 
	`‰ì
(
∑±r
);

3789 *
k±r
 = 
ïå
->
√xt
;

3790 
	`‰ì
(
ïå
);

3792 
k±r
 = &(
ïå
->
√xt
);

3795 
	}
}

3797 
	$m©o˛£rv_°¨t_c⁄d_check
() {

3798 i‡(
°¨tög
) {

3801 i‡(
	`chunk_gë_missög_cou¡
()<100) {

3802 
°¨tög
=0;

3804 
°¨tög
--;

3807 
	}
}

3809 
	$m©o˛£rv_£ssi⁄söô
() {

3810 
	`Ârötf
(
°dîr
,"loading sessions ... ");

3811 
	`fÊush
(
°dîr
);

3812 
£ssi⁄shód
 = 
NULL
;

3813 
	`m©o˛£rv_lﬂd_£ssi⁄s
()) {

3815 
	`Ârötf
(
°dîr
,"fileÇot found\n");

3816 
	`Ârötf
(
°dîr
,"if it isÇot fresh installationÅhen you haveÅoÑestartálláctive mounts !!!\n");

3817 
	`m©o˛£rv_°‹e_£ssi⁄s
();

3820 
	`Ârötf
(
°dîr
,"ok\n");

3821 
	`Ârötf
(
°dîr
,"sessions file has beenÜoaded\n");

3824 
	`Ârötf
(
°dîr
,"error\n");

3825 
	`Ârötf
(
°dîr
,"dueÅo missing sessions you haveÅoÑestartálláctive mounts !!!\n");

3829 
	}
}

3831 
	$m©o˛£rv_√tw‹köô
() {

3832 i‡(
	`cfg_isdeföed
("MATOCL_LISTEN_HOST") || cfg_isdefined("MATOCL_LISTEN_PORT") || !(cfg_isdefined("MATOCU_LISTEN_HOST") || cfg_isdefined("MATOCU_LISTEN_HOST"))) {

3833 
Li°íHo°
 = 
	`cfg_gë°r
("MATOCL_LISTEN_HOST","*");

3834 
Li°íP‹t
 = 
	`cfg_gë°r
("MATOCL_LISTEN_PORT","9421");

3836 
	`Ârötf
(
°dîr
,"change MATOCU_LISTEN_* optionÇamesÅo MATOCL_LISTEN_* !!!\n");

3837 
Li°íHo°
 = 
	`cfg_gë°r
("MATOCU_LISTEN_HOST","*");

3838 
Li°íP‹t
 = 
	`cfg_gë°r
("MATOCU_LISTEN_PORT","9421");

3840 
Reje˘Old
 = 
	`cfg_gëuöt32
("REJECT_OLD_CLIENTS",0);

3842 
exôög
 = 0;

3843 
°¨tög
 = 12;

3844 
lsock
 = 
	`t˝sockë
();

3845 i‡(
lsock
<0) {

3846 
	`mfs_îæog
(
LOG_ERR
,"main master server module: can't create socket");

3849 
	`t˝n⁄block
(
lsock
);

3850 
	`t˝nodñay
(
lsock
);

3851 
	`t˝ªu£addr
(
lsock
);

3852 i‡(
	`t˝£èc˚±fûãr
(
lsock
)<0 && 
î∫o
!=
ENOTSUP
) {

3853 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"matocl: can't setáccept filter");

3855 i‡(
	`t˝°æi°í
(
lsock
,
Li°íHo°
,
Li°íP‹t
,100)<0) {

3856 
	`mfs_îæog
(
LOG_ERR
,"main master server module: can'tÜisten on socket");

3859 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"maö ma°î sîvî moduÀ:Üi°í o¿%s:%s",
Li°íHo°
,
Li°íP‹t
);

3861 
m©o˛£rvhód
 = 
NULL
;

3866 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,10,0,
m©o˛£rv_°¨t_c⁄d_check
);

3867 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,10,0,
m©o˛_£ssi⁄_check
);

3868 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,3600,0,
m©o˛_£ssi⁄_°©smove
);

3869 
	`maö_de°ru˘ªgi°î
(
m©o˛£rv_ãrm
);

3870 
	`maö_pﬁÃegi°î
(
m©o˛£rv_desc
,
m©o˛£rv_£rve
);

3871 
	`maö_w™ãxôªgi°î
(
m©o˛£rv_w™ãxô
);

3872 
	`maö_ˇ√xôªgi°î
(
m©o˛£rv_ˇ√xô
);

3874 
	}
}

	@mfsmaster/matoclserv.h

19 #i‚de‡
_MATOCLSERV_H_


20 
	#_MATOCLSERV_H_


	)

22 
	~<öây≥s.h
>

24 
m©o˛£rv_°©s
(
uöt64_t
 
°©s
[5]);

26 
m©o˛£rv_nŸify_©å
(
uöt32_t
 
dúöode
,uöt32_à
öode
,c⁄° 
uöt8_t
 
©å
[35]);

27 
m©o˛£rv_nŸify_lök
(
uöt32_t
 
dúöode
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
öode
,c⁄° uöt8_à
©å
[35],uöt32_à
ts
);

28 
m©o˛£rv_nŸify_u∆ök
(
uöt32_t
 
dúöode
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
ts
);

29 
m©o˛£rv_nŸify_ªmove
(
uöt32_t
 
dúöode
);

30 
m©o˛£rv_nŸify_∑ª¡
(
uöt32_t
 
dúöode
,uöt32_à
∑ª¡
);

32 
m©o˛£rv_chunk_°©us
(
uöt64_t
 
chunkid
,
uöt8_t
 
°©us
);

33 
m©o˛£rv_öô_£ssi⁄s
(
uöt32_t
 
£ssi⁄id
,uöt32_à
öode
);

34 
m©o˛£rv_£ssi⁄söô
();

35 
m©o˛£rv_√tw‹köô
();

	@mfsmaster/matocsserv.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<time.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/uio.h
>

25 
	~<uni°d.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<sy¶og.h
>

30 
	~<î∫o.h
>

31 
	~<öây≥s.h
>

32 
	~<√töë/ö.h
>

34 
	~"MFSCommuniˇti⁄.h
"

36 
	~"d©≠ack.h
"

37 
	~"m©ocs£rv.h
"

38 
	~"cfg.h
"

39 
	~"maö.h
"

40 
	~"sockës.h
"

41 
	~"chunks.h
"

42 
	~"øndom.h
"

43 
	~"¶oggî.h
"

44 
	~"mas£π.h
"

46 
	#MaxPackëSize
 500000000

	)

49 íum{
	mKILL
,
	mHEADER
,
	mDATA
};

51 
	s∑ckë°ru˘
 {

52 
∑ckë°ru˘
 *
	m√xt
;

53 
uöt8_t
 *
	m°¨çå
;

54 
uöt32_t
 
	mbyã¶e·
;

55 
uöt8_t
 *
	m∑ckë
;

56 } 
	t∑ckë°ru˘
;

58 
	sm©ocs£rvíåy
 {

59 
uöt8_t
 
	mmode
;

60 
	msock
;

61 
öt32_t
 
	mpdes˝os
;

62 
uöt32_t
 
	mœ°ªad
,
	mœ°wrôe
;

63 
uöt8_t
 
	mhdrbuff
[8];

64 
∑ckë°ru˘
 
	möpuçackë
;

65 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

67 *
	m£rv°rù
;

68 
uöt32_t
 
	mvîsi⁄
;

69 
uöt32_t
 
	m£rvù
;

70 
uöt16_t
 
	m£rvp‹t
;

71 
uöt16_t
 
	mtimeout
;

72 
uöt64_t
 
	mu£d•a˚
;

73 
uöt64_t
 
	mtŸÆ•a˚
;

74 
uöt32_t
 
	mchunkscou¡
;

75 
uöt64_t
 
	mtodñu£d•a˚
;

76 
uöt64_t
 
	mtodñtŸÆ•a˚
;

77 
uöt32_t
 
	mtodñchunkscou¡
;

78 
uöt32_t
 
	mîr‹cou¡î
;

79 
uöt16_t
 
	mºïcou¡î
;

80 
uöt16_t
 
	mwªpcou¡î
;

81 
uöt16_t
 
	mdñcou¡î
;

83 
	mˇºy
;

85 
m©ocs£rvíåy
 *
	m√xt
;

86 } 
	tm©ocs£rvíåy
;

88 
uöt64_t
 
	gmaxtŸÆ•a˚
;

89 
m©ocs£rvíåy
 *
	gm©ocs£rvhód
=
NULL
;

90 
	glsock
;

91 
öt32_t
 
	glsockpdes˝os
;

94 *
	gLi°íHo°
;

95 *
	gLi°íP‹t
;

102 
	#REPHASHSIZE
 256

	)

103 
	#REPHASHFN
(
chid
,
vî
Ë(((chid)^(vî)^((chid)>>8))%(
REPHASHSIZE
))

	)

105 
	s_ªp§c
 {

106 *
	m§c
;

107 
_ªp§c
 *
	m√xt
;

108 } 
	tªp§c
;

110 
	s_ªpd°
 {

111 
uöt64_t
 
	mchunkid
;

112 
uöt32_t
 
	mvîsi⁄
;

113 *
	md°
;

114 
ªp§c
 *
	m§chód
;

115 
_ªpd°
 *
	m√xt
;

116 } 
	tªpd°
;

118 
ªpd°
* 
	gªphash
[
REPHASHSIZE
];

119 
ªp§c
 *
	gªp§c‰ìhód
=
NULL
;

120 
ªpd°
 *
	gªpd°‰ìhód
=
NULL
;

122 
ªp§c
* 
	$m©ocs£rv_ªp§c_mÆloc
() {

123 
ªp§c
 *
r
;

124 i‡(
ªp§c‰ìhód
) {

125 
r
 = 
ªp§c‰ìhód
;

126 
ªp§c‰ìhód
 = 
r
->
√xt
;

128 
r
 = (
ªp§c
*)
	`mÆloc
((repsrc));

129 
	`∑s£π
(
r
);

131  
r
;

132 
	}
}

134 
	$m©ocs£rv_ªp§c_‰ì
(
ªp§c
 *
r
) {

135 
r
->
√xt
 = 
ªp§c‰ìhód
;

136 
ªp§c‰ìhód
 = 
r
;

137 
	}
}

139 
ªpd°
* 
	$m©ocs£rv_ªpd°_mÆloc
() {

140 
ªpd°
 *
r
;

141 i‡(
ªpd°‰ìhód
) {

142 
r
 = 
ªpd°‰ìhód
;

143 
ªpd°‰ìhód
 = 
r
->
√xt
;

145 
r
 = (
ªpd°
*)
	`mÆloc
((repdst));

146 
	`∑s£π
(
r
);

148  
r
;

149 
	}
}

151 
	$m©ocs£rv_ªpd°_‰ì
(
ªpd°
 *
r
) {

152 
r
->
√xt
 = 
ªpd°‰ìhód
;

153 
ªpd°‰ìhód
 = 
r
;

154 
	}
}

156 
	$m©ocs£rv_ª∂iˇti⁄_öô
() {

157 
uöt32_t
 
hash
;

158 
hash
=0 ; hash<
REPHASHSIZE
 ; hash++) {

159 
ªphash
[
hash
]=
NULL
;

161 
ªp§c‰ìhód
=
NULL
;

162 
ªpd°‰ìhód
=
NULL
;

163 
	}
}

165 
	$m©ocs£rv_ª∂iˇti⁄_föd
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,*
d°
) {

166 
uöt32_t
 
hash
 = 
	`REPHASHFN
(
chunkid
,
vîsi⁄
);

167 
ªpd°
 *
r
;

168 
r
=
ªphash
[
hash
] ;Ñ ;ÑÙ->
√xt
) {

169 i‡(
r
->
chunkid
==chunkid &&Ñ->
vîsi⁄
==vîsi⁄ &&Ñ->
d°
==dst) {

174 
	}
}

176 
	$m©ocs£rv_ª∂iˇti⁄_begö
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,*
d°
,
uöt8_t
 
§c˙t
,**
§c
) {

177 
uöt32_t
 
hash
 = 
	`REPHASHFN
(
chunkid
,
vîsi⁄
);

178 
uöt8_t
 
i
;

179 
ªpd°
 *
r
;

180 
ªp§c
 *
rs
;

182 i‡(
§c˙t
>0) {

183 
r
 = 
	`m©ocs£rv_ªpd°_mÆloc
();

184 
r
->
chunkid
 = chunkid;

185 
r
->
vîsi⁄
 = version;

186 
r
->
d°
 = dst;

187 
r
->
§chód
 = 
NULL
;

188 
r
->
√xt
 = 
ªphash
[
hash
];

189 
ªphash
[
hash
] = 
r
;

190 
i
=0 ; i<
§c˙t
 ; i++) {

191 
rs
 = 
	`m©ocs£rv_ªp§c_mÆloc
();

192 
rs
->
§c
 = src[
i
];

193 
rs
->
√xt
 = 
r
->
§chód
;

194 
r
->
§chód
 = 
rs
;

195 ((
m©ocs£rvíåy
 *)(
§c
[
i
]))->
ºïcou¡î
++;

197 ((
m©ocs£rvíåy
 *)(
d°
))->
wªpcou¡î
++;

199 
	}
}

201 
	$m©ocs£rv_ª∂iˇti⁄_íd
(
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,*
d°
) {

202 
uöt32_t
 
hash
 = 
	`REPHASHFN
(
chunkid
,
vîsi⁄
);

203 
ªpd°
 *
r
,**
Ω
;

204 
ªp§c
 *
rs
,*
rsdñ
;

206 
Ω
 = &(
ªphash
[
hash
]);

207 (
r
=*
Ω
)!=
NULL
) {

208 i‡(
r
->
chunkid
==chunkid &&Ñ->
vîsi⁄
==vîsi⁄ &&Ñ->
d°
==dst) {

209 
rs
 = 
r
->
§chód
;

210 
rs
) {

211 
rsdñ
 = 
rs
;

212 
rs
 =Ñs->
√xt
;

213 ((
m©ocs£rvíåy
 *)(
rsdñ
->
§c
))->
ºïcou¡î
--;

214 
	`m©ocs£rv_ªp§c_‰ì
(
rsdñ
);

216 ((
m©ocs£rvíåy
 *)(
d°
))->
wªpcou¡î
--;

217 *
Ω
 = 
r
->
√xt
;

218 
	`m©ocs£rv_ªpd°_‰ì
(
r
);

220 
Ω
 = &(
r
->
√xt
);

223 
	}
}

225 
	$m©ocs£rv_ª∂iˇti⁄_disc⁄√˘ed
(*
§v
) {

226 
uöt32_t
 
hash
;

227 
ªpd°
 *
r
,**
Ω
;

228 
ªp§c
 *
rs
,*
rsdñ
,**
r•
;

230 
hash
=0 ; hash<
REPHASHSIZE
 ; hash++) {

231 
Ω
 = &(
ªphash
[
hash
]);

232 (
r
=*
Ω
)!=
NULL
) {

233 i‡(
r
->
d°
==
§v
) {

234 
rs
 = 
r
->
§chód
;

235 
rs
) {

236 
rsdñ
 = 
rs
;

237 
rs
 =Ñs->
√xt
;

238 ((
m©ocs£rvíåy
 *)(
rsdñ
->
§c
))->
ºïcou¡î
--;

239 
	`m©ocs£rv_ªp§c_‰ì
(
rsdñ
);

241 ((
m©ocs£rvíåy
 *)(
§v
))->
wªpcou¡î
--;

242 *
Ω
 = 
r
->
√xt
;

243 
	`m©ocs£rv_ªpd°_‰ì
(
r
);

245 
r•
 = &(
r
->
§chód
);

246 (
rs
=*
r•
)!=
NULL
) {

247 i‡(
rs
->
§c
==
§v
) {

248 ((
m©ocs£rvíåy
 *)(
§v
))->
ºïcou¡î
--;

249 *
r•
 = 
rs
->
√xt
;

250 
	`m©ocs£rv_ªp§c_‰ì
(
rs
);

252 
r•
 = &(
rs
->
√xt
);

255 
Ω
 = &(
r
->
√xt
);

259 
	}
}

266 
	$m©ocs£rv_•a˚_com∑ª
(c⁄° *
a
,c⁄° *
b
) {

267 c⁄° 
	s£rvs‹t
 {

268 
•a˚
;

269 *
±r
;

270 } *
Ø
=
a
,*
bb
=
b
;

271 i‡(
Ø
->
•a˚
 > 
bb
->space) {

274 i‡(
Ø
->
•a˚
 < 
bb
->space) {

278 
	}
}

280 
	$m©ocs£rv_ußgedif„ªn˚
(*
möußge
,*
maxußge
,
uöt16_t
 *
ußbÀscou¡
,uöt16_à*
tŸÆscou¡
) {

281 
m©ocs£rvíåy
 *
ïå
;

282 
uöt32_t
 
j
,
k
;

283 
mö•a˚
=1.0,
max•a˚
=0.0;

284 
•a˚
;

285 
j
 = 0;

286 
k
 = 0;

287 
ïå
 = 
m©ocs£rvhód
 ;É±∏&& 
j
<65535 && 
k
<65535;É±rÛ±r->
√xt
) {

288 i‡(
ïå
->
mode
!=
KILL
) {

289 i‡(
ïå
->
tŸÆ•a˚
>0 &&É±r->
u£d•a˚
<=eptr->totalspace) {

290 
•a˚
 = ()(
ïå
->
u£d•a˚
Ë/ ()”±r->
tŸÆ•a˚
);

291 i‡(
j
==0) {

292 
mö•a˚
 = 
max•a˚
 = 
•a˚
;

293 } i‡(
•a˚
<
mö•a˚
) {

294 
mö•a˚
 = 
•a˚
;

295 } i‡(
•a˚
>
max•a˚
) {

296 
max•a˚
 = 
•a˚
;

298 
j
++;

300 
k
++;

303 i‡(
ußbÀscou¡
) {

304 *
ußbÀscou¡
 = 
j
;

306 i‡(
tŸÆscou¡
) {

307 *
tŸÆscou¡
 = 
k
;

309 i‡(
j
==0) {

310 i‡(
möußge
) {

311 *
möußge
 = 1.0;

313 i‡(
maxußge
) {

314 *
maxußge
 = 0.0;

317 i‡(
möußge
) {

318 *
möußge
 = 
mö•a˚
;

320 i‡(
maxußge
) {

321 *
maxußge
 = 
max•a˚
;

324 
	}
}

326 
uöt16_t
 
	$m©ocs£rv_gë£rvîs_‹dîed
(* 
±rs
[65535],
maxußgediff
,
uöt32_t
 *
pmö
,uöt32_à*
pmax
) {

327 
	s£rvs‹t
 {

328 
•a˚
;

329 *
±r
;

330 } 
£rvs‹âab
[65535],
£rvèb
[65536];

331 
m©ocs£rvíåy
 *
ïå
;

332 
uöt32_t
 
i
,
j
,
k
,
mö
,
mid
,
max
;

333 
mö•a˚
=1.0,
max•a˚
=0.0;

334 
uöt64_t
 
t•a˚
,
u•a˚
;

335 
•a˚
;

338 
j
 = 0;

339 
t•a˚
 = 0;

340 
u•a˚
 = 0;

341 
ïå
 = 
m©ocs£rvhód
 ;É±∏&& 
j
<65535;É±rÛ±r->
√xt
) {

342 i‡(
ïå
->
mode
!=
KILL
 &&É±r->
tŸÆ•a˚
>0 &&É±r->
u£d•a˚
<=eptr->totalspace) {

343 
u•a˚
 +
ïå
->
u£d•a˚
;

344 
t•a˚
 +
ïå
->
tŸÆ•a˚
;

345 
•a˚
 = ()(
ïå
->
u£d•a˚
Ë/ ()”±r->
tŸÆ•a˚
);

346 i‡(
j
==0) {

347 
mö•a˚
 = 
max•a˚
 = 
•a˚
;

348 } i‡(
•a˚
<
mö•a˚
) {

349 
mö•a˚
 = 
•a˚
;

350 } i‡(
•a˚
>
max•a˚
) {

351 
max•a˚
 = 
•a˚
;

353 
£rvèb
[
j
].
±r
 = 
ïå
;

354 
£rvèb
[
j
].
•a˚
 = space;

356 
j
++;

359 i‡(
j
==0) {

364 
•a˚
 = ()(
u•a˚
)/()(
t•a˚
);

369 
mö
 = 0;

370 
max
 = 
j
;

371 
mid
 = 0;

372 
i
=0 ; i<
j
 ; i++) {

373 i‡(
£rvèb
[
i
].
•a˚
<•a˚-
maxußgediff
) {

374 
±rs
[
mö
++]=
£rvèb
[
i
].
±r
;

375 } i‡(
£rvèb
[
i
].
•a˚
>•a˚+
maxußgediff
) {

376 
±rs
[--
max
]=
£rvèb
[
i
].
±r
;

378 
£rvs‹âab
[
mid
++]=
£rvèb
[
i
];

390 
i
=0 ; i<
mö
 ; i++) {

392 
k
 = 
i
+
	`∫du32_ønged
(
mö
-i);

394 i‡(
i
!=
k
) {

395 * 
p
 = 
±rs
[
i
];

396 
±rs
[
i
] =Öås[
k
];

397 
±rs
[
k
] = 
p
;

402 
i
=
max
 ; i<
j
 ; i++) {

404 
k
 = 
i
+
	`∫du32_ønged
(
j
-i);

406 i‡(
i
!=
k
) {

407 * 
p
 = 
±rs
[
i
];

408 
±rs
[
i
] =Öås[
k
];

409 
±rs
[
k
] = 
p
;

414 i‡(
mid
>0) {

415 
	`qs‹t
(
£rvs‹âab
,
mid
,(
£rvs‹t
),
m©ocs£rv_•a˚_com∑ª
);

417 
i
=0 ; i<
mid
 ; i++) {

418 
±rs
[
mö
+
i
]=
£rvs‹âab
[i].
±r
;

420 i‡(
pmö
!=
NULL
) {

421 *
pmö
=
mö
;

423 i‡(
pmax
!=
NULL
) {

424 *
pmax
=
j
-
max
;

430  
j
;

431 
	}
}

434 
	$m©ocs£rv_ˇºy_com∑ª
(c⁄° *
a
,c⁄° *
b
) {

435 c⁄° 
	sr£rvs‹t
 {

436 
w
;

437 
ˇºy
;

438 
m©ocs£rvíåy
 *
±r
;

439 } *
Ø
=
a
,*
bb
=
b
;

440 i‡(
Ø
->
ˇºy
 > 
bb
->carry) {

443 i‡(
Ø
->
ˇºy
 < 
bb
->carry) {

447 
	}
}

449 
uöt16_t
 
	$m©ocs£rv_gë£rvîs_wøndom
(* 
±rs
[65536],
uöt16_t
 
dem™d
) {

450 
	sr£rvs‹t
 {

451 
w
;

452 
ˇºy
;

453 
m©ocs£rvíåy
 *
±r
;

454 } 
£rvèb
[65536];

455 
m©ocs£rvíåy
 *
ïå
;

456 
ˇºy
;

457 
uöt32_t
 
i
;

458 
uöt32_t
 
Æl˙t
;

459 
uöt32_t
 
avaû˙t
;

460 i‡(
maxtŸÆ•a˚
==0) {

463 
Æl˙t
=0;

464 
avaû˙t
=0;

465 
ïå
 = 
m©ocs£rvhód
 ;É±∏&& 
Æl˙t
<65536 ;É±rÛ±r->
√xt
) {

466 i‡(
ïå
->
mode
!=
KILL
 &&É±r->
tŸÆ•a˚
>0 &&É±r->
u£d•a˚
<Û±r->tŸÆ•a˚ && (ïå->tŸÆ•a˚ -É±r->u£d•a˚)>
MFSCHUNKSIZE
) {

467 
£rvèb
[
Æl˙t
].
w
 = ()
ïå
->
tŸÆ•a˚
/()
maxtŸÆ•a˚
;

468 
£rvèb
[
Æl˙t
].
ˇºy
 = 
ïå
->carry;

469 
£rvèb
[
Æl˙t
].
±r
 = 
ïå
;

470 
Æl˙t
++;

471 i‡(
ïå
->
ˇºy
>=1.0) {

472 
avaû˙t
++;

476 i‡(
dem™d
>
Æl˙t
) {

477 
dem™d
=
Æl˙t
;

479 
avaû˙t
<
dem™d
) {

480 
avaû˙t
=0;

481 
i
=0 ; i<
Æl˙t
 ; i++) {

482 
ˇºy
 = 
£rvèb
[
i
].ˇºy + sîvèb[i].
w
;

483 
£rvèb
[
i
].
ˇºy
 = carry;

484 
£rvèb
[
i
].
±r
->
ˇºy
 = carry;

485 i‡(
ˇºy
>=1.0) {

486 
avaû˙t
++;

490 
	`qs‹t
(
£rvèb
,
Æl˙t
,(
r£rvs‹t
),
m©ocs£rv_ˇºy_com∑ª
);

491 
i
=0 ; i<
dem™d
 ; i++) {

492 
±rs
[
i
] = 
£rvèb
[i].
±r
;

493 
£rvèb
[
i
].
±r
->
ˇºy
-=1.0;

495  
dem™d
;

496 
	}
}

615 
uöt16_t
 
	$m©ocs£rv_gë£rvîs_Às§ïl
(* 
±rs
[65535],
uöt16_t
 
ª∂imô
) {

616 
m©ocs£rvíåy
 *
ïå
;

617 
uöt32_t
 
j
,
k
,
r
;

618 *
x
;

619 
j
=0;

620 
ïå
 = 
m©ocs£rvhód
 ;É±∏&& 
j
<65535;É±rÛ±r->
√xt
) {

621 i‡(
ïå
->
mode
!=
KILL
 &&É±r->
tŸÆ•a˚
>0 &&É±r->
u£d•a˚
<Û±r->tŸÆ•a˚ && (ïå->tŸÆ•a˚ -É±r->u£d•a˚)>”±r->tŸÆ•a˚/100Ë&&É±r->
wªpcou¡î
<
ª∂imô
) {

622 
±rs
[
j
] = (*)
ïå
;

623 
j
++;

626 i‡(
j
==0) {

629 
k
=0 ; k<
j
-1 ; k++) {

630 
r
 = 
k
 + 
	`∫du32_ønged
(
j
-k);

631 i‡(
r
!=
k
) {

632 
x
 = 
±rs
[
k
];

633 
±rs
[
k
] =Öås[
r
];

634 
±rs
[
r
] = 
x
;

637  
j
;

638 
	}
}

640 
	$m©ocs£rv_gë•a˚
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
) {

641 
m©ocs£rvíåy
 *
ïå
;

642 
uöt64_t
 
t•a˚
,
u•a˚
;

643 
t•a˚
 = 0;

644 
u•a˚
 = 0;

645 
ïå
 = 
m©ocs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

646 i‡(
ïå
->
mode
!=
KILL
 &&É±r->
tŸÆ•a˚
>0) {

647 
t•a˚
 +
ïå
->
tŸÆ•a˚
;

648 
u•a˚
 +
ïå
->
u£d•a˚
;

651 *
tŸÆ•a˚
 = 
t•a˚
;

652 *
avaû•a˚
 = 
t•a˚
-
u•a˚
;

653 
	}
}

687 
uöt32_t
 
	$m©ocs£rv_c£rvli°_size
() {

688 
m©ocs£rvíåy
 *
ïå
;

689 
uöt32_t
 
i
;

690 
i
=0;

691 
ïå
 = 
m©ocs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

692 i‡(
ïå
->
mode
!=
KILL
) {

693 
i
++;

696  
i
*(4+4+2+8+8+4+8+8+4+4);

697 
	}
}

699 
	$m©ocs£rv_c£rvli°_d©a
(
uöt8_t
 *
±r
) {

700 
m©ocs£rvíåy
 *
ïå
;

701 
ïå
 = 
m©ocs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

702 i‡(
ïå
->
mode
!=
KILL
) {

703 
	`put32bô
(&
±r
,
ïå
->
vîsi⁄
);

704 
	`put32bô
(&
±r
,
ïå
->
£rvù
);

705 
	`put16bô
(&
±r
,
ïå
->
£rvp‹t
);

706 
	`put64bô
(&
±r
,
ïå
->
u£d•a˚
);

707 
	`put64bô
(&
±r
,
ïå
->
tŸÆ•a˚
);

708 
	`put32bô
(&
±r
,
ïå
->
chunkscou¡
);

709 
	`put64bô
(&
±r
,
ïå
->
todñu£d•a˚
);

710 
	`put64bô
(&
±r
,
ïå
->
todñtŸÆ•a˚
);

711 
	`put32bô
(&
±r
,
ïå
->
todñchunkscou¡
);

712 
	`put32bô
(&
±r
,
ïå
->
îr‹cou¡î
);

715 
	}
}

747 * 
	$m©ocs£rv_gë°rù
(*
e
) {

748 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

749 *
em±y
="???";

750 i‡(
ïå
->
mode
!=
KILL
 &&É±r->
£rv°rù
) {

751  
ïå
->
£rv°rù
;

753  
em±y
;

754 
	}
}

756 
	$m©ocs£rv_gëloˇti⁄
(*
e
,
uöt32_t
 *
£rvù
,
uöt16_t
 *
£rvp‹t
) {

757 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

758 i‡(
ïå
->
mode
!=
KILL
) {

759 *
£rvù
 = 
ïå
->servip;

760 *
£rvp‹t
 = 
ïå
->servport;

764 
	}
}

767 
uöt16_t
 
	$m©ocs£rv_ª∂iˇti⁄_wrôe_cou¡î
(*
e
) {

768 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

769  
ïå
->
wªpcou¡î
;

770 
	}
}

772 
uöt16_t
 
	$m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(*
e
) {

773 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

774  
ïå
->
ºïcou¡î
;

775 
	}
}

777 
uöt16_t
 
	$m©ocs£rv_dñëi⁄_cou¡î
(*
e
) {

778 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

779  
ïå
->
dñcou¡î
;

780 
	}
}

782 * 
	$m©ocs£rv_make°rù
(
uöt32_t
 
ù
) {

783 
uöt8_t
 *
±r
,
±
[4];

784 
uöt32_t
 
l
,
i
;

785 *
›å
;

786 
±r
 = 
±
;

787 
	`put32bô
(&
±r
,
ù
);

788 
l
=0;

789 
i
=0 ; i<4 ; i++) {

790 i‡(
±
[
i
]>=100) {

791 
l
+=3;

792 } i‡(
±
[
i
]>=10) {

793 
l
+=2;

795 
l
+=1;

798 
l
+=4;

799 
›å
 = 
	`mÆloc
(
l
);

800 
	`∑s£π
(
›å
);

801 
	`¢¥ötf
(
›å
,
l
,"%"
PRIu8
".%"PRIu8".%"PRIu8".%"PRIu8,
±
[0],pt[1],pt[2],pt[3]);

802 
›å
[
l
-1]=0;

803  
›å
;

804 
	}
}

806 
uöt8_t
* 
	$m©ocs£rv_¸óã∑ckë
(
m©ocs£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

807 
∑ckë°ru˘
 *
ouçackë
;

808 
uöt8_t
 *
±r
;

809 
uöt32_t
 
psize
;

811 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

812 
	`∑s£π
(
ouçackë
);

813 
psize
 = 
size
+8;

814 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

815 
	`∑s£π
(
ouçackë
->
∑ckë
);

816 
ouçackë
->
byã¶e·
 = 
psize
;

821 
±r
 = 
ouçackë
->
∑ckë
;

822 
	`put32bô
(&
±r
,
ty≥
);

823 
	`put32bô
(&
±r
,
size
);

824 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

825 
ouçackë
->
√xt
 = 
NULL
;

826 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

827 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

828  
±r
;

829 
	}
}

831 
	$m©ocs£rv_£nd_chunk_checksum
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

832 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

833 
uöt8_t
 *
d©a
;

835 i‡(
ïå
->
mode
!=
KILL
) {

836 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
ANTOCS_CHUNK_CHECKSUM
,8+4);

837 
	`put64bô
(&
d©a
,
chunkid
);

838 
	`put32bô
(&
d©a
,
vîsi⁄
);

841 
	}
}

843 
	$m©ocs£rv_gŸ_chunk_checksum
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

844 
uöt64_t
 
chunkid
;

845 
uöt32_t
 
vîsi⁄
,
checksum
;

846 
uöt8_t
 
°©us
;

847 i‡(
Àngth
!=8+4+1 &&Üength!=8+4+4) {

848 
	`sy¶og
(
LOG_NOTICE
,"CSTOAN_CHUNK_CHECKSUM - wr⁄g sizê(%"
PRIu32
"/13|16)",
Àngth
);

849 
ïå
->
mode
=
KILL
;

852 
chunkid
 = 
	`gë64bô
(&
d©a
);

853 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

854 i‡(
Àngth
==8+4+1) {

855 
°©us
 = 
	`gë8bô
(&
d©a
);

857 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" cÆcuœã checksum sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

859 
checksum
 = 
	`gë32bô
(&
d©a
);

861 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" cÆcuœã checksum: %08"
PRIX32
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
checksum
);

863 
	}
}

865 
	$m©ocs£rv_£nd_¸óãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

866 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

867 
uöt8_t
 *
d©a
;

869 i‡(
ïå
->
mode
!=
KILL
) {

870 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_CREATE
,8+4);

871 
	`put64bô
(&
d©a
,
chunkid
);

872 
	`put32bô
(&
d©a
,
vîsi⁄
);

875 
	}
}

877 
	$m©ocs£rv_gŸ_¸óãchunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

878 
uöt64_t
 
chunkid
;

879 
uöt8_t
 
°©us
;

880 i‡(
Àngth
!=8+1) {

881 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_CREATE - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

882 
ïå
->
mode
=
KILL
;

885 
chunkid
 = 
	`gë64bô
(&
d©a
);

886 
°©us
 = 
	`gë8bô
(&
d©a
);

887 
	`chunk_gŸ_¸óã_°©us
(
ïå
,
chunkid
,
°©us
);

888 i‡(
°©us
!=0) {

889 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" cª©i⁄ sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

891 
	}
}

893 
	$m©ocs£rv_£nd_dñëechunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
) {

894 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

895 
uöt8_t
 *
d©a
;

897 i‡(
ïå
->
mode
!=
KILL
) {

898 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_DELETE
,8+4);

899 
	`put64bô
(&
d©a
,
chunkid
);

900 
	`put32bô
(&
d©a
,
vîsi⁄
);

901 
ïå
->
dñcou¡î
++;

904 
	}
}

906 
	$m©ocs£rv_gŸ_dñëechunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

907 
uöt64_t
 
chunkid
;

908 
uöt8_t
 
°©us
;

909 i‡(
Àngth
!=8+1) {

910 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_DELETE - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

911 
ïå
->
mode
=
KILL
;

914 
chunkid
 = 
	`gë64bô
(&
d©a
);

915 
°©us
 = 
	`gë8bô
(&
d©a
);

916 
ïå
->
dñcou¡î
--;

917 
	`chunk_gŸ_dñëe_°©us
(
ïå
,
chunkid
,
°©us
);

918 i‡(
°©us
!=0) {

919 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" dñëi⁄ sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

921 
	}
}

923 
	$m©ocs£rv_£nd_ª∂iˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,*
§c
) {

924 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

925 
m©ocs£rvíåy
 *
§˚±r
 = (m©ocs£rvíåy *)
§c
;

926 
uöt8_t
 *
d©a
;

928 i‡(
	`m©ocs£rv_ª∂iˇti⁄_föd
(
chunkid
,
vîsi⁄
,
ïå
)) {

931 i‡(
ïå
->
mode
!=
KILL
 && 
§˚±r
->mode!=KILL) {

932 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_REPLICATE
,8+4+4+2);

933 
	`put64bô
(&
d©a
,
chunkid
);

934 
	`put32bô
(&
d©a
,
vîsi⁄
);

935 
	`put32bô
(&
d©a
,
§˚±r
->
£rvù
);

936 
	`put16bô
(&
d©a
,
§˚±r
->
£rvp‹t
);

937 
	`m©ocs£rv_ª∂iˇti⁄_begö
(
chunkid
,
vîsi⁄
,
ïå
,1,&
§c
);

938 
ïå
->
ˇºy
 = 0;

941 
	}
}

943 
	$m©ocs£rv_£nd_ª∂iˇãchunk_x‹
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
˙t
,**
§c
,uöt64_à*
§cchunkid
,uöt32_à*
§cvîsi⁄
) {

944 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

945 
m©ocs£rvíåy
 *
§˚±r
;

946 
uöt8_t
 
i
;

947 
uöt8_t
 *
d©a
;

949 i‡(
	`m©ocs£rv_ª∂iˇti⁄_föd
(
chunkid
,
vîsi⁄
,
ïå
)) {

952 i‡(
ïå
->
mode
!=
KILL
) {

953 
i
=0 ; i<
˙t
 ; i++) {

954 
§˚±r
 = (
m©ocs£rvíåy
 *)(
§c
[
i
]);

955 i‡(
§˚±r
->
mode
==
KILL
) {

959 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_REPLICATE
,8+4+
˙t
*(8+4+4+2));

960 
	`put64bô
(&
d©a
,
chunkid
);

961 
	`put32bô
(&
d©a
,
vîsi⁄
);

962 
i
=0 ; i<
˙t
 ; i++) {

963 
§˚±r
 = (
m©ocs£rvíåy
 *)(
§c
[
i
]);

964 
	`put64bô
(&
d©a
,
§cchunkid
[
i
]);

965 
	`put32bô
(&
d©a
,
§cvîsi⁄
[
i
]);

966 
	`put32bô
(&
d©a
,
§˚±r
->
£rvù
);

967 
	`put16bô
(&
d©a
,
§˚±r
->
£rvp‹t
);

969 
	`m©ocs£rv_ª∂iˇti⁄_begö
(
chunkid
,
vîsi⁄
,
ïå
,
˙t
,
§c
);

970 
ïå
->
ˇºy
 = 0;

973 
	}
}

1006 
	$m©ocs£rv_gŸ_ª∂iˇãchunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1007 
uöt64_t
 
chunkid
;

1008 
uöt32_t
 
vîsi⁄
;

1009 
uöt8_t
 
°©us
;

1010 i‡(
Àngth
!=8+4+1) {

1011 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REPLICATE - wr⁄g sizê(%"
PRIu32
"/13)",
Àngth
);

1012 
ïå
->
mode
=
KILL
;

1018 
chunkid
 = 
	`gë64bô
(&
d©a
);

1019 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

1020 
	`m©ocs£rv_ª∂iˇti⁄_íd
(
chunkid
,
vîsi⁄
,
ïå
);

1021 
°©us
 = 
	`gë8bô
(&
d©a
);

1022 
	`chunk_gŸ_ª∂iˇã_°©us
(
ïå
,
chunkid
,
vîsi⁄
,
°©us
);

1023 i‡(
°©us
!=0) {

1024 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
"Ñïliˇti⁄ sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

1026 
	}
}

1028 
	$m©ocs£rv_£nd_£tchunkvîsi⁄
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
ﬁdvîsi⁄
) {

1029 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

1030 
uöt8_t
 *
d©a
;

1032 i‡(
ïå
->
mode
!=
KILL
) {

1033 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_SET_VERSION
,8+4+4);

1034 
	`put64bô
(&
d©a
,
chunkid
);

1035 
	`put32bô
(&
d©a
,
vîsi⁄
);

1036 
	`put32bô
(&
d©a
,
ﬁdvîsi⁄
);

1039 
	}
}

1041 
	$m©ocs£rv_gŸ_£tchunkvîsi⁄_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1042 
uöt64_t
 
chunkid
;

1043 
uöt8_t
 
°©us
;

1044 i‡(
Àngth
!=8+1) {

1045 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_SET_VERSION - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

1046 
ïå
->
mode
=
KILL
;

1049 
chunkid
 = 
	`gë64bô
(&
d©a
);

1050 
°©us
 = 
	`gë8bô
(&
d©a
);

1051 
	`chunk_gŸ_£tvîsi⁄_°©us
(
ïå
,
chunkid
,
°©us
);

1052 i‡(
°©us
!=0) {

1053 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" së vîsi⁄ sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

1055 
	}
}

1058 
	$m©ocs£rv_£nd_du∂iˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt64_à
ﬁdchunkid
,uöt32_à
ﬁdvîsi⁄
) {

1059 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

1060 
uöt8_t
 *
d©a
;

1062 i‡(
ïå
->
mode
!=
KILL
) {

1063 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_DUPLICATE
,8+4+8+4);

1064 
	`put64bô
(&
d©a
,
chunkid
);

1065 
	`put32bô
(&
d©a
,
vîsi⁄
);

1066 
	`put64bô
(&
d©a
,
ﬁdchunkid
);

1067 
	`put32bô
(&
d©a
,
ﬁdvîsi⁄
);

1070 
	}
}

1072 
	$m©ocs£rv_gŸ_du∂iˇãchunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1073 
uöt64_t
 
chunkid
;

1074 
uöt8_t
 
°©us
;

1075 i‡(
Àngth
!=8+1) {

1076 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_DUPLICATE - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

1077 
ïå
->
mode
=
KILL
;

1080 
chunkid
 = 
	`gë64bô
(&
d©a
);

1081 
°©us
 = 
	`gë8bô
(&
d©a
);

1082 
	`chunk_gŸ_du∂iˇã_°©us
(
ïå
,
chunkid
,
°©us
);

1083 i‡(
°©us
!=0) {

1084 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" du∂iˇti⁄ sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

1086 
	}
}

1088 
	$m©ocs£rv_£nd_åunˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
Àngth
,uöt32_à
vîsi⁄
,uöt32_à
ﬁdvîsi⁄
) {

1089 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

1090 
uöt8_t
 *
d©a
;

1092 i‡(
ïå
->
mode
!=
KILL
) {

1093 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_TRUNCATE
,8+4+4+4);

1094 
	`put64bô
(&
d©a
,
chunkid
);

1095 
	`put32bô
(&
d©a
,
Àngth
);

1096 
	`put32bô
(&
d©a
,
vîsi⁄
);

1097 
	`put32bô
(&
d©a
,
ﬁdvîsi⁄
);

1100 
	}
}

1102 
	$m©ocs£rv_gŸ_åunˇãchunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1103 
uöt64_t
 
chunkid
;

1104 
uöt8_t
 
°©us
;

1105 i‡(
Àngth
!=8+1) {

1106 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_TRUNCATE - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

1107 
ïå
->
mode
=
KILL
;

1110 
chunkid
 = 
	`gë64bô
(&
d©a
);

1111 
°©us
 = 
	`gë8bô
(&
d©a
);

1112 
	`chunk_gŸ_åunˇã_°©us
(
ïå
,
chunkid
,
°©us
);

1114 i‡(
°©us
!=0) {

1115 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
"Årunˇã sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

1117 
	}
}

1119 
	$m©ocs£rv_£nd_du±runcchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt64_à
ﬁdchunkid
,uöt32_à
ﬁdvîsi⁄
,uöt32_à
Àngth
) {

1120 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

1121 
uöt8_t
 *
d©a
;

1123 i‡(
ïå
->
mode
!=
KILL
) {

1124 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_DUPTRUNC
,8+4+8+4+4);

1125 
	`put64bô
(&
d©a
,
chunkid
);

1126 
	`put32bô
(&
d©a
,
vîsi⁄
);

1127 
	`put64bô
(&
d©a
,
ﬁdchunkid
);

1128 
	`put32bô
(&
d©a
,
ﬁdvîsi⁄
);

1129 
	`put32bô
(&
d©a
,
Àngth
);

1132 
	}
}

1134 
	$m©ocs£rv_gŸ_du±runcchunk_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1135 
uöt64_t
 
chunkid
;

1136 
uöt8_t
 
°©us
;

1137 i‡(
Àngth
!=8+1) {

1138 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_DUPTRUNC - wr⁄g sizê(%"
PRIu32
"/9)",
Àngth
);

1139 
ïå
->
mode
=
KILL
;

1142 
chunkid
 = 
	`gë64bô
(&
d©a
);

1143 
°©us
 = 
	`gë8bô
(&
d©a
);

1144 
	`chunk_gŸ_du±runc_°©us
(
ïå
,
chunkid
,
°©us
);

1146 i‡(
°©us
!=0) {

1147 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk: %016"
PRIX64
" du∂iˇti⁄ wôhÅrunˇã sètus: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
°©us
);

1149 
	}
}

1151 
	$m©ocs£rv_£nd_chunk›
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àng
) {

1152 
m©ocs£rvíåy
 *
ïå
 = (m©ocs£rvíåy *)
e
;

1153 
uöt8_t
 *
d©a
;

1155 i‡(
ïå
->
mode
!=
KILL
) {

1156 
d©a
 = 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
MATOCS_CHUNKOP
,8+4+4+8+4+4);

1157 
	`put64bô
(&
d©a
,
chunkid
);

1158 
	`put32bô
(&
d©a
,
vîsi⁄
);

1159 
	`put32bô
(&
d©a
,
√wvîsi⁄
);

1160 
	`put64bô
(&
d©a
,
c›ychunkid
);

1161 
	`put32bô
(&
d©a
,
c›yvîsi⁄
);

1162 
	`put32bô
(&
d©a
,
Àng
);

1165 
	}
}

1167 
	$m©ocs£rv_gŸ_chunk›_°©us
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1168 
uöt64_t
 
chunkid
,
c›ychunkid
;

1169 
uöt32_t
 
vîsi⁄
,
√wvîsi⁄
,
c›yvîsi⁄
,
Àng
;

1170 
uöt8_t
 
°©us
;

1171 i‡(
Àngth
!=8+4+4+8+4+4+1) {

1172 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_CHUNKOP - wr⁄g sizê(%"
PRIu32
"/33)",
Àngth
);

1173 
ïå
->
mode
=
KILL
;

1176 
chunkid
 = 
	`gë64bô
(&
d©a
);

1177 
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

1178 
√wvîsi⁄
 = 
	`gë32bô
(&
d©a
);

1179 
c›ychunkid
 = 
	`gë64bô
(&
d©a
);

1180 
c›yvîsi⁄
 = 
	`gë32bô
(&
d©a
);

1181 
Àng
 = 
	`gë32bô
(&
d©a
);

1182 
°©us
 = 
	`gë8bô
(&
d©a
);

1183 i‡(
√wvîsi⁄
!=
vîsi⁄
) {

1184 
	`chunk_gŸ_chunk›_°©us
(
ïå
,
chunkid
,
°©us
);

1186 i‡(
c›ychunkid
>0) {

1187 
	`chunk_gŸ_chunk›_°©us
(
ïå
,
c›ychunkid
,
°©us
);

1189 i‡(
°©us
!=0) {

1190 
	`sy¶og
(
LOG_NOTICE
,"(%s:%"
PRIu16
"Ëchunk›(%016"
PRIX64
",%08"
PRIX32
",%08"PRIX32",%016"PRIX64",%08"PRIX32",%"
PRIu32
"Ë°©us: %"
PRIu8
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
,
chunkid
,
vîsi⁄
,
√wvîsi⁄
,
c›ychunkid
,
c›yvîsi⁄
,
Àng
,
°©us
);

1192 
	}
}

1194 
	$m©ocs£rv_ªgi°î
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1195 
uöt64_t
 
chunkid
;

1196 
uöt32_t
 
chunkvîsi⁄
;

1197 
m©ocs£rvíåy
 *
ó±r
;

1198 
uöt32_t
 
i
,
chunkcou¡
;

1199 
uöt8_t
 
rvîsi⁄
;

1200 
us
,
ts
;

1202 i‡(
ïå
->
tŸÆ•a˚
>0) {

1203 
	`sy¶og
(
LOG_WARNING
,"gotÑegister message fromÑegistered chunk-server !!!");

1204 
ïå
->
mode
=
KILL
;

1208 i‡((
Àngth
&1)==0) {

1209 i‡(
Àngth
<22 || ((length-22)%12)!=0) {

1210 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (ﬁd vî.Ë- wr⁄g sizê(%"
PRIu32
"/22+N*12)",
Àngth
);

1211 
ïå
->
mode
=
KILL
;

1214 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1215 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1216 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1217 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1218 
Àngth
-=22;

1219 
rvîsi⁄
=0;

1221 
rvîsi⁄
 = 
	`gë8bô
(&
d©a
);

1222 i‡(
rvîsi⁄
<=4) {

1223 
	`sy¶og
(
LOG_NOTICE
,"ªgi°îÖackë vîsi⁄: %u",
rvîsi⁄
);

1225 i‡(
rvîsi⁄
==1) {

1226 i‡(
Àngth
<39 || ((length-39)%12)!=0) {

1227 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 1Ë- wr⁄g sizê(%"
PRIu32
"/39+N*12)",
Àngth
);

1228 
ïå
->
mode
=
KILL
;

1231 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1232 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1233 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1234 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1235 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1236 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1237 
Àngth
-=39;

1238 } i‡(
rvîsi⁄
==2) {

1239 i‡(
Àngth
<47 || ((length-47)%12)!=0) {

1240 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 2Ë- wr⁄g sizê(%"
PRIu32
"/47+N*12)",
Àngth
);

1241 
ïå
->
mode
=
KILL
;

1244 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1245 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1246 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1247 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1248 
ïå
->
chunkscou¡
 = 
	`gë32bô
(&
d©a
);

1249 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1250 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1251 
ïå
->
todñchunkscou¡
 = 
	`gë32bô
(&
d©a
);

1252 
Àngth
-=47;

1253 } i‡(
rvîsi⁄
==3) {

1254 i‡(
Àngth
<49 || ((length-49)%12)!=0) {

1255 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 3Ë- wr⁄g sizê(%"
PRIu32
"/49+N*12)",
Àngth
);

1256 
ïå
->
mode
=
KILL
;

1259 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1260 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1261 
ïå
->
timeout
 = 
	`gë16bô
(&
d©a
);

1262 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1263 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1264 
ïå
->
chunkscou¡
 = 
	`gë32bô
(&
d©a
);

1265 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1266 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1267 
ïå
->
todñchunkscou¡
 = 
	`gë32bô
(&
d©a
);

1268 
Àngth
-=49;

1269 } i‡(
rvîsi⁄
==4) {

1270 i‡(
Àngth
<53 || ((length-53)%12)!=0) {

1271 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 4Ë- wr⁄g sizê(%"
PRIu32
"/53+N*12)",
Àngth
);

1272 
ïå
->
mode
=
KILL
;

1275 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

1276 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1277 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1278 
ïå
->
timeout
 = 
	`gë16bô
(&
d©a
);

1279 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1280 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1281 
ïå
->
chunkscou¡
 = 
	`gë32bô
(&
d©a
);

1282 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1283 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1284 
ïå
->
todñchunkscou¡
 = 
	`gë32bô
(&
d©a
);

1285 
Àngth
-=53;

1286 } i‡(
rvîsi⁄
==50) {

1287 i‡(
Àngth
!=13) {

1288 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 5:BEGINË- wr⁄g sizê(%"
PRIu32
"/13)",
Àngth
);

1289 
ïå
->
mode
=
KILL
;

1292 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

1293 
ïå
->
£rvù
 = 
	`gë32bô
(&
d©a
);

1294 
ïå
->
£rvp‹t
 = 
	`gë16bô
(&
d©a
);

1295 
ïå
->
timeout
 = 
	`gë16bô
(&
d©a
);

1296 i‡(
ïå
->
timeout
<10) {

1297 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER communiˇti⁄ÅimeouàtoÿsmÆ»(%"
PRIu16
" sec⁄d†- should bê©Üó° 10 sec⁄ds)",
ïå
->
timeout
);

1298 
ïå
->
mode
=
KILL
;

1301 i‡(
ïå
->
£rvù
==0) {

1302 
	`t˝gë≥î
(
ïå
->
sock
,&”±r->
£rvù
),
NULL
);

1304 i‡(
ïå
->
£rv°rù
) {

1305 
	`‰ì
(
ïå
->
£rv°rù
);

1307 
ïå
->
£rv°rù
 = 
	`m©ocs£rv_make°rù
”±r->
£rvù
);

1308 i‡(((
ïå
->
£rvù
)&0xFF000000) == 0x7F000000) {

1309 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvî c⁄√˘ed usögÜoˇlho° (IP: %sË- you c™nŸ u£Üoˇlho° f‹ communiˇti⁄ bëwì¿chunk£rvîánd ma°î", 
ïå
->
£rv°rù
);

1310 
ïå
->
mode
=
KILL
;

1313 
ó±r
=
m©ocs£rvhód
 ;É≠å ;É≠åÛ≠å->
√xt
) {

1314 i‡(
ïå
!=
ó±r
 &&É≠å->
mode
!=
KILL
 &&É≠å->
£rvù
=Û±r->£rvù &&É≠å->
£rvp‹t
==eptr->servport) {

1315 
	`sy¶og
(
LOG_WARNING
,"chunk-serverálready connected !!!");

1316 
ïå
->
mode
=
KILL
;

1320 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvîÑegi°î begö (∑ckë vîsi⁄: 5Ë- ip: %s,Ö‹t: %"
PRIu16
,
ïå
->
£rv°rù
,ïå->
£rvp‹t
);

1322 } i‡(
rvîsi⁄
==51) {

1323 i‡(((
Àngth
-1)%12)!=0) {

1324 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 5:CHUNKSË- wr⁄g sizê(%"
PRIu32
"/1+N*12)",
Àngth
);

1325 
ïå
->
mode
=
KILL
;

1328 
chunkcou¡
 = (
Àngth
-1)/12;

1329 
i
=0 ; i<
chunkcou¡
 ; i++) {

1330 
chunkid
 = 
	`gë64bô
(&
d©a
);

1331 
chunkvîsi⁄
 = 
	`gë32bô
(&
d©a
);

1332 
	`chunk_£rvî_has_chunk
(
ïå
,
chunkid
,
chunkvîsi⁄
);

1335 } i‡(
rvîsi⁄
==52) {

1336 i‡(
Àngth
!=41) {

1337 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER (vî 5:ENDË- wr⁄g sizê(%"
PRIu32
"/41)",
Àngth
);

1338 
ïå
->
mode
=
KILL
;

1341 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1342 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1343 
ïå
->
chunkscou¡
 = 
	`gë32bô
(&
d©a
);

1344 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1345 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1346 
ïå
->
todñchunkscou¡
 = 
	`gë32bô
(&
d©a
);

1347 
us
 = ()(
ïå
->
u£d•a˚
)/()(1024*1024*1024);

1348 
ts
 = ()(
ïå
->
tŸÆ•a˚
)/()(1024*1024*1024);

1349 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvîÑegi°îÉnd (∑ckë vîsi⁄: 5Ë- ip: %s,Ö‹t: %"
PRIu16
", u£d•a˚: %"
PRIu64
" (%.2l‡GiB),ÅŸÆ•a˚: %"PRIu64" (%.2l‡GiB)",
ïå
->
£rv°rù
,ïå->
£rvp‹t
,ïå->
u£d•a˚
,
us
,ïå->
tŸÆ•a˚
,
ts
);

1352 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER - wr⁄g vîsi⁄ (%"
PRIu8
"/1..4)",
rvîsi⁄
);

1353 
ïå
->
mode
=
KILL
;

1357 i‡(
rvîsi⁄
<=4) {

1358 i‡(
ïå
->
timeout
<10) {

1359 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_REGISTER communiˇti⁄ÅimeouàtoÿsmÆ»(%"
PRIu16
" sec⁄d†- should bê©Üó° 10 sec⁄ds)",
ïå
->
timeout
);

1360 i‡(
ïå
->
timeout
<3) {

1361 
ïå
->
timeout
=3;

1365 i‡(
ïå
->
£rvù
==0) {

1366 
	`t˝gë≥î
(
ïå
->
sock
,&”±r->
£rvù
),
NULL
);

1368 i‡(
ïå
->
£rv°rù
) {

1369 
	`‰ì
(
ïå
->
£rv°rù
);

1371 
ïå
->
£rv°rù
 = 
	`m©ocs£rv_make°rù
”±r->
£rvù
);

1372 i‡(((
ïå
->
£rvù
)&0xFF000000) == 0x7F000000) {

1373 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvî c⁄√˘ed usögÜoˇlho° (IP: %sË- you c™nŸ u£Üoˇlho° f‹ communiˇti⁄ bëwì¿chunk£rvîánd ma°î", 
ïå
->
£rv°rù
);

1374 
ïå
->
mode
=
KILL
;

1377 i‡(
ïå
->
tŸÆ•a˚
>
maxtŸÆ•a˚
) {

1378 
maxtŸÆ•a˚
=
ïå
->
tŸÆ•a˚
;

1380 
us
 = ()(
ïå
->
u£d•a˚
)/()(1024*1024*1024);

1381 
ts
 = ()(
ïå
->
tŸÆ•a˚
)/()(1024*1024*1024);

1382 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvîÑegi°î - ip: %s,Ö‹t: %"
PRIu16
", u£d•a˚: %"
PRIu64
" (%.2l‡GiB),ÅŸÆ•a˚: %"PRIu64" (%.2l‡GiB)",
ïå
->
£rv°rù
,ïå->
£rvp‹t
,ïå->
u£d•a˚
,
us
,ïå->
tŸÆ•a˚
,
ts
);

1383 
ó±r
=
m©ocs£rvhód
 ;É≠å ;É≠åÛ≠å->
√xt
) {

1384 i‡(
ïå
!=
ó±r
 &&É≠å->
mode
!=
KILL
 &&É≠å->
£rvù
=Û±r->£rvù &&É≠å->
£rvp‹t
==eptr->servport) {

1385 
	`sy¶og
(
LOG_WARNING
,"chunk-serverálready connected !!!");

1386 
ïå
->
mode
=
KILL
;

1393 
chunkcou¡
 = 
Àngth
/(8+4);

1394 
i
=0 ; i<
chunkcou¡
 ; i++) {

1395 
chunkid
 = 
	`gë64bô
(&
d©a
);

1396 
chunkvîsi⁄
 = 
	`gë32bô
(&
d©a
);

1397 
	`chunk_£rvî_has_chunk
(
ïå
,
chunkid
,
chunkvîsi⁄
);

1400 
	}
}

1402 
	$m©ocs£rv_•a˚
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1403 i‡(
Àngth
!=16 &&Üength!=32 &&Üength!=40) {

1404 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_SPACE - wr⁄g sizê(%"
PRIu32
"/16|32|40)",
Àngth
);

1405 
ïå
->
mode
=
KILL
;

1408 
ïå
->
u£d•a˚
 = 
	`gë64bô
(&
d©a
);

1409 
ïå
->
tŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1410 i‡(
ïå
->
tŸÆ•a˚
>
maxtŸÆ•a˚
) {

1411 
maxtŸÆ•a˚
=
ïå
->
tŸÆ•a˚
;

1413 i‡(
Àngth
==40) {

1414 
ïå
->
chunkscou¡
 = 
	`gë32bô
(&
d©a
);

1416 i‡(
Àngth
>=32) {

1417 
ïå
->
todñu£d•a˚
 = 
	`gë64bô
(&
d©a
);

1418 
ïå
->
todñtŸÆ•a˚
 = 
	`gë64bô
(&
d©a
);

1419 i‡(
Àngth
==40) {

1420 
ïå
->
todñchunkscou¡
 = 
	`gë32bô
(&
d©a
);

1423 
	}
}

1425 
	$m©ocs£rv_chunk_damaged
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1426 
uöt64_t
 
chunkid
;

1427 
uöt32_t
 
i
;

1429 i‡(
Àngth
%8!=0) {

1430 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_CHUNK_DAMAGED - wr⁄g sizê(%"
PRIu32
"/N*8)",
Àngth
);

1431 
ïå
->
mode
=
KILL
;

1434 
i
=0 ; i<
Àngth
/8 ; i++) {

1435 
chunkid
 = 
	`gë64bô
(&
d©a
);

1437 
	`chunk_damaged
(
ïå
,
chunkid
);

1439 
	}
}

1441 
	$m©ocs£rv_chunks_lo°
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1442 
uöt64_t
 
chunkid
;

1443 
uöt32_t
 
i
;

1445 i‡(
Àngth
%8!=0) {

1446 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_CHUNK_LOST - wr⁄g sizê(%"
PRIu32
"/N*8)",
Àngth
);

1447 
ïå
->
mode
=
KILL
;

1450 
i
=0 ; i<
Àngth
/8 ; i++) {

1451 
chunkid
 = 
	`gë64bô
(&
d©a
);

1453 
	`chunk_lo°
(
ïå
,
chunkid
);

1455 
	}
}

1457 
	$m©ocs£rv_îr‹_occuºed
(
m©ocs£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

1458 ()
d©a
;

1459 i‡(
Àngth
!=0) {

1460 
	`sy¶og
(
LOG_NOTICE
,"CSTOMA_ERROR_OCCURRED - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

1461 
ïå
->
mode
=
KILL
;

1464 
ïå
->
îr‹cou¡î
++;

1465 
	}
}

1489 
	$m©ocs£rv_gŸ∑ckë
(
m©ocs£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

1490 
ty≥
) {

1491 
ANTOAN_NOP
:

1493 
CSTOMA_REGISTER
:

1494 
	`m©ocs£rv_ªgi°î
(
ïå
,
d©a
,
Àngth
);

1496 
CSTOMA_SPACE
:

1497 
	`m©ocs£rv_•a˚
(
ïå
,
d©a
,
Àngth
);

1499 
CSTOMA_CHUNK_DAMAGED
:

1500 
	`m©ocs£rv_chunk_damaged
(
ïå
,
d©a
,
Àngth
);

1502 
CSTOMA_CHUNK_LOST
:

1503 
	`m©ocs£rv_chunks_lo°
(
ïå
,
d©a
,
Àngth
);

1505 
CSTOMA_ERROR_OCCURRED
:

1506 
	`m©ocs£rv_îr‹_occuºed
(
ïå
,
d©a
,
Àngth
);

1508 
CSTOAN_CHUNK_CHECKSUM
:

1509 
	`m©ocs£rv_gŸ_chunk_checksum
(
ïå
,
d©a
,
Àngth
);

1511 
CSTOMA_CREATE
:

1512 
	`m©ocs£rv_gŸ_¸óãchunk_°©us
(
ïå
,
d©a
,
Àngth
);

1514 
CSTOMA_DELETE
:

1515 
	`m©ocs£rv_gŸ_dñëechunk_°©us
(
ïå
,
d©a
,
Àngth
);

1517 
CSTOMA_REPLICATE
:

1518 
	`m©ocs£rv_gŸ_ª∂iˇãchunk_°©us
(
ïå
,
d©a
,
Àngth
);

1520 
CSTOMA_DUPLICATE
:

1521 
	`m©ocs£rv_gŸ_du∂iˇãchunk_°©us
(
ïå
,
d©a
,
Àngth
);

1523 
CSTOMA_SET_VERSION
:

1524 
	`m©ocs£rv_gŸ_£tchunkvîsi⁄_°©us
(
ïå
,
d©a
,
Àngth
);

1526 
CSTOMA_TRUNCATE
:

1527 
	`m©ocs£rv_gŸ_åunˇãchunk_°©us
(
ïå
,
d©a
,
Àngth
);

1529 
CSTOMA_DUPTRUNC
:

1530 
	`m©ocs£rv_gŸ_du±runcchunk_°©us
(
ïå
,
d©a
,
Àngth
);

1533 
	`sy¶og
(
LOG_NOTICE
,"m©ocs: gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

1534 
ïå
->
mode
=
KILL
;

1536 
	}
}

1538 
	$m©ocs£rv_ãrm
() {

1539 
m©ocs£rvíåy
 *
ïå
,*
ó±r
;

1540 
∑ckë°ru˘
 *
µå
,*
∑±r
;

1541 
	`sy¶og
(
LOG_INFO
,"m©ocs: closög %s:%s",
Li°íHo°
,
Li°íP‹t
);

1542 
	`t˝˛o£
(
lsock
);

1544 
ïå
 = 
m©ocs£rvhód
;

1545 
ïå
) {

1546 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1547 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1549 
µå
 = 
ïå
->
ouçuthód
;

1550 
µå
) {

1551 i‡(
µå
->
∑ckë
) {

1552 
	`‰ì
(
µå
->
∑ckë
);

1554 
∑±r
 = 
µå
;

1555 
µå
 =Ö±r->
√xt
;

1556 
	`‰ì
(
∑±r
);

1558 i‡(
ïå
->
£rv°rù
) {

1559 
	`‰ì
(
ïå
->
£rv°rù
);

1561 
ó±r
 = 
ïå
;

1562 
ïå
 =É±r->
√xt
;

1563 
	`‰ì
(
ó±r
);

1565 
m©ocs£rvhód
=
NULL
;

1567 
	`‰ì
(
Li°íHo°
);

1568 
	`‰ì
(
Li°íP‹t
);

1569 
	}
}

1571 
	$m©ocs£rv_ªad
(
m©ocs£rvíåy
 *
ïå
) {

1572 
öt32_t
 
i
;

1573 
uöt32_t
 
ty≥
,
size
;

1574 c⁄° 
uöt8_t
 *
±r
;

1576 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

1577 i‡(
i
==0) {

1578 
	`sy¶og
(
LOG_NOTICE
,"c⁄√˘i⁄ wôh CS(%sËha†bì¿˛o£d byÖìr",
ïå
->
£rv°rù
);

1579 
ïå
->
mode
 = 
KILL
;

1582 i‡(
i
<0) {

1583 i‡(
î∫o
!=
EAGAIN
) {

1584 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"ªad from CS(%sËîr‹",
ïå
->
£rv°rù
);

1585 
ïå
->
mode
 = 
KILL
;

1589 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

1590 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

1592 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

1596 i‡(
ïå
->
mode
==
HEADER
) {

1597 
±r
 = 
ïå
->
hdrbuff
+4;

1598 
size
 = 
	`gë32bô
(&
±r
);

1600 i‡(
size
>0) {

1601 i‡(
size
>
MaxPackëSize
) {

1602 
	`sy¶og
(
LOG_WARNING
,"CS(%sË∑ckëÅoÿl⁄g (%"
PRIu32
"/%u)",
ïå
->
£rv°rù
,
size
,
MaxPackëSize
);

1603 
ïå
->
mode
 = 
KILL
;

1606 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

1607 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

1608 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

1609 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

1610 
ïå
->
mode
 = 
DATA
;

1613 
ïå
->
mode
 = 
DATA
;

1616 i‡(
ïå
->
mode
==
DATA
) {

1617 
±r
 = 
ïå
->
hdrbuff
;

1618 
ty≥
 = 
	`gë32bô
(&
±r
);

1619 
size
 = 
	`gë32bô
(&
±r
);

1621 
ïå
->
mode
=
HEADER
;

1622 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1623 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1625 
	`m©ocs£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

1627 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1628 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1630 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

1633 
	}
}

1635 
	$m©ocs£rv_wrôe
(
m©ocs£rvíåy
 *
ïå
) {

1636 
∑ckë°ru˘
 *
∑ck
;

1637 
öt32_t
 
i
;

1639 
∑ck
 = 
ïå
->
ouçuthód
;

1640 i‡(
∑ck
==
NULL
) {

1643 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

1644 i‡(
i
<0) {

1645 i‡(
î∫o
!=
EAGAIN
) {

1646 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"wrôêtÿCS(%sËîr‹",
ïå
->
£rv°rù
);

1647 
ïå
->
mode
 = 
KILL
;

1651 
∑ck
->
°¨çå
+=
i
;

1652 
∑ck
->
byã¶e·
-=
i
;

1653 i‡(
∑ck
->
byã¶e·
>0) {

1656 
	`‰ì
(
∑ck
->
∑ckë
);

1657 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

1658 i‡(
ïå
->
ouçuthód
==
NULL
) {

1659 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

1661 
	`‰ì
(
∑ck
);

1663 
	}
}

1665 
	$m©ocs£rv_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

1666 
uöt32_t
 
pos
 = *
ndesc
;

1668 
m©ocs£rvíåy
 *
ïå
;

1670 
pdesc
[
pos
].
fd
 = 
lsock
;

1671 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1672 
lsockpdes˝os
 = 
pos
;

1673 
pos
++;

1675 
ïå
=
m©ocs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

1676 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

1677 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

1678 
ïå
->
pdes˝os
 = 
pos
;

1681 i‡(
ïå
->
ouçuthód
!=
NULL
) {

1682 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

1685 
pos
++;

1688 *
ndesc
 = 
pos
;

1690 
	}
}

1692 
	$m©ocs£rv_£rve
(
pﬁlfd
 *
pdesc
) {

1693 
uöt32_t
 
now
=
	`maö_time
();

1694 
uöt32_t
 
≥îù
;

1695 
m©ocs£rvíåy
 *
ïå
,**
k±r
;

1696 
∑ckë°ru˘
 *
µå
,*
∑±r
;

1697 
ns
;

1699 i‡(
lsockpdes˝os
>=0 && (
pdesc
[lsockpdes˝os].
ªvíts
 & 
POLLIN
)) {

1701 
ns
=
	`t˝ac˚±
(
lsock
);

1702 i‡(
ns
<0) {

1703 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"Master<->CS socket:ácceptÉrror");

1705 
	`t˝n⁄block
(
ns
);

1706 
	`t˝nodñay
(
ns
);

1707 
ïå
 = 
	`mÆloc
((
m©ocs£rvíåy
));

1708 
	`∑s£π
(
ïå
);

1709 
ïå
->
√xt
 = 
m©ocs£rvhód
;

1710 
m©ocs£rvhód
 = 
ïå
;

1711 
ïå
->
sock
 = 
ns
;

1712 
ïå
->
pdes˝os
 = -1;

1713 
ïå
->
mode
 = 
HEADER
;

1714 
ïå
->
œ°ªad
 = 
now
;

1715 
ïå
->
œ°wrôe
 = 
now
;

1716 
ïå
->
öpuçackë
.
√xt
 = 
NULL
;

1717 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

1718 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

1719 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

1720 
ïå
->
ouçuthód
 = 
NULL
;

1721 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

1723 
	`t˝gë≥î
(
ïå
->
sock
,&
≥îù
,
NULL
);

1724 
ïå
->
£rv°rù
 = 
	`m©ocs£rv_make°rù
(
≥îù
);

1725 
ïå
->
vîsi⁄
=0;

1726 
ïå
->
£rvù
=0;

1727 
ïå
->
£rvp‹t
=0;

1728 
ïå
->
timeout
=60;

1729 
ïå
->
u£d•a˚
=0;

1730 
ïå
->
tŸÆ•a˚
=0;

1731 
ïå
->
chunkscou¡
=0;

1732 
ïå
->
todñu£d•a˚
=0;

1733 
ïå
->
todñtŸÆ•a˚
=0;

1734 
ïå
->
todñchunkscou¡
=0;

1735 
ïå
->
îr‹cou¡î
=0;

1736 
ïå
->
ºïcou¡î
=0;

1737 
ïå
->
wªpcou¡î
=0;

1738 
ïå
->
dñcou¡î
=0;

1740 
ïå
->
ˇºy
=()(
	`∫du32
())/()(0xFFFFFFFFU);

1748 
ïå
=
m©ocs£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

1749 i‡(
ïå
->
pdes˝os
>=0) {

1750 i‡(
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

1751 
ïå
->
mode
 = 
KILL
;

1753 i‡((
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & 
POLLIN
Ë&&É±r->
mode
!=
KILL
) {

1755 
ïå
->
œ°ªad
 = 
now
;

1756 
	`m©ocs£rv_ªad
(
ïå
);

1758 i‡((
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & 
POLLOUT
Ë&&É±r->
mode
!=
KILL
) {

1760 
ïå
->
œ°wrôe
 = 
now
;

1761 
	`m©ocs£rv_wrôe
(
ïå
);

1764 i‡((
uöt32_t
)(
ïå
->
œ°ªad
+ïå->
timeout
)<(uöt32_t)
now
) {

1765 
ïå
->
mode
 = 
KILL
;

1767 i‡((
uöt32_t
)(
ïå
->
œ°wrôe
+”±r->
timeout
/3))<(uöt32_t)
now
 &&É±r->
ouçuthód
==
NULL
) {

1768 
	`m©ocs£rv_¸óã∑ckë
(
ïå
,
ANTOAN_NOP
,0);

1771 
k±r
 = &
m©ocs£rvhód
;

1772 (
ïå
=*
k±r
)) {

1773 i‡(
ïå
->
mode
 =
KILL
) {

1774 
us
,
ts
;

1775 
us
 = ()(
ïå
->
u£d•a˚
)/()(1024*1024*1024);

1776 
ts
 = ()(
ïå
->
tŸÆ•a˚
)/()(1024*1024*1024);

1777 
	`sy¶og
(
LOG_NOTICE
,"chunk£rvî disc⁄√˘ed - ip: %s,Ö‹t: %"
PRIu16
", u£d•a˚: %"
PRIu64
" (%.2l‡GiB),ÅŸÆ•a˚: %"PRIu64" (%.2l‡GiB)",
ïå
->
£rv°rù
,ïå->
£rvp‹t
,ïå->
u£d•a˚
,
us
,ïå->
tŸÆ•a˚
,
ts
);

1778 
	`m©ocs£rv_ª∂iˇti⁄_disc⁄√˘ed
(
ïå
);

1779 
	`chunk_£rvî_disc⁄√˘ed
(
ïå
);

1780 
	`t˝˛o£
(
ïå
->
sock
);

1781 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

1782 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

1784 
µå
 = 
ïå
->
ouçuthód
;

1785 
µå
) {

1786 i‡(
µå
->
∑ckë
) {

1787 
	`‰ì
(
µå
->
∑ckë
);

1789 
∑±r
 = 
µå
;

1790 
µå
 =Ö±r->
√xt
;

1791 
	`‰ì
(
∑±r
);

1793 i‡(
ïå
->
£rv°rù
) {

1794 
	`‰ì
(
ïå
->
£rv°rù
);

1796 *
k±r
 = 
ïå
->
√xt
;

1797 
	`‰ì
(
ïå
);

1799 
k±r
 = &(
ïå
->
√xt
);

1802 
	}
}

1804 
	$m©ocs£rv_öô
() {

1805 
Li°íHo°
 = 
	`cfg_gë°r
("MATOCS_LISTEN_HOST","*");

1806 
Li°íP‹t
 = 
	`cfg_gë°r
("MATOCS_LISTEN_PORT","9420");

1808 
lsock
 = 
	`t˝sockë
();

1809 i‡(
lsock
<0) {

1810 
	`mfs_îæog
(
LOG_ERR
,"master <-> chunkservers module: can't create socket");

1813 
	`t˝n⁄block
(
lsock
);

1814 
	`t˝nodñay
(
lsock
);

1815 
	`t˝ªu£addr
(
lsock
);

1816 i‡(
	`t˝£èc˚±fûãr
(
lsock
)<0 && 
î∫o
!=
ENOTSUP
) {

1817 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"matocs: can't setáccept filter");

1819 i‡(
	`t˝°æi°í
(
lsock
,
Li°íHo°
,
Li°íP‹t
,100)<0) {

1820 
	`mfs_îæog
(
LOG_ERR
,"master <-> chunkservers module: can'tÜisten on socket");

1823 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"ma°î <-> chunk£rvî†moduÀ:Üi°í o¿%s:%s",
Li°íHo°
,
Li°íP‹t
);

1825 
	`m©ocs£rv_ª∂iˇti⁄_öô
();

1826 
m©ocs£rvhód
 = 
NULL
;

1827 
	`maö_de°ru˘ªgi°î
(
m©ocs£rv_ãrm
);

1828 
	`maö_pﬁÃegi°î
(
m©ocs£rv_desc
,
m©ocs£rv_£rve
);

1831 
	}
}

	@mfsmaster/matocsserv.h

19 #i‚de‡
_MATOCSSERV_H_


20 
	#_MATOCSSERV_H_


	)

22 
	~<öây≥s.h
>

24 
m©ocs£rv_ußgedif„ªn˚
(*
möußge
,*
maxußge
,
uöt16_t
 *
ußbÀscou¡
,uöt16_à*
tŸÆscou¡
);

25 
uöt16_t
 
m©ocs£rv_gë£rvîs_‹dîed
(* 
±rs
[65535],
maxußgediff
,
uöt32_t
 *
mö
,uöt32_à*
max
);

26 
uöt16_t
 
m©ocs£rv_gë£rvîs_wøndom
(* 
±rs
[65535],uöt16_à
dem™d
);

27 
uöt16_t
 
m©ocs£rv_gë£rvîs_Às§ïl
(* 
±rs
[65535],uöt16_à
ª∂imô
);

28 
m©ocs£rv_gë•a˚
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
);

29 * 
m©ocs£rv_gë°rù
(*
e
);

30 
m©ocs£rv_gëloˇti⁄
(*
e
,
uöt32_t
 *
£rvù
,
uöt16_t
 *
£rvp‹t
);

31 
uöt16_t
 
m©ocs£rv_ª∂iˇti⁄_ªad_cou¡î
(*
e
);

32 
uöt16_t
 
m©ocs£rv_ª∂iˇti⁄_wrôe_cou¡î
(*
e
);

33 
uöt16_t
 
m©ocs£rv_dñëi⁄_cou¡î
(*
e
);

34 
uöt32_t
 
m©ocs£rv_c£rvli°_size
();

35 
m©ocs£rv_c£rvli°_d©a
(
uöt8_t
 *
±r
);

36 
m©ocs£rv_£nd_ª∂iˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,*
§c
);

37 
m©ocs£rv_£nd_ª∂iˇãchunk_x‹
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,
uöt8_t
 
˙t
,**
§c
,uöt64_à*
§cchunkid
,uöt32_à*
§cvîsi⁄
);

41 
m©ocs£rv_£nd_chunk›
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
√wvîsi⁄
,uöt64_à
c›ychunkid
,uöt32_à
c›yvîsi⁄
,uöt32_à
Àng
);

42 
m©ocs£rv_£nd_dñëechunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
);

43 
m©ocs£rv_£nd_¸óãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
);

44 
m©ocs£rv_£nd_£tchunkvîsi⁄
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
ﬁdvîsi⁄
);

45 
m©ocs£rv_£nd_du∂iˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt64_à
ﬁdchunkid
,uöt32_à
ﬁdvîsi⁄
);

46 
m©ocs£rv_£nd_åunˇãchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
Àngth
,uöt32_à
vîsi⁄
,uöt32_à
ﬁdvîsi⁄
);

47 
m©ocs£rv_£nd_du±runcchunk
(*
e
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt64_à
ﬁdchunkid
,uöt32_à
ﬁdvîsi⁄
,uöt32_à
Àngth
);

50 
m©ocs£rv_öô
();

	@mfsmaster/matomlserv.c

19 
	~"c⁄fig.h
"

21 
	~<time.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/uio.h
>

24 
	~<f˙é.h
>

25 
	~<uni°d.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<sy¶og.h
>

30 
	~<î∫o.h
>

31 
	~<öây≥s.h
>

32 
	~<√töë/ö.h
>

34 
	~"MFSCommuniˇti⁄.h
"

36 
	~"d©≠ack.h
"

37 
	~"m©oml£rv.h
"

38 
	~"¸c.h
"

39 
	~"cfg.h
"

40 
	~"maö.h
"

41 
	~"sockës.h
"

42 
	~"¶oggî.h
"

43 
	~"mas£π.h
"

45 
	#MaxPackëSize
 1500000

	)

48 íum{
	mKILL
,
	mHEADER
,
	mDATA
};

50 
	s∑ckë°ru˘
 {

51 
∑ckë°ru˘
 *
	m√xt
;

52 
uöt8_t
 *
	m°¨çå
;

53 
uöt32_t
 
	mbyã¶e·
;

54 
uöt8_t
 *
	m∑ckë
;

55 } 
	t∑ckë°ru˘
;

57 
	sm©oml£rvíåy
 {

58 
uöt8_t
 
	mmode
;

59 
	msock
;

60 
öt32_t
 
	mpdes˝os
;

61 
uöt32_t
 
	mœ°ªad
,
	mœ°wrôe
;

62 
uöt8_t
 
	mhdrbuff
[8];

63 
∑ckë°ru˘
 
	möpuçackë
;

64 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

66 
uöt16_t
 
	mtimeout
;

68 *
	m£rv°rù
;

69 
uöt32_t
 
	mvîsi⁄
;

70 
uöt32_t
 
	m£rvù
;

72 
	mmëafd
,
	mchaö1fd
,
	mchaö2fd
;

74 
m©oml£rvíåy
 *
	m√xt
;

75 } 
	tm©oml£rvíåy
;

77 
m©oml£rvíåy
 *
	gm©oml£rvhód
=
NULL
;

78 
	glsock
;

79 
öt32_t
 
	glsockpdes˝os
;

82 *
	gLi°íHo°
;

83 *
	gLi°íP‹t
;

86 
uöt32_t
 
	$m©oml£rv_mlogli°_size
() {

87 
m©oml£rvíåy
 *
ïå
;

88 
uöt32_t
 
i
;

89 
i
=0;

90 
ïå
 = 
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

91 i‡(
ïå
->
mode
!=
KILL
) {

92 
i
++;

95  
i
*(4+4);

96 
	}
}

98 
	$m©oml£rv_mlogli°_d©a
(
uöt8_t
 *
±r
) {

99 
m©oml£rvíåy
 *
ïå
;

100 
ïå
 = 
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

101 i‡(
ïå
->
mode
!=
KILL
) {

102 
	`put32bô
(&
±r
,
ïå
->
vîsi⁄
);

103 
	`put32bô
(&
±r
,
ïå
->
£rvù
);

106 
	}
}

108 
	$m©oml£rv_°©us
() {

109 
m©oml£rvíåy
 *
ïå
;

110 
ïå
 = 
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

111 i‡(
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
) {

115 
	`sy¶og
(
LOG_WARNING
,"no metaÜoggers connected !!!");

116 
	}
}

118 * 
	$m©oml£rv_make°rù
(
uöt32_t
 
ù
) {

119 
uöt8_t
 *
±r
,
±
[4];

120 
uöt32_t
 
l
,
i
;

121 *
›å
;

122 
±r
 = 
±
;

123 
	`put32bô
(&
±r
,
ù
);

124 
l
=0;

125 
i
=0 ; i<4 ; i++) {

126 i‡(
±
[
i
]>=100) {

127 
l
+=3;

128 } i‡(
±
[
i
]>=10) {

129 
l
+=2;

131 
l
+=1;

134 
l
+=4;

135 
›å
 = 
	`mÆloc
(
l
);

136 
	`∑s£π
(
›å
);

137 
	`¢¥ötf
(
›å
,
l
,"%"
PRIu8
".%"PRIu8".%"PRIu8".%"PRIu8,
±
[0],pt[1],pt[2],pt[3]);

138 
›å
[
l
-1]=0;

139  
›å
;

140 
	}
}

142 
uöt8_t
* 
	$m©oml£rv_¸óã∑ckë
(
m©oml£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

143 
∑ckë°ru˘
 *
ouçackë
;

144 
uöt8_t
 *
±r
;

145 
uöt32_t
 
psize
;

147 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

148 
	`∑s£π
(
ouçackë
);

149 
psize
 = 
size
+8;

150 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

151 
	`∑s£π
(
ouçackë
->
∑ckë
);

152 
ouçackë
->
byã¶e·
 = 
psize
;

153 
±r
 = 
ouçackë
->
∑ckë
;

154 
	`put32bô
(&
±r
,
ty≥
);

155 
	`put32bô
(&
±r
,
size
);

156 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

157 
ouçackë
->
√xt
 = 
NULL
;

158 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

159 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

160  
±r
;

161 
	}
}

163 
	$m©oml£rv_ªgi°î
(
m©oml£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

164 
uöt8_t
 
rvîsi⁄
;

166 i‡(
ïå
->
vîsi⁄
>0) {

167 
	`sy¶og
(
LOG_WARNING
,"gotÑegister message fromÑegistered metalogger !!!");

168 
ïå
->
mode
=
KILL
;

171 i‡(
Àngth
<1) {

172 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_REGISTER - wr⁄g sizê(%"
PRIu32
")",
Àngth
);

173 
ïå
->
mode
=
KILL
;

176 
rvîsi⁄
 = 
	`gë8bô
(&
d©a
);

177 i‡(
rvîsi⁄
==1) {

178 i‡(
Àngth
!=7) {

179 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_REGISTER (vî 1Ë- wr⁄g sizê(%"
PRIu32
"/7)",
Àngth
);

180 
ïå
->
mode
=
KILL
;

183 
ïå
->
vîsi⁄
 = 
	`gë32bô
(&
d©a
);

184 
ïå
->
timeout
 = 
	`gë16bô
(&
d©a
);

185 i‡(
ïå
->
timeout
<10) {

186 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_REGISTER communiˇti⁄ÅimeouàtoÿsmÆ»(%"
PRIu16
" sec⁄d†- should bê©Üó° 10 sec⁄ds)",
ïå
->
timeout
);

187 i‡(
ïå
->
timeout
<3) {

188 
ïå
->
timeout
=3;

194 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_REGISTER - wr⁄g vîsi⁄ (%"
PRIu8
"/1)",
rvîsi⁄
);

195 
ïå
->
mode
=
KILL
;

199 
	}
}

201 
	$m©oml£rv_dow∆ﬂd_°¨t
(
m©oml£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

202 
uöt8_t
 
fûíum
;

203 
uöt64_t
 
size
;

204 
uöt8_t
 *
±r
;

205 i‡(
Àngth
!=1) {

206 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_DOWNLOAD_START - wr⁄g sizê(%"
PRIu32
"/1)",
Àngth
);

207 
ïå
->
mode
=
KILL
;

210 
fûíum
 = 
	`gë8bô
(&
d©a
);

211 i‡(
fûíum
==1 || filenum==2) {

212 i‡(
ïå
->
mëafd
>=0) {

213 
	`˛o£
(
ïå
->
mëafd
);

214 
ïå
->
mëafd
=-1;

216 i‡(
ïå
->
chaö1fd
>=0) {

217 
	`˛o£
(
ïå
->
chaö1fd
);

218 
ïå
->
chaö1fd
=-1;

220 i‡(
ïå
->
chaö2fd
>=0) {

221 
	`˛o£
(
ïå
->
chaö2fd
);

222 
ïå
->
chaö2fd
=-1;

225 i‡(
fûíum
==1) {

226 
ïå
->
mëafd
 = 
	`›í
("mëad©a.mfs.back",
O_RDONLY
);

227 
ïå
->
chaö1fd
 = 
	`›í
("ch™gñog.0.mfs",
O_RDONLY
);

228 
ïå
->
chaö2fd
 = 
	`›í
("ch™gñog.1.mfs",
O_RDONLY
);

229 } i‡(
fûíum
==2) {

230 
ïå
->
mëafd
 = 
	`›í
("£ssi⁄s.mfs",
O_RDONLY
);

231 } i‡(
fûíum
==11) {

232 i‡(
ïå
->
mëafd
>=0) {

233 
	`˛o£
(
ïå
->
mëafd
);

235 
ïå
->
mëafd
 =É±r->
chaö1fd
;

236 
ïå
->
chaö1fd
 = -1;

237 } i‡(
fûíum
==12) {

238 i‡(
ïå
->
mëafd
>=0) {

239 
	`˛o£
(
ïå
->
mëafd
);

241 
ïå
->
mëafd
 =É±r->
chaö2fd
;

242 
ïå
->
chaö2fd
 = -1;

244 
ïå
->
mode
=
KILL
;

247 i‡(
ïå
->
mëafd
<0) {

248 i‡(
fûíum
==11 || filenum==12) {

249 
±r
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_DOWNLOAD_START
,8);

250 
	`put64bô
(&
±r
,0);

253 
±r
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_DOWNLOAD_START
,1);

254 
	`put8bô
(&
±r
,0xff);

258 
size
 = 
	`l£ek
(
ïå
->
mëafd
,0,
SEEK_END
);

259 
±r
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_DOWNLOAD_START
,8);

260 
	`put64bô
(&
±r
,
size
);

261 
	}
}

263 
	$m©oml£rv_dow∆ﬂd_d©a
(
m©oml£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

264 
uöt8_t
 *
±r
;

265 
uöt64_t
 
off£t
;

266 
uöt32_t
 
Àng
;

267 
uöt32_t
 
¸c
;

268 
ssize_t
 
ªt
;

270 i‡(
Àngth
!=12) {

271 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_DOWNLOAD_DATA - wr⁄g sizê(%"
PRIu32
"/12)",
Àngth
);

272 
ïå
->
mode
=
KILL
;

275 i‡(
ïå
->
mëafd
<0) {

276 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_DOWNLOAD_DATA - fileÇot opened");

277 
ïå
->
mode
=
KILL
;

280 
off£t
 = 
	`gë64bô
(&
d©a
);

281 
Àng
 = 
	`gë32bô
(&
d©a
);

282 
±r
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_DOWNLOAD_DATA
,16+
Àng
);

283 
	`put64bô
(&
±r
,
off£t
);

284 
	`put32bô
(&
±r
,
Àng
);

285 #ifde‡
HAVE_PREAD


286 
ªt
 = 
	`¥ód
(
ïå
->
mëafd
,
±r
+4,
Àng
,
off£t
);

288 
	`l£ek
(
ïå
->
mëafd
,
off£t
,
SEEK_SET
);

289 
ªt
 = 
	`ªad
(
ïå
->
mëafd
,
±r
+4,
Àng
);

291 i‡(
ªt
!=(
ssize_t
)
Àng
) {

292 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"errorÑeading metafile");

293 
ïå
->
mode
=
KILL
;

296 
¸c
 = 
	`my¸c32
(0,
±r
+4,
Àng
);

297 
	`put32bô
(&
±r
,
¸c
);

298 
	}
}

300 
	$m©oml£rv_dow∆ﬂd_íd
(
m©oml£rvíåy
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

301 ()
d©a
;

302 i‡(
Àngth
!=0) {

303 
	`sy¶og
(
LOG_NOTICE
,"MLTOMA_DOWNLOAD_END - wr⁄g sizê(%"
PRIu32
"/0)",
Àngth
);

304 
ïå
->
mode
=
KILL
;

307 i‡(
ïå
->
mëafd
>=0) {

308 
	`˛o£
(
ïå
->
mëafd
);

309 
ïå
->
mëafd
=-1;

311 
	}
}

313 
	$m©oml£rv_brﬂdˇ°_log°rög
(
uöt64_t
 
vîsi⁄
,
uöt8_t
 *
log°r
,
uöt32_t
 
log°rsize
) {

314 
m©oml£rvíåy
 *
ïå
;

315 
uöt8_t
 *
d©a
;

317 
ïå
 = 
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

318 i‡(
ïå
->
vîsi⁄
>0) {

319 
d©a
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_METACHANGES_LOG
,9+
log°rsize
);

320 
	`put8bô
(&
d©a
,0xFF);

321 
	`put64bô
(&
d©a
,
vîsi⁄
);

322 
	`mem˝y
(
d©a
,
log°r
,
log°rsize
);

325 
	}
}

327 
	$m©oml£rv_brﬂdˇ°_logrŸ©e
() {

328 
m©oml£rvíåy
 *
ïå
;

329 
uöt8_t
 *
d©a
;

331 
ïå
 = 
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

332 i‡(
ïå
->
vîsi⁄
>0) {

333 
d©a
 = 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
MATOML_METACHANGES_LOG
,1);

334 
	`put8bô
(&
d©a
,0x55);

337 
	}
}

339 
	$m©oml£rv_bef‹e˛o£
(
m©oml£rvíåy
 *
ïå
) {

340 i‡(
ïå
->
mëafd
>=0) {

341 
	`˛o£
(
ïå
->
mëafd
);

342 
ïå
->
mëafd
=-1;

344 i‡(
ïå
->
chaö1fd
>=0) {

345 
	`˛o£
(
ïå
->
chaö1fd
);

346 
ïå
->
chaö1fd
=-1;

348 i‡(
ïå
->
chaö2fd
>=0) {

349 
	`˛o£
(
ïå
->
chaö2fd
);

350 
ïå
->
chaö2fd
=-1;

352 
	}
}

354 
	$m©oml£rv_gŸ∑ckë
(
m©oml£rvíåy
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

355 
ty≥
) {

356 
ANTOAN_NOP
:

358 
MLTOMA_REGISTER
:

359 
	`m©oml£rv_ªgi°î
(
ïå
,
d©a
,
Àngth
);

361 
MLTOMA_DOWNLOAD_START
:

362 
	`m©oml£rv_dow∆ﬂd_°¨t
(
ïå
,
d©a
,
Àngth
);

364 
MLTOMA_DOWNLOAD_DATA
:

365 
	`m©oml£rv_dow∆ﬂd_d©a
(
ïå
,
d©a
,
Àngth
);

367 
MLTOMA_DOWNLOAD_END
:

368 
	`m©oml£rv_dow∆ﬂd_íd
(
ïå
,
d©a
,
Àngth
);

371 
	`sy¶og
(
LOG_NOTICE
,"m©oml: gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

372 
ïå
->
mode
=
KILL
;

374 
	}
}

376 
	$m©oml£rv_ãrm
() {

377 
m©oml£rvíåy
 *
ïå
,*
ó±r
;

378 
∑ckë°ru˘
 *
µå
,*
∑±r
;

379 
	`sy¶og
(
LOG_INFO
,"m©oml: closög %s:%s",
Li°íHo°
,
Li°íP‹t
);

380 
	`t˝˛o£
(
lsock
);

382 
ïå
 = 
m©oml£rvhód
;

383 
ïå
) {

384 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

385 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

387 
µå
 = 
ïå
->
ouçuthód
;

388 
µå
) {

389 i‡(
µå
->
∑ckë
) {

390 
	`‰ì
(
µå
->
∑ckë
);

392 
∑±r
 = 
µå
;

393 
µå
 =Ö±r->
√xt
;

394 
	`‰ì
(
∑±r
);

396 
ó±r
 = 
ïå
;

397 
ïå
 =É±r->
√xt
;

398 
	`‰ì
(
ó±r
);

400 
m©oml£rvhód
=
NULL
;

402 
	`‰ì
(
Li°íHo°
);

403 
	`‰ì
(
Li°íP‹t
);

404 
	}
}

406 
	$m©oml£rv_ªad
(
m©oml£rvíåy
 *
ïå
) {

407 
öt32_t
 
i
;

408 
uöt32_t
 
ty≥
,
size
;

409 c⁄° 
uöt8_t
 *
±r
;

411 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

412 i‡(
i
==0) {

413 
	`sy¶og
(
LOG_NOTICE
,"c⁄√˘i⁄ wôh ML(%sËha†bì¿˛o£d byÖìr",
ïå
->
£rv°rù
);

414 
ïå
->
mode
 = 
KILL
;

417 i‡(
i
<0) {

418 i‡(
î∫o
!=
EAGAIN
) {

419 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"ªad from ML(%sËîr‹",
ïå
->
£rv°rù
);

420 
ïå
->
mode
 = 
KILL
;

424 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

425 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

427 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

431 i‡(
ïå
->
mode
==
HEADER
) {

432 
±r
 = 
ïå
->
hdrbuff
+4;

433 
size
 = 
	`gë32bô
(&
±r
);

435 i‡(
size
>0) {

436 i‡(
size
>
MaxPackëSize
) {

437 
	`sy¶og
(
LOG_WARNING
,"ML(%sË∑ckëÅoÿl⁄g (%"
PRIu32
"/%u)",
ïå
->
£rv°rù
,
size
,
MaxPackëSize
);

438 
ïå
->
mode
 = 
KILL
;

441 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

442 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

443 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

444 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

445 
ïå
->
mode
 = 
DATA
;

448 
ïå
->
mode
 = 
DATA
;

451 i‡(
ïå
->
mode
==
DATA
) {

452 
±r
 = 
ïå
->
hdrbuff
;

453 
ty≥
 = 
	`gë32bô
(&
±r
);

454 
size
 = 
	`gë32bô
(&
±r
);

456 
ïå
->
mode
=
HEADER
;

457 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

458 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

460 
	`m©oml£rv_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

462 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

463 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

465 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

468 
	}
}

470 
	$m©oml£rv_wrôe
(
m©oml£rvíåy
 *
ïå
) {

471 
∑ckë°ru˘
 *
∑ck
;

472 
öt32_t
 
i
;

474 
∑ck
 = 
ïå
->
ouçuthód
;

475 i‡(
∑ck
==
NULL
) {

478 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

479 i‡(
i
<0) {

480 i‡(
î∫o
!=
EAGAIN
) {

481 
	`mfs_¨g_îæog_sûít
(
LOG_NOTICE
,"wrôêtÿML(%sËîr‹",
ïå
->
£rv°rù
);

482 
ïå
->
mode
 = 
KILL
;

486 
∑ck
->
°¨çå
+=
i
;

487 
∑ck
->
byã¶e·
-=
i
;

488 i‡(
∑ck
->
byã¶e·
>0) {

491 
	`‰ì
(
∑ck
->
∑ckë
);

492 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

493 i‡(
ïå
->
ouçuthód
==
NULL
) {

494 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

496 
	`‰ì
(
∑ck
);

498 
	}
}

500 
	$m©oml£rv_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

501 
uöt32_t
 
pos
 = *
ndesc
;

502 
m©oml£rvíåy
 *
ïå
;

503 
pdesc
[
pos
].
fd
 = 
lsock
;

504 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

505 
lsockpdes˝os
 = 
pos
;

506 
pos
++;

507 
ïå
=
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

508 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

509 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

510 
ïå
->
pdes˝os
 = 
pos
;

511 i‡(
ïå
->
ouçuthód
!=
NULL
) {

512 
pdesc
[
pos
].
evíts
 |
POLLOUT
;

514 
pos
++;

516 *
ndesc
 = 
pos
;

517 
	}
}

519 
	$m©oml£rv_£rve
(
pﬁlfd
 *
pdesc
) {

520 
uöt32_t
 
now
=
	`maö_time
();

521 
m©oml£rvíåy
 *
ïå
,**
k±r
;

522 
∑ckë°ru˘
 *
µå
,*
∑±r
;

523 
ns
;

525 i‡(
lsockpdes˝os
>=0 && (
pdesc
[lsockpdes˝os].
ªvíts
 & 
POLLIN
)) {

526 
ns
=
	`t˝ac˚±
(
lsock
);

527 i‡(
ns
<0) {

528 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"Master<->ML socket:ácceptÉrror");

530 
	`t˝n⁄block
(
ns
);

531 
	`t˝nodñay
(
ns
);

532 
ïå
 = 
	`mÆloc
((
m©oml£rvíåy
));

533 
	`∑s£π
(
ïå
);

534 
ïå
->
√xt
 = 
m©oml£rvhód
;

535 
m©oml£rvhód
 = 
ïå
;

536 
ïå
->
sock
 = 
ns
;

537 
ïå
->
pdes˝os
 = -1;

538 
ïå
->
mode
 = 
HEADER
;

539 
ïå
->
œ°ªad
 = 
now
;

540 
ïå
->
œ°wrôe
 = 
now
;

541 
ïå
->
öpuçackë
.
√xt
 = 
NULL
;

542 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

543 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

544 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

545 
ïå
->
ouçuthód
 = 
NULL
;

546 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

547 
ïå
->
timeout
 = 10;

549 
	`t˝gë≥î
(
ïå
->
sock
,&”±r->
£rvù
),
NULL
);

550 
ïå
->
£rv°rù
 = 
	`m©oml£rv_make°rù
”±r->
£rvù
);

551 
ïå
->
vîsi⁄
=0;

552 
ïå
->
mëafd
=-1;

553 
ïå
->
chaö1fd
=-1;

554 
ïå
->
chaö2fd
=-1;

557 
ïå
=
m©oml£rvhód
 ;É±∏;É±rÛ±r->
√xt
) {

558 i‡(
ïå
->
pdes˝os
>=0) {

559 i‡(
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

560 
ïå
->
mode
 = 
KILL
;

562 i‡((
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & 
POLLIN
Ë&&É±r->
mode
!=
KILL
) {

563 
ïå
->
œ°ªad
 = 
now
;

564 
	`m©oml£rv_ªad
(
ïå
);

566 i‡((
pdesc
[
ïå
->
pdes˝os
].
ªvíts
 & 
POLLOUT
Ë&&É±r->
mode
!=
KILL
) {

567 
ïå
->
œ°wrôe
 = 
now
;

568 
	`m©oml£rv_wrôe
(
ïå
);

571 i‡((
uöt32_t
)(
ïå
->
œ°ªad
+ïå->
timeout
)<(uöt32_t)
now
) {

572 
ïå
->
mode
 = 
KILL
;

574 i‡((
uöt32_t
)(
ïå
->
œ°wrôe
+”±r->
timeout
/3))<(uöt32_t)
now
 &&É±r->
ouçuthód
==
NULL
) {

575 
	`m©oml£rv_¸óã∑ckë
(
ïå
,
ANTOAN_NOP
,0);

578 
k±r
 = &
m©oml£rvhód
;

579 (
ïå
=*
k±r
)) {

580 i‡(
ïå
->
mode
 =
KILL
) {

581 
	`m©oml£rv_bef‹e˛o£
(
ïå
);

582 
	`t˝˛o£
(
ïå
->
sock
);

583 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

584 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

586 
µå
 = 
ïå
->
ouçuthód
;

587 
µå
) {

588 i‡(
µå
->
∑ckë
) {

589 
	`‰ì
(
µå
->
∑ckë
);

591 
∑±r
 = 
µå
;

592 
µå
 =Ö±r->
√xt
;

593 
	`‰ì
(
∑±r
);

595 i‡(
ïå
->
£rv°rù
) {

596 
	`‰ì
(
ïå
->
£rv°rù
);

598 *
k±r
 = 
ïå
->
√xt
;

599 
	`‰ì
(
ïå
);

601 
k±r
 = &(
ïå
->
√xt
);

604 
	}
}

606 
	$m©oml£rv_öô
() {

607 
Li°íHo°
 = 
	`cfg_gë°r
("MATOML_LISTEN_HOST","*");

608 
Li°íP‹t
 = 
	`cfg_gë°r
("MATOML_LISTEN_PORT","9419");

610 
lsock
 = 
	`t˝sockë
();

611 i‡(
lsock
<0) {

612 
	`mfs_îæog
(
LOG_ERR
,"master <-> metaloggers module: can't create socket");

615 
	`t˝n⁄block
(
lsock
);

616 
	`t˝nodñay
(
lsock
);

617 
	`t˝ªu£addr
(
lsock
);

618 i‡(
	`t˝£èc˚±fûãr
(
lsock
)<0 && 
î∫o
!=
ENOTSUP
) {

619 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"matoml: can't setáccept filter");

621 i‡(
	`t˝°æi°í
(
lsock
,
Li°íHo°
,
Li°íP‹t
,100)<0) {

622 
	`mfs_îæog
(
LOG_ERR
,"master <-> metaloggers module: can'tÜisten on socket");

625 
	`mfs_¨g_sy¶og
(
LOG_NOTICE
,"ma°î <-> mëÆoggî†moduÀ:Üi°í o¿%s:%s",
Li°íHo°
,
Li°íP‹t
);

627 
m©oml£rvhód
 = 
NULL
;

628 
	`maö_de°ru˘ªgi°î
(
m©oml£rv_ãrm
);

629 
	`maö_pﬁÃegi°î
(
m©oml£rv_desc
,
m©oml£rv_£rve
);

630 
	`maö_timîegi°î
(
TIMEMODE_SKIP_LATE
,3600,0,
m©oml£rv_°©us
);

632 
	}
}

	@mfsmaster/matomlserv.h

19 #i‚de‡
_MATOMLSERV_H_


20 
	#_MATOMLSERV_H_


	)

22 
	~<öây≥s.h
>

24 
uöt32_t
 
m©oml£rv_mlogli°_size
();

25 
m©oml£rv_mlogli°_d©a
(
uöt8_t
 *
±r
);

27 
m©oml£rv_brﬂdˇ°_log°rög
(
uöt64_t
 
vîsi⁄
,
uöt8_t
 *
log°r
,
uöt32_t
 
log°rsize
);

28 
m©oml£rv_brﬂdˇ°_logrŸ©e
();

29 
m©oml£rv_öô
();

	@mfsmaster/topology.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<sy¶og.h
>

25 
	~<î∫o.h
>

26 
	~<öây≥s.h
>

28 
	~"ôªe.h
"

30 
	~"maö.h
"

31 
	~"cfg.h
"

32 
	~"¶oggî.h
"

33 
	~"mas£π.h
"

35 *
	gøckåì
;

36 *
	gT›ﬁogyFûeName
;

79 
	$t›ﬁogy_∑r£√t
(*
√t
,
uöt32_t
 *
‰omù
,uöt32_à*
toù
) {

80 
uöt32_t
 
ù
,
i
,
o˘ë
;

81 i‡(
√t
[0]=='*' &&Çet[1]==0) {

82 *
‰omù
 = 0;

83 *
toù
 = 0xFFFFFFFFU;

86 
ù
=0;

87 
i
=0 ; i<4; i++) {

88 i‡(*
√t
>='0' && *net<='9') {

89 
o˘ë
=0;

90 *
√t
>='0' && *net<='9') {

91 
o˘ë
*=10;

92 
o˘ë
+=*
√t
-'0';

93 
√t
++;

94 i‡(
o˘ë
>255) {

101 i‡(
i
<3) {

102 i‡(*
√t
!='.') {

105 
√t
++;

107 
ù
*=256;

108 
ù
+=
o˘ë
;

110 i‡(*
√t
==0) {

111 *
‰omù
 = 
ù
;

112 *
toù
 = 
ù
;

115 i‡(*
√t
=='/') {

116 *
‰omù
 = 
ù
;

117 
ù
=0;

118 
√t
++;

119 
i
=0 ; i<4; i++) {

120 i‡(*
√t
>='0' && *net<='9') {

121 
o˘ë
=0;

122 *
√t
>='0' && *net<='9') {

123 
o˘ë
*=10;

124 
o˘ë
+=*
√t
-'0';

125 
√t
++;

126 i‡(
o˘ë
>255) {

133 i‡(
i
==0 && *
√t
==0 && 
o˘ë
<=32) {

134 
ù
 = 0xFFFFFFFF;

135 i‡(
o˘ë
<32) {

136 
ù
<<=32-
o˘ë
;

140 i‡(
i
<3) {

141 i‡(*
√t
!='.') {

144 
√t
++;

146 
ù
*=256;

147 
ù
+=
o˘ë
;

149 i‡(*
√t
!=0) {

152 *
‰omù
 &
ù
;

153 *
toù
 = *
‰omù
 | (
ù
 ^ 0xFFFFFFFFU);

156 i‡(*
√t
=='-') {

157 *
‰omù
 = 
ù
;

158 
ù
=0;

159 
√t
++;

160 
i
=0 ; i<4; i++) {

161 i‡(*
√t
>='0' && *net<='9') {

162 
o˘ë
=0;

163 *
√t
>='0' && *net<='9') {

164 
o˘ë
*=10;

165 
o˘ë
+=*
√t
-'0';

166 
√t
++;

167 i‡(
o˘ë
>255) {

174 i‡(
i
<3) {

175 i‡(*
√t
!='.') {

178 
√t
++;

180 
ù
*=256;

181 
ù
+=
o˘ë
;

183 i‡(*
√t
!=0) {

186 *
toù
 = 
ù
;

190 
	}
}

198 
uöt8_t
 
	$t›ﬁogy_di°™˚
(
uöt32_t
 
ù1
,uöt32_à
ù2
) {

199 
uöt32_t
 
rid1
,
rid2
;

200 i‡(
ù1
==
ù2
) {

205 
rid1
 = 
	`ôªe_föd
(
øckåì
,
ù1
);

206 
rid2
 = 
	`ôªe_föd
(
øckåì
,
ù2
);

216  (
rid1
==
rid2
)?1:2;

217 
	}
}

358 
	$t›ﬁogy_∑r£löe
(*
löe
,
uöt32_t
 
löío
,uöt32_à*
fù
,uöt32_à*
tù
,uöt32_à*
rid
) {

359 *
√t
;

360 *
p
;

362 i‡(*
löe
=='#') {

366 
p
 = 
löe
;

367 *
p
==' ' || *p=='\t') {

368 
p
++;

370 
√t
 = 
p
;

371 *
p
 && *p!=' ' && *p!='\t') {

372 
p
++;

374 i‡(*
p
==0 || *p=='\r' || *p=='\n') {

375 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf°›ﬁogy: incom∂ëêdeföôi⁄ i¿löe: %"
PRIu32
,
löío
);

376 
	`Ârötf
(
°dîr
,"mf°›ﬁogy: incom∂ëêdeföôi⁄ i¿löe: %"
PRIu32
"\n",
löío
);

379 *
p
=0;

380 
p
++;

381 i‡(
	`t›ﬁogy_∑r£√t
(
√t
,
fù
,
tù
)<0) {

382 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf°›ﬁogy: inc‹ª˘ ip/√tw‹k deföôi⁄ i¿löe: %"
PRIu32
,
löío
);

383 
	`Ârötf
(
°dîr
,"mf°›ﬁogy: inc‹ª˘ ip/√tw‹k deföôi⁄ i¿löe: %"
PRIu32
"\n",
löío
);

387 *
p
==' ' || *p=='\t') {

388 
p
++;

391 i‡(*
p
<'0' || *p>'9') {

392 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf°›ﬁogy: inc‹ª˘Ñack id i¿löe: %"
PRIu32
,
löío
);

393 
	`Ârötf
(
°dîr
,"mf°›ﬁogy: inc‹ª˘Ñack id i¿löe: %"
PRIu32
"\n",
löío
);

397 *
rid
 = 
	`°πoul
(
p
,&p,10);

399 *
p
==' ' || *p=='\t') {

400 
p
++;

403 i‡(*
p
 && *p!='\r' && *p!='\n' && *p!='#') {

404 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"mf°›ﬁogy: g¨bagêfoundáàthêíd o‡löe: %"
PRIu32
,
löío
);

405 
	`Ârötf
(
°dîr
,"mf°›ﬁogy: g¨bagêfoundáàthêíd o‡löe: %"
PRIu32
"\n",
löío
);

409 
	}
}

411 
	$t›ﬁogy_lﬂd
() {

412 
FILE
 *
fd
;

413 
löebuff
[10000];

414 
uöt32_t
 
löío
;

415 
uöt32_t
 
fù
,
tù
,
rid
;

416 *
√wåì
;

418 
fd
 = 
	`f›í
(
T›ﬁogyFûeName
,"r");

419 i‡(
fd
==
NULL
) {

420 i‡(
î∫o
==
ENOENT
) {

421 i‡(
øckåì
) {

422 
	`sy¶og
(
LOG_WARNING
,"mf°›ﬁogy c⁄figuøti⁄ fûê(%sËnŸ found -Çëw‹kÅ›ﬁogyÇŸ ch™ged",
T›ﬁogyFûeName
);

424 
	`sy¶og
(
LOG_WARNING
,"mf°›ﬁogy c⁄figuøti⁄ fûê(%sËnŸ found -Çëw‹kÅ›ﬁogyÇŸ deföed",
T›ﬁogyFûeName
);

426 
	`Ârötf
(
°dîr
,"mf°›ﬁogy c⁄figuøti⁄ fûê(%sËnŸ found - usög deÁu…s\n",
T›ﬁogyFûeName
);

428 i‡(
øckåì
) {

429 
	`mfs_¨g_îæog
(
LOG_WARNING
,"ˇn'à›í mf°›ﬁogy c⁄figuøti⁄ fûê(%sË-Çëw‹kÅ›ﬁogyÇŸ ch™ged,Éº‹",
T›ﬁogyFûeName
);

431 
	`mfs_¨g_îæog
(
LOG_WARNING
,"ˇn'à›í mf°›ﬁogy c⁄figuøti⁄ fûê(%sË-Çëw‹kÅ›ﬁogyÇŸ deföed,Éº‹",
T›ﬁogyFûeName
);

438 
√wåì
 = 
NULL
;

439 
löío
 = 1;

440 
	`fgës
(
löebuff
,10000,
fd
)) {

441 i‡(
	`t›ﬁogy_∑r£löe
(
löebuff
,
löío
,&
fù
,&
tù
,&
rid
)>=0) {

442 
√wåì
 = 
	`ôªe_add_öãrvÆ
“ewåì,
fù
,
tù
,
rid
);

448 
löío
++;

450 i‡(
	`„º‹
(
fd
)) {

451 
	`f˛o£
(
fd
);

452 i‡(
øckåì
) {

453 
	`sy¶og
(
LOG_WARNING
,"errorÑeading mfstopology file -ÇetworkÅopologyÇot changed");

455 
	`sy¶og
(
LOG_WARNING
,"errorÑeading mfstopology file -ÇetworkÅopologyÇot defined");

457 
	`ôªe_‰ìÆl
(
√wåì
);

458 
	`Ârötf
(
°dîr
,"errorÑeading mfstopology file -ÇetworkÅopologyÇot defined (using defaults)\n");

461 
	`f˛o£
(
fd
);

462 
	`ôªe_‰ìÆl
(
øckåì
);

463 
øckåì
 = 
√wåì
;

464 i‡(
øckåì
) {

465 
øckåì
 = 
	`ôªe_ªbÆ™˚
(racktree);

467 
	`mfs_sy¶og
(
LOG_NOTICE
,"topology file has beenÜoaded");

468 
	}
}

478 
	$t›ﬁogy_ªlﬂd
() {

479 
	`t›ﬁogy_lﬂd
();

480 
	}
}

482 
	$t›ﬁogy_ãrm
() {

483 
	`ôªe_‰ìÆl
(
øckåì
);

484 
	`‰ì
(
T›ﬁogyFûeName
);

485 
	}
}

487 
	$t›ﬁogy_öô
() {

488 
T›ﬁogyFûeName
 = 
	`cfg_gë°r
("TOPOLOGY_FILENAME",
ETC_PATH
 "/mfstopology.cfg");

489 
øckåì
 = 
NULL
;

490 
	`t›ﬁogy_lﬂd
();

491 
	`maö_ªlﬂdªgi°î
(
t›ﬁogy_ªlﬂd
);

492 
	`maö_de°ru˘ªgi°î
(
t›ﬁogy_ãrm
);

494 
	}
}

	@mfsmaster/topology.h

19 #i‚de‡
_TOPOLOGY_H_


20 
	#_TOPOLOGY_H_


	)

22 
	~<öây≥s.h
>

24 
uöt8_t
 
t›ﬁogy_di°™˚
(
uöt32_t
 
ù1
,uöt32_à
ù2
);

25 
t›ﬁogy_öô
();

	@mfsmetadump/mfsmetadump.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<öây≥s.h
>

26 
	~"MFSCommuniˇti⁄.h
"

27 
	~"d©≠ack.h
"

29 
	#STR_AUX
(
x
Ë#x

	)

30 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

31 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

33 
	#MAX_INDEX
 0x7FFFFFFF

	)

34 
	#MAX_CHUNKS_PER_FILE
 (
MAX_INDEX
+1)

	)

36 
ölöe
 
	$di•ch¨
(
uöt8_t
 
c
) {

37  (
c
>=32 && c<=126)?c:'.';

38 
	}
}

40 
	$chunk_lﬂd
(
FILE
 *
fd
) {

41 
uöt8_t
 
hdr
[8];

42 
uöt8_t
 
lﬂdbuff
[16];

43 c⁄° 
uöt8_t
 *
±r
;

44 
öt32_t
 
r
;

45 
uöt64_t
 
chunkid
,
√xtchunkid
;

46 
uöt32_t
 
vîsi⁄
,
lockedto
;

48 i‡(
	`‰ód
(
hdr
,1,8,
fd
)!=8) {

51 
±r
 = 
hdr
;

52 
√xtchunkid
 = 
	`gë64bô
(&
±r
);

53 
	`¥ötf
("#Çextchunkid: %016"
PRIX64
"\n",
√xtchunkid
);

55 
r
 = 
	`‰ód
(
lﬂdbuff
,1,16,
fd
);

56 
±r
 = 
lﬂdbuff
;

57 
chunkid
 = 
	`gë64bô
(&
±r
);

58 
vîsi⁄
 = 
	`gë32bô
(&
±r
);

59 
lockedto
 = 
	`gë32bô
(&
±r
);

60 i‡(
chunkid
==0 && 
vîsi⁄
==0 && 
lockedto
==0) {

63 
	`¥ötf
("*|i:%016"
PRIX64
"|v:%08"
PRIX32
"|t:%10"
PRIu32
"\n",
chunkid
,
vîsi⁄
,
lockedto
);

65 
	}
}

67 
	$¥öt_«me
(
FILE
 *
ö
,
uöt32_t
 
∆íg
) {

68 
uöt8_t
 
buff
[1024];

69 
uöt32_t
 
x
,
y
,
i
;

70 
size_t
 
h≠py
;

71 
∆íg
>0) {

72 
y
 = (
∆íg
>1024)?1024:nleng;

73 
x
 = 
	`‰ód
(
buff
,1,
y
,
ö
);

74 
i
=0 ; i<
x
 ; i++) {

75 i‡(
buff
[
i
]<32 || buff[i]>127) {

76 
buff
[
i
]='.';

79 
h≠py
 = 
	`fwrôe
(
buff
,1,
x
,
°dout
);

80 i‡(
x
!=
y
) {

83 
∆íg
 -
x
;

85 
	}
}

87 
	$fs_lﬂdedge
(
FILE
 *
fd
) {

88 
uöt8_t
 
uedgebuff
[4+4+2];

89 c⁄° 
uöt8_t
 *
±r
;

90 
uöt32_t
 
∑ª¡_id
;

91 
uöt32_t
 
chûd_id
;

92 
uöt16_t
 
∆íg
;

94 i‡(
	`‰ód
(
uedgebuff
,1,4+4+2,
fd
)!=4+4+2) {

95 
	`Ârötf
(
°dîr
,"loadingÉdge:ÑeadÉrror\n");

98 
±r
 = 
uedgebuff
;

99 
∑ª¡_id
 = 
	`gë32bô
(&
±r
);

100 
chûd_id
 = 
	`gë32bô
(&
±r
);

101 i‡(
∑ª¡_id
==0 && 
chûd_id
==0) {

104 
∆íg
 = 
	`gë16bô
(&
±r
);

106 i‡(
∑ª¡_id
==0) {

107 
	`¥ötf
("E|p: NULL|c:%10"
PRIu32
"|n:",
chûd_id
);

109 
	`¥ötf
("E|p:%10"
PRIu32
"|c:%10"PRIu32"|n:",
∑ª¡_id
,
chûd_id
);

111 
	`¥öt_«me
(
fd
,
∆íg
);

112 
	`¥ötf
("\n");

114 
	}
}

116 
	$fs_lﬂdnode
(
FILE
 *
fd
) {

117 
uöt8_t
 
unodebuff
[4+1+2+4+4+4+4+4+4+8+4+2+8*65536+4*65536+4];

118 c⁄° 
uöt8_t
 *
±r
,*
ch±r
;

119 
uöt8_t
 
ty≥
,
gﬂl
;

120 
uöt32_t
 
nodeid
,
uid
,
gid
,
©ime°amp
,
mtime°amp
,
˘ime°amp
,
åashtime
;

121 
uöt16_t
 
mode
;

122 
c
;

124 
ty≥
 = 
	`fgëc
(
fd
);

125 i‡(
ty≥
==0) {

128 
ty≥
) {

129 
TYPE_DIRECTORY
:

130 
TYPE_FIFO
:

131 
TYPE_SOCKET
:

132 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4,
fd
)!=4+1+2+4+4+4+4+4+4) {

133 
	`Ârötf
(
°dîr
,"loadingÇode:ÑeadÉrror\n");

137 
TYPE_BLOCKDEV
:

138 
TYPE_CHARDEV
:

139 
TYPE_SYMLINK
:

140 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4+4,
fd
)!=4+1+2+4+4+4+4+4+4+4) {

141 
	`Ârötf
(
°dîr
,"loadingÇode:ÑeadÉrror\n");

145 
TYPE_FILE
:

146 
TYPE_TRASH
:

147 
TYPE_RESERVED
:

148 i‡(
	`‰ód
(
unodebuff
,1,4+1+2+4+4+4+4+4+4+8+4+2,
fd
)!=4+1+2+4+4+4+4+4+4+8+4+2) {

149 
	`Ârötf
(
°dîr
,"loadingÇode:ÑeadÉrror\n");

154 
	`Ârötf
(
°dîr
,"lﬂdögÇode: uƒecognizedÇodêty≥: %c\n",
ty≥
);

157 
c
='?';

158 
ty≥
) {

159 
TYPE_DIRECTORY
:

160 
c
='D';

162 
TYPE_SOCKET
:

163 
c
='S';

165 
TYPE_FIFO
:

166 
c
='F';

168 
TYPE_BLOCKDEV
:

169 
c
='B';

171 
TYPE_CHARDEV
:

172 
c
='C';

174 
TYPE_SYMLINK
:

175 
c
='L';

177 
TYPE_FILE
:

178 
c
='-';

180 
TYPE_TRASH
:

181 
c
='T';

183 
TYPE_RESERVED
:

184 
c
='R';

187 
±r
 = 
unodebuff
;

188 
nodeid
 = 
	`gë32bô
(&
±r
);

189 
gﬂl
 = 
	`gë8bô
(&
±r
);

190 
mode
 = 
	`gë16bô
(&
±r
);

191 
uid
 = 
	`gë32bô
(&
±r
);

192 
gid
 = 
	`gë32bô
(&
±r
);

193 
©ime°amp
 = 
	`gë32bô
(&
±r
);

194 
mtime°amp
 = 
	`gë32bô
(&
±r
);

195 
˘ime°amp
 = 
	`gë32bô
(&
±r
);

196 
åashtime
 = 
	`gë32bô
(&
±r
);

198 
	`¥ötf
("%c|i:%10"
PRIu32
"|#:%"
PRIu8
"|e:%1"
PRIX16
"|m:%04"
PRIo16
"|u:%10"PRIu32"|g:%10"PRIu32"|a:%10"PRIu32",m:%10"PRIu32",c:%10"PRIu32"|t:%10"PRIu32,
c
,
nodeid
,
gﬂl
,
mode
>>12,mode&0xFFF,
uid
,
gid
,
©ime°amp
,
mtime°amp
,
˘ime°amp
,
åashtime
);

200 i‡(
ty≥
==
TYPE_BLOCKDEV
 ||Åy≥==
TYPE_CHARDEV
) {

201 
uöt32_t
 
rdev
;

202 
rdev
 = 
	`gë32bô
(&
±r
);

203 
	`¥ötf
("|d:%5"
PRIu32
",%5"PRIu32"\n",
rdev
>>16,rdev&0xFFFF);

204 } i‡(
ty≥
==
TYPE_SYMLINK
) {

205 
uöt32_t
 
∂íg
;

206 
∂íg
 = 
	`gë32bô
(&
±r
);

207 
	`¥ötf
("|p:");

208 
	`¥öt_«me
(
fd
,
∂íg
);

209 
	`¥ötf
("\n");

210 } i‡(
ty≥
==
TYPE_FILE
 ||Åy≥==
TYPE_TRASH
 ||Åy≥==
TYPE_RESERVED
) {

211 
uöt64_t
 
Àngth
,
chunkid
;

212 
uöt32_t
 
ci
,
ch
,
£ssi⁄id
;

213 
uöt16_t
 
£ssi⁄ids
;

215 
Àngth
 = 
	`gë64bô
(&
±r
);

216 
ch
 = 
	`gë32bô
(&
±r
);

217 
£ssi⁄ids
 = 
	`gë16bô
(&
±r
);

219 
	`¥ötf
("|l:%20"
PRIu64
"|c:(",
Àngth
);

220 
ch
>65536) {

221 
ch±r
 = 
±r
;

222 i‡(
	`‰ód
((
uöt8_t
*)
±r
,1,8*65536,
fd
)!=8*65536) {

223 
	`Ârötf
(
°dîr
,"loadingÇode:ÑeadÉrror\n");

226 
ci
=0 ; ci<65536 ; ci++) {

227 
chunkid
 = 
	`gë64bô
(&
ch±r
);

228 i‡(
chunkid
>0) {

229 
	`¥ötf
("%016"
PRIX64
,
chunkid
);

231 
	`¥ötf
("N");

233 
	`¥ötf
(",");

235 
ch
-=65536;

238 i‡(
	`‰ód
((
uöt8_t
*)
±r
,1,8*
ch
+4*
£ssi⁄ids
,
fd
)!=8*ch+4*sessionids) {

239 
	`Ârötf
(
°dîr
,"loadingÇode:ÑeadÉrror\n");

243 
ch
>0) {

244 
chunkid
 = 
	`gë64bô
(&
±r
);

245 i‡(
chunkid
>0) {

246 
	`¥ötf
("%016"
PRIX64
,
chunkid
);

248 
	`¥ötf
("N");

250 i‡(
ch
>1) {

251 
	`¥ötf
(",");

253 
ch
--;

255 
	`¥ötf
(")|r:(");

256 
£ssi⁄ids
>0) {

257 
£ssi⁄id
 = 
	`gë32bô
(&
±r
);

258 
	`¥ötf
("%"
PRIu32
,
£ssi⁄id
);

259 i‡(
£ssi⁄ids
>1) {

260 
	`¥ötf
(",");

262 
£ssi⁄ids
--;

264 
	`¥ötf
(")\n");

266 
	`¥ötf
("\n");

270 
	}
}

272 
	$fs_lﬂdnodes
(
FILE
 *
fd
) {

273 
s
;

275 
s
 = 
	`fs_lﬂdnode
(
fd
);

276 i‡(
s
<0) {

279 } 
s
==0);

281 
	}
}

283 
	$fs_lﬂdedges
(
FILE
 *
fd
) {

284 
s
;

286 
s
 = 
	`fs_lﬂdedge
(
fd
);

287 i‡(
s
<0) {

290 } 
s
==0);

292 
	}
}

294 
	$fs_lﬂd‰ì
(
FILE
 *
fd
) {

295 
uöt8_t
 
rbuff
[8];

296 c⁄° 
uöt8_t
 *
±r
;

297 
uöt32_t
 
t
,
nodeid
,
·ime
;

298 i‡(
	`‰ód
(
rbuff
,1,4,
fd
)!=4) {

301 
±r
=
rbuff
;

302 
t
 = 
	`gë32bô
(&
±r
);

303 
	`¥ötf
("# fªênodes: %"
PRIu32
"\n",
t
);

304 
t
>0) {

305 i‡(
	`‰ód
(
rbuff
,1,8,
fd
)!=8) {

308 
±r
 = 
rbuff
;

309 
nodeid
 = 
	`gë32bô
(&
±r
);

310 
·ime
 = 
	`gë32bô
(&
±r
);

311 
	`¥ötf
("I|i:%10"
PRIu32
"|f:%10"PRIu32"\n",
nodeid
,
·ime
);

312 
t
--;

315 
	}
}

317 
	$fs_lﬂdquŸa
(
FILE
 *
fd
) {

318 
uöt8_t
 
rbuff
[66];

319 c⁄° 
uöt8_t
 *
±r
;

320 
uöt8_t
 
ex˚eded
,
Êags
;

321 
uöt32_t
 
t
,
nodeid
,
°ime°amp
,
söodes
,
höodes
;

322 
uöt64_t
 
¶ígth
,
hÀngth
,
ssize
,
hsize
,
§ólsize
,
hªÆsize
;

323 i‡(
	`‰ód
(
rbuff
,1,4,
fd
)!=4) {

326 
±r
=
rbuff
;

327 
t
 = 
	`gë32bô
(&
±r
);

328 
	`¥ötf
("# quŸ®nodes: %"
PRIu32
"\n",
t
);

329 
t
>0) {

330 i‡(
	`‰ód
(
rbuff
,1,66,
fd
)!=66) {

333 
±r
 = 
rbuff
;

334 
nodeid
 = 
	`gë32bô
(&
±r
);

335 
ex˚eded
 = 
	`gë8bô
(&
±r
);

336 
Êags
 = 
	`gë8bô
(&
±r
);

337 
°ime°amp
 = 
	`gë32bô
(&
±r
);

338 
söodes
 = 
	`gë32bô
(&
±r
);

339 
höodes
 = 
	`gë32bô
(&
±r
);

340 
¶ígth
 = 
	`gë64bô
(&
±r
);

341 
hÀngth
 = 
	`gë64bô
(&
±r
);

342 
ssize
 = 
	`gë64bô
(&
±r
);

343 
hsize
 = 
	`gë64bô
(&
±r
);

344 
§ólsize
 = 
	`gë64bô
(&
±r
);

345 
hªÆsize
 = 
	`gë64bô
(&
±r
);

346 
	`¥ötf
("Q|i:%10"
PRIu32
"|e:%c|f:%02"
PRIX8
"|s:%10"PRIu32,
nodeid
,(
ex˚eded
)?'1':'0',
Êags
,
°ime°amp
);

347 i‡(
Êags
&
QUOTA_FLAG_SINODES
) {

348 
	`¥ötf
("|si:%10"
PRIu32
,
söodes
);

350 
	`¥ötf
("|si: -");

352 i‡(
Êags
&
QUOTA_FLAG_HINODES
) {

353 
	`¥ötf
("|hi:%10"
PRIu32
,
höodes
);

355 
	`¥ötf
("|hi: -");

357 i‡(
Êags
&
QUOTA_FLAG_SLENGTH
) {

358 
	`¥ötf
("|¶:%20"
PRIu64
,
¶ígth
);

360 
	`¥ötf
("|sl: -");

362 i‡(
Êags
&
QUOTA_FLAG_HLENGTH
) {

363 
	`¥ötf
("|hl:%20"
PRIu64
,
hÀngth
);

365 
	`¥ötf
("|hl: -");

367 i‡(
Êags
&
QUOTA_FLAG_SSIZE
) {

368 
	`¥ötf
("|ss:%20"
PRIu64
,
ssize
);

370 
	`¥ötf
("|ss: -");

372 i‡(
Êags
&
QUOTA_FLAG_HSIZE
) {

373 
	`¥ötf
("|hs:%20"
PRIu64
,
hsize
);

375 
	`¥ötf
("|hs: -");

377 i‡(
Êags
&
QUOTA_FLAG_SREALSIZE
) {

378 
	`¥ötf
("|§:%20"
PRIu64
,
§ólsize
);

380 
	`¥ötf
("|sr: -");

382 i‡(
Êags
&
QUOTA_FLAG_HREALSIZE
) {

383 
	`¥ötf
("|hr:%20"
PRIu64
,
hªÆsize
);

385 
	`¥ötf
("|hr: -");

387 
	`¥ötf
("\n");

388 
t
--;

391 
	}
}

393 
	$hexdump
(
FILE
 *
fd
,
uöt64_t
 
¶íg
) {

394 
uöt8_t
 
lbuff
[32];

395 
uöt32_t
 
i
;

396 
¶íg
>32) {

397 i‡(
	`‰ód
(
lbuff
,1,32,
fd
)!=32) {

400 
i
=0 ; i<32 ; i++) {

401 
	`¥ötf
("%02"
PRIX8
" ",
lbuff
[
i
]);

403 
	`¥ötf
(" |");

404 
i
=0 ; i<32 ; i++) {

405 
	`¥ötf
("%c",
	`di•ch¨
(
lbuff
[
i
]));

407 
	`¥ötf
("|\n");

408 
¶íg
-=32;

410 i‡(
¶íg
>0) {

411 i‡(
	`‰ód
(
lbuff
,1,
¶íg
,
fd
)!=(
size_t
)sleng) {

414 
i
=0 ; i<32 ; i++) {

415 i‡(
i
<
¶íg
) {

416 
	`¥ötf
("%02"
PRIX8
" ",
lbuff
[
i
]);

418 
	`¥ötf
(" ");

421 
	`¥ötf
(" |");

422 
i
=0 ; i<32 ; i++) {

423 i‡(
i
<
¶íg
) {

424 
	`¥ötf
("%c",
	`di•ch¨
(
lbuff
[
i
]));

426 
	`¥ötf
(" ");

429 
	`¥ötf
("|\n");

432 
	}
}

434 
	$fs_lﬂd
(
FILE
 *
fd
) {

435 
uöt32_t
 
maxnodeid
,
√xt£ssi⁄id
;

436 
uöt64_t
 
vîsi⁄
;

437 
uöt8_t
 
hdr
[16];

438 c⁄° 
uöt8_t
 *
±r
;

439 i‡(
	`‰ód
(
hdr
,1,16,
fd
)!=16) {

442 
±r
 = 
hdr
;

443 
maxnodeid
 = 
	`gë32bô
(&
±r
);

444 
vîsi⁄
 = 
	`gë64bô
(&
±r
);

445 
√xt£ssi⁄id
 = 
	`gë32bô
(&
±r
);

447 
	`¥ötf
("# maxnodeid: %"
PRIu32
" ; vîsi⁄: %"
PRIu64
" ;Çext£ssi⁄id: %"PRIu32"\n",
maxnodeid
,
vîsi⁄
,
√xt£ssi⁄id
);

449 
	`¥ötf
("# -------------------------------------------------------------------\n");

450 i‡(
	`fs_lﬂdnodes
(
fd
)<0) {

451 
	`¥ötf
("errorÑeading metadata (node)\n");

454 
	`¥ötf
("# -------------------------------------------------------------------\n");

455 i‡(
	`fs_lﬂdedges
(
fd
)<0) {

456 
	`¥ötf
("errorÑeading metadata (edge)\n");

459 
	`¥ötf
("# -------------------------------------------------------------------\n");

460 i‡(
	`fs_lﬂd‰ì
(
fd
)<0) {

461 
	`¥ötf
("errorÑeading metadata (free)\n");

464 
	`¥ötf
("# -------------------------------------------------------------------\n");

466 
	}
}

468 
	$fs_lﬂd_17
(
FILE
 *
fd
) {

469 
uöt32_t
 
maxnodeid
,
√xt£ssi⁄id
;

470 
uöt64_t
 
¶íg
;

471 
off_t
 
offbegö
;

472 
uöt64_t
 
vîsi⁄
;

473 
uöt8_t
 
hdr
[16];

474 c⁄° 
uöt8_t
 *
±r
;

475 i‡(
	`‰ód
(
hdr
,1,16,
fd
)!=16) {

478 
±r
 = 
hdr
;

479 
maxnodeid
 = 
	`gë32bô
(&
±r
);

480 
vîsi⁄
 = 
	`gë64bô
(&
±r
);

481 
√xt£ssi⁄id
 = 
	`gë32bô
(&
±r
);

483 
	`¥ötf
("# maxnodeid: %"
PRIu32
" ; vîsi⁄: %"
PRIu64
" ;Çext£ssi⁄id: %"PRIu32"\n",
maxnodeid
,
vîsi⁄
,
√xt£ssi⁄id
);

486 i‡(
	`‰ód
(
hdr
,1,16,
fd
)!=16) {

487 
	`¥ötf
("can'tÑead section header\n");

490 i‡(
	`memcmp
(
hdr
,"[MFS EOF MARKER]",16)==0) {

491 
	`¥ötf
("# -------------------------------------------------------------------\n");

492 
	`¥ötf
("# MFS END OF FILE MARKER\n");

493 
	`¥ötf
("# -------------------------------------------------------------------\n");

496 
±r
 = 
hdr
+8;

497 
¶íg
 = 
	`gë64bô
(&
±r
);

498 
offbegö
 = 
	`·ñlo
(
fd
);

499 
	`¥ötf
("# -------------------------------------------------------------------\n");

500 
	`¥ötf
("# se˘i⁄ hódî: %c%c%c%c%c%c%c%¯(%02X%02X%02X%02X%02X%02X%02X%02XË;Üígth: %"
PRIu64
"\n",
	`di•ch¨
(
hdr
[0]),di•ch¨(hdr[1]),di•ch¨(hdr[2]),di•ch¨(hdr[3]),di•ch¨(hdr[4]),di•ch¨(hdr[5]),di•ch¨(hdr[6]),di•ch¨(hdr[7]),hdr[0],hdr[1],hdr[2],hdr[3],hdr[4],hdr[5],hdr[6],hdr[7],
¶íg
);

501 i‡(
	`memcmp
(
hdr
,"NODE 1.0",8)==0) {

502 i‡(
	`fs_lﬂdnodes
(
fd
)<0) {

503 
	`¥ötf
("errorÑeading metadata (NODE 1.0)\n");

506 } i‡(
	`memcmp
(
hdr
,"EDGE 1.0",8)==0) {

507 i‡(
	`fs_lﬂdedges
(
fd
)<0) {

508 
	`¥ötf
("errorÑeading metadata (EDGE 1.0)\n");

511 } i‡(
	`memcmp
(
hdr
,"FREE 1.0",8)==0) {

512 i‡(
	`fs_lﬂd‰ì
(
fd
)<0) {

513 
	`¥ötf
("errorÑeading metadata (FREE 1.0)\n");

516 } i‡(
	`memcmp
(
hdr
,"QUOT 1.0",8)==0) {

517 i‡(
	`fs_lﬂdquŸa
(
fd
)<0) {

518 
	`¥ötf
("errorÑeading metadata (QUOT 1.0)\n");

521 } i‡(
	`memcmp
(
hdr
,"CHNK 1.0",8)==0) {

522 i‡(
	`chunk_lﬂd
(
fd
)<0) {

523 
	`¥ötf
("errorÑeading metadata (CHNK 1.0)\n");

527 
	`¥ötf
("unknown fileÖart\n");

528 i‡(
	`hexdump
(
fd
,
¶íg
)<0) {

532 i‡((
off_t
)(
offbegö
+
¶íg
)!=
	`·ñlo
(
fd
)) {

533 
	`Ârötf
(
°dîr
,"some data inÅhis section haveÇot beenÑead - file corrupted\n");

538 
	}
}

540 
	$fs_lﬂdÆl
(c⁄° *
‚ame
) {

541 
FILE
 *
fd
;

542 
uöt8_t
 
hdr
[8];

544 
fd
 = 
	`f›í
(
‚ame
,"r");

546 i‡(
fd
==
NULL
) {

547 
	`¥ötf
("can't open metadata file\n");

550 i‡(
	`‰ód
(
hdr
,1,8,
fd
)!=8) {

551 
	`¥ötf
("can'tÑead metadata header\n");

554 
	`¥ötf
("# hódî: %c%c%c%c%c%c%c%¯(%02X%02X%02X%02X%02X%02X%02X%02X)\n",
	`di•ch¨
(
hdr
[0]),dispchar(hdr[1]),dispchar(hdr[2]),dispchar(hdr[3]),dispchar(hdr[4]),dispchar(hdr[5]),dispchar(hdr[6]),dispchar(hdr[7]),hdr[0],hdr[1],hdr[2],hdr[3],hdr[4],hdr[5],hdr[6],hdr[7]);

555 i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "M 1.5",8)==0) {

556 i‡(
	`fs_lﬂd
(
fd
)<0) {

557 
	`¥ötf
("errorÑeading metadata (structure)\n");

558 
	`f˛o£
(
fd
);

561 i‡(
	`chunk_lﬂd
(
fd
)<0) {

562 
	`¥ötf
("errorÑeading metadata (chunks)\n");

563 
	`f˛o£
(
fd
);

566 } i‡(
	`memcmp
(
hdr
,
MFSSIGNATURE
 "M 1.7",8)==0) {

567 i‡(
	`fs_lﬂd_17
(
fd
)<0) {

568 
	`f˛o£
(
fd
);

572 
	`¥ötf
("wrong metadata header (old version ?)\n");

573 
	`f˛o£
(
fd
);

576 i‡(
	`„º‹
(
fd
)!=0) {

577 
	`¥ötf
("errorÑeading metadata\n");

578 
	`f˛o£
(
fd
);

581 
	`f˛o£
(
fd
);

583 
	}
}

585 
	$maö
(
¨gc
,**
¨gv
) {

586 i‡(
¨gc
!=2) {

587 
	`¥ötf
("ußge: %†mëad©a_fûe\n",
¨gv
[0]);

590  (
	`fs_lﬂdÆl
(
¨gv
[1])<0)?1:0;

591 
	}
}

	@mfsmetalogger/init.h

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

23 
	~"ma°îc⁄n.h
"

25 
	#STR_AUX
(
x
Ë#x

	)

26 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

27 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

30 (*
	trun‚
)();

32 
run‚
 
‚
;

33 *
«me
;

34 } 
RunTab
[]={

35 {
ma°îc⁄n_öô
,"connection with master"},

36 {(
run‚
)0,"****"}

37 
	}
};

	@mfsmetalogger/masterconn.c

19 
	~"c⁄fig.h
"

21 
	~<time.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/uio.h
>

24 
	~<f˙é.h
>

25 
	~<uni°d.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<sy¶og.h
>

30 
	~<î∫o.h
>

31 
	~<öây≥s.h
>

32 
	~<√töë/ö.h
>

34 
	~"MFSCommuniˇti⁄.h
"

35 
	~"d©≠ack.h
"

36 
	~"ma°îc⁄n.h
"

37 
	~"¸c.h
"

38 
	~"cfg.h
"

39 
	~"maö.h
"

40 
	~"¶oggî.h
"

41 
	~"mas£π.h
"

42 
	~"sockës.h
"

44 
	#MaxPackëSize
 1500000

	)

46 
	#META_DL_BLOCK
 1000000

	)

49 íum {
	mFREE
,
	mCONNECTING
,
	mHEADER
,
	mDATA
,
	mKILL
};

51 
	s∑ckë°ru˘
 {

52 
∑ckë°ru˘
 *
	m√xt
;

53 
uöt8_t
 *
	m°¨çå
;

54 
uöt32_t
 
	mbyã¶e·
;

55 
uöt8_t
 *
	m∑ckë
;

56 } 
	t∑ckë°ru˘
;

58 
	sma°îc⁄n
 {

59 
	mmode
;

60 
	msock
;

61 
öt32_t
 
	mpdes˝os
;

62 
uöt32_t
 
	mœ°ªad
,
	mœ°wrôe
;

63 
uöt8_t
 
	mhdrbuff
[8];

64 
∑ckë°ru˘
 
	möpuçackë
;

65 
∑ckë°ru˘
 *
	mouçuthód
,**
	mouçuâaû
;

66 
uöt32_t
 
	mbödù
;

67 
uöt32_t
 
	mma°îù
;

68 
uöt16_t
 
	mma°îp‹t
;

69 
uöt8_t
 
	mma°îaddrvÆid
;

71 
uöt8_t
 
	mdow∆ﬂdªåy˙t
;

72 
uöt8_t
 
	mdow∆ﬂdög
;

73 
uöt8_t
 
	mﬁdmode
;

74 
FILE
 *
	mlogfd
;

75 
	mmëafd
;

76 
uöt64_t
 
	mfûesize
;

77 
uöt64_t
 
	mdloff£t
;

78 
uöt64_t
 
	mdl°¨tuts
;

79 } 
	tma°îc⁄n
;

81 
ma°îc⁄n
 *
	gma°îc⁄nsögÀt⁄
=
NULL
;

84 
uöt32_t
 
	gBackLogsNumbî
;

85 *
	gMa°îHo°
;

86 *
	gMa°îP‹t
;

87 *
	gBödHo°
;

88 
uöt32_t
 
	gTimeout
;

90 
uöt32_t
 
	g°©s_byãsout
=0;

91 
uöt32_t
 
	g°©s_byãsö
=0;

93 
	$ma°îc⁄n_°©s
(
uöt32_t
 *
bö
,uöt32_à*
bout
) {

94 *
bö
 = 
°©s_byãsö
;

95 *
bout
 = 
°©s_byãsout
;

96 
°©s_byãsö
 = 0;

97 
°©s_byãsout
 = 0;

98 
	}
}

100 
uöt8_t
* 
	$ma°îc⁄n_¸óã∑ckë
(
ma°îc⁄n
 *
ïå
,
uöt32_t
 
ty≥
,uöt32_à
size
) {

101 
∑ckë°ru˘
 *
ouçackë
;

102 
uöt8_t
 *
±r
;

103 
uöt32_t
 
psize
;

105 
ouçackë
=(
∑ckë°ru˘
*)
	`mÆloc
((packetstruct));

106 
	`∑s£π
(
ouçackë
);

107 
psize
 = 
size
+8;

108 
ouçackë
->
∑ckë
=
	`mÆloc
(
psize
);

109 
	`∑s£π
(
ouçackë
->
∑ckë
);

110 
ouçackë
->
byã¶e·
 = 
psize
;

111 
±r
 = 
ouçackë
->
∑ckë
;

112 
	`put32bô
(&
±r
,
ty≥
);

113 
	`put32bô
(&
±r
,
size
);

114 
ouçackë
->
°¨çå
 = (
uöt8_t
*)(ouçackë->
∑ckë
);

115 
ouçackë
->
√xt
 = 
NULL
;

116 *(
ïå
->
ouçuâaû
Ë
ouçackë
;

117 
ïå
->
ouçuâaû
 = &(
ouçackë
->
√xt
);

118  
±r
;

119 
	}
}

121 
	$ma°îc⁄n_£ndªgi°î
(
ma°îc⁄n
 *
ïå
) {

122 
uöt8_t
 *
buff
;

124 
ïå
->
dow∆ﬂdög
=0;

125 
ïå
->
mëafd
=-1;

126 
ïå
->
logfd
=
NULL
;

128 
buff
 = 
	`ma°îc⁄n_¸óã∑ckë
(
ïå
,
MLTOMA_REGISTER
,1+4+2);

129 
	`put8bô
(&
buff
,1);

130 
	`put16bô
(&
buff
,
VERSMAJ
);

131 
	`put8bô
(&
buff
,
VERSMID
);

132 
	`put8bô
(&
buff
,
VERSMIN
);

133 
	`put16bô
(&
buff
,
Timeout
);

134 
	}
}

136 
	$ma°îc⁄n_mëach™ges_log
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

137 
log«me1
[100],
log«me2
[100];

138 
uöt32_t
 
i
;

139 
uöt64_t
 
vîsi⁄
;

140 i‡(
Àngth
==1 && 
d©a
[0]==0x55) {

141 i‡(
ïå
->
logfd
!=
NULL
) {

142 
	`f˛o£
(
ïå
->
logfd
);

143 
ïå
->
logfd
=
NULL
;

145 i‡(
BackLogsNumbî
>0) {

146 
i
=
BackLogsNumbî
 ; i>0 ; i--) {

147 
	`¢¥ötf
(
log«me1
,100,"ch™gñog_ml.%"
PRIu32
".mfs",
i
);

148 
	`¢¥ötf
(
log«me2
,100,"ch™gñog_ml.%"
PRIu32
".mfs",
i
-1);

149 
	`ª«me
(
log«me2
,
log«me1
);

152 
	`u∆ök
("changelog_ml.0.mfs");

156 i‡(
Àngth
<10) {

157 
	`sy¶og
(
LOG_NOTICE
,"MATOML_METACHANGES_LOG - wr⁄g sizê(%"
PRIu32
"/9+d©a)",
Àngth
);

158 
ïå
->
mode
 = 
KILL
;

161 i‡(
d©a
[0]!=0xFF) {

162 
	`sy¶og
(
LOG_NOTICE
,"MATOML_METACHANGES_LOG - wrongÖacket");

163 
ïå
->
mode
 = 
KILL
;

166 i‡(
d©a
[
Àngth
-1]!='\0') {

167 
	`sy¶og
(
LOG_NOTICE
,"MATOML_METACHANGES_LOG - invalid string");

168 
ïå
->
mode
 = 
KILL
;

172 i‡(
ïå
->
logfd
==
NULL
) {

173 
ïå
->
logfd
 = 
	`f›í
("changelog_ml.0.mfs","a");

176 
d©a
++;

177 
vîsi⁄
 = 
	`gë64bô
(&
d©a
);

178 i‡(
ïå
->
logfd
) {

179 
	`Ârötf
(
ïå
->
logfd
,"%"
PRIu64
": %s\n",
vîsi⁄
,
d©a
);

181 
	`sy¶og
(
LOG_NOTICE
,"lo° MFS ch™gê%"
PRIu64
": %s",
vîsi⁄
,
d©a
);

183 
	}
}

185 
	$ma°îc⁄n_mëach™ges_Êush
() {

186 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

187 i‡(
ïå
->
logfd
) {

188 
	`fÊush
(
ïå
->
logfd
);

190 
	}
}

192 
	$ma°îc⁄n_dow∆ﬂd_íd
(
ma°îc⁄n
 *
ïå
) {

193 
uöt8_t
 *
buff
;

194 
ïå
->
dow∆ﬂdög
=0;

195 
buff
 = 
	`ma°îc⁄n_¸óã∑ckë
(
ïå
,
MLTOMA_DOWNLOAD_END
,0);

196 i‡(
ïå
->
mëafd
>=0) {

197 i‡(
	`˛o£
(
ïå
->
mëafd
)<0) {

198 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"error closing metafile");

199 
ïå
->
mëafd
=-1;

202 
ïå
->
mëafd
=-1;

205 
	}
}

207 
	$ma°îc⁄n_dow∆ﬂd_öô
(
ma°îc⁄n
 *
ïå
,
uöt8_t
 
fûíum
) {

208 
uöt8_t
 *
±r
;

210 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
dow∆ﬂdög
==0) {

212 
±r
 = 
	`ma°îc⁄n_¸óã∑ckë
(
ïå
,
MLTOMA_DOWNLOAD_START
,1);

213 
	`put8bô
(&
±r
,
fûíum
);

214 
ïå
->
dow∆ﬂdög
=
fûíum
;

216 
	}
}

218 
	$ma°îc⁄n_mëadow∆ﬂdöô
() {

219 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ma°îc⁄nsögÀt⁄
,1);

220 
	}
}

222 
	$ma°îc⁄n_£ssi⁄sdow∆ﬂdöô
() {

223 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ma°îc⁄nsögÀt⁄
,2);

224 
	}
}

226 
	$ma°îc⁄n_dow∆ﬂd_√xt
(
ma°îc⁄n
 *
ïå
) {

227 
uöt8_t
 *
±r
;

228 
uöt8_t
 
fûíum
;

229 
öt64_t
 
d…ime
;

230 i‡(
ïå
->
dloff£t
>Û±r->
fûesize
) {

231 
fûíum
 = 
ïå
->
dow∆ﬂdög
;

232 i‡(
	`ma°îc⁄n_dow∆ﬂd_íd
(
ïå
)<0) {

235 
d…ime
 = 
	`maö_utime
()-
ïå
->
dl°¨tuts
;

236 i‡(
d…ime
<=0) {

237 
d…ime
=1;

239 
	`sy¶og
(
LOG_NOTICE
,"%†dow∆ﬂded %"
PRIu64
"B/%"PRIu64".%06"
PRIu32
"†(%.3l‡MB/s)",(
fûíum
==1)?"mëad©a":(fûíum==2)?"£ssi⁄s":(fûíum==11)?"ch™gñog_0":(fûíum==12)?"ch™gñog_1":"???",
ïå
->
fûesize
,
d…ime
/1000000,(
uöt32_t
)(dltime%1000000),()(eptr->filesize)/()(dltime));

240 i‡(
fûíum
==1) {

241 i‡(
	`ª«me
("metadata_ml.tmp","metadata_ml.mfs.back")<0) {

242 
	`sy¶og
(
LOG_NOTICE
,"can'tÑename downloaded metadata - do it manually beforeÇext download");

244 i‡(
ïå
->
ﬁdmode
==0) {

245 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ïå
,11);

247 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ïå
,2);

249 } i‡(
fûíum
==11) {

250 i‡(
	`ª«me
("changelog_ml.tmp","changelog_ml_back.0.mfs")<0) {

251 
	`sy¶og
(
LOG_NOTICE
,"can'tÑename downloaded changelog - do it manually beforeÇext download");

253 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ïå
,12);

254 } i‡(
fûíum
==12) {

255 i‡(
	`ª«me
("changelog_ml.tmp","changelog_ml_back.1.mfs")<0) {

256 
	`sy¶og
(
LOG_NOTICE
,"can'tÑename downloaded changelog - do it manually beforeÇext download");

258 
	`ma°îc⁄n_dow∆ﬂd_öô
(
ïå
,2);

259 } i‡(
fûíum
==2) {

260 i‡(
	`ª«me
("sessions_ml.tmp","sessions_ml.mfs")<0) {

261 
	`sy¶og
(
LOG_NOTICE
,"can'tÑename downloaded sessions - do it manually beforeÇext download");

265 
±r
 = 
	`ma°îc⁄n_¸óã∑ckë
(
ïå
,
MLTOMA_DOWNLOAD_DATA
,12);

266 
	`put64bô
(&
±r
,
ïå
->
dloff£t
);

267 i‡(
ïå
->
fûesize
-ïå->
dloff£t
>
META_DL_BLOCK
) {

268 
	`put32bô
(&
±r
,
META_DL_BLOCK
);

270 
	`put32bô
(&
±r
,
ïå
->
fûesize
-ïå->
dloff£t
);

273 
	}
}

275 
	$ma°îc⁄n_dow∆ﬂd_°¨t
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

276 i‡(
Àngth
!=1 &&Üength!=8) {

277 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_START - wr⁄g sizê(%"
PRIu32
"/1|8)",
Àngth
);

278 
ïå
->
mode
 = 
KILL
;

281 i‡(
Àngth
==1) {

282 
ïå
->
dow∆ﬂdög
=0;

283 
	`sy¶og
(
LOG_NOTICE
,"download startÉrror");

286 
ïå
->
fûesize
 = 
	`gë64bô
(&
d©a
);

287 
ïå
->
dloff£t
 = 0;

288 
ïå
->
dow∆ﬂdªåy˙t
 = 0;

289 
ïå
->
dl°¨tuts
 = 
	`maö_utime
();

290 i‡(
ïå
->
dow∆ﬂdög
==1) {

291 
ïå
->
mëafd
 = 
	`›í
("mëad©a_ml.tmp",
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,0666);

292 } i‡(
ïå
->
dow∆ﬂdög
==2) {

293 
ïå
->
mëafd
 = 
	`›í
("£ssi⁄s_ml.tmp",
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,0666);

294 } i‡(
ïå
->
dow∆ﬂdög
==11 ||Éptr->downloading==12) {

295 
ïå
->
mëafd
 = 
	`›í
("ch™gñog_ml.tmp",
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,0666);

297 
	`sy¶og
(
LOG_NOTICE
,"unexpected MATOML_DOWNLOAD_STARTÖacket");

298 
ïå
->
mode
 = 
KILL
;

301 i‡(
ïå
->
mëafd
<0) {

302 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"error opening metafile");

303 
	`ma°îc⁄n_dow∆ﬂd_íd
(
ïå
);

306 
	`ma°îc⁄n_dow∆ﬂd_√xt
(
ïå
);

307 
	}
}

309 
	$ma°îc⁄n_dow∆ﬂd_d©a
(
ma°îc⁄n
 *
ïå
,c⁄° 
uöt8_t
 *
d©a
,
uöt32_t
 
Àngth
) {

310 
uöt64_t
 
off£t
;

311 
uöt32_t
 
Àng
;

312 
uöt32_t
 
¸c
;

313 
ssize_t
 
ªt
;

314 i‡(
ïå
->
mëafd
<0) {

315 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_DATA - fileÇot opened");

316 
ïå
->
mode
 = 
KILL
;

319 i‡(
Àngth
<16) {

320 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_DATA - wr⁄g sizê(%"
PRIu32
"/16+d©a)",
Àngth
);

321 
ïå
->
mode
 = 
KILL
;

324 
off£t
 = 
	`gë64bô
(&
d©a
);

325 
Àng
 = 
	`gë32bô
(&
d©a
);

326 
¸c
 = 
	`gë32bô
(&
d©a
);

327 i‡(
Àng
+16!=
Àngth
) {

328 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_DATA - wr⁄g sizê(%"
PRIu32
"/16+%"PRIu32")",
Àngth
,
Àng
);

329 
ïå
->
mode
 = 
KILL
;

332 i‡(
off£t
!=
ïå
->
dloff£t
) {

333 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_DATA - u√x≥˘ed fûêoff£à(%"
PRIu64
"/%"PRIu64")",
off£t
,
ïå
->
dloff£t
);

334 
ïå
->
mode
 = 
KILL
;

337 i‡(
off£t
+
Àng
>
ïå
->
fûesize
) {

338 
	`sy¶og
(
LOG_NOTICE
,"MATOML_DOWNLOAD_DATA - u√x≥˘ed fûêsizê(%"
PRIu64
"/%"PRIu64")",
off£t
+
Àng
,
ïå
->
fûesize
);

339 
ïå
->
mode
 = 
KILL
;

342 #ifde‡
HAVE_PWRITE


343 
ªt
 = 
	`pwrôe
(
ïå
->
mëafd
,
d©a
,
Àng
,
off£t
);

345 
	`l£ek
(
ïå
->
mëafd
,
off£t
,
SEEK_SET
);

346 
ªt
 = 
	`wrôe
(
ïå
->
mëafd
,
d©a
,
Àng
);

348 i‡(
ªt
!=(
ssize_t
)
Àng
) {

349 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"error writing metafile");

350 i‡(
ïå
->
dow∆ﬂdªåy˙t
>=5) {

351 
	`ma°îc⁄n_dow∆ﬂd_íd
(
ïå
);

353 
ïå
->
dow∆ﬂdªåy˙t
++;

354 
	`ma°îc⁄n_dow∆ﬂd_√xt
(
ïå
);

358 i‡(
¸c
!=
	`my¸c32
(0,
d©a
,
Àng
)) {

359 
	`sy¶og
(
LOG_NOTICE
,"metafile data crcÉrror");

360 i‡(
ïå
->
dow∆ﬂdªåy˙t
>=5) {

361 
	`ma°îc⁄n_dow∆ﬂd_íd
(
ïå
);

363 
ïå
->
dow∆ﬂdªåy˙t
++;

364 
	`ma°îc⁄n_dow∆ﬂd_√xt
(
ïå
);

368 i‡(
	`fsync
(
ïå
->
mëafd
)<0) {

369 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"error syncing metafile");

370 i‡(
ïå
->
dow∆ﬂdªåy˙t
>=5) {

371 
	`ma°îc⁄n_dow∆ﬂd_íd
(
ïå
);

373 
ïå
->
dow∆ﬂdªåy˙t
++;

374 
	`ma°îc⁄n_dow∆ﬂd_√xt
(
ïå
);

378 
ïå
->
dloff£t
+=
Àng
;

379 
ïå
->
dow∆ﬂdªåy˙t
=0;

380 
	`ma°îc⁄n_dow∆ﬂd_√xt
(
ïå
);

381 
	}
}

383 
	$ma°îc⁄n_bef‹e˛o£
(
ma°îc⁄n
 *
ïå
) {

384 i‡(
ïå
->
dow∆ﬂdög
==11 ||Éptr->downloading==12) {

385 
	`sy¶og
(
LOG_WARNING
,"old master detected -Ölease upgrade your master serverándÅhenÑestart metalogger");

386 
ïå
->
ﬁdmode
=1;

388 i‡(
ïå
->
mëafd
>=0) {

389 
	`˛o£
(
ïå
->
mëafd
);

390 
	`u∆ök
("metadata_ml.tmp");

391 
	`u∆ök
("sessions_ml.tmp");

392 
	`u∆ök
("changelog_ml.tmp");

394 i‡(
ïå
->
logfd
) {

395 
	`f˛o£
(
ïå
->
logfd
);

397 
	}
}

399 
	$ma°îc⁄n_gŸ∑ckë
(
ma°îc⁄n
 *
ïå
,
uöt32_t
 
ty≥
,c⁄° 
uöt8_t
 *
d©a
,uöt32_à
Àngth
) {

400 
ty≥
) {

401 
ANTOAN_NOP
:

403 
MATOML_METACHANGES_LOG
:

404 
	`ma°îc⁄n_mëach™ges_log
(
ïå
,
d©a
,
Àngth
);

406 
MATOML_DOWNLOAD_START
:

407 
	`ma°îc⁄n_dow∆ﬂd_°¨t
(
ïå
,
d©a
,
Àngth
);

409 
MATOML_DOWNLOAD_DATA
:

410 
	`ma°îc⁄n_dow∆ﬂd_d©a
(
ïå
,
d©a
,
Àngth
);

413 
	`sy¶og
(
LOG_NOTICE
,"gŸ unknow¿mesßgê—y≥:%"
PRIu32
")",
ty≥
);

414 
ïå
->
mode
 = 
KILL
;

416 
	}
}

418 
	$ma°îc⁄n_ãrm
() {

419 
∑ckë°ru˘
 *
µå
,*
∑±r
;

420 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

422 i‡(
ïå
->
mode
!=
FREE
) {

423 
	`t˝˛o£
(
ïå
->
sock
);

424 i‡(
ïå
->
mode
!=
CONNECTING
) {

425 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

426 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

428 
µå
 = 
ïå
->
ouçuthód
;

429 
µå
) {

430 i‡(
µå
->
∑ckë
) {

431 
	`‰ì
(
µå
->
∑ckë
);

433 
∑±r
 = 
µå
;

434 
µå
 =Ö±r->
√xt
;

435 
	`‰ì
(
∑±r
);

440 
	`‰ì
(
ïå
);

441 
	`‰ì
(
Ma°îHo°
);

442 
	`‰ì
(
Ma°îP‹t
);

443 
	`‰ì
(
BödHo°
);

444 
ma°îc⁄nsögÀt⁄
 = 
NULL
;

445 
	}
}

447 
	$ma°îc⁄n_c⁄√˘ed
(
ma°îc⁄n
 *
ïå
) {

448 
	`t˝nodñay
(
ïå
->
sock
);

449 
ïå
->
mode
=
HEADER
;

450 
ïå
->
öpuçackë
.
√xt
 = 
NULL
;

451 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

452 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

453 
ïå
->
öpuçackë
.
∑ckë
 = 
NULL
;

454 
ïå
->
ouçuthód
 = 
NULL
;

455 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

457 
	`ma°îc⁄n_£ndªgi°î
(
ïå
);

458 
	`ma°îc⁄n_mëadow∆ﬂdöô
();

459 
ïå
->
œ°ªad
 =É±r->
œ°wrôe
 = 
	`maö_time
();

460 
	}
}

462 
	$ma°îc⁄n_öôc⁄√˘
(
ma°îc⁄n
 *
ïå
) {

463 
°©us
;

464 i‡(
ïå
->
ma°îaddrvÆid
==0) {

465 
uöt32_t
 
mù
,
bù
;

466 
uöt16_t
 
mp‹t
;

467 i‡(
	`t˝ªsﬁve
(
BödHo°
,
NULL
,&
bù
,NULL,1)>=0) {

468 
ïå
->
bödù
 = 
bù
;

470 
ïå
->
bödù
 = 0;

472 i‡(
	`t˝ªsﬁve
(
Ma°îHo°
,
Ma°îP‹t
,&
mù
,&
mp‹t
,0)>=0) {

473 
ïå
->
ma°îù
 = 
mù
;

474 
ïå
->
ma°îp‹t
 = 
mp‹t
;

475 
ïå
->
ma°îaddrvÆid
 = 1;

477 
	`mfs_¨g_sy¶og
(
LOG_WARNING
,"ˇn'àªsﬁvêma°î ho°/p‹à(%s:%s)",
Ma°îHo°
,
Ma°îP‹t
);

481 
ïå
->
sock
=
	`t˝sockë
();

482 i‡(
ïå
->
sock
<0) {

483 
	`mfs_îæog
(
LOG_WARNING
,"create socket,Érror");

486 i‡(
	`t˝n⁄block
(
ïå
->
sock
)<0) {

487 
	`mfs_îæog
(
LOG_WARNING
,"setÇonblock,Érror");

488 
	`t˝˛o£
(
ïå
->
sock
);

489 
ïå
->
sock
 = -1;

492 i‡(
ïå
->
bödù
>0) {

493 i‡(
	`t˝numböd
(
ïå
->
sock
,ïå->
bödù
,0)<0) {

494 
	`mfs_îæog
(
LOG_WARNING
,"can't bind socketÅo given ip");

495 
	`t˝˛o£
(
ïå
->
sock
);

496 
ïå
->
sock
 = -1;

500 
°©us
 = 
	`t˝numc⁄√˘
(
ïå
->
sock
,ïå->
ma°îù
,ïå->
ma°îp‹t
);

501 i‡(
°©us
<0) {

502 
	`mfs_îæog
(
LOG_WARNING
,"connect failed,Érror");

503 
	`t˝˛o£
(
ïå
->
sock
);

504 
ïå
->
sock
 = -1;

505 
ïå
->
ma°îaddrvÆid
 = 0;

508 i‡(
°©us
==0) {

509 
	`sy¶og
(
LOG_NOTICE
,"connectedÅo Master immediately");

510 
	`ma°îc⁄n_c⁄√˘ed
(
ïå
);

512 
ïå
->
mode
 = 
CONNECTING
;

513 
	`sy¶og
(
LOG_NOTICE
,"connecting ...");

516 
	}
}

518 
	$ma°îc⁄n_c⁄√˘ã°
(
ma°îc⁄n
 *
ïå
) {

519 
°©us
;

521 
°©us
 = 
	`t˝gë°©us
(
ïå
->
sock
);

522 i‡(
°©us
) {

523 
	`mfs_îæog_sûít
(
LOG_WARNING
,"connection failed,Érror");

524 
	`t˝˛o£
(
ïå
->
sock
);

525 
ïå
->
sock
 = -1;

526 
ïå
->
mode
 = 
FREE
;

527 
ïå
->
ma°îaddrvÆid
 = 0;

529 
	`sy¶og
(
LOG_NOTICE
,"connectedÅo Master");

530 
	`ma°îc⁄n_c⁄√˘ed
(
ïå
);

532 
	}
}

534 
	$ma°îc⁄n_ªad
(
ma°îc⁄n
 *
ïå
) {

535 
öt32_t
 
i
;

536 
uöt32_t
 
ty≥
,
size
;

537 c⁄° 
uöt8_t
 *
±r
;

539 
i
=
	`ªad
(
ïå
->
sock
,ïå->
öpuçackë
.
°¨çå
,ïå->öpuçackë.
byã¶e·
);

540 i‡(
i
==0) {

541 
	`sy¶og
(
LOG_NOTICE
,"connection wasÑeset by Master");

542 
ïå
->
mode
 = 
KILL
;

545 i‡(
i
<0) {

546 i‡(
î∫o
!=
EAGAIN
) {

547 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"read from MasterÉrror");

548 
ïå
->
mode
 = 
KILL
;

552 
°©s_byãsö
+=
i
;

553 
ïå
->
öpuçackë
.
°¨çå
+=
i
;

554 
ïå
->
öpuçackë
.
byã¶e·
-=
i
;

556 i‡(
ïå
->
öpuçackë
.
byã¶e·
>0) {

560 i‡(
ïå
->
mode
==
HEADER
) {

561 
±r
 = 
ïå
->
hdrbuff
+4;

562 
size
 = 
	`gë32bô
(&
±r
);

564 i‡(
size
>0) {

565 i‡(
size
>
MaxPackëSize
) {

566 
	`sy¶og
(
LOG_WARNING
,"Ma°îÖackëÅoÿl⁄g (%"
PRIu32
"/%u)",
size
,
MaxPackëSize
);

567 
ïå
->
mode
 = 
KILL
;

570 
ïå
->
öpuçackë
.
∑ckë
 = 
	`mÆloc
(
size
);

571 
	`∑s£π
(
ïå
->
öpuçackë
.
∑ckë
);

572 
ïå
->
öpuçackë
.
byã¶e·
 = 
size
;

573 
ïå
->
öpuçackë
.
°¨çå
 =É±r->öpuçackë.
∑ckë
;

574 
ïå
->
mode
 = 
DATA
;

577 
ïå
->
mode
 = 
DATA
;

580 i‡(
ïå
->
mode
==
DATA
) {

581 
±r
 = 
ïå
->
hdrbuff
;

582 
ty≥
 = 
	`gë32bô
(&
±r
);

583 
size
 = 
	`gë32bô
(&
±r
);

585 
ïå
->
mode
=
HEADER
;

586 
ïå
->
öpuçackë
.
byã¶e·
 = 8;

587 
ïå
->
öpuçackë
.
°¨çå
 =É±r->
hdrbuff
;

589 
	`ma°îc⁄n_gŸ∑ckë
(
ïå
,
ty≥
,ïå->
öpuçackë
.
∑ckë
,
size
);

591 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

592 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

594 
ïå
->
öpuçackë
.
∑ckë
=
NULL
;

597 
	}
}

599 
	$ma°îc⁄n_wrôe
(
ma°îc⁄n
 *
ïå
) {

600 
∑ckë°ru˘
 *
∑ck
;

601 
öt32_t
 
i
;

603 
∑ck
 = 
ïå
->
ouçuthód
;

604 i‡(
∑ck
==
NULL
) {

607 
i
=
	`wrôe
(
ïå
->
sock
,
∑ck
->
°¨çå
,∑ck->
byã¶e·
);

608 i‡(
i
<0) {

609 i‡(
î∫o
!=
EAGAIN
) {

610 
	`mfs_îæog_sûít
(
LOG_NOTICE
,"writeÅo MasterÉrror");

611 
ïå
->
mode
 = 
KILL
;

615 
°©s_byãsout
+=
i
;

616 
∑ck
->
°¨çå
+=
i
;

617 
∑ck
->
byã¶e·
-=
i
;

618 i‡(
∑ck
->
byã¶e·
>0) {

621 
	`‰ì
(
∑ck
->
∑ckë
);

622 
ïå
->
ouçuthód
 = 
∑ck
->
√xt
;

623 i‡(
ïå
->
ouçuthód
==
NULL
) {

624 
ïå
->
ouçuâaû
 = &”±r->
ouçuthód
);

626 
	`‰ì
(
∑ck
);

628 
	}
}

631 
	$ma°îc⁄n_desc
(
pﬁlfd
 *
pdesc
,
uöt32_t
 *
ndesc
) {

632 
uöt32_t
 
pos
 = *
ndesc
;

633 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

635 
ïå
->
pdes˝os
 = -1;

636 i‡(
ïå
->
mode
==
FREE
 ||É±r->
sock
<0) {

639 i‡(
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
) {

640 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

641 
pdesc
[
pos
].
evíts
 = 
POLLIN
;

642 
ïå
->
pdes˝os
 = 
pos
;

643 
pos
++;

645 i‡(((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
ouçuthód
!=
NULL
Ë||É±r->mode==
CONNECTING
) {

646 i‡(
ïå
->
pdes˝os
>=0) {

647 
pdesc
[
ïå
->
pdes˝os
].
evíts
 |
POLLOUT
;

649 
pdesc
[
pos
].
fd
 = 
ïå
->
sock
;

650 
pdesc
[
pos
].
evíts
 = 
POLLOUT
;

651 
ïå
->
pdes˝os
 = 
pos
;

652 
pos
++;

655 *
ndesc
 = 
pos
;

656 
	}
}

658 
	$ma°îc⁄n_£rve
(
pﬁlfd
 *
pdesc
) {

659 
uöt32_t
 
now
=
	`maö_time
();

660 
∑ckë°ru˘
 *
µå
,*
∑±r
;

661 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

663 i‡(
ïå
->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & (
POLLHUP
 | 
POLLERR
))) {

664 i‡(
ïå
->
mode
==
CONNECTING
) {

665 
	`ma°îc⁄n_c⁄√˘ã°
(
ïå
);

667 
ïå
->
mode
 = 
KILL
;

670 i‡(
ïå
->
mode
==
CONNECTING
) {

671 i‡(
ïå
->
sock
>=0 &&É±r->
pdes˝os
>=0 && (
pdesc
[ïå->pdes˝os].
ªvíts
 & 
POLLOUT
)) {

672 
	`ma°îc⁄n_c⁄√˘ã°
(
ïå
);

675 i‡(
ïå
->
pdes˝os
>=0) {

676 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&& (
pdesc
[ïå->
pdes˝os
].
ªvíts
 & 
POLLIN
)) {

677 
ïå
->
œ°ªad
 = 
now
;

678 
	`ma°îc⁄n_ªad
(
ïå
);

680 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&& (
pdesc
[ïå->
pdes˝os
].
ªvíts
 & 
POLLOUT
)) {

681 
ïå
->
œ°wrôe
 = 
now
;

682 
	`ma°îc⁄n_wrôe
(
ïå
);

684 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
œ°ªad
+
Timeout
<
now
) {

685 
ïå
->
mode
 = 
KILL
;

687 i‡((
ïå
->
mode
==
HEADER
 ||É±r->mode==
DATA
Ë&&É±r->
œ°wrôe
+(
Timeout
/3)<
now
 &&É±r->
ouçuthód
==
NULL
) {

688 
	`ma°îc⁄n_¸óã∑ckë
(
ïå
,
ANTOAN_NOP
,0);

692 i‡(
ïå
->
mode
 =
KILL
) {

693 
	`ma°îc⁄n_bef‹e˛o£
(
ïå
);

694 
	`t˝˛o£
(
ïå
->
sock
);

695 i‡(
ïå
->
öpuçackë
.
∑ckë
) {

696 
	`‰ì
(
ïå
->
öpuçackë
.
∑ckë
);

698 
µå
 = 
ïå
->
ouçuthód
;

699 
µå
) {

700 i‡(
µå
->
∑ckë
) {

701 
	`‰ì
(
µå
->
∑ckë
);

703 
∑±r
 = 
µå
;

704 
µå
 =Ö±r->
√xt
;

705 
	`‰ì
(
∑±r
);

707 
ïå
->
mode
 = 
FREE
;

709 
	}
}

711 
	$ma°îc⁄n_ªc⁄√˘
() {

712 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

713 i‡(
ïå
->
mode
==
FREE
) {

714 
	`ma°îc⁄n_öôc⁄√˘
(
ïå
);

716 
	}
}

718 
	$ma°îc⁄n_ªlﬂd
() {

719 
ma°îc⁄n
 *
ïå
 = 
ma°îc⁄nsögÀt⁄
;

720 
ïå
->
ma°îaddrvÆid
 = 0;

721 i‡(
ïå
->
mode
!=
FREE
) {

722 
ïå
->
mode
 = 
KILL
;

724 
	}
}

726 
	$ma°îc⁄n_öô
() {

727 
uöt32_t
 
Rec⁄√˘i⁄Dñay
;

728 
uöt32_t
 
MëaDLFªq
;

729 
ma°îc⁄n
 *
ïå
;

731 
Rec⁄√˘i⁄Dñay
 = 
	`cfg_gëuöt32
("MASTER_RECONNECTION_DELAY",5);

732 
Ma°îHo°
 = 
	`cfg_gë°r
("MASTER_HOST","mfsmaster");

733 
Ma°îP‹t
 = 
	`cfg_gë°r
("MASTER_PORT","9419");

734 
BödHo°
 = 
	`cfg_gë°r
("BIND_HOST","*");

735 
Timeout
 = 
	`cfg_gëuöt32
("MASTER_TIMEOUT",60);

736 
BackLogsNumbî
 = 
	`cfg_gëuöt32
("BACK_LOGS",50);

737 
MëaDLFªq
 = 
	`cfg_gëuöt32
("META_DOWNLOAD_FREQ",24);

739 i‡(
Timeout
>65536) {

740 
Timeout
=65535;

742 i‡(
Timeout
<10) {

743 
Timeout
=10;

745 i‡(
BackLogsNumbî
<5) {

746 
BackLogsNumbî
=5;

748 i‡(
BackLogsNumbî
>10000) {

749 
BackLogsNumbî
=10000;

751 i‡(
MëaDLFªq
>(
BackLogsNumbî
/2)) {

752 
MëaDLFªq
=
BackLogsNumbî
/2;

754 
ïå
 = 
ma°îc⁄nsögÀt⁄
 = 
	`mÆloc
((
ma°îc⁄n
));

755 
	`∑s£π
(
ïå
);

757 
ïå
->
ma°îaddrvÆid
 = 0;

758 
ïå
->
mode
 = 
FREE
;

759 
ïå
->
pdes˝os
 = -1;

760 
ïå
->
logfd
 = 
NULL
;

761 
ïå
->
mëafd
 = -1;

762 
ïå
->
ﬁdmode
 = 0;

764 i‡(
	`ma°îc⁄n_öôc⁄√˘
(
ïå
)<0) {

767 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,
Rec⁄√˘i⁄Dñay
,0,
ma°îc⁄n_ªc⁄√˘
);

768 
	`maö_de°ru˘ªgi°î
(
ma°îc⁄n_ãrm
);

769 
	`maö_pﬁÃegi°î
(
ma°îc⁄n_desc
,
ma°îc⁄n_£rve
);

770 
	`maö_ªlﬂdªgi°î
(
ma°îc⁄n_ªlﬂd
);

771 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,
MëaDLFªq
*3600,630,
ma°îc⁄n_mëadow∆ﬂdöô
);

772 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,60,0,
ma°îc⁄n_£ssi⁄sdow∆ﬂdöô
);

773 
	`maö_timîegi°î
(
TIMEMODE_RUN_LATE
,1,0,
ma°îc⁄n_mëach™ges_Êush
);

775 
	}
}

	@mfsmetalogger/masterconn.h

19 #i‚de‡
_MASTERCONN_H_


20 
	#_MASTERCONN_H_


	)

22 
	~<öây≥s.h
>

23 
	~<°dio.h
>

27 
ma°îc⁄n_öô
();

	@mfsmetarestore/main.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<dúít.h
>

25 
	~<°rög.h
>

26 
	~<sys/°©.h
>

27 
	~<î∫o.h
>

29 
	~"fûesy°em.h
"

30 
	~"chunks.h
"

31 
	~"mîgî.h
"

32 
	~"ª°‹e.h
"

33 
	~"°ªº.h
"

35 
	#STR_AUX
(
x
Ë#x

	)

36 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

37 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

39 
	#MAXIDHOLE
 10000

	)

41 
	$ch™gñog_check«me
(c⁄° *
‚ame
) {

42 c⁄° *
±r
 = 
‚ame
;

43 i‡(
	`°∫cmp
(
±r
,"changelog.",10)==0) {

44 
±r
+=10;

45 i‡(*
±r
>='0' && *ptr<='9') {

46 *
±r
>='0' && *ptr<='9') {

47 
±r
++;

49 i‡(
	`°rcmp
(
±r
,".mfs")==0) {

53 } i‡(
	`°∫cmp
(
±r
,"changelog_ml.",13)==0) {

54 
±r
+=13;

55 i‡(*
±r
>='0' && *ptr<='9') {

56 *
±r
>='0' && *ptr<='9') {

57 
±r
++;

59 i‡(
	`°rcmp
(
±r
,".mfs")==0) {

63 } i‡(
	`°∫cmp
(
±r
,"changelog_ml_back.",18)==0) {

64 
±r
+=18;

65 i‡(*
±r
>='0' && *ptr<='9') {

66 *
±r
>='0' && *ptr<='9') {

67 
±r
++;

69 i‡(
	`°rcmp
(
±r
,".mfs")==0) {

75 
	}
}

77 
	$ußge
(c⁄° * 
≠≤ame
) {

78 
	`Ârötf
(
°dîr
,"ª°‹êmëad©a:\n\t%†[-b] [-i] [-x [-x]] -m <më®d©®fûe> -ÿ<ª°‹ed më®d©®fûe> [ <ch™gêlog fûe> [ <ch™gêlog fûe> [ .... ]]\ndum∞mëad©a:\n\t%†[-i] -m <më®d©®fûe>\«ut‹e°‹e:\n\t%†[-b] [-i] [-x [-x]] -®[-d <d©®∑th>]\≈röàvîsi⁄:\n\t%†-v\n\n-x -Örodu˚ m‹êvîbo£ ouçut\n-xx -Éví m‹êvîbo£ ouçut\n-b - i‡thîêi†™yÉº‹ i¿ch™gêlog†thí savêthêbe°ÖossibÀ mëad©®fûe\n-ò- ign‹êsomêmëad©®°ru˘uªÉº‹†◊âach oΩh™†tÿroŸ, ign‹ê«me†wôhouàöode,Étc.)\n",
≠≤ame
,appname,appname,appname);

79 
	}
}

81 
	$maö
(
¨gc
,**
¨gv
) {

82 
ch
;

83 
uöt8_t
 
vl
=0;

85 
aut‹e°‹e
 = 0;

86 
ßvebe°
 = 0;

87 
ign‹eÊag
 = 0;

88 
°©us
;

89 *
mëaout
 = 
NULL
;

90 *
mëad©a
 = 
NULL
;

91 *
d©≠©h
 = 
NULL
;

93 *
≠≤ame
 = 
¨gv
[0];

94 
uöt32_t
 
d∂í
 = 0;

96 
	`°ªº_öô
();

98 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "vm:o:d:abxih:?")) != -1) {

99 
ch
) {

101 
	`¥ötf
("vîsi⁄: %u.%u.%u\n",
VERSMAJ
,
VERSMID
,
VERSMIN
);

104 
mëaout
 = 
	`°rdup
(
›èrg
);

107 
mëad©a
 = 
	`°rdup
(
›èrg
);

110 
d©≠©h
 = 
	`°rdup
(
›èrg
);

113 
vl
++;

117 
aut‹e°‹e
=1;

120 
ßvebe°
=1;

123 
ign‹eÊag
=1;

127 
	`ußge
(
¨gv
[0]);

131 
¨gc
 -
›töd
;

132 
¨gv
 +
›töd
;

134 i‡((
aut‹e°‹e
==0 && (
mëad©a
==
NULL
 || 
d©≠©h
!=NULL)Ë|| (aut‹e°‹ê&& (mëad©a!=NULL || 
mëaout
!=NULL))) {

135 
	`ußge
(
≠≤ame
);

139 
	`ª°‹e_£tvîbÀvñ
(
vl
);

141 i‡(
aut‹e°‹e
) {

142 
°©
 
mëa°
;

143 i‡(
d©≠©h
==
NULL
) {

144 
d©≠©h
=
	`°rdup
(
DATA_PATH
);

146 
d∂í
 = 
	`°æí
(
d©≠©h
);

147 
mëad©a
 = 
	`mÆloc
(
d∂í
+("/metadata.mfs.back"));

148 
	`mem˝y
(
mëad©a
,
d©≠©h
,
d∂í
);

149 
	`mem˝y
(
mëad©a
+
d∂í
,"/metadata.mfs.back",("/metadata.mfs.back"));

150 i‡(
	`°©
(
mëad©a
,&
mëa°
)<0) {

151 i‡(
î∫o
==
ENOENT
) {

152 
	`‰ì
(
mëad©a
);

153 
mëad©a
 = 
	`mÆloc
(
d∂í
+("/metadata_ml.mfs.back"));

154 
	`mem˝y
(
mëad©a
,
d©≠©h
,
d∂í
);

155 
	`mem˝y
(
mëad©a
+
d∂í
,"/metadata_ml.mfs.back",("/metadata_ml.mfs.back"));

156 i‡(
	`°©
(
mëad©a
,&
mëa°
)==0) {

157 
	`¥ötf
("file 'metadata.mfs.back'Çot found - willÅry 'metadata_ml.mfs.back' instead\n");

159 
	`¥ötf
("can't find backed up metadata file !!!\n");

164 
mëaout
 = 
	`mÆloc
(
d∂í
+("/metadata.mfs"));

165 
	`mem˝y
(
mëaout
,
d©≠©h
,
d∂í
);

166 
	`mem˝y
(
mëaout
+
d∂í
,"/metadata.mfs",("/metadata.mfs"));

169 i‡(
	`fs_öô
(
mëad©a
,
ign‹eÊag
)!=0) {

170 
	`¥ötf
("ˇn'àªad mëad©®‰om fûe: %s\n",
mëad©a
);

174 i‡(
aut‹e°‹e
) {

175 
DIR
 *
dd
;

176 
dúít
 *
dp
;

177 
uöt32_t
 
fûes
,
pos
,
∆í
;

178 **
fûíames
;

180 
dd
 = 
	`›ídú
(
d©≠©h
);

181 i‡(!
dd
) {

182 
	`¥ötf
("can't open data directory\n");

185 
fûes
 = 0;

186 (
dp
 = 
	`ªaddú
(
dd
)Ë!
NULL
) {

187 
fûes
 +
	`ch™gñog_check«me
(
dp
->
d_«me
);

189 i‡(
fûes
==0) {

190 
	`¥ötf
("changelog filesÇot found\n");

193 
fûíames
 = (**)
	`mÆloc
((*)*
fûes
);

194 
pos
 = 0;

195 
	`ªwöddú
(
dd
);

196 (
dp
 = 
	`ªaddú
(
dd
)Ë!
NULL
) {

197 i‡(
	`ch™gñog_check«me
(
dp
->
d_«me
)) {

198 
∆í
 = 
	`°æí
(
dp
->
d_«me
);

199 
fûíames
[
pos
] = 
	`mÆloc
(
d∂í
+1+
∆í
+1);

200 
	`mem˝y
(
fûíames
[
pos
],
d©≠©h
,
d∂í
);

201 
fûíames
[
pos
][
d∂í
]='/';

202 
	`mem˝y
(
fûíames
[
pos
]+
d∂í
+1,
dp
->
d_«me
,
∆í
);

203 
fûíames
[
pos
][
d∂í
+
∆í
+1]=0;

204 i‡(
vl
>0) {

205 
	`¥ötf
("found ch™gñog fûê%"
PRIu32
": %s\n",
pos
+1,
fûíames
[pos]);

207 
pos
++;

210 
	`˛o£dú
(
dd
);

211 
	`mîgî_°¨t
(
fûes
,
fûíames
,
MAXIDHOLE
);

212 
pos
 = 0 ;Öos<
fûes
 ;Öos++) {

213 
	`‰ì
(
fûíames
[
pos
]);

215 
	`‰ì
(
fûíames
);

217 
	`mîgî_°¨t
(
¨gc
,
¨gv
,
MAXIDHOLE
);

220 
°©us
 = 
	`mîgî_lo›
();

222 i‡(
°©us
<0 && 
ßvebe°
==0) {

226 i‡(
mëaout
==
NULL
) {

227 
	`fs_dump
();

228 
	`chunk_dump
();

230 
	`¥ötf
("°‹êmëad©®ötÿfûe: %s\n",
mëaout
);

231 
	`fs_ãrm
(
mëaout
);

234 
	}
}

	@mfsmetarestore/merger.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<öây≥s.h
>

5 
	~"ª°‹e.h
"

7 
	#BSIZE
 10000

	)

9 
	s_híåy
 {

10 
FILE
 *
	mfd
;

11 c⁄° *
	mfûíame
;

12 *
	mbuff
;

13 *
	m±r
;

14 
uöt64_t
 
	m√xtid
;

15 } 
	thíåy
;

17 
híåy
 *
	ghóp
;

18 
uöt32_t
 
	ghópsize
;

19 
uöt64_t
 
	gmaxidhﬁe
;

21 
	#PARENT
(
x
Ë(((x)-1)/2)

	)

22 
	#CHILD
(
x
Ë(((x)*2)+1)

	)

24 
	$mîgî_hóp_s‹t_down
() {

25 
uöt32_t
 
l
,
r
,
m
;

26 
uöt32_t
 
pos
=0;

27 
híåy
 
x
;

28 
pos
<
hópsize
) {

29 
l
 = 
	`CHILD
(
pos
);

30 
r
 = 
l
+1;

31 i‡(
l
>=
hópsize
) {

34 
m
 = 
l
;

35 i‡(
r
<
hópsize
 && 
hóp
[r].
√xtid
 < hóp[
l
].nextid) {

36 
m
 = 
r
;

38 i‡(
hóp
[
pos
].
√xtid
 <hóp[
m
].nextid) {

41 
x
 = 
hóp
[
pos
];

42 
hóp
[
pos
] = hóp[
m
];

43 
hóp
[
m
] = 
x
;

44 
pos
 = 
m
;

46 
	}
}

48 
	$mîgî_hóp_s‹t_up
() {

49 
uöt32_t
 
pos
=
hópsize
-1;

50 
uöt32_t
 
p
;

51 
híåy
 
x
;

52 
pos
>0) {

53 
p
 = 
	`PARENT
(
pos
);

54 i‡(
hóp
[
pos
].
√xtid
 >hóp[
p
].nextid) {

57 
x
 = 
hóp
[
pos
];

58 
hóp
[
pos
] = hóp[
p
];

59 
hóp
[
p
] = 
x
;

60 
pos
 = 
p
;

62 
	}
}

65 
	$mîgî_√xã¡ry
(
uöt32_t
 
pos
) {

66 i‡(
	`fgës
(
hóp
[
pos
].
buff
,
BSIZE
,hóp[pos].
fd
)) {

67 
uöt64_t
 
√xtid
 = 
	`°πouŒ
(
hóp
[
pos
].
buff
,&(hóp[pos].
±r
),10);

68 i‡(
hóp
[
pos
].
√xtid
==0 || (√xtid>hóp[pos].√xtid &&Çextid<hóp[pos].√xtid+
maxidhﬁe
)) {

69 
hóp
[
pos
].
√xtid
 =Çextid;

71 
	`¥ötf
("found g¨bagê©Åhêíd o‡fûe: %†÷a° c‹ª˘ id: %"
PRIu64
")\n",
hóp
[
pos
].
fûíame
,hóp[pos].
√xtid
);

72 
hóp
[
pos
].
√xtid
 = 0;

75 
hóp
[
pos
].
√xtid
 = 0;

77 
	}
}

79 
	$mîgî_dñëe_íåy
() {

80 
	`f˛o£
(
hóp
[
hópsize
].
fd
);

81 
	`‰ì
(
hóp
[
hópsize
].
buff
);

82 
	}
}

84 
	$mîgî_√w_íåy
(c⁄° *
fûíame
) {

85 i‡((
hóp
[
hópsize
].
fd
 = 
	`f›í
(
fûíame
,"r"))!=
NULL
) {

86 
hóp
[
hópsize
].
fûíame
 = filename;

87 
hóp
[
hópsize
].
buff
 = 
	`mÆloc
(
BSIZE
);

88 
hóp
[
hópsize
].
±r
 = 
NULL
;

89 
hóp
[
hópsize
].
√xtid
 = 0;

90 
	`mîgî_√xã¡ry
(
hópsize
);

92 
	`¥ötf
("ˇn'à›í ch™gñog fûe: %s\n",
fûíame
);

93 
hóp
[
hópsize
].
fûíame
 = 
NULL
;

94 
hóp
[
hópsize
].
buff
 = 
NULL
;

95 
hóp
[
hópsize
].
±r
 = 
NULL
;

96 
hóp
[
hópsize
].
√xtid
 = 0;

98 
	}
}

100 
	$mîgî_°¨t
(
uöt32_t
 
fûes
,**
fûíames
,
uöt64_t
 
maxhﬁe
) {

101 
uöt32_t
 
i
;

102 
hópsize
 = 0;

103 
hóp
 = (
híåy
*)
	`mÆloc
((híåy)*
fûes
);

104 i‡(
hóp
==
NULL
) {

107 
i
=0 ; i<
fûes
 ; i++) {

108 
	`mîgî_√w_íåy
(
fûíames
[
i
]);

110 i‡(
hóp
[
hópsize
].
√xtid
==0) {

111 
	`mîgî_dñëe_íåy
();

113 
hópsize
++;

114 
	`mîgî_hóp_s‹t_up
();

117 
maxidhﬁe
 = 
maxhﬁe
;

122 
	}
}

124 
	$mîgî_lo›
() {

125 
°©us
;

126 
híåy
 
h
;

127 
hópsize
) {

129 i‡((
°©us
=
	`ª°‹e
(
hóp
[0].
fûíame
,hóp[0].
√xtid
,hóp[0].
±r
))<0) {

130 
hópsize
) {

131 
hópsize
--;

132 
	`mîgî_dñëe_íåy
();

134  
°©us
;

136 
	`mîgî_√xã¡ry
(0);

137 i‡(
hóp
[0].
√xtid
==0) {

138 
hópsize
--;

139 
h
 = 
hóp
[0];

140 
hóp
[0] = hóp[
hópsize
];

141 
hóp
[
hópsize
] = 
h
;

142 
	`mîgî_dñëe_íåy
();

144 
	`mîgî_hóp_s‹t_down
();

147 
	}
}

	@mfsmetarestore/merger.h

1 #i‚de‡
_MERGER_H_


2 
	#_MERGER_H_


	)

4 
	~<öây≥s.h
>

6 
mîgî_°¨t
(
uöt32_t
 
fûes
,**
fûíames
,
uöt64_t
 
maxhﬁe
);

7 
mîgî_lo›
();

	@mfsmetarestore/restore.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

26 
	~"MFSCommuniˇti⁄.h
"

27 
	~"fûesy°em.h
"

29 
	#EAT
(
˛±r
,
‚
,
vno
,
c
) { \

30 i‡(*(
˛±r
)!=(
c
)) { \

31 
	`¥ötf
("%s:%"
PRIu64
": '%c'Éx≥˘ed\n",(
‚
),(
vno
),(
c
)); \

34 (
˛±r
)++; \

35 }

	)

37 
	#GETNAME
(
«me
,
˛±r
,
‚
,
vno
,
c
) { \

38 
uöt32_t
 
_tmp_i
; \

39 
_tmp_c
,
_tmp_h1
,
_tmp_h2
; \

40 
	`mem£t
((*)(
«me
),0,256); \

41 
_tmp_i
 = 0; \

42 (
_tmp_c
=*((
˛±r
)++))!=
c
 && 
_tmp_i
<255) { \

43 i‡(
_tmp_c
=='%') { \

44 
_tmp_h1
 = *((
˛±r
)++); \

45 
_tmp_h2
 = *((
˛±r
)++); \

46 i‡(
_tmp_h1
>='0' && _tmp_h1<='9') { \

47 
_tmp_h1
-='0'; \

48 } i‡(
_tmp_h1
>='A' && _tmp_h1<='F') { \

49 
_tmp_h1
-=('A'-10); \

51 
	`¥ötf
("%s:%"
PRIu64
": hexÉx≥˘ed\n",(
‚
),(
vno
)); \

54 i‡(
_tmp_h2
>='0' && _tmp_h2<='9') { \

55 
_tmp_h2
-='0'; \

56 } i‡(
_tmp_h2
>='A' && _tmp_h2<='F') { \

57 
_tmp_h2
-=('A'-10); \

59 
	`¥ötf
("%s:%"
PRIu64
": hexÉx≥˘ed\n",(
‚
),(
vno
)); \

62 
_tmp_c
 = 
_tmp_h1
*16+
_tmp_h2
; \

64 
«me
[
_tmp_i
++] = 
_tmp_c
; \

66 (
˛±r
)--; \

67 
«me
[
_tmp_i
]=0; \

68 }

	)

70 
	#GETPATH
(
∑th
,
size
,
˛±r
,
‚
,
vno
,
c
) { \

71 
uöt32_t
 
_tmp_i
; \

72 
_tmp_c
,
_tmp_h1
,
_tmp_h2
; \

73 
_tmp_i
 = 0; \

74 (
_tmp_c
=*((
˛±r
)++))!=
c
) { \

75 i‡(
_tmp_c
=='%') { \

76 
_tmp_h1
 = *((
˛±r
)++); \

77 
_tmp_h2
 = *((
˛±r
)++); \

78 i‡(
_tmp_h1
>='0' && _tmp_h1<='9') { \

79 
_tmp_h1
-='0'; \

80 } i‡(
_tmp_h1
>='A' && _tmp_h1<='F') { \

81 
_tmp_h1
-=('A'-10); \

83 
	`¥ötf
("%s:%"
PRIu64
": hexÉx≥˘ed\n",(
‚
),(
vno
)); \

86 i‡(
_tmp_h2
>='0' && _tmp_h2<='9') { \

87 
_tmp_h2
-='0'; \

88 } i‡(
_tmp_h2
>='A' && _tmp_h2<='F') { \

89 
_tmp_h2
-=('A'-10); \

91 
	`¥ötf
("%s:%"
PRIu64
": hexÉx≥˘ed\n",(
‚
),(
vno
)); \

94 
_tmp_c
 = 
_tmp_h1
*16+
_tmp_h2
; \

96 i‡((
_tmp_i
)>=(
size
)) { \

97 (
size
Ë
_tmp_i
+1000; \

98 i‡((
∑th
)==
NULL
) { \

99 (
∑th
Ë
	`mÆloc
(
size
); \

101 (
∑th
Ë
	`ªÆloc
(’©h),(
size
)); \

104 
∑th
[
_tmp_i
++]=
_tmp_c
; \

106 i‡((
_tmp_i
)>=(
size
)) { \

107 (
size
Ë
_tmp_i
+1000; \

108 i‡((
∑th
)==
NULL
) { \

109 (
∑th
Ë
	`mÆloc
(
size
); \

111 (
∑th
Ë
	`ªÆloc
(’©h),(
size
)); \

114 (
˛±r
)--; \

115 
∑th
[
_tmp_i
]=0; \

116 }

	)

118 
	#GETU32
(
d©a
,
˛±r
Ë(d©a)=
	`°πoul
(˛±r,&˛±r,10)

	)

119 
	#GETU64
(
d©a
,
˛±r
Ë(d©a)=
	`°πouŒ
(˛±r,&˛±r,10)

	)

121 
	$do_ac˚ss
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

122 
uöt32_t
 
öode
;

123 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

124 
	`GETU32
(
öode
,
±r
);

125 
	`EAT
(
±r
,
fûíame
,
lv
,')');

126  
	`fs_ac˚ss
(
ts
,
öode
);

127 
	}
}

129 
	$do_≠≥nd
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

130 
uöt32_t
 
öode
,
öode_§c
;

131 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

132 
	`GETU32
(
öode
,
±r
);

133 
	`EAT
(
±r
,
fûíame
,
lv
,',');

134 
	`GETU32
(
öode_§c
,
±r
);

135 
	`EAT
(
±r
,
fûíame
,
lv
,')');

136  
	`fs_≠≥nd
(
ts
,
öode
,
öode_§c
);

137 
	}
}

139 
	$do_acquúe
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

140 
uöt32_t
 
öode
,
cuid
;

141 ()
ts
;

142 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

143 
	`GETU32
(
öode
,
±r
);

144 
	`EAT
(
±r
,
fûíame
,
lv
,',');

145 
	`GETU32
(
cuid
,
±r
);

146 
	`EAT
(
±r
,
fûíame
,
lv
,')');

147  
	`fs_acquúe
(
öode
,
cuid
);

148 
	}
}

150 
	$do_©å
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

151 
uöt32_t
 
öode
,
mode
,
uid
,
gid
,
©ime
,
mtime
;

152 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

153 
	`GETU32
(
öode
,
±r
);

154 
	`EAT
(
±r
,
fûíame
,
lv
,',');

155 
	`GETU32
(
mode
,
±r
);

156 
	`EAT
(
±r
,
fûíame
,
lv
,',');

157 
	`GETU32
(
uid
,
±r
);

158 
	`EAT
(
±r
,
fûíame
,
lv
,',');

159 
	`GETU32
(
gid
,
±r
);

160 
	`EAT
(
±r
,
fûíame
,
lv
,',');

161 
	`GETU32
(
©ime
,
±r
);

162 
	`EAT
(
±r
,
fûíame
,
lv
,',');

163 
	`GETU32
(
mtime
,
±r
);

164 
	`EAT
(
±r
,
fûíame
,
lv
,')');

165  
	`fs_©å
(
ts
,
öode
,
mode
,
uid
,
gid
,
©ime
,
mtime
);

166 
	}
}

183 
	$do_¸óã
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

184 
uöt32_t
 
∑ª¡
,
mode
,
uid
,
gid
,
rdev
,
öode
;

185 
uöt8_t
 
ty≥
,
«me
[256];

186 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

187 
	`GETU32
(
∑ª¡
,
±r
);

188 
	`EAT
(
±r
,
fûíame
,
lv
,',');

189 
	`GETNAME
(
«me
,
±r
,
fûíame
,
lv
,',');

190 
	`EAT
(
±r
,
fûíame
,
lv
,',');

191 
ty≥
 = *
±r
;

192 
±r
++;

193 
	`EAT
(
±r
,
fûíame
,
lv
,',');

194 
	`GETU32
(
mode
,
±r
);

195 
	`EAT
(
±r
,
fûíame
,
lv
,',');

196 
	`GETU32
(
uid
,
±r
);

197 
	`EAT
(
±r
,
fûíame
,
lv
,',');

198 
	`GETU32
(
gid
,
±r
);

199 
	`EAT
(
±r
,
fûíame
,
lv
,',');

200 
	`GETU32
(
rdev
,
±r
);

201 
	`EAT
(
±r
,
fûíame
,
lv
,')');

202 
	`EAT
(
±r
,
fûíame
,
lv
,':');

203 
	`GETU32
(
öode
,
±r
);

204  
	`fs_¸óã
(
ts
,
∑ª¡
,
	`°æí
((*)
«me
),«me,
ty≥
,
mode
,
uid
,
gid
,
rdev
,
öode
);

205 
	}
}

207 
	$do_£ssi⁄
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

208 
uöt32_t
 
cuid
;

209 ()
ts
;

210 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

211 
	`EAT
(
±r
,
fûíame
,
lv
,')');

212 
	`EAT
(
±r
,
fûíame
,
lv
,':');

213 
	`GETU32
(
cuid
,
±r
);

214  
	`fs_£ssi⁄
(
cuid
);

215 
	}
}

217 
	$do_em±yåash
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

218 
uöt32_t
 
ª£rvedöodes
,
‰ìöodes
;

219 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

220 
	`EAT
(
±r
,
fûíame
,
lv
,')');

221 
	`EAT
(
±r
,
fûíame
,
lv
,':');

222 
	`GETU32
(
‰ìöodes
,
±r
);

223 
	`EAT
(
±r
,
fûíame
,
lv
,',');

224 
	`GETU32
(
ª£rvedöodes
,
±r
);

225  
	`fs_em±yåash
(
ts
,
‰ìöodes
,
ª£rvedöodes
);

226 
	}
}

228 
	$do_em±yª£rved
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,* 
±r
) {

229 
uöt32_t
 
‰ìöodes
;

230 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

231 
	`EAT
(
±r
,
fûíame
,
lv
,')');

232 
	`EAT
(
±r
,
fûíame
,
lv
,':');

233 
	`GETU32
(
‰ìöodes
,
±r
);

234  
	`fs_em±yª£rved
(
ts
,
‰ìöodes
);

235 
	}
}

237 
	$do_‰ìöodes
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,* 
±r
) {

238 
uöt32_t
 
‰ìöodes
;

239 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

240 
	`EAT
(
±r
,
fûíame
,
lv
,')');

241 
	`EAT
(
±r
,
fûíame
,
lv
,':');

242 
	`GETU32
(
‰ìöodes
,
±r
);

243  
	`fs_‰ìöodes
(
ts
,
‰ìöodes
);

244 
	}
}

246 
	$do_öcvîsi⁄
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

247 
uöt64_t
 
chunkid
;

248 ()
ts
;

249 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

250 
	`GETU64
(
chunkid
,
±r
);

251 
	`EAT
(
±r
,
fûíame
,
lv
,')');

252  
	`fs_öcvîsi⁄
(
chunkid
);

253 
	}
}

255 
	$do_lök
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

256 
uöt32_t
 
öode
,
∑ª¡
;

257 
uöt8_t
 
«me
[256];

258 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

259 
	`GETU32
(
öode
,
±r
);

260 
	`EAT
(
±r
,
fûíame
,
lv
,',');

261 
	`GETU32
(
∑ª¡
,
±r
);

262 
	`EAT
(
±r
,
fûíame
,
lv
,',');

263 
	`GETNAME
(
«me
,
±r
,
fûíame
,
lv
,')');

264 
	`EAT
(
±r
,
fûíame
,
lv
,')');

265  
	`fs_lök
(
ts
,
öode
,
∑ª¡
,
	`°æí
((*)
«me
),name);

266 
	}
}

268 
	$do_Àngth
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

269 
uöt32_t
 
öode
;

270 
uöt64_t
 
Àngth
;

271 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

272 
	`GETU32
(
öode
,
±r
);

273 
	`EAT
(
±r
,
fûíame
,
lv
,',');

274 
	`GETU64
(
Àngth
,
±r
);

275 
	`EAT
(
±r
,
fûíame
,
lv
,')');

276  
	`fs_Àngth
(
ts
,
öode
,
Àngth
);

277 
	}
}

279 
	$do_move
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

280 
uöt32_t
 
öode
,
∑ª¡_§c
,
∑ª¡_d°
;

281 
uöt8_t
 
«me_§c
[256],
«me_d°
[256];

282 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

283 
	`GETU32
(
∑ª¡_§c
,
±r
);

284 
	`EAT
(
±r
,
fûíame
,
lv
,',');

285 
	`GETNAME
(
«me_§c
,
±r
,
fûíame
,
lv
,',');

286 
	`EAT
(
±r
,
fûíame
,
lv
,',');

287 
	`GETU32
(
∑ª¡_d°
,
±r
);

288 
	`EAT
(
±r
,
fûíame
,
lv
,',');

289 
	`GETNAME
(
«me_d°
,
±r
,
fûíame
,
lv
,')');

290 
	`EAT
(
±r
,
fûíame
,
lv
,')');

291 
	`EAT
(
±r
,
fûíame
,
lv
,':');

292 
	`GETU32
(
öode
,
±r
);

293  
	`fs_move
(
ts
,
∑ª¡_§c
,
	`°æí
((*)
«me_§c
),«me_§c,
∑ª¡_d°
,°æí((*)
«me_d°
),«me_d°,
öode
);

294 
	}
}

296 
	$do_purge
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

297 
uöt32_t
 
öode
;

298 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

299 
	`GETU32
(
öode
,
±r
);

300 
	`EAT
(
±r
,
fûíame
,
lv
,')');

301  
	`fs_purge
(
ts
,
öode
);

302 
	}
}

304 
	$do_quŸa
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

305 
uöt32_t
 
öode
,
°ime°amp
,
söodes
,
höodes
;

306 
uöt64_t
 
¶ígth
,
ssize
,
§ólsize
;

307 
uöt64_t
 
hÀngth
,
hsize
,
hªÆsize
;

308 
uöt32_t
 
Êags
,
ex˚eded
;

309 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

310 
	`GETU32
(
öode
,
±r
);

311 
	`EAT
(
±r
,
fûíame
,
lv
,',');

312 
	`GETU32
(
ex˚eded
,
±r
);

313 
	`EAT
(
±r
,
fûíame
,
lv
,',');

314 
	`GETU32
(
Êags
,
±r
);

315 
	`EAT
(
±r
,
fûíame
,
lv
,',');

316 
	`GETU32
(
°ime°amp
,
±r
);

317 
	`EAT
(
±r
,
fûíame
,
lv
,',');

318 
	`GETU32
(
söodes
,
±r
);

319 
	`EAT
(
±r
,
fûíame
,
lv
,',');

320 
	`GETU32
(
höodes
,
±r
);

321 
	`EAT
(
±r
,
fûíame
,
lv
,',');

322 
	`GETU64
(
¶ígth
,
±r
);

323 
	`EAT
(
±r
,
fûíame
,
lv
,',');

324 
	`GETU64
(
hÀngth
,
±r
);

325 
	`EAT
(
±r
,
fûíame
,
lv
,',');

326 
	`GETU64
(
ssize
,
±r
);

327 
	`EAT
(
±r
,
fûíame
,
lv
,',');

328 
	`GETU64
(
hsize
,
±r
);

329 
	`EAT
(
±r
,
fûíame
,
lv
,',');

330 
	`GETU64
(
§ólsize
,
±r
);

331 
	`EAT
(
±r
,
fûíame
,
lv
,',');

332 
	`GETU64
(
hªÆsize
,
±r
);

333 
	`EAT
(
±r
,
fûíame
,
lv
,')');

334  
	`fs_quŸa
(
ts
,
öode
,
ex˚eded
,
Êags
,
°ime°amp
,
söodes
,
höodes
,
¶ígth
,
hÀngth
,
ssize
,
hsize
,
§ólsize
,
hªÆsize
);

335 
	}
}

351 
	$do_ªÀa£
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

352 
uöt32_t
 
öode
,
cuid
;

353 ()
ts
;

354 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

355 
	`GETU32
(
öode
,
±r
);

356 
	`EAT
(
±r
,
fûíame
,
lv
,',');

357 
	`GETU32
(
cuid
,
±r
);

358 
	`EAT
(
±r
,
fûíame
,
lv
,')');

359  
	`fs_ªÀa£
(
öode
,
cuid
);

360 
	}
}

362 
	$do_ª∑ú
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

363 
uöt32_t
 
öode
,
ödx
;

364 
uöt32_t
 
vîsi⁄
;

365 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

366 
	`GETU32
(
öode
,
±r
);

367 
	`EAT
(
±r
,
fûíame
,
lv
,',');

368 
	`GETU32
(
ödx
,
±r
);

369 
	`EAT
(
±r
,
fûíame
,
lv
,')');

370 
	`EAT
(
±r
,
fûíame
,
lv
,':');

371 
	`GETU32
(
vîsi⁄
,
±r
);

372  
	`fs_ª∑ú
(
ts
,
öode
,
ödx
,
vîsi⁄
);

373 
	}
}

383 
	$do_£ã©å
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

384 
uöt32_t
 
öode
,
uid
,
ci
,
nci
,
≈i
;

385 
uöt8_t
 
óâr
,
smode
;

386 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

387 
	`GETU32
(
öode
,
±r
);

388 
	`EAT
(
±r
,
fûíame
,
lv
,',');

389 
	`GETU32
(
uid
,
±r
);

390 
	`EAT
(
±r
,
fûíame
,
lv
,',');

391 
	`GETU32
(
óâr
,
±r
);

392 
	`EAT
(
±r
,
fûíame
,
lv
,',');

393 
	`GETU32
(
smode
,
±r
);

394 
	`EAT
(
±r
,
fûíame
,
lv
,')');

395 
	`EAT
(
±r
,
fûíame
,
lv
,':');

396 
	`GETU32
(
ci
,
±r
);

397 
	`EAT
(
±r
,
fûíame
,
lv
,',');

398 
	`GETU32
(
nci
,
±r
);

399 
	`EAT
(
±r
,
fûíame
,
lv
,',');

400 
	`GETU32
(
≈i
,
±r
);

401  
	`fs_£ã©å
(
ts
,
öode
,
uid
,
óâr
,
smode
,
ci
,
nci
,
≈i
);

402 
	}
}

404 
	$do_£tgﬂl
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

405 #i‡
VERSHEX
>=0x010700

406 
uöt32_t
 
öode
,
uid
,
ci
,
nci
,
≈i
,
qei
;

408 
uöt32_t
 
öode
,
uid
,
ci
,
nci
,
≈i
;

410 
uöt8_t
 
gﬂl
,
smode
;

411 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

412 
	`GETU32
(
öode
,
±r
);

413 
	`EAT
(
±r
,
fûíame
,
lv
,',');

414 
	`GETU32
(
uid
,
±r
);

415 
	`EAT
(
±r
,
fûíame
,
lv
,',');

416 
	`GETU32
(
gﬂl
,
±r
);

417 
	`EAT
(
±r
,
fûíame
,
lv
,',');

418 
	`GETU32
(
smode
,
±r
);

419 
	`EAT
(
±r
,
fûíame
,
lv
,')');

420 
	`EAT
(
±r
,
fûíame
,
lv
,':');

421 
	`GETU32
(
ci
,
±r
);

422 
	`EAT
(
±r
,
fûíame
,
lv
,',');

423 
	`GETU32
(
nci
,
±r
);

424 
	`EAT
(
±r
,
fûíame
,
lv
,',');

425 
	`GETU32
(
≈i
,
±r
);

426 #i‡
VERSHEX
>=0x010700

427 i‡(*
±r
==',') {

428 
	`EAT
(
±r
,
fûíame
,
lv
,',');

429 
	`GETU32
(
qei
,
±r
);

431 
qei
 = 
	`UINT32_C
(0xFFFFFFFF);

433  
	`fs_£tgﬂl
(
ts
,
öode
,
uid
,
gﬂl
,
smode
,
ci
,
nci
,
≈i
,
qei
);

435  
	`fs_£tgﬂl
(
ts
,
öode
,
uid
,
gﬂl
,
smode
,
ci
,
nci
,
≈i
);

437 
	}
}

439 
	$do_£ç©h
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

440 
uöt32_t
 
öode
;

441 
uöt8_t
 *
∑th
;

442 
uöt32_t
 
∑thsize
;

443 ()
ts
;

444 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

445 
	`GETU32
(
öode
,
±r
);

446 
	`EAT
(
±r
,
fûíame
,
lv
,',');

447 
	`GETPATH
(
∑th
,
∑thsize
,
±r
,
fûíame
,
lv
,')');

448 
	`EAT
(
±r
,
fûíame
,
lv
,')');

449  
	`fs_£ç©h
(
öode
,
∑th
);

450 
	}
}

452 
	$do_£âøshtime
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

453 
uöt32_t
 
öode
,
uid
,
ci
,
nci
,
≈i
;

454 
uöt32_t
 
åashtime
;

455 
uöt8_t
 
smode
;

456 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

457 
	`GETU32
(
öode
,
±r
);

458 
	`EAT
(
±r
,
fûíame
,
lv
,',');

459 
	`GETU32
(
uid
,
±r
);

460 
	`EAT
(
±r
,
fûíame
,
lv
,',');

461 
	`GETU32
(
åashtime
,
±r
);

462 
	`EAT
(
±r
,
fûíame
,
lv
,',');

463 
	`GETU32
(
smode
,
±r
);

464 
	`EAT
(
±r
,
fûíame
,
lv
,')');

465 
	`EAT
(
±r
,
fûíame
,
lv
,':');

466 
	`GETU32
(
ci
,
±r
);

467 
	`EAT
(
±r
,
fûíame
,
lv
,',');

468 
	`GETU32
(
nci
,
±r
);

469 
	`EAT
(
±r
,
fûíame
,
lv
,',');

470 
	`GETU32
(
≈i
,
±r
);

471  
	`fs_£âøshtime
(
ts
,
öode
,
uid
,
åashtime
,
smode
,
ci
,
nci
,
≈i
);

472 
	}
}

474 
	$do_¢≠shŸ
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

475 
uöt32_t
 
öode
,
∑ª¡
,
ˇnovîwrôe
;

476 
uöt8_t
 
«me
[256];

477 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

478 
	`GETU32
(
öode
,
±r
);

479 
	`EAT
(
±r
,
fûíame
,
lv
,',');

480 
	`GETU32
(
∑ª¡
,
±r
);

481 
	`EAT
(
±r
,
fûíame
,
lv
,',');

482 
	`GETNAME
(
«me
,
±r
,
fûíame
,
lv
,',');

483 
	`EAT
(
±r
,
fûíame
,
lv
,',');

484 
	`GETU32
(
ˇnovîwrôe
,
±r
);

485 
	`EAT
(
±r
,
fûíame
,
lv
,')');

486  
	`fs_¢≠shŸ
(
ts
,
öode
,
∑ª¡
,
	`°æí
((*)
«me
),«me,
ˇnovîwrôe
);

487 
	}
}

489 
	$do_symlök
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

490 
uöt32_t
 
∑ª¡
,
uid
,
gid
,
öode
;

491 
uöt8_t
 
«me
[256];

492 
uöt8_t
 *
∑th
;

493 
uöt32_t
 
∑thsize
;

494 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

495 
	`GETU32
(
∑ª¡
,
±r
);

496 
	`EAT
(
±r
,
fûíame
,
lv
,',');

497 
	`GETNAME
(
«me
,
±r
,
fûíame
,
lv
,',');

498 
	`EAT
(
±r
,
fûíame
,
lv
,',');

499 
	`GETPATH
(
∑th
,
∑thsize
,
±r
,
fûíame
,
lv
,',');

500 
	`EAT
(
±r
,
fûíame
,
lv
,',');

501 
	`GETU32
(
uid
,
±r
);

502 
	`EAT
(
±r
,
fûíame
,
lv
,',');

503 
	`GETU32
(
gid
,
±r
);

504 
	`EAT
(
±r
,
fûíame
,
lv
,')');

505 
	`EAT
(
±r
,
fûíame
,
lv
,':');

506 
	`GETU32
(
öode
,
±r
);

507  
	`fs_symlök
(
ts
,
∑ª¡
,
	`°æí
((*)
«me
),«me,
∑th
,
uid
,
gid
,
öode
);

508 
	}
}

510 
	$do_undñ
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

511 
uöt32_t
 
öode
;

512 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

513 
	`GETU32
(
öode
,
±r
);

514 
	`EAT
(
±r
,
fûíame
,
lv
,')');

515  
	`fs_undñ
(
ts
,
öode
);

516 
	}
}

518 
	$do_u∆ök
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

519 
uöt32_t
 
öode
,
∑ª¡
;

520 
uöt8_t
 
«me
[256];

521 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

522 
	`GETU32
(
∑ª¡
,
±r
);

523 
	`EAT
(
±r
,
fûíame
,
lv
,',');

524 
	`GETNAME
(
«me
,
±r
,
fûíame
,
lv
,')');

525 
	`EAT
(
±r
,
fûíame
,
lv
,')');

526 
	`EAT
(
±r
,
fûíame
,
lv
,':');

527 
	`GETU32
(
öode
,
±r
);

528  
	`fs_u∆ök
(
ts
,
∑ª¡
,
	`°æí
((*)
«me
),«me,
öode
);

529 
	}
}

531 
	$do_u∆ock
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

532 
uöt64_t
 
chunkid
;

533 ()
ts
;

534 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

535 
	`GETU64
(
chunkid
,
±r
);

536 
	`EAT
(
±r
,
fûíame
,
lv
,')');

537  
	`fs_u∆ock
(
chunkid
);

538 
	}
}

540 
	$do_åunc
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

541 
uöt32_t
 
öode
,
ödx
;

542 
uöt64_t
 
chunkid
;

543 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

544 
	`GETU32
(
öode
,
±r
);

545 
	`EAT
(
±r
,
fûíame
,
lv
,',');

546 
	`GETU32
(
ödx
,
±r
);

547 
	`EAT
(
±r
,
fûíame
,
lv
,')');

548 
	`EAT
(
±r
,
fûíame
,
lv
,':');

549 
	`GETU64
(
chunkid
,
±r
);

550  
	`fs_åunc
(
ts
,
öode
,
ödx
,
chunkid
);

551 
	}
}

553 
	$do_wrôe
(c⁄° *
fûíame
,
uöt64_t
 
lv
,
uöt32_t
 
ts
,*
±r
) {

554 
uöt32_t
 
öode
,
ödx
,
›Êag
;

555 
uöt64_t
 
chunkid
;

556 
	`EAT
(
±r
,
fûíame
,
lv
,'(');

557 
	`GETU32
(
öode
,
±r
);

558 
	`EAT
(
±r
,
fûíame
,
lv
,',');

559 
	`GETU32
(
ödx
,
±r
);

560 i‡(*
±r
==',') {

561 
	`EAT
(
±r
,
fûíame
,
lv
,',');

562 
	`GETU32
(
›Êag
,
±r
);

564 
›Êag
=1;

566 
	`EAT
(
±r
,
fûíame
,
lv
,')');

567 
	`EAT
(
±r
,
fûíame
,
lv
,':');

568 
	`GETU64
(
chunkid
,
±r
);

569  
	`fs_wrôe
(
ts
,
öode
,
ödx
,
›Êag
,
chunkid
);

570 
	}
}

573 
	$ª°‹e_löe
(c⁄° *
fûíame
,
uöt64_t
 
lv
,*
löe
) {

574 *
±r
;

575 
uöt32_t
 
ts
;

576 
°©us
;

577 * 
îr‹msgs
[]={ 
ERROR_STRINGS
 };

579 
°©us
 = 
ERROR_MISMATCH
;

580 
±r
 = 
löe
;

582 
	`EAT
(
±r
,
fûíame
,
lv
,':');

583 
	`EAT
(
±r
,
fûíame
,
lv
,' ');

584 
	`GETU32
(
ts
,
±r
);

585 
	`EAT
(
±r
,
fûíame
,
lv
,'|');

586 *
±r
) {

588 i‡(
	`°∫cmp
(
±r
,"ACCESS",6)==0) {

589 
°©us
 = 
	`do_ac˚ss
(
fûíame
,
lv
,
ts
,
±r
+6);

590 } i‡(
	`°∫cmp
(
±r
,"ATTR",4)==0) {

591 
°©us
 = 
	`do_©å
(
fûíame
,
lv
,
ts
,
±r
+4);

592 } i‡(
	`°∫cmp
(
±r
,"APPEND",6)==0) {

593 
°©us
 = 
	`do_≠≥nd
(
fûíame
,
lv
,
ts
,
±r
+6);

594 } i‡(
	`°∫cmp
(
±r
,"ACQUIRE",7)==0) {

595 
°©us
 = 
	`do_acquúe
(
fûíame
,
lv
,
ts
,
±r
+7);

596 } i‡(
	`°∫cmp
(
±r
,"AQUIRE",6)==0) {

597 
°©us
 = 
	`do_acquúe
(
fûíame
,
lv
,
ts
,
±r
+6);

599 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

603 i‡(
	`°∫cmp
(
±r
,"CREATE",6)==0) {

604 
°©us
 = 
	`do_¸óã
(
fûíame
,
lv
,
ts
,
±r
+6);

605 } i‡(
	`°∫cmp
(
±r
,"CUSTOMER",8)==0) {

606 
°©us
 = 
	`do_£ssi⁄
(
fûíame
,
lv
,
ts
,
±r
+8);

608 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

612 i‡(
	`°∫cmp
(
±r
,"EMPTYTRASH",10)==0) {

613 
°©us
 = 
	`do_em±yåash
(
fûíame
,
lv
,
ts
,
±r
+10);

614 } i‡(
	`°∫cmp
(
±r
,"EMPTYRESERVED",13)==0) {

615 
°©us
 = 
	`do_em±yª£rved
(
fûíame
,
lv
,
ts
,
±r
+13);

617 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

621 i‡(
	`°∫cmp
(
±r
,"FREEINODES",10)==0) {

622 
°©us
 = 
	`do_‰ìöodes
(
fûíame
,
lv
,
ts
,
±r
+10);

624 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

628 i‡(
	`°∫cmp
(
±r
,"INCVERSION",10)==0) {

629 
°©us
 = 
	`do_öcvîsi⁄
(
fûíame
,
lv
,
ts
,
±r
+10);

631 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

635 i‡(
	`°∫cmp
(
±r
,"LENGTH",6)==0) {

636 
°©us
 = 
	`do_Àngth
(
fûíame
,
lv
,
ts
,
±r
+6);

637 } i‡(
	`°∫cmp
(
±r
,"LINK",4)==0) {

638 
°©us
 = 
	`do_lök
(
fûíame
,
lv
,
ts
,
±r
+4);

640 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

644 i‡(
	`°∫cmp
(
±r
,"MOVE",4)==0) {

645 
°©us
 = 
	`do_move
(
fûíame
,
lv
,
ts
,
±r
+4);

647 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

651 i‡(
	`°∫cmp
(
±r
,"PURGE",5)==0) {

652 
°©us
 = 
	`do_purge
(
fûíame
,
lv
,
ts
,
±r
+5);

654 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

658 i‡(
	`°∫cmp
(
±r
,"QUOTA",5)==0) {

659 
°©us
 = 
	`do_quŸa
(
fûíame
,
lv
,
ts
,
±r
+5);

663 i‡(
	`°∫cmp
(
±r
,"RELEASE",7)==0) {

664 
°©us
 = 
	`do_ªÀa£
(
fûíame
,
lv
,
ts
,
±r
+7);

665 } i‡(
	`°∫cmp
(
±r
,"REPAIR",6)==0) {

666 
°©us
 = 
	`do_ª∑ú
(
fûíame
,
lv
,
ts
,
±r
+6);

668 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

672 i‡(
	`°∫cmp
(
±r
,"SETEATTR",8)==0) {

673 
°©us
 = 
	`do_£ã©å
(
fûíame
,
lv
,
ts
,
±r
+8);

674 } i‡(
	`°∫cmp
(
±r
,"SETGOAL",7)==0) {

675 
°©us
 = 
	`do_£tgﬂl
(
fûíame
,
lv
,
ts
,
±r
+7);

676 } i‡(
	`°∫cmp
(
±r
,"SETPATH",7)==0) {

677 
°©us
 = 
	`do_£ç©h
(
fûíame
,
lv
,
ts
,
±r
+7);

678 } i‡(
	`°∫cmp
(
±r
,"SETTRASHTIME",12)==0) {

679 
°©us
 = 
	`do_£âøshtime
(
fûíame
,
lv
,
ts
,
±r
+12);

680 } i‡(
	`°∫cmp
(
±r
,"SNAPSHOT",8)==0) {

681 
°©us
 = 
	`do_¢≠shŸ
(
fûíame
,
lv
,
ts
,
±r
+8);

682 } i‡(
	`°∫cmp
(
±r
,"SYMLINK",7)==0) {

683 
°©us
 = 
	`do_symlök
(
fûíame
,
lv
,
ts
,
±r
+7);

684 } i‡(
	`°∫cmp
(
±r
,"SESSION",7)==0) {

685 
°©us
 = 
	`do_£ssi⁄
(
fûíame
,
lv
,
ts
,
±r
+7);

687 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

691 i‡(
	`°∫cmp
(
±r
,"TRUNC",5)==0) {

692 
°©us
 = 
	`do_åunc
(
fûíame
,
lv
,
ts
,
±r
+5);

694 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

698 i‡(
	`°∫cmp
(
±r
,"UNLINK",6)==0) {

699 
°©us
 = 
	`do_u∆ök
(
fûíame
,
lv
,
ts
,
±r
+6);

700 } i‡(
	`°∫cmp
(
±r
,"UNDEL",5)==0) {

701 
°©us
 = 
	`do_undñ
(
fûíame
,
lv
,
ts
,
±r
+5);

702 } i‡(
	`°∫cmp
(
±r
,"UNLOCK",6)==0) {

703 
°©us
 = 
	`do_u∆ock
(
fûíame
,
lv
,
ts
,
±r
+6);

705 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

709 i‡(
	`°∫cmp
(
±r
,"WRITE",5)==0) {

710 
°©us
 = 
	`do_wrôe
(
fûíame
,
lv
,
ts
,
±r
+5);

712 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

716 
	`¥ötf
("%s:%"
PRIu64
": unknow¿íåy '%s'\n",
fûíame
,
lv
,
±r
);

718 i‡(
°©us
>
STATUS_OK
) {

719 
	`¥ötf
("%s:%"
PRIu64
":Éº‹: %"
PRIu8
" (%s)\n",
fûíame
,
lv
,
°©us
,
îr‹msgs
[status]);

721  
°©us
;

722 
	}
}

724 
uöt64_t
 
	gv
=0,
	gœ°v
=0;

725 c⁄° *
	gœ°‚
;

726 
uöt8_t
 
	gvÀvñ
;

728 
	$ª°‹e
(c⁄° *
fûíame
,
uöt64_t
 
lv
,*
±r
) {

729 
°©us
;

730 i‡(
œ°v
==0 || 
v
==0) {

731 
v
 = 
	`fs_gëvîsi⁄
();

732 
œ°v
 = 
lv
-1;

733 
œ°‚
 = "(no file)";

735 i‡(
vÀvñ
>1) {

736 
	`¥ötf
("fûíame: %†; cuºíàmë®vîsi⁄: %"
PRIu64
" ;Öªviou†ch™geid: %"PRIu64" ; cuºíàch™geid: %"PRIu64" ; ch™gêd©a%s",
fûíame
,
v
,
œ°v
,
lv
,
±r
);

738 i‡(
lv
<
œ°v
) {

739 
	`¥ötf
("mîgêîr‹ -Öossibly c‹ru±ed i≈uàfûê- ign‹êíåy (fûíame: %s)\n",
fûíame
);

741 } i‡(
lv
>=
v
) {

742 i‡(
lv
==
œ°v
) {

743 i‡(
vÀvñ
>1) {

744 
	`¥ötf
("du∂iˇãdÉ¡ry: %"
PRIu64
" (¥eviou†fûe: %s, cuºíàfûe: %s)\n",
lv
,
œ°‚
,
fûíame
);

746 } i‡(
lv
>
œ°v
+1) {

747 
	`¥ötf
("hﬁêö ch™gêfûe†”¡rõ†‰om %s:%"
PRIu64
"Åÿ%s:%"PRIu64"áª missögË-ádd m‹êfûes\n",
œ°‚
,
œ°v
+1,
fûíame
,
lv
-1);

750 i‡(
vÀvñ
>0) {

751 
	`¥ötf
("%s: ch™ge%s",
fûíame
,
±r
);

753 
°©us
 = 
	`ª°‹e_löe
(
fûíame
,
lv
,
±r
);

754 i‡(
°©us
<0) {

757 i‡(
°©us
>0) {

760 
v
 = 
	`fs_gëvîsi⁄
();

761 i‡(
lv
+1!=
v
) {

762 
	`¥ötf
("%s:%"
PRIu64
": vîsi⁄ mism©ch\n",
fûíame
,
lv
);

767 
œ°v
 = 
lv
;

768 
œ°‚
 = 
fûíame
;

770 
	}
}

772 
	$ª°‹e_£tvîbÀvñ
(
uöt8_t
 
_vÀvñ
) {

773 
vÀvñ
 = 
_vÀvñ
;

774 
	}
}

	@mfsmetarestore/restore.h

19 #i‚de‡
_RESTORE_H_


20 
	#_RESTORE_H_


	)

22 
	~<öây≥s.h
>

24 
ª°‹e
(c⁄° *
fûíame
,
uöt64_t
 
lv
,*
±r
);

25 
ª°‹e_£tvîbÀvñ
(
uöt8_t
 
_vÀvñ
);

	@mfsmount/chunkloccache.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<öây≥s.h
>

24 
	~<±hªad.h
>

26 
	~"°©s.h
"

27 
	~"MFSCommuniˇti⁄.h
"

29 
	#HASH_FUNCTIONS
 4

	)

30 
	#HASH_BUCKET_SIZE
 16

	)

31 
	#HASH_BUCKETS
 6257

	)

44 
	s_hashbuckë
 {

46 
uöt32_t
 
	möode
[
HASH_BUCKET_SIZE
];

47 
uöt32_t
 
	mpos
[
HASH_BUCKET_SIZE
];

49 
uöt32_t
 
	mtime
[
HASH_BUCKET_SIZE
];

51 
uöt64_t
 
	mchunkid
[
HASH_BUCKET_SIZE
];

52 
uöt32_t
 
	mchunkvîsi⁄
[
HASH_BUCKET_SIZE
];

53 
uöt8_t
 
	mcsd©asize
[
HASH_BUCKET_SIZE
];

54 
uöt8_t
 *
	mcsd©a
[
HASH_BUCKET_SIZE
];

55 } 
	thashbuckë
;

57 
hashbuckë
 *
	gchunklochash
 = 
NULL
;

58 
±hªad_muãx_t
 
	g˛ˇchñock
 = 
PTHREAD_MUTEX_INITIALIZER
;

61 
	mHITS_CORRECT
 = 0,

62 
	mHITS_WRONG
,

63 
	mMISSES
,

64 
	mSTATNODES


67 
uöt64_t
 *
	g°©•å
[
STATNODES
];

69 
ölöe
 
	$chunkloc_ˇche_°©•å_öô
() {

70 *
s
;

71 
s
 = 
	`°©s_gë_subnode
(
NULL
,"chunkloc_cache_test",0);

72 
°©•å
[
HITS_CORRECT
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"hits_correct",0));

73 
°©•å
[
HITS_WRONG
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"hits_wrong",0));

74 
°©•å
[
MISSES
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"misses",0));

75 
	}
}

77 
ölöe
 
	$chunkloc_ˇche_°©s_öc
(
uöt8_t
 
id
) {

78 i‡(
id
<
STATNODES
) {

79 
	`°©s_lock
();

80 (*
°©•å
[
id
])++;

81 
	`°©s_u∆ock
();

83 
	}
}

88 
ölöe
 
	$chunkloc_com∑ª
(c⁄° 
uöt8_t
 *
l1
,c⁄° uöt8_à*
l2
,uöt8_à
s
) {

89 
uöt8_t
 
mul1
,
sum1
,
x‹1
;

90 
uöt8_t
 
mul2
,
sum2
,
x‹2
;

91 
mul1
=
mul2
=1;

92 
sum1
=
sum2
=
x‹1
=
x‹2
=0;

93 
s
>0) {

94 
s
--;

95 
mul1
*=
l1
[
s
];

96 
mul2
*=
l2
[
s
];

97 
sum1
+=
l1
[
s
];

98 
sum2
+=
l2
[
s
];

99 
x‹1
^=
l1
[
s
];

100 
x‹2
^=
l2
[
s
];

102  (
mul1
==
mul2
&&
sum1
==
sum2
&&
x‹1
==
x‹2
)?1:0;

103 
	}
}

105 
	$chunkloc_ˇche_ö£π
(
uöt32_t
 
öode
,uöt32_à
pos
,
uöt64_t
 
chunkid
,uöt32_à
chunkvîsi⁄
,
uöt8_t
 
csd©asize
,c⁄° uöt8_à*
csd©a
) {

106 
uöt32_t
 
¥imes
[
HASH_FUNCTIONS
] = {1072573589U,3465827623U,2848548977U,748191707U};

107 
hashbuckë
 *
hb
,*
fhb
;

108 
uöt8_t
 
h
,
i
,
fi
;

109 
uöt32_t
 
now
;

110 
uöt32_t
 
möts
;

112 
now
 = 
	`time
(
NULL
);

113 
möts
 = 
UINT32_MAX
;

114 
fi
 = 0;

115 
fhb
 = 
NULL
;

117 
	`±hªad_muãx_lock
(&
˛ˇchñock
);

118 
h
=0 ; h<
HASH_FUNCTIONS
 ; h++) {

119 
hb
 = 
chunklochash
 + ((
öode
*
¥imes
[
h
]+
pos
*¥imes[
HASH_FUNCTIONS
-1-h])%
HASH_BUCKETS
);

120 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

121 i‡(
hb
->
öode
[
i
]==öodê&& hb->
pos
[i]==pos) {

122 i‡(
hb
->
chunkid
[
i
]!=chunkid || hb->
chunkvîsi⁄
[i]!=chunkvîsi⁄ || hb->
csd©asize
[i]!=csd©asizê|| 
	`chunkloc_com∑ª
(hb->
csd©a
[i],csdata,csdatasize)==0) {

123 
	`chunkloc_ˇche_°©s_öc
(
HITS_WRONG
);

125 
	`chunkloc_ˇche_°©s_öc
(
HITS_CORRECT
);

127 i‡(
hb
->
csd©a
[
i
]) {

128 
	`‰ì
(
hb
->
csd©a
[
i
]);

130 
hb
->
chunkid
[
i
] = chunkid;

131 
hb
->
chunkvîsi⁄
[
i
] = chunkversion;

132 
hb
->
csd©asize
[
i
] = csdatasize;

133 i‡(
csd©asize
>0) {

134 
hb
->
csd©a
[
i
] = (
uöt8_t
*)
	`mÆloc
(
csd©asize
);

135 
	`mem˝y
(
hb
->
csd©a
[
i
],csd©a,
csd©asize
);

137 
hb
->
csd©a
[
i
] = 
NULL
;

139 
hb
->
time
[
i
]=
now
;

140 
	`±hªad_muãx_u∆ock
(&
˛ˇchñock
);

143 i‡(
hb
->
time
[
i
]<
möts
) {

144 
fhb
 = 
hb
;

145 
fi
 = 
i
;

146 
möts
 = 
hb
->
time
[
i
];

150 
	`chunkloc_ˇche_°©s_öc
(
MISSES
);

151 i‡(
fhb
) {

152 
fhb
->
öode
[
fi
] = inode;

153 
fhb
->
pos
[
fi
] =Öos;

154 i‡(
fhb
->
csd©a
[
fi
]) {

155 
	`‰ì
(
fhb
->
csd©a
[
fi
]);

157 
fhb
->
chunkid
[
fi
] = chunkid;

158 
fhb
->
chunkvîsi⁄
[
fi
] = chunkversion;

159 
fhb
->
csd©asize
[
fi
] = csdatasize;

160 i‡(
csd©asize
>0) {

161 
fhb
->
csd©a
[
fi
] = (
uöt8_t
*)
	`mÆloc
(
csd©asize
);

162 
	`mem˝y
(
fhb
->
csd©a
[
fi
],csd©a,
csd©asize
);

164 
fhb
->
csd©a
[
fi
] = 
NULL
;

166 
fhb
->
time
[
fi
]=
now
;

168 
	`±hªad_muãx_u∆ock
(&
˛ˇchñock
);

169 
	}
}

171 
	$chunkloc_ˇche_£¨ch
(
uöt32_t
 
öode
,uöt32_à
pos
,
uöt64_t
 *
chunkid
,uöt32_à*
chunkvîsi⁄
,
uöt8_t
 *
csd©asize
,c⁄° uöt8_à**
csd©a
) {

172 
uöt32_t
 
¥imes
[
HASH_FUNCTIONS
] = {1072573589U,3465827623U,2848548977U,748191707U};

173 
hashbuckë
 *
hb
;

174 
uöt8_t
 
h
,
i
;

175 
uöt32_t
 
now
;

177 
now
 = 
	`time
(
NULL
);

179 
	`±hªad_muãx_lock
(&
˛ˇchñock
);

180 
h
=0 ; h<
HASH_FUNCTIONS
 ; h++) {

181 
hb
 = 
chunklochash
 + ((
öode
*
¥imes
[
h
]+
pos
*¥imes[
HASH_FUNCTIONS
-1-h])%
HASH_BUCKETS
);

182 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

183 i‡(
hb
->
öode
[
i
]==öodê&& hb->
pos
[i]==pos) {

184 *
chunkid
 = 
hb
->chunkid[
i
];

185 *
chunkvîsi⁄
 = 
hb
->chunkvîsi⁄[
i
];

186 *
csd©asize
 = 
hb
->csd©asize[
i
];

187 *
csd©a
 = 
hb
->csd©a[
i
];

188 
	`±hªad_muãx_u∆ock
(&
˛ˇchñock
);

193 
	`±hªad_muãx_u∆ock
(&
˛ˇchñock
);

195 
	}
}

197 
	$chunkloc_ˇche_öô
() {

198 
chunklochash
 = 
	`mÆloc
((
hashbuckë
)*
HASH_BUCKETS
);

199 
	`mem£t
(
chunklochash
,0,(
hashbuckë
)*
HASH_BUCKETS
);

200 
	`chunkloc_ˇche_°©•å_öô
();

201 
	}
}

203 
	$chunkloc_ˇche_ãrm
() {

204 
hashbuckë
 *
hb
;

205 
uöt8_t
 
i
;

206 
uöt32_t
 
hi
;

208 
	`±hªad_muãx_lock
(&
˛ˇchñock
);

209 
hi
=0 ; hi<
HASH_BUCKETS
 ; hi++) {

210 
hb
 = 
chunklochash
 + 
hi
;

211 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

212 i‡(
hb
->
csd©a
[
i
]) {

213 
	`‰ì
(
hb
->
csd©a
[
i
]);

217 
	`‰ì
(
chunklochash
);

218 
	`±hªad_muãx_u∆ock
(&
˛ˇchñock
);

219 
	}
}

	@mfsmount/chunkloccache.h

19 #i‚de‡
_CHUNKLOC_CACHE_H_


20 
	#_CHUNKLOC_CACHE_H_


	)

22 
	~<öây≥s.h
>

24 
chunkloc_ˇche_ö£π
(
uöt32_t
 
öode
,uöt32_à
pos
,
uöt64_t
 
chunkid
,uöt32_à
chunkvîsi⁄
,
uöt8_t
 
csd©asize
,c⁄° uöt8_à*
csd©a
);

25 
chunkloc_ˇche_£¨ch
(
uöt32_t
 
öode
,uöt32_à
pos
,
uöt64_t
 *
chunkid
,uöt32_à*
chunkvîsi⁄
,
uöt8_t
 *
csd©asize
,c⁄° uöt8_à**
csd©a
);

26 
chunkloc_ˇche_öô
();

27 
chunkloc_ˇche_ãrm
();

	@mfsmount/cscomm.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<time.h
>

26 
	~<î∫o.h
>

27 
	~<sy¶og.h
>

29 
	~"MFSCommuniˇti⁄.h
"

30 
	~"sockës.h
"

31 
	~"d©≠ack.h
"

32 
	~"°ªº.h
"

33 
	~"¸c.h
"

35 
	#CSMSECTIMEOUT
 5000

	)

37 
	$cs_ªadblock
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
off£t
,uöt32_à
size
,
uöt8_t
 *
buff
) {

38 
uöt8_t
 *
w±r
,
ibuff
[28];

39 c⁄° 
uöt8_t
 *
Ωå
;

41 
w±r
 = 
ibuff
;

42 
	`put32bô
(&
w±r
,
CLTOCS_READ
);

43 
	`put32bô
(&
w±r
,20);

44 
	`put64bô
(&
w±r
,
chunkid
);

45 
	`put32bô
(&
w±r
,
vîsi⁄
);

46 
	`put32bô
(&
w±r
,
off£t
);

47 
	`put32bô
(&
w±r
,
size
);

48 i‡(
	`t˝towrôe
(
fd
,
ibuff
,28,
CSMSECTIMEOUT
)!=28) {

49 
	`sy¶og
(
LOG_NOTICE
,"ªadblock;Å˝wrôêîr‹: %s",
	`°ªº
(
î∫o
));

53 
uöt32_t
 
cmd
,
l
;

54 
uöt64_t
 
t64
;

55 
uöt16_t
 
blockno
,
blockoff£t
;

56 
uöt32_t
 
bªq
,
blocksize
,
block¸c
;

57 i‡(
	`t˝t‹ód
(
fd
,
ibuff
,8,
CSMSECTIMEOUT
)!=8) {

58 
	`sy¶og
(
LOG_NOTICE
,"ªadblock;Å˝ªadÉº‹: %s",
	`°ªº
(
î∫o
));

61 
Ωå
 = 
ibuff
;

62 
cmd
 = 
	`gë32bô
(&
Ωå
);

63 
l
 = 
	`gë32bô
(&
Ωå
);

64 i‡(
cmd
==
CSTOCL_READ_STATUS
) {

65 i‡(
l
!=9) {

66 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_STATUS inc‹ª˘ mesßgêsizê(%"
PRIu32
"/9)",
l
);

69 i‡(
	`t˝t‹ód
(
fd
,
ibuff
,9,
CSMSECTIMEOUT
)!=9) {

70 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_STATUSÅ˝ªadÉº‹: %s",
	`°ªº
(
î∫o
));

73 
Ωå
 = 
ibuff
;

74 
t64
 = 
	`gë64bô
(&
Ωå
);

75 i‡(*
Ωå
!=0) {

76 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_STATUS sètus: %"
PRIu8
,*
Ωå
);

79 i‡(
t64
!=
chunkid
) {

80 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_STATUS inc‹ª˘ chunkid (gŸ:%"
PRIu64
"Éx≥˘ed:%"PRIu64")",
t64
,
chunkid
);

83 i‡(
size
!=0) {

84 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_STATUS inc‹ª˘ d©®sizê÷e·: %"
PRIu32
")",
size
);

88 } i‡(
cmd
==
CSTOCL_READ_DATA
) {

89 i‡(
l
<20) {

90 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ mesßgêsizê(%"
PRIu32
"/>=20)",
l
);

93 i‡(
	`t˝t‹ód
(
fd
,
ibuff
,20,
CSMSECTIMEOUT
)!=20) {

94 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATAÅ˝ªadÉº‹: %s",
	`°ªº
(
î∫o
));

97 
Ωå
 = 
ibuff
;

98 
t64
 = 
	`gë64bô
(&
Ωå
);

99 i‡(
t64
!=
chunkid
) {

100 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ chunkid (gŸ:%"
PRIu64
"Éx≥˘ed:%"PRIu64")",
t64
,
chunkid
);

103 
blockno
 = 
	`gë16bô
(&
Ωå
);

104 
blockoff£t
 = 
	`gë16bô
(&
Ωå
);

105 
blocksize
 = 
	`gë32bô
(&
Ωå
);

106 
block¸c
 = 
	`gë32bô
(&
Ωå
);

107 i‡(
l
!=20+
blocksize
) {

108 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ mesßgêsizê(%"
PRIu32
"/%"PRIu32")",
l
,20+
blocksize
);

111 i‡(
blocksize
==0) {

112 
	`sy¶og
(
LOG_NOTICE
,"readblock; READ_DATAÉmpty block");

115 i‡(
blockno
!=(
off£t
>>
MFSBLOCKBITS
)) {

116 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ blockÇumbî (gŸ:%"
PRIu16
"Éx≥˘ed:%"
PRIu32
")",
blockno
,(
off£t
>>
MFSBLOCKBITS
));

119 i‡(
blockoff£t
!=(
off£t
&
MFSBLOCKMASK
)) {

120 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ block off£à(gŸ:%"
PRIu16
"Éx≥˘ed:%"
PRIu32
")",
blockoff£t
,(
off£t
&
MFSBLOCKMASK
));

123 
bªq
 = 
MFSBLOCKSIZE
 - (
uöt32_t
)
blockoff£t
;

124 i‡(
size
<
bªq
) {

125 
bªq
=
size
;

127 i‡(
blocksize
!=
bªq
) {

128 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATA inc‹ª˘ block sizê(gŸ:%"
PRIu32
"Éx≥˘ed:%"PRIu32")",
blocksize
,
bªq
);

131 i‡(
	`t˝t‹ód
(
fd
,
buff
,
blocksize
,
CSMSECTIMEOUT
)!=(
öt32_t
)blocksize) {

132 
	`sy¶og
(
LOG_NOTICE
,"ªadblock; READ_DATAÅ˝ªadÉº‹: %s",
	`°ªº
(
î∫o
));

135 i‡(
block¸c
!=
	`my¸c32
(0,
buff
,
blocksize
)) {

136 
	`sy¶og
(
LOG_NOTICE
,"readblock; READ_DATA crc checksumÉrror");

139 
off£t
+=
blocksize
;

140 
size
-=
blocksize
;

141 
buff
+=
blocksize
;

143 
	`sy¶og
(
LOG_NOTICE
,"readblock; unknown message");

148 
	}
}

150 
	$cs_wrôe°©us
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
wrôeid
) {

151 
uöt8_t
 
ibuff
[21];

152 c⁄° 
uöt8_t
 *
±r
;

153 
uöt32_t
 
t32
;

154 
uöt64_t
 
t64
;

155 i‡(
	`t˝t‹ód
(
fd
,
ibuff
,21,
CSMSECTIMEOUT
)!=21) {

156 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUSÅ˝ªadÉº‹: %s",
	`°ªº
(
î∫o
));

159 
±r
 = 
ibuff
;

160 
t32
 = 
	`gë32bô
(&
±r
);

161 i‡(
t32
!=
CSTOCL_WRITE_STATUS
) {

162 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUS unknow¿mesßgê(%"
PRIu32
")",
t32
);

165 
t32
 = 
	`gë32bô
(&
±r
);

166 i‡(
t32
!=13) {

167 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUS inc‹ª˘ mesßgêsizê(%"
PRIu32
"/13)",
t32
);

170 
t64
 = 
	`gë64bô
(&
±r
);

171 
t32
 = 
	`gë32bô
(&
±r
);

172 i‡(*
±r
!=0) {

173 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUS sètus: %"
PRIu8
,*
±r
);

176 i‡(
t64
!=
chunkid
) {

177 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUS inc‹ª˘ chunkid (gŸ:%"
PRIu64
"Éx≥˘ed:%"PRIu64")",
t64
,
chunkid
);

180 i‡(
t32
!=
wrôeid
) {

181 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_STATUS inc‹ª˘ wrôeid (gŸ:%"
PRIu32
"Éx≥˘ed:%"PRIu32")",
t32
,
wrôeid
);

185 
	}
}

187 
	$cs_wrôeöô
(
fd
,c⁄° 
uöt8_t
 *
chaö
,
uöt32_t
 
chaösize
,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
) {

188 
uöt8_t
 *
±r
,*
ibuff
;

189 
uöt32_t
 
psize
;

190 
psize
 = 12+
chaösize
;

191 
ibuff
 = 
	`mÆloc
(8+
psize
);

192 i‡(
ibuff
==
NULL
) {

193 
	`sy¶og
(
LOG_NOTICE
,"writestatus; WRITE_INIT out of memory");

196 
±r
 = 
ibuff
;

197 
	`put32bô
(&
±r
,
CLTOCS_WRITE
);

198 
	`put32bô
(&
±r
,
psize
);

199 
	`put64bô
(&
±r
,
chunkid
);

200 
	`put32bô
(&
±r
,
vîsi⁄
);

201 
	`mem˝y
(
±r
,
chaö
,
chaösize
);

202 
psize
+=8;

203 i‡(
	`t˝towrôe
(
fd
,
ibuff
,
psize
,
CSMSECTIMEOUT
)!=(
öt32_t
)psize) {

204 
	`‰ì
(
ibuff
);

205 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_INITÅ˝wrôêîr‹: %s",
	`°ªº
(
î∫o
));

208 
	`‰ì
(
ibuff
);

209  
	`cs_wrôe°©us
(
fd
,
chunkid
,0);

210 
	}
}

212 
	$cs_wrôeblock
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
wrôeid
,
uöt16_t
 
blockno
,uöt16_à
off£t
,uöt32_à
size
,
uöt8_t
 *
buff
) {

213 
uöt8_t
 *
±r
,
ibuff
[32];

214 
uöt32_t
 
¸c
,
psize
;

215 
±r
 = 
ibuff
;

216 
	`put32bô
(&
±r
,
CLTOCS_WRITE_DATA
);

217 
psize
 = 24+
size
;

218 
	`put32bô
(&
±r
,
psize
);

219 
	`put64bô
(&
±r
,
chunkid
);

220 
	`put32bô
(&
±r
,
wrôeid
);

221 
	`put16bô
(&
±r
,
blockno
);

222 
	`put16bô
(&
±r
,
off£t
);

223 
	`put32bô
(&
±r
,
size
);

224 
¸c
 = 
	`my¸c32
(0,
buff
,
size
);

225 
	`put32bô
(&
±r
,
¸c
);

226 i‡(
	`t˝towrôe
(
fd
,
ibuff
,32,
CSMSECTIMEOUT
)!=32) {

227 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_DATAÅ˝wrôêîr‹: %s",
	`°ªº
(
î∫o
));

230 i‡(
	`t˝towrôe
(
fd
,
buff
,
size
,
CSMSECTIMEOUT
)!=(
öt32_t
)size) {

231 
	`sy¶og
(
LOG_NOTICE
,"wrôe°©us; WRITE_DATAÅ˝wrôêîr‹: %s",
	`°ªº
(
î∫o
));

235 
	}
}

	@mfsmount/cscomm.h

19 #i‚de‡
_CSCOMM_H_


20 
	#_CSCOMM_H_


	)

22 
cs_ªadblock
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
vîsi⁄
,uöt32_à
off£t
,uöt32_à
size
,
uöt8_t
 *
buff
);

24 
cs_wrôe°©us
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
wrôeid
);

25 
cs_wrôeöô
(
fd
,c⁄° 
uöt8_t
 *
chaö
,
uöt32_t
 
chaösize
,
uöt64_t
 
chunkid
,uöt32_à
vîsi⁄
);

26 
cs_wrôeblock
(
fd
,
uöt64_t
 
chunkid
,
uöt32_t
 
wrôeid
,
uöt16_t
 
blockno
,uöt16_à
off£t
,uöt32_à
size
,
uöt8_t
 *
buff
);

	@mfsmount/csdb.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<±hªad.h
>

23 
	~<öây≥s.h
>

25 
	#CSDB_HASHSIZE
 256

	)

26 
	#CSDB_HASH
(
ù
,
p‹t
Ë(((ù)*0x7b348943+’‹t))%(
CSDB_HASHSIZE
))

	)

28 
	s_csdbíåy
 {

29 
uöt32_t
 
	mù
;

30 
uöt16_t
 
	mp‹t
;

31 
uöt32_t
 
	mªad›˙t
;

32 
uöt32_t
 
	mwrôe›˙t
;

33 
_csdbíåy
 *
	m√xt
;

34 } 
	tcsdbíåy
;

36 
csdbíåy
 *
	gcsdbhèb
[
CSDB_HASHSIZE
];

37 
±hªad_muãx_t
 *
	gcsdblock
;

39 
	$csdb_öô
() {

40 
uöt32_t
 
i
;

41 
i
=0 ; i<
CSDB_HASHSIZE
 ; i++) {

42 
csdbhèb
[
i
]=
NULL
;

44 
csdblock
 = 
	`mÆloc
((
±hªad_muãx_t
));

45 
	`±hªad_muãx_öô
(
csdblock
,
NULL
);

46 
	}
}

48 
	$csdb_ãrm
() {

49 
uöt32_t
 
i
;

50 
csdbíåy
 *
cs
,*
c¢
;

52 
	`±hªad_muãx_de°roy
(
csdblock
);

53 
	`‰ì
(
csdblock
);

54 
i
=0 ; i<
CSDB_HASHSIZE
 ; i++) {

55 
cs
 = 
csdbhèb
[
i
] ; c†; c†
c¢
) {

56 
c¢
 = 
cs
->
√xt
;

57 
	`‰ì
(
cs
);

60 
	}
}

62 
uöt32_t
 
	$csdb_gëªad˙t
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

63 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

64 
uöt32_t
 
ªsu…
 = 0;

65 
csdbíåy
 *
e
;

66 
	`±hªad_muãx_lock
(
csdblock
);

67 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

68 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

69 
ªsu…
 = 
e
->
ªad›˙t
;

73 
	`±hªad_muãx_u∆ock
(
csdblock
);

74  
ªsu…
;

75 
	}
}

77 
uöt32_t
 
	$csdb_gëwrôe˙t
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

78 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

79 
uöt32_t
 
ªsu…
 = 0;

80 
csdbíåy
 *
e
;

81 
	`±hªad_muãx_lock
(
csdblock
);

82 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

83 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

84 
ªsu…
 = 
e
->
wrôe›˙t
;

88 
	`±hªad_muãx_u∆ock
(
csdblock
);

89  
ªsu…
;

90 
	}
}

92 
uöt32_t
 
	$csdb_gë›˙t
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

93 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

94 
uöt32_t
 
ªsu…
 = 0;

95 
csdbíåy
 *
e
;

96 
	`±hªad_muãx_lock
(
csdblock
);

97 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

98 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

99 
ªsu…
 = 
e
->
ªad›˙t
 +É->
wrôe›˙t
;

103 
	`±hªad_muãx_u∆ock
(
csdblock
);

104  
ªsu…
;

105 
	}
}

107 
	$csdb_ªadöc
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

108 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

109 
csdbíåy
 *
e
;

110 
	`±hªad_muãx_lock
(
csdblock
);

111 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

112 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

113 
e
->
ªad›˙t
++;

114 
	`±hªad_muãx_u∆ock
(
csdblock
);

118 
e
 = 
	`mÆloc
((
csdbíåy
));

119 
e
->
ù
 = ip;

120 
e
->
p‹t
 =Öort;

121 
e
->
ªad›˙t
 = 1;

122 
e
->
wrôe›˙t
 = 0;

123 
e
->
√xt
 = 
csdbhèb
[
hash
];

124 
csdbhèb
[
hash
] = 
e
;

125 
	`±hªad_muãx_u∆ock
(
csdblock
);

126 
	}
}

128 
	$csdb_ªaddec
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

129 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

130 
csdbíåy
 *
e
;

131 
	`±hªad_muãx_lock
(
csdblock
);

132 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

133 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

134 
e
->
ªad›˙t
--;

135 
	`±hªad_muãx_u∆ock
(
csdblock
);

139 
	`±hªad_muãx_u∆ock
(
csdblock
);

140 
	}
}

142 
	$csdb_wrôeöc
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

143 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

144 
csdbíåy
 *
e
;

145 
	`±hªad_muãx_lock
(
csdblock
);

146 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

147 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

148 
e
->
wrôe›˙t
++;

149 
	`±hªad_muãx_u∆ock
(
csdblock
);

153 
e
 = 
	`mÆloc
((
csdbíåy
));

154 
e
->
ù
 = ip;

155 
e
->
p‹t
 =Öort;

156 
e
->
ªad›˙t
 = 0;

157 
e
->
wrôe›˙t
 = 1;

158 
e
->
√xt
 = 
csdbhèb
[
hash
];

159 
csdbhèb
[
hash
] = 
e
;

160 
	`±hªad_muãx_u∆ock
(
csdblock
);

161 
	}
}

163 
	$csdb_wrôedec
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
) {

164 
uöt32_t
 
hash
 = 
	`CSDB_HASH
(
ù
,
p‹t
);

165 
csdbíåy
 *
e
;

166 
	`±hªad_muãx_lock
(
csdblock
);

167 
e
=
csdbhèb
[
hash
] ;É ;ÉÛ->
√xt
) {

168 i‡(
e
->
ù
 =ù &&É->
p‹t
 ==Öort) {

169 
e
->
wrôe›˙t
--;

170 
	`±hªad_muãx_u∆ock
(
csdblock
);

174 
	`±hªad_muãx_u∆ock
(
csdblock
);

175 
	}
}

	@mfsmount/csdb.h

19 #i‚de‡
_CSDB_H_


20 
	#_CSDB_H_


	)

22 
	~<öây≥s.h
>

24 
csdb_öô
();

25 
csdb_ãrm
();

26 
uöt32_t
 
csdb_gëªad˙t
(uöt32_à
ù
,
uöt16_t
 
p‹t
);

27 
uöt32_t
 
csdb_gëwrôe˙t
(uöt32_à
ù
,
uöt16_t
 
p‹t
);

28 
uöt32_t
 
csdb_gë›˙t
(uöt32_à
ù
,
uöt16_t
 
p‹t
);

29 
csdb_ªadöc
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

30 
csdb_ªaddec
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

31 
csdb_wrôeöc
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

32 
csdb_wrôedec
(
uöt32_t
 
ù
,
uöt16_t
 
p‹t
);

	@mfsmount/dirattrcache.c

19 
	~"c⁄fig.h
"

21 
	~<fu£_lowÀvñ.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<±hªad.h
>

26 
	~"d©≠ack.h
"

28 
	s_dúˇche
 {

29 
fu£_˘x
 
	m˘x
;

30 
uöt32_t
 
	m∑ª¡
;

31 c⁄° 
uöt8_t
 *
	mdbuff
;

32 
uöt32_t
 
	mdsize
;

33 
uöt32_t
 
	mhashsize
;

34 c⁄° 
uöt8_t
 **
	m«mehashèb
;

35 c⁄° 
uöt8_t
 **
	möodehashèb
;

36 
_dúˇche
 *
	m√xt
,**
	m¥ev
;

37 } 
	tdúˇche
;

39 
dúˇche
 *
	ghód
;

40 
±hªad_muãx_t
 
	gglock
 = 
PTHREAD_MUTEX_INITIALIZER
;

42 
ölöe
 
uöt32_t
 
	$dˇche_hash
(c⁄° 
uöt8_t
 *
«me
,uöt8_à
∆íg
) {

43 
uöt32_t
 
hash
=5381;

44 
∆íg
>0) {

45 
hash
 = ((hash<<5)+hash)^(*
«me
);

46 
«me
++;

47 
∆íg
--;

49  
hash
;

50 
	}
}

52 
uöt32_t
 
	$dˇche_ñemcou¡
(c⁄° 
uöt8_t
 *
dbuff
,
uöt32_t
 
dsize
) {

53 c⁄° 
uöt8_t
 *
±r
,*
ïå
;

54 
uöt8_t
 
íÀng
;

55 
uöt32_t
 
ªt
;

56 
±r
 = 
dbuff
;

57 
ïå
 = 
dbuff
+
dsize
;

58 
ªt
=0;

59 
±r
<
ïå
) {

60 
íÀng
 = *
±r
;

61 i‡(
±r
+
íÀng
+40<=
ïå
) {

62 
ªt
++;

64 
±r
+=
íÀng
+40;

66  
ªt
;

67 
	}
}

69 
ölöe
 
	$dˇche_ˇlchashsize
(
dúˇche
 *
d
) {

70 
uöt32_t
 
˙t
 = 
	`dˇche_ñemcou¡
(
d
->
dbuff
,d->
dsize
);

71 
d
->
hashsize
 = 1;

72 
˙t
 = (cnt*3)/2;

73 
˙t
) {

74 
d
->
hashsize
<<=1;

75 
˙t
>>=1;

77 
	}
}

79 
	$dˇche_makíamehash
(
dúˇche
 *
d
) {

80 c⁄° 
uöt8_t
 *
±r
,*
ïå
;

81 
uöt8_t
 
íÀng
;

82 
uöt32_t
 
hash
,
di•
;

83 
uöt32_t
 
hashmask
;

85 i‡(
d
->
hashsize
==0) {

86 
	`dˇche_ˇlchashsize
(
d
);

88 
hashmask
 = 
d
->
hashsize
-1;

89 
d
->
«mehashèb
 = 
	`mÆloc
((
uöt8_t
*)*d->
hashsize
);

90 
	`mem£t
(
d
->
«mehashèb
,0,(
uöt8_t
*)*d->
hashsize
);

92 
±r
 = 
d
->
dbuff
;

93 
ïå
 = 
d
->
dbuff
+d->
dsize
;

94 
±r
<
ïå
) {

95 
íÀng
 = *
±r
;

96 i‡(
±r
+
íÀng
+40<=
ïå
) {

97 
hash
 = 
	`dˇche_hash
(
±r
+1,
íÀng
);

98 
di•
 = ((
hash
*0x53B23891)&
hashmask
)|1;

99 
d
->
«mehashèb
[
hash
&
hashmask
]) {

100 
hash
+=
di•
;

102 
d
->
«mehashèb
[
hash
&
hashmask
]=
±r
;

104 
±r
+=
íÀng
+40;

106 
	}
}

108 
	$dˇche_makeöodehash
(
dúˇche
 *
d
) {

109 c⁄° 
uöt8_t
 *
ùå
,*
±r
,*
ïå
;

110 
uöt8_t
 
íÀng
;

111 
uöt32_t
 
hash
,
di•
;

112 
uöt32_t
 
hashmask
;

114 i‡(
d
->
hashsize
==0) {

115 
	`dˇche_ˇlchashsize
(
d
);

117 
hashmask
 = 
d
->
hashsize
-1;

118 
d
->
öodehashèb
 = 
	`mÆloc
((
uöt8_t
*)*d->
hashsize
);

119 
	`mem£t
(
d
->
öodehashèb
,0,(
uöt8_t
*)*d->
hashsize
);

121 
±r
 = 
d
->
dbuff
;

122 
ïå
 = 
d
->
dbuff
+d->
dsize
;

123 
±r
<
ïå
) {

124 
íÀng
 = *
±r
;

125 i‡(
±r
+
íÀng
+40<=
ïå
) {

126 
ùå
 = 
±r
+1+
íÀng
;

127 
hash
 = 
	`gë32bô
(&
ùå
);

128 
di•
 = ((
hash
*0x53B23891)&
hashmask
)|1;

129 
hash
 *= 0xB28E457D;

130 
d
->
öodehashèb
[
hash
&
hashmask
]) {

131 
hash
+=
di•
;

133 
d
->
öodehashèb
[
hash
&
hashmask
]=
±r
+1+
íÀng
;

135 
±r
+=
íÀng
+40;

137 
	}
}

139 * 
	$dˇche_√w
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
∑ª¡
,c⁄° 
uöt8_t
 *
dbuff
,uöt32_à
dsize
) {

140 
dúˇche
 *
d
;

141 
d
 = 
	`mÆloc
((
dúˇche
));

142 
d
->
˘x
.
pid
 = ctx->pid;

143 
d
->
˘x
.
uid
 = ctx->uid;

144 
d
->
˘x
.
gid
 = ctx->gid;

145 
d
->
∑ª¡
 =Öarent;

146 
d
->
dbuff
 = dbuff;

147 
d
->
dsize
 = dsize;

148 
d
->
hashsize
 = 0;

149 
d
->
«mehashèb
 = 
NULL
;

150 
d
->
öodehashèb
 = 
NULL
;

151 
	`±hªad_muãx_lock
(&
glock
);

152 i‡(
hód
) {

153 
hód
->
¥ev
 = &(
d
->
√xt
);

155 
d
->
√xt
 = 
hód
;

156 
d
->
¥ev
 = &
hód
;

157 
hód
 = 
d
;

158 
	`±hªad_muãx_u∆ock
(&
glock
);

159  
d
;

160 
	}
}

162 
	$dˇche_ªÀa£
(*
r
) {

163 
dúˇche
 *
d
 = (dúˇche*)
r
;

164 
	`±hªad_muãx_lock
(&
glock
);

165 i‡(
d
->
√xt
) {

166 
d
->
√xt
->
¥ev
 = d->prev;

168 *(
d
->
¥ev
Ëd->
√xt
;

169 
	`±hªad_muãx_u∆ock
(&
glock
);

170 i‡(
d
->
«mehashèb
) {

171 
	`‰ì
(
d
->
«mehashèb
);

173 i‡(
d
->
öodehashèb
) {

174 
	`‰ì
(
d
->
öodehashèb
);

176 
	`‰ì
(
d
);

177 
	}
}

221 
ölöe
 
uöt8_t
 
	$dˇche_«mehash£¨ch
(
dúˇche
 *
d
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,
uöt32_t
 *
öode
,uöt8_à
©å
[35]) {

222 
uöt32_t
 
hash
,
di•
,
hashmask
;

223 c⁄° 
uöt8_t
 *
±r
;

225 i‡(
d
->
«mehashèb
==
NULL
) {

226 
	`dˇche_makíamehash
(
d
);

228 
hashmask
 = 
d
->
hashsize
-1;

229 
hash
 = 
	`dˇche_hash
(
«me
,
∆íg
);

230 
di•
 = ((
hash
*0x53B23891)&
hashmask
)|1;

231 (
±r
=
d
->
«mehashèb
[
hash
&
hashmask
])) {

232 i‡(*
±r
==
∆íg
 && 
	`memcmp
’å+1,
«me
,nleng)==0) {

233 
±r
+=1+
∆íg
;

234 *
öode
 = 
	`gë32bô
(&
±r
);

235 
	`mem˝y
(
©å
,
±r
,35);

238 
hash
+=
di•
;

241 
	}
}

243 
ölöe
 
uöt8_t
 
	$dˇche_öodehash£¨ch
(
dúˇche
 *
d
,
uöt32_t
 
öode
,
uöt8_t
 
©å
[35]) {

244 
uöt32_t
 
hash
,
di•
,
hashmask
;

245 c⁄° 
uöt8_t
 *
±r
;

247 i‡(
d
->
öodehashèb
==
NULL
) {

248 
	`dˇche_makeöodehash
(
d
);

250 
hashmask
 = 
d
->
hashsize
-1;

251 
hash
 = 
öode
*0xB28E457D;

252 
di•
 = ((
öode
*0x53B23891)&
hashmask
)|1;

253 (
±r
=
d
->
öodehashèb
[
hash
&
hashmask
])) {

254 i‡(
öode
==
	`gë32bô
(&
±r
)) {

255 
	`mem˝y
(
©å
,
±r
,35);

258 
hash
+=
di•
;

261 
	}
}

263 
uöt8_t
 
	$dˇche_lookup
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

264 
dúˇche
 *
d
;

265 
	`±hªad_muãx_lock
(&
glock
);

266 
d
=
hód
 ; d ; d=d->
√xt
) {

267 i‡(
∑ª¡
==
d
->∑ª¡ && 
˘x
->
pid
==d->˘x.pid && ctx->
uid
==d->˘x.uid && ctx->
gid
==d->ctx.gid) {

268 i‡(
	`dˇche_«mehash£¨ch
(
d
,
∆íg
,
«me
,
öode
,
©å
)) {

269 
	`±hªad_muãx_u∆ock
(&
glock
);

274 
	`±hªad_muãx_u∆ock
(&
glock
);

276 
	}
}

278 
uöt8_t
 
	$dˇche_gë©å
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
öode
,
uöt8_t
 
©å
[35]) {

279 
dúˇche
 *
d
;

280 
	`±hªad_muãx_lock
(&
glock
);

281 
d
=
hód
 ; d ; d=d->
√xt
) {

282 i‡(
˘x
->
pid
==
d
->˘x.pid && ctx->
uid
==d->˘x.uid && ctx->
gid
==d->ctx.gid) {

283 i‡(
	`dˇche_öodehash£¨ch
(
d
,
öode
,
©å
)) {

284 
	`±hªad_muãx_u∆ock
(&
glock
);

289 
	`±hªad_muãx_u∆ock
(&
glock
);

291 
	}
}

	@mfsmount/dirattrcache.h

19 #i‚de‡
_DIRATTRCACHE_H_


20 
	#_DIRATTRCACHE_H_


	)

22 * 
dˇche_√w
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
∑ª¡
,c⁄° 
uöt8_t
 *
dbuff
,uöt32_à
dsize
);

23 
dˇche_ªÀa£
(*
r
);

24 
uöt8_t
 
dˇche_lookup
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à*
öode
,uöt8_à
©å
[35]);

25 
uöt8_t
 
dˇche_gë©å
(c⁄° 
fu£_˘x
 *
˘x
,
uöt32_t
 
öode
,uöt8_à
©å
[35]);

	@mfsmount/main.c

19 
	~"c⁄fig.h
"

21 #i‡
deföed
(
HAVE_MLOCKALL
Ë&& deföed(
RLIMIT_MEMLOCK
Ë&& deföed(
MCL_CURRENT
Ë&& deföed(
MCL_FUTURE
)

22 
	#MFS_USE_MEMLOCK


	)

25 
	~<fu£.h
>

26 
	~<fu£_›t.h
>

27 
	~<fu£_lowÀvñ.h
>

28 
	~<sys/time.h
>

29 
	~<sys/ªsour˚.h
>

30 #ifde‡
MFS_USE_MEMLOCK


31 
	~<sys/mm™.h
>

33 
	~<uni°d.h
>

34 
	~<f˙é.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<°rögs.h
>

39 
	~<°ddef.h
>

40 
	~<uni°d.h
>

41 
	~<pwd.h
>

42 
	~<gΩ.h
>

43 
	~<sy¶og.h
>

44 
	~<î∫o.h
>

46 
	~"mfs_fu£.h
"

47 
	~"mfs_mëa_fu£.h
"

49 
	~"MFSCommuniˇti⁄.h
"

50 
	~"md5.h
"

51 
	~"ma°îcomm.h
"

52 
	~"ma°î¥oxy.h
"

53 
	~"chunklocˇche.h
"

54 
	~"symlökˇche.h
"

56 
	~"ªadd©a.h
"

57 
	~"wrôed©a.h
"

58 
	~"csdb.h
"

59 
	~"°©s.h
"

60 
	~"°ªº.h
"

61 
	~"¸c.h
"

63 
	#STR_AUX
(
x
Ë#x

	)

64 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

65 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

67 #i‡
deföed
(
__APPLE__
)

68 
	#DEFAULT_OPTIONS
 "Ælow_Ÿhî,deÁu…_≥rmissi⁄s,d´m⁄_timeout=600,iosize=65536"

	)

70 
	#DEFAULT_OPTIONS
 "Ælow_Ÿhî,deÁu…_≥rmissi⁄s"

	)

73 
mfs_fsöô
 (*
u£rd©a
, 
fu£_c⁄n_öfo
 *
c⁄n
);

75 
fu£_lowÀvñ_›s
 
	gmfs_mëa_›î
 = {

76 .
öô
 = 
mfs_fsöô
,

77 .
	g°©fs
 = 
mfs_mëa_°©fs
,

78 .
	glookup
 = 
mfs_mëa_lookup
,

79 .
	ggë©å
 = 
mfs_mëa_gë©å
,

80 .
	g£èâr
 = 
mfs_mëa_£èâr
,

81 .
	gu∆ök
 = 
mfs_mëa_u∆ök
,

82 .
	gª«me
 = 
mfs_mëa_ª«me
,

83 .
	g›ídú
 = 
mfs_mëa_›ídú
,

84 .
	gªaddú
 = 
mfs_mëa_ªaddú
,

85 .
	gªÀa£dú
 = 
mfs_mëa_ªÀa£dú
,

86 .
	g›í
 = 
mfs_mëa_›í
,

87 .
	gªÀa£
 = 
mfs_mëa_ªÀa£
,

88 .
	gªad
 = 
mfs_mëa_ªad
,

89 .
	gwrôe
 = 
mfs_mëa_wrôe
,

93 
fu£_lowÀvñ_›s
 
	gmfs_›î
 = {

94 .
öô
 = 
mfs_fsöô
,

95 .
	g°©fs
 = 
mfs_°©fs
,

96 .
	glookup
 = 
mfs_lookup
,

97 .
	ggë©å
 = 
mfs_gë©å
,

98 .
	g£èâr
 = 
mfs_£èâr
,

99 .
	gmknod
 = 
mfs_mknod
,

100 .
	gu∆ök
 = 
mfs_u∆ök
,

101 .
	gmkdú
 = 
mfs_mkdú
,

102 .
	grmdú
 = 
mfs_rmdú
,

103 .
	gsymlök
 = 
mfs_symlök
,

104 .
	gªadlök
 = 
mfs_ªadlök
,

105 .
	gª«me
 = 
mfs_ª«me
,

106 .
	glök
 = 
mfs_lök
,

107 .
	g›ídú
 = 
mfs_›ídú
,

108 .
	gªaddú
 = 
mfs_ªaddú
,

109 .
	gªÀa£dú
 = 
mfs_ªÀa£dú
,

110 .
	g¸óã
 = 
mfs_¸óã
,

111 .
	g›í
 = 
mfs_›í
,

112 .
	gªÀa£
 = 
mfs_ªÀa£
,

113 .
	gÊush
 = 
mfs_Êush
,

114 .
	gfsync
 = 
mfs_fsync
,

115 .
	gªad
 = 
mfs_ªad
,

116 .
	gwrôe
 = 
mfs_wrôe
,

117 .
	gac˚ss
 = 
mfs_ac˚ss
,

118 #i‡
FUSE_VERSION
 >= 26

126 
	smfs›ts
 {

127 *
	mma°îho°
;

128 *
	mma°îp‹t
;

129 *
	mbödho°
;

130 *
	msubfﬁdî
;

131 *
	m∑ssw‹d
;

132 *
	mmd5∑ss
;

133 
	mnofûe
;

134 sig√d 
	mni˚
;

135 #ifde‡
MFS_USE_MEMLOCK


136 
	mmemlock
;

138 
	mno°dmou¡›ti⁄s
;

139 
	mmëa
;

140 
	mdebug
;

141 
	mmkdúc›ysgid
;

142 *
	msugid˛órmode°r
;

143 
	msugid˛órmode
;

144 *
	mˇchemode
;

145 
	mˇchefûes
;

146 
	mkìpˇche
;

147 
	m∑ssw‹dask
;

148 
	md⁄Ÿªmembî∑ssw‹d
;

149 
	mwrôeˇchesize
;

150 
	mi‹ërõs
;

151 
	m©åˇchëo
;

152 
	míåyˇchëo
;

153 
	mdúíåyˇchëo
;

156 
mfs›ts
 
	gmfs›ts
;

157 *
	gdeÁu…mou¡poöt
 = 
NULL
;

159 
	gcu°om_cfg
;

162 
	mKEY_CFGFILE
,

163 
	mKEY_META
,

164 
	mKEY_HOST
,

165 
	mKEY_PORT
,

166 
	mKEY_BIND
,

167 
	mKEY_PATH
,

168 
	mKEY_PASSWORDASK
,

169 
	mKEY_NOSTDMOUNTOPTIONS
,

170 
	mKEY_HELP
,

171 
	mKEY_VERSION
,

174 
	#MFS_OPT
(
t
, 
p
, 
v
Ë{Å, 
	`off£tof
(
mfs›ts
,Ö), v }

	)

176 
fu£_›t
 
	gmfs_›ts_°age1
[] = {

177 
FUSE_OPT_KEY
("mfscfgfûe=", 
KEY_CFGFILE
),

178 
FUSE_OPT_KEY
("-¯", 
KEY_CFGFILE
),

179 
FUSE_OPT_END


182 
fu£_›t
 
	gmfs_›ts_°age2
[] = {

183 
MFS_OPT
("mfsma°î=%s", 
ma°îho°
, 0),

184 
MFS_OPT
("mf•‹t=%s", 
ma°îp‹t
, 0),

185 
MFS_OPT
("mfsböd=%s", 
bödho°
, 0),

186 
MFS_OPT
("mfssubfﬁdî=%s", 
subfﬁdî
, 0),

187 
MFS_OPT
("mf•assw‹d=%s", 
∑ssw‹d
, 0),

188 
MFS_OPT
("mfsmd5∑ss=%s", 
md5∑ss
, 0),

189 
MFS_OPT
("mf§limônofûe=%u", 
nofûe
, 0),

190 
MFS_OPT
("mf¢i˚=%d", 
ni˚
, 0),

191 #ifde‡
MFS_USE_MEMLOCK


192 
MFS_OPT
("mfsmemlock", 
memlock
, 1),

194 
MFS_OPT
("mfswrôeˇchesize=%u", 
wrôeˇchesize
, 0),

195 
MFS_OPT
("mfsi‹ërõs=%u", 
i‹ërõs
, 0),

196 
MFS_OPT
("mfsdebug", 
debug
, 1),

197 
MFS_OPT
("mfsmëa", 
mëa
, 1),

198 
MFS_OPT
("mfsd⁄Ÿªmembî∑ssw‹d", 
d⁄Ÿªmembî∑ssw‹d
, 1),

199 
MFS_OPT
("mfsˇchefûes", 
ˇchefûes
, 1),

200 
MFS_OPT
("mfsˇchemode=%s", 
ˇchemode
, 0),

201 
MFS_OPT
("mfsmkdúc›ysgid=%u", 
mkdúc›ysgid
, 0),

202 
MFS_OPT
("mfssugid˛órmode=%s", 
sugid˛órmode°r
, 0),

203 
MFS_OPT
("mfßârˇchëo=%lf", 
©åˇchëo
, 0),

204 
MFS_OPT
("mf£¡ryˇchëo=%lf", 
íåyˇchëo
, 0),

205 
MFS_OPT
("mfsdúíåyˇchëo=%lf", 
dúíåyˇchëo
, 0),

207 
FUSE_OPT_KEY
("-m", 
KEY_META
),

208 
FUSE_OPT_KEY
("--mëa", 
KEY_META
),

209 
FUSE_OPT_KEY
("-H ", 
KEY_HOST
),

210 
FUSE_OPT_KEY
("-P ", 
KEY_PORT
),

211 
FUSE_OPT_KEY
("-B ", 
KEY_BIND
),

212 
FUSE_OPT_KEY
("-S ", 
KEY_PATH
),

213 
FUSE_OPT_KEY
("-p", 
KEY_PASSWORDASK
),

214 
FUSE_OPT_KEY
("--∑ssw‹d", 
KEY_PASSWORDASK
),

215 
FUSE_OPT_KEY
("-n", 
KEY_NOSTDMOUNTOPTIONS
),

216 
FUSE_OPT_KEY
("--no°d›ts", 
KEY_NOSTDMOUNTOPTIONS
),

217 
FUSE_OPT_KEY
("-V", 
KEY_VERSION
),

218 
FUSE_OPT_KEY
("--vîsi⁄", 
KEY_VERSION
),

219 
FUSE_OPT_KEY
("-h", 
KEY_HELP
),

220 
FUSE_OPT_KEY
("--hñp", 
KEY_HELP
),

221 
FUSE_OPT_END


224 
	$ußge
(c⁄° *
¥og«me
) {

225 
	`Ârötf
(
°dîr
,

227 "\n", 
¥og«me
);

228 
	`Ârötf
(
°dîr
,

234 
	`Ârötf
(
°dîr
,

243 " -¿ --no°d›t† dÿnŸádd sènd¨d MFS mou¡ o±i⁄s: '-ÿ" 
DEFAULT_OPTIONS
 ",fsname=MFS'\n"

244 " -ÿmfscfgfûe=CFGFILEÜﬂd somêmou¡ o±i⁄†‰omÉxã∫Æ fûê(i‡nŸ s≥cifõdÅhí u£ deÁu… fûe: " 
ETC_PATH
 "/mfsmount.cfg)\n"

247 #ifde‡
__löux__


252 #i‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_EXT
)

254 #ñi‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_BSD
)

256 #ñi‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_OSX
)

269 #ifde‡
MFS_USE_MEMLOCK


282 
	`Ârötf
(
°dîr
,

288 
	`Ârötf
(
°dîr
,

302 
	}
}

304 
	$mfs_›t_∑r£_cfg_fûe
(c⁄° *
fûíame
,
›ti⁄Æ
,
fu£_¨gs
 *
ouèrgs
) {

305 
FILE
 *
fd
;

306 
lbuff
[1000],*
p
;

308 
fd
 = 
	`f›í
(
fûíame
,"r");

309 i‡(
fd
==
NULL
) {

310 i‡(
›ti⁄Æ
==0) {

311 
	`Ârötf
(
°dîr
,"ˇn'à›í cfg fûe: %s\n",
fûíame
);

312 
	`ab‹t
();

316 
cu°om_cfg
 = 1;

317 
	`fgës
(
lbuff
,999,
fd
)) {

318 i‡(
lbuff
[0]!='#' &&Übuff[0]!=';') {

319 
lbuff
[999]=0;

320 
p
 = 
lbuff
 ; *p ;Ö++) {

321 i‡(*
p
=='\r' || *p=='\n') {

322 *
p
=0;

326 
p
--;

327 
p
>=
lbuff
 && (*p==' ' || *p=='\t')) {

328 *
p
=0;

329 
p
--;

331 
p
 = 
lbuff
;

332 *
p
==' ' || *p=='\t') {

333 
p
++;

335 i‡(*
p
) {

337 i‡(*
p
=='-') {

338 
	`fu£_›t_add_¨g
(
ouèrgs
,
p
);

339 } i‡(*
p
=='/') {

340 i‡(
deÁu…mou¡poöt
) {

341 
	`‰ì
(
deÁu…mou¡poöt
);

343 
deÁu…mou¡poöt
 = 
	`°rdup
(
p
);

345 
	`fu£_›t_add_¨g
(
ouèrgs
,"-o");

346 
	`fu£_›t_add_¨g
(
ouèrgs
,
p
);

351 
	`f˛o£
(
fd
);

352 
	}
}

354 
	$mfs_›t_¥oc_°age1
(*
d©a
, c⁄° *
¨g
, 
key
, 
fu£_¨gs
 *
ouèrgs
) {

355 
fu£_¨gs
 *
deÁrgs
 = (fu£_¨gs*)
d©a
;

356 ()
ouèrgs
;

358 i‡(
key
==
KEY_CFGFILE
) {

359 i‡(
	`memcmp
(
¨g
,"mfscfgfile=",11)==0) {

360 
	`mfs_›t_∑r£_cfg_fûe
(
¨g
+11,0,
deÁrgs
);

361 } i‡(
¨g
[0]=='-' &&árg[1]=='c') {

362 
	`mfs_›t_∑r£_cfg_fûe
(
¨g
+2,0,
deÁrgs
);

367 
	}
}

372 
	$mfs_›t_¥oc_°age2
(*
d©a
, c⁄° *
¨g
, 
key
, 
fu£_¨gs
 *
ouèrgs
) {

373 ()
d©a
;

375 
key
) {

376 
FUSE_OPT_KEY_OPT
:

378 
FUSE_OPT_KEY_NONOPT
:

380 
KEY_HOST
:

381 i‡(
mfs›ts
.
ma°îho°
!=
NULL
) {

382 
	`‰ì
(
mfs›ts
.
ma°îho°
);

384 
mfs›ts
.
ma°îho°
 = 
	`°rdup
(
¨g
+2);

386 
KEY_PORT
:

387 i‡(
mfs›ts
.
ma°îp‹t
!=
NULL
) {

388 
	`‰ì
(
mfs›ts
.
ma°îp‹t
);

390 
mfs›ts
.
ma°îp‹t
 = 
	`°rdup
(
¨g
+2);

392 
KEY_BIND
:

393 i‡(
mfs›ts
.
bödho°
!=
NULL
) {

394 
	`‰ì
(
mfs›ts
.
bödho°
);

396 
mfs›ts
.
bödho°
 = 
	`°rdup
(
¨g
+2);

398 
KEY_PATH
:

399 i‡(
mfs›ts
.
subfﬁdî
!=
NULL
) {

400 
	`‰ì
(
mfs›ts
.
subfﬁdî
);

402 
mfs›ts
.
subfﬁdî
 = 
	`°rdup
(
¨g
+2);

404 
KEY_PASSWORDASK
:

405 
mfs›ts
.
∑ssw‹dask
 = 1;

407 
KEY_META
:

408 
mfs›ts
.
mëa
 = 1;

410 
KEY_NOSTDMOUNTOPTIONS
:

411 
mfs›ts
.
no°dmou¡›ti⁄s
 = 1;

413 
KEY_VERSION
:

414 
	`Ârötf
(
°dîr
, "MFS vîsi⁄ %u.%u.%u\n",
VERSMAJ
,
VERSMID
,
VERSMIN
);

416 
fu£_¨gs
 
hñ∑rgs
 = 
	`FUSE_ARGS_INIT
(0, 
NULL
);

418 
	`fu£_›t_add_¨g
(&
hñ∑rgs
,
ouèrgs
->
¨gv
[0]);

419 
	`fu£_›t_add_¨g
(&
hñ∑rgs
,"--version");

420 
	`fu£_∑r£_cmdlöe
(&
hñ∑rgs
,
NULL
,NULL,NULL);

421 
	`fu£_mou¡
(
NULL
,&
hñ∑rgs
);

423 
	`exô
(0);

424 
KEY_HELP
:

425 
	`ußge
(
ouèrgs
->
¨gv
[0]);

427 
fu£_¨gs
 
hñ∑rgs
 = 
	`FUSE_ARGS_INIT
(0, 
NULL
);

429 
	`fu£_›t_add_¨g
(&
hñ∑rgs
,
ouèrgs
->
¨gv
[0]);

430 
	`fu£_›t_add_¨g
(&
hñ∑rgs
,"-ho");

431 
	`fu£_∑r£_cmdlöe
(&
hñ∑rgs
,
NULL
,NULL,NULL);

432 
	`fu£_mou¡
("",&
hñ∑rgs
);

434 
	`exô
(1);

436 
	`Ârötf
(
°dîr
, "internalÉrror\n");

437 
	`ab‹t
();

439 
	}
}

441 
	$mfs_fsöô
 (*
u£rd©a
, 
fu£_c⁄n_öfo
 *
c⁄n
) {

442 *
pùed
 = (*)
u£rd©a
;

443 
s
;

444 ()
c⁄n
;

445 i‡(
pùed
[1]>=0) {

446 
s
=0;

447 i‡(
	`wrôe
(
pùed
[1],&
s
,1)!=1) {

448 
	`sy¶og
(
LOG_ERR
,"pùêwrôêîr‹: %s",
	`°ªº
(
î∫o
));

450 
	`˛o£
(
pùed
[1]);

452 
	}
}

454 
	$maölo›
(
fu£_¨gs
 *
¨gs
,c⁄° * 
mp
,
mt
,
fg
) {

455 
fu£_£ssi⁄
 *
£
;

456 
fu£_ch™
 *
ch
;

457 
æimô
 
æs
;

458 
pùed
[2];

459 
s
;

460 
îr
;

461 
uöt8_t
 
£sÊags
;

462 
uöt32_t
 
roŸuid
,
roŸgid
;

463 
uöt32_t
 
m≠Æluid
,
m≠Ælgid
;

464 
i
,
j
;

465 c⁄° *
£sÊagpos°πab
[]={
SESFLAG_POS_STRINGS
};

466 c⁄° *
£sÊag√g°πab
[]={
SESFLAG_NEG_STRINGS
};

467 
∑sswd
 
pwd
,*
pw
;

468 
group
 
gΩ
,*
gr
;

469 
pwdgΩbuff
[16384];

470 
md5˘x
 
˘x
;

471 
uöt8_t
 
md5∑ss
[16];

473 i‡(
mfs›ts
.
∑ssw‹dask
 && mfs›ts.
∑ssw‹d
==
NULL
 && mfs›ts.
md5∑ss
==NULL) {

474 
mfs›ts
.
∑ssw‹d
 = 
	`gë∑ss
("MFS Password:");

476 i‡(
mfs›ts
.
∑ssw‹d
) {

477 
	`md5_öô
(&
˘x
);

478 
	`md5_upd©e
(&
˘x
,(
uöt8_t
*)(
mfs›ts
.
∑ssw‹d
),
	`°æí
(mfsopts.password));

479 
	`md5_föÆ
(
md5∑ss
,&
˘x
);

480 
	`mem£t
(
mfs›ts
.
∑ssw‹d
,0,
	`°æí
(mfsopts.password));

481 } i‡(
mfs›ts
.
md5∑ss
) {

482 
uöt8_t
 *
p
 = (uöt8_t*)(
mfs›ts
.
md5∑ss
);

483 
i
=0 ; i<16 ; i++) {

484 i‡(*
p
>='0' && *p<='9') {

485 
md5∑ss
[
i
]=(*
p
-'0')<<4;

486 } i‡(*
p
>='a' && *p<='f') {

487 
md5∑ss
[
i
]=(*
p
-'a'+10)<<4;

488 } i‡(*
p
>='A' && *p<='F') {

489 
md5∑ss
[
i
]=(*
p
-'A'+10)<<4;

491 
	`Ârötf
(
°dîr
,"bad md5 definition (md5 should be givenás 32 hex digits)\n");

494 
p
++;

495 i‡(*
p
>='0' && *p<='9') {

496 
md5∑ss
[
i
]+=(*
p
-'0');

497 } i‡(*
p
>='a' && *p<='f') {

498 
md5∑ss
[
i
]+=(*
p
-'a'+10);

499 } i‡(*
p
>='A' && *p<='F') {

500 
md5∑ss
[
i
]+=(*
p
-'A'+10);

502 
	`Ârötf
(
°dîr
,"bad md5 definition (md5 should be givenás 32 hex digits)\n");

505 
p
++;

507 i‡(*
p
) {

508 
	`Ârötf
(
°dîr
,"bad md5 definition (md5 should be givenás 32 hex digits)\n");

511 
	`mem£t
(
mfs›ts
.
md5∑ss
,0,
	`°æí
(mfsopts.md5pass));

514 i‡(
	`fs_öô_ma°î_c⁄√˘i⁄
(
mfs›ts
.
bödho°
,mfs›ts.
ma°îho°
,mfs›ts.
ma°îp‹t
,mfs›ts.
mëa
,
mp
,mfs›ts.
subfﬁdî
,(mfs›ts.
∑ssw‹d
||mfs›ts.
md5∑ss
)?md5∑ss:
NULL
,mfs›ts.
d⁄Ÿªmembî∑ssw‹d
,&
£sÊags
,&
roŸuid
,&
roŸgid
,&
m≠Æluid
,&
m≠Ælgid
)<0) {

517 
	`mem£t
(
md5∑ss
,0,16);

519 i‡(
mfs›ts
.
debug
) {

520 
	`Ârötf
(
°dîr
,"registeredÅo master\n");

523 
	`Ârötf
(
°dîr
,"mfsmasteráccepted connection withÖarameters: ");

524 
j
=0;

525 
i
=0 ; i<8 ; i++) {

526 i‡(
£sÊags
&(1<<
i
)) {

527 
	`Ârötf
(
°dîr
,"%s%s",
j
?",":"",
£sÊagpos°πab
[
i
]);

528 
j
=1;

529 } i‡(
£sÊag√g°πab
[
i
]) {

530 
	`Ârötf
(
°dîr
,"%s%s",
j
?",":"",
£sÊag√g°πab
[
i
]);

531 
j
=1;

534 i‡(
j
==0) {

535 
	`Ârötf
(
°dîr
,"-");

537 i‡(
mfs›ts
.
mëa
==0) {

538 
	`Ârötf
(
°dîr
," ;Ñoot mappedÅo ");

539 
	`gëpwuid_r
(
roŸuid
,&
pwd
,
pwdgΩbuff
,16384,&
pw
);

541 i‡(
pw
) {

542 
	`Ârötf
(
°dîr
,"%s:",
pw
->
pw_«me
);

544 
	`Ârötf
(
°dîr
,"%"
PRIu32
":",
roŸuid
);

546 
	`gëgrgid_r
(
roŸgid
,&
gΩ
,
pwdgΩbuff
,16384,&
gr
);

548 i‡(
gr
) {

549 
	`Ârötf
(
°dîr
,"%s",
gr
->
gr_«me
);

551 
	`Ârötf
(
°dîr
,"%"
PRIu32
,
roŸgid
);

553 i‡(
£sÊags
&
SESFLAG_MAPALL
) {

554 
	`Ârötf
(
°dîr
," ; users mappedÅo ");

555 
pw
 = 
	`gëpwuid
(
m≠Æluid
);

556 i‡(
pw
) {

557 
	`Ârötf
(
°dîr
,"%s:",
pw
->
pw_«me
);

559 
	`Ârötf
(
°dîr
,"%"
PRIu32
":",
m≠Æluid
);

561 
gr
 = 
	`gëgrgid
(
m≠Ælgid
);

562 i‡(
gr
) {

563 
	`Ârötf
(
°dîr
,"%s",
gr
->
gr_«me
);

565 
	`Ârötf
(
°dîr
,"%"
PRIu32
,
m≠Ælgid
);

569 
	`Ârötf
(
°dîr
,"\n");

571 i‡(
fg
==0) {

572 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
 , 
LOG_DAEMON
);

574 #i‡
	`deföed
(
LOG_PERROR
)

575 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
 | 
LOG_PERROR
, 
LOG_USER
);

577 
	`›ílog
(
	`STR
(
APPNAME
), 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_USER
);

581 
æs
.
æim_cur
 = 
mfs›ts
.
nofûe
;

582 
æs
.
æim_max
 = 
mfs›ts
.
nofûe
;

583 
	`£ålimô
(
RLIMIT_NOFILE
,&
æs
);

585 
	`£çri‹ôy
(
PRIO_PROCESS
,
	`gëpid
(),
mfs›ts
.
ni˚
);

586 #ifde‡
MFS_USE_MEMLOCK


587 i‡(
mfs›ts
.
memlock
) {

588 
æs
.
æim_cur
 = 
RLIM_INFINITY
;

589 
æs
.
æim_max
 = 
RLIM_INFINITY
;

590 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
,&
æs
)<0) {

591 
mfs›ts
.
memlock
=0;

596 
pùed
[0] =Öiped[1] = -1;

597 i‡(
fg
==0) {

598 i‡(
	`pùe
(
pùed
)<0) {

599 
	`Ârötf
(
°dîr
,"pipeÉrror\n");

602 
îr
 = 
	`f‹k
();

603 i‡(
îr
<0) {

604 
	`Ârötf
(
°dîr
,"forkÉrror\n");

606 } i‡(
îr
>0) {

607 
	`˛o£
(
pùed
[1]);

608 
îr
 = 
	`ªad
(
pùed
[0],&
s
,1);

609 i‡(
îr
==0) {

610 
s
=1;

612  
s
;

614 
	`˛o£
(
pùed
[0]);

615 
s
=1;

619 #ifde‡
MFS_USE_MEMLOCK


620 i‡(
mfs›ts
.
memlock
) {

621 i‡(
	`mlockÆl
(
MCL_CURRENT
|
MCL_FUTURE
)==0) {

622 
	`sy¶og
(
LOG_NOTICE
,"process memory was successfullyÜocked in RAM");

627 
	`chunkloc_ˇche_öô
();

628 
	`symlök_ˇche_öô
();

630 
	`fs_öô_thªads
(
mfs›ts
.
i‹ërõs
);

631 
	`ma°î¥oxy_öô
();

633 i‡(
mfs›ts
.
mëa
==0) {

634 
	`csdb_öô
();

635 
	`ªad_d©a_öô
(
mfs›ts
.
i‹ërõs
);

637 
	`wrôe_d©a_öô
(
mfs›ts
.
wrôeˇchesize
*1024*1024,mfs›ts.
i‹ërõs
);

640 
ch
 = 
	`fu£_mou¡
(
mp
, 
¨gs
);

641 i‡(
ch
==
NULL
) {

642 
	`Ârötf
(
°dîr
,"error in fuse_mount\n");

643 i‡(
pùed
[1]>=0) {

644 i‡(
	`wrôe
(
pùed
[1],&
s
,1)!=1) {

645 
	`Ârötf
(
°dîr
,"pipe writeÉrror\n");

647 
	`˛o£
(
pùed
[1]);

649 i‡(
mfs›ts
.
mëa
==0) {

650 
	`wrôe_d©a_ãrm
();

651 
	`ªad_d©a_ãrm
();

652 
	`csdb_ãrm
();

654 
	`ma°î¥oxy_ãrm
();

655 
	`fs_ãrm
();

657 
	`symlök_ˇche_ãrm
();

658 
	`chunkloc_ˇche_ãrm
();

662 i‡(
mfs›ts
.
mëa
) {

663 
	`mfs_mëa_öô
(
mfs›ts
.
debug
,mfs›ts.
íåyˇchëo
,mfs›ts.
©åˇchëo
);

664 
£
 = 
	`fu£_lowÀvñ_√w
(
¨gs
, &
mfs_mëa_›î
, (mfs_mëa_›î), (*)
pùed
);

666 
	`mfs_öô
(
mfs›ts
.
debug
,mfs›ts.
kìpˇche
,mfs›ts.
dúíåyˇchëo
,mfs›ts.
íåyˇchëo
,mfs›ts.
©åˇchëo
,mfs›ts.
mkdúc›ysgid
,mfs›ts.
sugid˛órmode
);

667 
£
 = 
	`fu£_lowÀvñ_√w
(
¨gs
, &
mfs_›î
, (mfs_›î), (*)
pùed
);

669 i‡(
£
==
NULL
) {

670 
	`fu£_unmou¡
(
mp
,
ch
);

671 
	`Ârötf
(
°dîr
,"error in fuse_lowlevel_new\n");

672 
	`u¶ìp
(100000);

673 i‡(
pùed
[1]>=0) {

674 i‡(
	`wrôe
(
pùed
[1],&
s
,1)!=1) {

675 
	`Ârötf
(
°dîr
,"pipe writeÉrror\n");

677 
	`˛o£
(
pùed
[1]);

679 i‡(
mfs›ts
.
mëa
==0) {

680 
	`wrôe_d©a_ãrm
();

681 
	`ªad_d©a_ãrm
();

682 
	`csdb_ãrm
();

684 
	`ma°î¥oxy_ãrm
();

685 
	`fs_ãrm
();

687 
	`symlök_ˇche_ãrm
();

688 
	`chunkloc_ˇche_ãrm
();

693 
	`fu£_£ssi⁄_add_ch™
(
£
, 
ch
);

695 i‡(
	`fu£_£t_sig«l_h™dÀrs
(
£
)<0) {

696 
	`Ârötf
(
°dîr
,"error in fuse_set_signal_handlers\n");

697 
	`fu£_£ssi⁄_ªmove_ch™
(
ch
);

698 
	`fu£_£ssi⁄_de°roy
(
£
);

699 
	`fu£_unmou¡
(
mp
,
ch
);

700 i‡(
pùed
[1]>=0) {

701 i‡(
	`wrôe
(
pùed
[1],&
s
,1)!=1) {

702 
	`Ârötf
(
°dîr
,"pipe writeÉrror\n");

704 
	`˛o£
(
pùed
[1]);

706 i‡(
mfs›ts
.
mëa
==0) {

707 
	`wrôe_d©a_ãrm
();

708 
	`ªad_d©a_ãrm
();

709 
	`csdb_ãrm
();

711 
	`ma°î¥oxy_ãrm
();

712 
	`fs_ãrm
();

714 
	`symlök_ˇche_ãrm
();

715 
	`chunkloc_ˇche_ãrm
();

719 i‡(
mfs›ts
.
debug
==0 && 
fg
==0) {

720 
	`£tsid
();

721 
	`£çgid
(0,
	`gëpid
());

722 i‡((
i
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) != -1) {

723 ()
	`dup2
(
i
, 
STDIN_FILENO
);

724 ()
	`dup2
(
i
, 
STDOUT_FILENO
);

725 ()
	`dup2
(
i
, 
STDERR_FILENO
);

726 i‡(
i
>2Ë
	`˛o£
 (i);

730 i‡(
mt
) {

731 
îr
 = 
	`fu£_£ssi⁄_lo›_mt
(
£
);

733 
îr
 = 
	`fu£_£ssi⁄_lo›
(
£
);

735 i‡(
îr
) {

736 i‡(
pùed
[1]>=0) {

737 i‡(
	`wrôe
(
pùed
[1],&
s
,1)!=1) {

738 
	`sy¶og
(
LOG_ERR
,"pùêwrôêîr‹: %s",
	`°ªº
(
î∫o
));

740 
	`˛o£
(
pùed
[1]);

743 
	`fu£_ªmove_sig«l_h™dÀrs
(
£
);

744 
	`fu£_£ssi⁄_ªmove_ch™
(
ch
);

745 
	`fu£_£ssi⁄_de°roy
(
£
);

746 
	`fu£_unmou¡
(
mp
,
ch
);

747 i‡(
mfs›ts
.
mëa
==0) {

748 
	`wrôe_d©a_ãrm
();

749 
	`ªad_d©a_ãrm
();

750 
	`csdb_ãrm
();

752 
	`ma°î¥oxy_ãrm
();

753 
	`fs_ãrm
();

755 
	`symlök_ˇche_ãrm
();

756 
	`chunkloc_ˇche_ãrm
();

757  
îr
 ? 1 : 0;

758 
	}
}

760 #i‡
FUSE_VERSION
 == 25

761 
	$fu£_›t_ö£π_¨g
(
fu£_¨gs
 *
¨gs
, 
pos
, c⁄° *
¨g
) {

762 
	`as£π
(
pos
 <
¨gs
->
¨gc
);

763 i‡(
	`fu£_›t_add_¨g
(
¨gs
, 
¨g
) == -1) {

766 i‡(
pos
 !
¨gs
->
¨gc
 - 1) {

767 *
√w¨g
 = 
¨gs
->
¨gv
[¨gs->
¨gc
 - 1];

768 
	`memmove
(&
¨gs
->
¨gv
[
pos
 + 1], &¨gs->¨gv[pos], (*Ë* (¨gs->
¨gc
 -Öos - 1));

769 
¨gs
->
¨gv
[
pos
] = 
√w¨g
;

772 
	}
}

775 
	$°∫˝y_ªmove_commas
(*
d°buff
, 
d°size
,*
§c
) {

776 
c
;

777 
l
;

778 
l
=0;

779 (
c
=*
§c
++Ë&& 
l
+1<
d°size
) {

780 i‡(
c
!=',') {

781 *
d°buff
++ = 
c
;

782 
l
++;

785 *
d°buff
=0;

786  
l
;

787 
	}
}

789 #i‡
HAVE_FUSE_VERSION


790 
	$°∫˝y_esˇ≥_commas
(*
d°buff
, 
d°size
,*
§c
) {

791 
c
;

792 
l
;

793 
l
=0;

794 (
c
=*
§c
++Ë&& 
l
+1<
d°size
) {

795 i‡(
c
!=',' && c!='\\') {

796 *
d°buff
++ = 
c
;

797 
l
++;

799 i‡(
l
+2<
d°size
) {

800 *
d°buff
++ = '\\';

801 *
d°buff
++ = 
c
;

802 
l
+=2;

804 *
d°buff
=0;

805  
l
;

809 *
d°buff
=0;

810  
l
;

811 
	}
}

814 
	$make_f¢ame
(
fu£_¨gs
 *
¨gs
) {

815 
f¢amórg
[256];

816 
l
;

817 #i‡
HAVE_FUSE_VERSION


818 
libvî
;

819 
libvî
 = 
	`fu£_vîsi⁄
();

820 i‡(
libvî
 >= 27) {

821 
l
 = 
	`¢¥ötf
(
f¢amórg
,256,"-osubty≥=mfs%s,f¢ame=",(
mfs›ts
.
mëa
)?"meta":"");

822 i‡(
libvî
 >= 28) {

823 
l
 +
	`°∫˝y_esˇ≥_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îho°
);

824 i‡(
l
<255) {

825 
f¢amórg
[
l
++]=':';

827 
l
 +
	`°∫˝y_esˇ≥_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îp‹t
);

828 i‡(
mfs›ts
.
subfﬁdî
[0]!='/') {

829 i‡(
l
<255) {

830 
f¢amórg
[
l
++]='/';

833 i‡(
mfs›ts
.
subfﬁdî
[0]!='/' && mfsopts.subfolder[1]!=0) {

834 
l
 +
	`°∫˝y_esˇ≥_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
subfﬁdî
);

836 
f¢amórg
[255]=0;

838 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îho°
);

839 i‡(
l
<255) {

840 
f¢amórg
[
l
++]=':';

842 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îp‹t
);

843 i‡(
mfs›ts
.
subfﬁdî
[0]!='/') {

844 i‡(
l
<255) {

845 
f¢amórg
[
l
++]='/';

848 i‡(
mfs›ts
.
subfﬁdî
[0]!='/' && mfsopts.subfolder[1]!=0) {

849 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
subfﬁdî
);

851 
f¢amórg
[255]=0;

855 
l
 = 
	`¢¥ötf
(
f¢amórg
,256,"-of¢ame=mfs%s#",(
mfs›ts
.
mëa
)?"meta":"");

856 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îho°
);

857 i‡(
l
<255) {

858 
f¢amórg
[
l
++]=':';

860 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
ma°îp‹t
);

861 i‡(
mfs›ts
.
subfﬁdî
[0]!='/') {

862 i‡(
l
<255) {

863 
f¢amórg
[
l
++]='/';

866 i‡(
mfs›ts
.
subfﬁdî
[0]!='/' && mfsopts.subfolder[1]!=0) {

867 
l
 +
	`°∫˝y_ªmove_commas
(
f¢amórg
+l,256-l,
mfs›ts
.
subfﬁdî
);

869 
f¢amórg
[255]=0;

871 #i‡
HAVE_FUSE_VERSION


874 
	`fu£_›t_ö£π_¨g
(
¨gs
, 1, 
f¢amórg
);

875 
	}
}

886 
	$maö
(
¨gc
, *
¨gv
[]) {

887 
ªs
;

888 
mt
,
fg
;

889 *
mou¡poöt
;

890 
fu£_¨gs
 
¨gs
 = 
	`FUSE_ARGS_INIT
(
¨gc
, 
¨gv
);

891 
fu£_¨gs
 
deÁu…¨gs
 = 
	`FUSE_ARGS_INIT
(0, 
NULL
);

893 
	`°ªº_öô
();

894 
	`my¸c32_öô
();

896 
mfs›ts
.
ma°îho°
 = 
NULL
;

897 
mfs›ts
.
ma°îp‹t
 = 
NULL
;

898 
mfs›ts
.
bödho°
 = 
NULL
;

899 
mfs›ts
.
subfﬁdî
 = 
NULL
;

900 
mfs›ts
.
∑ssw‹d
 = 
NULL
;

901 
mfs›ts
.
md5∑ss
 = 
NULL
;

902 
mfs›ts
.
nofûe
 = 0;

903 
mfs›ts
.
ni˚
 = -19;

904 #ifde‡
MFS_USE_MEMLOCK


905 
mfs›ts
.
memlock
 = 0;

907 
mfs›ts
.
no°dmou¡›ti⁄s
 = 0;

908 
mfs›ts
.
mëa
 = 0;

909 
mfs›ts
.
debug
 = 0;

910 #ifde‡
__löux__


911 
mfs›ts
.
mkdúc›ysgid
 = 1;

913 
mfs›ts
.
mkdúc›ysgid
 = 0;

915 
mfs›ts
.
sugid˛órmode°r
 = 
NULL
;

916 
mfs›ts
.
d⁄Ÿªmembî∑ssw‹d
 = 0;

917 
mfs›ts
.
ˇchefûes
 = 0;

918 
mfs›ts
.
ˇchemode
 = 
NULL
;

919 
mfs›ts
.
wrôeˇchesize
 = 0;

920 
mfs›ts
.
i‹ërõs
 = 30;

921 
mfs›ts
.
∑ssw‹dask
 = 0;

922 
mfs›ts
.
©åˇchëo
 = 1.0;

923 
mfs›ts
.
íåyˇchëo
 = 0.0;

924 
mfs›ts
.
dúíåyˇchëo
 = 1.0;

926 
cu°om_cfg
 = 0;

930 
	`fu£_›t_add_¨g
(&
deÁu…¨gs
,"fakeappname");

932 i‡(
	`fu£_›t_∑r£
(&
¨gs
, &
deÁu…¨gs
, 
mfs_›ts_°age1
, 
mfs_›t_¥oc_°age1
)<0) {

933 
	`exô
(1);

936 i‡(
cu°om_cfg
==0) {

937 
	`mfs_›t_∑r£_cfg_fûe
(
ETC_PATH
 "/mfsmou¡.cfg",1,&
deÁu…¨gs
);

943 i‡(
	`fu£_›t_∑r£
(&
deÁu…¨gs
, &
mfs›ts
, 
mfs_›ts_°age2
, 
mfs_›t_¥oc_°age2
)<0) {

944 
	`exô
(1);

947 i‡(
	`fu£_›t_∑r£
(&
¨gs
, &
mfs›ts
, 
mfs_›ts_°age2
, 
mfs_›t_¥oc_°age2
)<0) {

948 
	`exô
(1);

953 i‡(
mfs›ts
.
ˇchemode
!=
NULL
 && mfs›ts.
ˇchefûes
) {

954 
	`Ârötf
(
°dîr
,"mfsˇchemodê™d mfsˇchefûe†›ti⁄†¨êex˛usivê- u£ o∆y mfsˇchemode\n£e: %†-h f‹ hñp\n",
¨gv
[0]);

958 i‡(
mfs›ts
.
ˇchemode
==
NULL
) {

959 
mfs›ts
.
kìpˇche
=(mfs›ts.
ˇchefûes
)?1:0;

960 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
ˇchemode
,"AUTO")==0) {

961 
mfs›ts
.
kìpˇche
=0;

962 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
ˇchemode
,"YES")==0 || strcasecmp(mfsopts.cachemode,"ALWAYS")==0) {

963 
mfs›ts
.
kìpˇche
=1;

964 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
ˇchemode
,"NO")==0 || strcasecmp(mfsopts.cachemode,"NONE")==0 || strcasecmp(mfsopts.cachemode,"NEVER")==0) {

965 
mfs›ts
.
kìpˇche
=2;

967 
	`Ârötf
(
°dîr
,"uƒecognized cachemodê›ti⁄\n£e: %†-h f‹ hñp\n",
¨gv
[0]);

970 i‡(
mfs›ts
.
sugid˛órmode°r
==
NULL
) {

971 #i‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_EXT
)

972 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_EXT
;

973 #ñi‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_BSD
)

974 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_BSD
;

975 #ñi‡
	`deföed
(
DEFAULT_SUGID_CLEAR_MODE_OSX
)

976 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_OSX
;

978 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_NEVER
;

980 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"NEVER")==0) {

981 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_NEVER
;

982 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"ALWAYS")==0) {

983 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_ALWAYS
;

984 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"OSX")==0) {

985 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_OSX
;

986 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"BSD")==0) {

987 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_BSD
;

988 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"EXT")==0) {

989 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_EXT
;

990 } i‡(
	`°rˇ£cmp
(
mfs›ts
.
sugid˛órmode°r
,"XFS")==0) {

991 
mfs›ts
.
sugid˛órmode
 = 
SUGID_CLEAR_MODE_XFS
;

993 
	`Ârötf
(
°dîr
,"uƒecognized sugid˛órmodê›ti⁄\n£e: %†-h f‹ hñp\n",
¨gv
[0]);

996 i‡(
mfs›ts
.
ma°îho°
==
NULL
) {

997 
mfs›ts
.
ma°îho°
 = 
	`°rdup
("mfsmaster");

999 i‡(
mfs›ts
.
ma°îp‹t
==
NULL
) {

1000 
mfs›ts
.
ma°îp‹t
 = 
	`°rdup
("9421");

1002 i‡(
mfs›ts
.
subfﬁdî
==
NULL
) {

1003 
mfs›ts
.
subfﬁdî
 = 
	`°rdup
("/");

1005 i‡(
mfs›ts
.
nofûe
==0) {

1006 
mfs›ts
.
nofûe
=100000;

1008 i‡(
mfs›ts
.
wrôeˇchesize
==0) {

1009 
mfs›ts
.
wrôeˇchesize
=128;

1011 i‡(
mfs›ts
.
wrôeˇchesize
<16) {

1012 
	`Ârötf
(
°dîr
,"wrôêˇchêsizêtÿlow (%u MiBË- in¸ó£dÅÿ16 MiB\n",
mfs›ts
.
wrôeˇchesize
);

1013 
mfs›ts
.
wrôeˇchesize
=16;

1015 i‡(
mfs›ts
.
wrôeˇchesize
>2048) {

1016 
	`Ârötf
(
°dîr
,"wrôêˇchêsizêtÿbig (%u MiBË- de¸e£dÅÿ2048 MiB\n",
mfs›ts
.
wrôeˇchesize
);

1017 
mfs›ts
.
wrôeˇchesize
=2048;

1020 i‡(
mfs›ts
.
no°dmou¡›ti⁄s
==0) {

1021 
	`fu£_›t_add_¨g
(&
¨gs
, "-o" 
DEFAULT_OPTIONS
);

1025 
	`make_f¢ame
(&
¨gs
);

1027 i‡(
	`fu£_∑r£_cmdlöe
(&
¨gs
,&
mou¡poöt
,&
mt
,&
fg
)<0) {

1028 
	`Ârötf
(
°dîr
,"£e: %†-h f‹ hñp\n",
¨gv
[0]);

1032 i‡(!
mou¡poöt
) {

1033 i‡(
deÁu…mou¡poöt
) {

1034 
mou¡poöt
 = 
deÁu…mou¡poöt
;

1036 
	`Ârötf
(
°dîr
,"nÿmou¡Öoöt\n£e: %†-h f‹ hñp\n",
¨gv
[0]);

1041 
ªs
 = 
	`maölo›
(&
¨gs
,
mou¡poöt
,
mt
,
fg
);

1042 
	`fu£_›t_‰ì_¨gs
(&
¨gs
);

1043 
	`‰ì
(
mfs›ts
.
ma°îho°
);

1044 
	`‰ì
(
mfs›ts
.
ma°îp‹t
);

1045 i‡(
mfs›ts
.
bödho°
) {

1046 
	`‰ì
(
mfs›ts
.
bödho°
);

1048 
	`‰ì
(
mfs›ts
.
subfﬁdî
);

1049 i‡(
deÁu…mou¡poöt
) {

1050 
	`‰ì
(
deÁu…mou¡poöt
);

1052 
	`°©s_ãrm
();

1053 
	`°ªº_ãrm
();

1054  
ªs
;

1055 
	}
}

	@mfsmount/mastercomm.c

19 
	~"c⁄fig.h
"

21 
	#MMAP_ALLOC
 1

	)

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

27 
	~<sys/pﬁl.h
>

28 
	~<sy¶og.h
>

29 
	~<time.h
>

30 
	~<limôs.h
>

31 
	~<î∫o.h
>

32 
	~<±hªad.h
>

33 #ifde‡
MMAP_ALLOC


34 
	~<sys/ty≥s.h
>

35 
	~<sys/mm™.h
>

38 
	~"MFSCommuniˇti⁄.h
"

39 
	~"°©s.h
"

40 
	~"sockës.h
"

41 
	~"°ªº.h
"

42 
	~"md5.h
"

43 
	~"d©≠ack.h
"

46 
	s_thªc
 {

47 
±hªad_t
 
	mthid
;

48 
±hªad_muãx_t
 
	mmuãx
;

49 
±hªad_c⁄d_t
 
	mc⁄d
;

50 
uöt8_t
 *
	mobuff
;

51 
uöt32_t
 
	mobuffsize
;

52 
uöt32_t
 
	mod©Æíg
;

53 
uöt8_t
 *
	mibuff
;

54 
uöt32_t
 
	mibuffsize
;

55 
uöt32_t
 
	mid©Æíg
;

57 
uöt8_t
 
	m£¡
;

58 
uöt8_t
 
	m°©us
;

59 
uöt8_t
 
	mrcvd
;

60 
uöt8_t
 
	mwaôög
;

62 
uöt32_t
 
	mrcvd_cmd
;

64 
uöt32_t
 
	m∑ckëid
;

65 
_thªc
 *
	m√xt
;

66 } 
	tthªc
;

87 
	s_acquúed_fûe
 {

88 
uöt32_t
 
	möode
;

89 
uöt32_t
 
	m˙t
;

90 
_acquúed_fûe
 *
	m√xt
;

91 } 
	tacquúed_fûe
;

94 
	#DEFAULT_OUTPUT_BUFFSIZE
 0x1000

	)

95 
	#DEFAULT_INPUT_BUFFSIZE
 0x10000

	)

97 
	#RECEIVE_TIMEOUT
 10

	)

99 
thªc
 *
	gthªchód
=
NULL
;

101 
acquúed_fûe
 *
	gafhód
=
NULL
;

103 
	gfd
;

104 
	gdisc⁄√˘
;

105 
time_t
 
	gœ°wrôe
;

106 
	g£ssi⁄lo°
;

108 
uöt32_t
 
	gmaxªåõs
;

110 
±hªad_t
 
	gΩthid
,
	g≈thid
;

111 
±hªad_muãx_t
 
	gfdlock
,
	gª˛ock
,
	gaÊock
;

113 
uöt32_t
 
	g£ssi⁄id
;

114 
uöt32_t
 
	gma°îvîsi⁄
;

116 
	gma°î°rù
[17];

117 
uöt32_t
 
	gma°îù
=0;

118 
uöt16_t
 
	gma°îp‹t
=0;

119 
	g§c°rù
[17];

120 
uöt32_t
 
	g§cù
=0;

122 
uöt8_t
 
	g·îm
;

124 
	$fs_gëma°îloˇti⁄
(
uöt8_t
 
loc
[14]) {

125 
	`put32bô
(&
loc
,
ma°îù
);

126 
	`put16bô
(&
loc
,
ma°îp‹t
);

127 
	`put32bô
(&
loc
,
£ssi⁄id
);

128 
	`put32bô
(&
loc
,
ma°îvîsi⁄
);

129 
	}
}

131 
uöt32_t
 
	$fs_gë§cù
() {

132  
§cù
;

133 
	}
}

136 
	mMASTER_CONNECTS
 = 0,

137 
	mMASTER_BYTESSENT
,

138 
	mMASTER_BYTESRCVD
,

139 
	mMASTER_PACKETSSENT
,

140 
	mMASTER_PACKETSRCVD
,

141 
	mSTATNODES


144 
uöt64_t
 *
	g°©•å
[
STATNODES
];

146 
	sc⁄√˘_¨gs_t
 {

147 *
	mbödho°«me
;

148 *
	mma°îho°«me
;

149 *
	mma°îp‹äame
;

150 
uöt8_t
 
	mmëa
;

151 *
	möfo
;

152 *
	msubfﬁdî
;

153 
uöt8_t
 *
	m∑ssw‹ddige°
;

156 
c⁄√˘_¨gs_t
 
	gc⁄√˘_¨gs
;

158 
	$ma°î_°©•å_öô
() {

159 *
s
;

160 
s
 = 
	`°©s_gë_subnode
(
NULL
,"master",0);

161 
°©•å
[
MASTER_PACKETSRCVD
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"packets_received",0));

162 
°©•å
[
MASTER_PACKETSSENT
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"packets_sent",0));

163 
°©•å
[
MASTER_BYTESRCVD
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"bytes_received",0));

164 
°©•å
[
MASTER_BYTESSENT
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"bytes_sent",0));

165 
°©•å
[
MASTER_CONNECTS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"reconnects",0));

166 
	}
}

168 
	$ma°î_°©s_öc
(
uöt8_t
 
id
) {

169 i‡(
id
<
STATNODES
) {

170 
	`°©s_lock
();

171 (*
°©•å
[
id
])++;

172 
	`°©s_u∆ock
();

174 
	}
}

176 
	$ma°î_°©s_add
(
uöt8_t
 
id
,
uöt64_t
 
s
) {

177 i‡(
id
<
STATNODES
) {

178 
	`°©s_lock
();

179 (*
°©•å
[
id
])+=
s
;

180 
	`°©s_u∆ock
();

182 
	}
}

184 c⁄° * 
	gîπab
[]={
ERROR_STRINGS
};

186 
ölöe
 c⁄° * 
	$mfs_°ªº‹
(
uöt8_t
 
°©us
) {

187 i‡(
°©us
>
ERROR_MAX
) {

188 
°©us
=
ERROR_MAX
;

190  
îπab
[
°©us
];

191 
	}
}

374 
	$fs_öc_a˙t
(
uöt32_t
 
öode
) {

375 
acquúed_fûe
 *
aÂå
,**
aÂ±r
;

376 
	`±hªad_muãx_lock
(&
aÊock
);

377 
aÂ±r
 = &
afhód
;

378 (
aÂå
=*
aÂ±r
)) {

379 i‡(
aÂå
->
öode
==inode) {

380 
aÂå
->
˙t
++;

381 
	`±hªad_muãx_u∆ock
(&
aÊock
);

384 i‡(
aÂå
->
öode
>inode) {

387 
aÂ±r
 = &(
aÂå
->
√xt
);

389 
aÂå
 = (
acquúed_fûe
*)
	`mÆloc
((acquired_file));

390 
aÂå
->
öode
 = inode;

391 
aÂå
->
˙t
 = 1;

392 
aÂå
->
√xt
 = *
aÂ±r
;

393 *
aÂ±r
 = 
aÂå
;

394 
	`±hªad_muãx_u∆ock
(&
aÊock
);

395 
	}
}

397 
	$fs_dec_a˙t
(
uöt32_t
 
öode
) {

398 
acquúed_fûe
 *
aÂå
,**
aÂ±r
;

399 
	`±hªad_muãx_lock
(&
aÊock
);

400 
aÂ±r
 = &
afhód
;

401 (
aÂå
=*
aÂ±r
)) {

402 i‡(
aÂå
->
öode
 == inode) {

403 i‡(
aÂå
->
˙t
<=1) {

404 *
aÂ±r
 = 
aÂå
->
√xt
;

405 
	`‰ì
(
aÂå
);

407 
aÂå
->
˙t
--;

409 
	`±hªad_muãx_u∆ock
(&
aÊock
);

412 
aÂ±r
 = &(
aÂå
->
√xt
);

414 
	`±hªad_muãx_u∆ock
(&
aÊock
);

415 
	}
}

417 
thªc
* 
	$fs_gë_my_thªc
() {

418 
±hªad_t
 
mythid
 = 
	`±hªad_£lf
();

419 
thªc
 *
ªc
;

420 
	`±hªad_muãx_lock
(&
ª˛ock
);

421 
ªc
 = 
thªchód
 ;Ñe¯;ÑecÙec->
√xt
) {

422 i‡(
	`±hªad_equÆ
(
ªc
->
thid
,
mythid
)) {

423 
	`±hªad_muãx_u∆ock
(&
ª˛ock
);

424  
ªc
;

427 
ªc
 = 
	`mÆloc
((
thªc
));

428 
ªc
->
thid
 = 
mythid
;

458 
	`±hªad_muãx_öô
(&(
ªc
->
muãx
),
NULL
);

459 
	`±hªad_c⁄d_öô
(&(
ªc
->
c⁄d
),
NULL
);

460 
ªc
->
obuff
 = 
NULL
;

461 
ªc
->
ibuff
 = 
NULL
;

462 
ªc
->
obuffsize
 = 0;

463 
ªc
->
ibuffsize
 = 0;

464 
ªc
->
od©Æíg
 = 0;

465 
ªc
->
id©Æíg
 = 0;

466 
ªc
->
£¡
 = 0;

467 
ªc
->
°©us
 = 0;

468 
ªc
->
rcvd
 = 0;

469 
ªc
->
waôög
 = 0;

470 
ªc
->
rcvd_cmd
 = 0;

471 i‡(
thªchód
==
NULL
) {

472 
ªc
->
∑ckëid
 = 1;

474 
ªc
->
∑ckëid
 = 
thªchód
->packetid+1;

476 
ªc
->
√xt
 = 
thªchód
;

478 
thªchód
 = 
ªc
;

479 
	`±hªad_muãx_u∆ock
(&
ª˛ock
);

480  
ªc
;

481 
	}
}

483 
thªc
* 
	$fs_gë_thªc_by_id
(
uöt32_t
 
∑ckëid
) {

484 
thªc
 *
ªc
;

485 
	`±hªad_muãx_lock
(&
ª˛ock
);

486 
ªc
 = 
thªchód
 ;Ñe¯;ÑecÙec->
√xt
) {

487 i‡(
ªc
->
∑ckëid
==packetid) {

488 
	`±hªad_muãx_u∆ock
(&
ª˛ock
);

489  
ªc
;

492 
	`±hªad_muãx_u∆ock
(&
ª˛ock
);

493  
NULL
;

494 
	}
}

496 
	$fs_ouçut_buf„r_öô
(
thªc
 *
ªc
,
uöt32_t
 
size
) {

497 i‡(
size
>
DEFAULT_OUTPUT_BUFFSIZE
) {

498 #ifde‡
MMAP_ALLOC


499 i‡(
ªc
->
obuff
) {

500 
	`munm≠
((*)(
ªc
->
obuff
),ªc->
obuffsize
);

502 
ªc
->
obuff
 = (*)
	`mm≠
(
NULL
,
size
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

504 i‡(
ªc
->
obuff
) {

505 
	`‰ì
(
ªc
->
obuff
);

507 
ªc
->
obuff
 = 
	`mÆloc
(
size
);

509 
ªc
->
obuffsize
 = 
size
;

510 } i‡(
ªc
->
obuffsize
!=
DEFAULT_OUTPUT_BUFFSIZE
) {

511 #ifde‡
MMAP_ALLOC


512 i‡(
ªc
->
obuff
) {

513 
	`munm≠
((*)(
ªc
->
obuff
),ªc->
obuffsize
);

515 
ªc
->
obuff
 = (*)
	`mm≠
(
NULL
,
DEFAULT_OUTPUT_BUFFSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

517 i‡(
ªc
->
obuff
) {

518 
	`‰ì
(
ªc
->
obuff
);

520 
ªc
->
obuff
 = 
	`mÆloc
(
DEFAULT_OUTPUT_BUFFSIZE
);

522 
ªc
->
obuffsize
 = 
DEFAULT_OUTPUT_BUFFSIZE
;

524 i‡(
ªc
->
obuff
==
NULL
) {

525 
ªc
->
obuffsize
 = 0;

527 
	}
}

529 
	$fs_öput_buf„r_öô
(
thªc
 *
ªc
,
uöt32_t
 
size
) {

530 i‡(
size
>
DEFAULT_INPUT_BUFFSIZE
) {

531 #ifde‡
MMAP_ALLOC


532 i‡(
ªc
->
ibuff
) {

533 
	`munm≠
((*)(
ªc
->
ibuff
),ªc->
ibuffsize
);

535 
ªc
->
ibuff
 = (*)
	`mm≠
(
NULL
,
size
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

537 i‡(
ªc
->
ibuff
) {

538 
	`‰ì
(
ªc
->
ibuff
);

540 
ªc
->
ibuff
 = 
	`mÆloc
(
size
);

542 
ªc
->
ibuffsize
 = 
size
;

543 } i‡(
ªc
->
ibuffsize
!=
DEFAULT_INPUT_BUFFSIZE
) {

544 #ifde‡
MMAP_ALLOC


545 i‡(
ªc
->
ibuff
) {

546 
	`munm≠
((*)(
ªc
->
ibuff
),ªc->
ibuffsize
);

548 
ªc
->
ibuff
 = (*)
	`mm≠
(
NULL
,
DEFAULT_INPUT_BUFFSIZE
,
PROT_READ
 | 
PROT_WRITE
, 
MAP_ANON
 | 
MAP_PRIVATE
,-1,0);

550 i‡(
ªc
->
ibuff
) {

551 
	`‰ì
(
ªc
->
ibuff
);

553 
ªc
->
ibuff
 = 
	`mÆloc
(
DEFAULT_INPUT_BUFFSIZE
);

555 
ªc
->
ibuffsize
 = 
DEFAULT_INPUT_BUFFSIZE
;

557 i‡(
ªc
->
ibuff
==
NULL
) {

558 
ªc
->
ibuffsize
 = 0;

560 
	}
}

562 
uöt8_t
* 
	$fs_¸óã∑ckë
(
thªc
 *
ªc
,
uöt32_t
 
cmd
,uöt32_à
size
) {

563 
uöt8_t
 *
±r
;

564 
uöt32_t
 
hdrsize
 = 
size
+4;

565 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

566 
	`fs_ouçut_buf„r_öô
(
ªc
,
size
+12);

567 i‡(
ªc
->
obuff
==
NULL
) {

568  
NULL
;

570 
±r
 = 
ªc
->
obuff
;

571 
	`put32bô
(&
±r
,
cmd
);

572 
	`put32bô
(&
±r
,
hdrsize
);

573 
	`put32bô
(&
±r
,
ªc
->
∑ckëid
);

574 
ªc
->
od©Æíg
 = 
size
+12;

575 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

576  
±r
;

577 
	}
}

579 c⁄° 
uöt8_t
* 
	$fs_£nd™dª˚ive
(
thªc
 *
ªc
,
uöt32_t
 
ex≥˘ed_cmd
,uöt32_à*
™swî_Àng
) {

580 
uöt32_t
 
˙t
;

583 
˙t
=0 ; c¡<
maxªåõs
 ; cnt++) {

584 
	`±hªad_muãx_lock
(&
fdlock
);

585 i‡(
£ssi⁄lo°
) {

586 
	`±hªad_muãx_u∆ock
(&
fdlock
);

587  
NULL
;

589 i‡(
fd
==-1) {

590 
	`±hªad_muãx_u∆ock
(&
fdlock
);

591 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

595 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

596 i‡(
	`t˝towrôe
(
fd
,
ªc
->
obuff
,ªc->
od©Æíg
,1000)!=(
öt32_t
)(rec->odataleng)) {

597 
	`sy¶og
(
LOG_WARNING
,"t˝ sídÉº‹: %s",
	`°ªº
(
î∫o
));

598 
disc⁄√˘
 = 1;

599 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

600 
	`±hªad_muãx_u∆ock
(&
fdlock
);

601 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

604 
ªc
->
rcvd
 = 0;

605 
ªc
->
£¡
 = 1;

606 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

607 
	`ma°î_°©s_add
(
MASTER_BYTESSENT
,
ªc
->
od©Æíg
);

608 
	`ma°î_°©s_öc
(
MASTER_PACKETSSENT
);

609 
œ°wrôe
 = 
	`time
(
NULL
);

610 
	`±hªad_muãx_u∆ock
(&
fdlock
);

612 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

613 
ªc
->
rcvd
==0) {

614 
ªc
->
waôög
 = 1;

615 
	`±hªad_c⁄d_waô
(&(
ªc
->
c⁄d
),&‘ec->
muãx
));

616 
ªc
->
waôög
 = 0;

618 *
™swî_Àng
 = 
ªc
->
id©Æíg
;

621 i‡(
ªc
->
°©us
!=0) {

622 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

623 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

626 i‡(
ªc
->
rcvd_cmd
!=
ex≥˘ed_cmd
) {

627 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

628 
	`±hªad_muãx_lock
(&
fdlock
);

629 
disc⁄√˘
 = 1;

630 
	`±hªad_muãx_u∆ock
(&
fdlock
);

631 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

634 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

636  
ªc
->
ibuff
;

638  
NULL
;

639 
	}
}

641 c⁄° 
uöt8_t
* 
	$fs_£nd™dª˚ive_™y
(
thªc
 *
ªc
,
uöt32_t
 *
ª˚ived_cmd
,uöt32_à*
™swî_Àng
) {

642 
uöt32_t
 
˙t
;

645 
˙t
=0 ; c¡<
maxªåõs
 ; cnt++) {

646 
	`±hªad_muãx_lock
(&
fdlock
);

647 i‡(
£ssi⁄lo°
) {

648 
	`±hªad_muãx_u∆ock
(&
fdlock
);

649  
NULL
;

651 i‡(
fd
==-1) {

652 
	`±hªad_muãx_u∆ock
(&
fdlock
);

653 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

657 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

658 i‡(
	`t˝towrôe
(
fd
,
ªc
->
obuff
,ªc->
od©Æíg
,1000)!=(
öt32_t
)(rec->odataleng)) {

659 
	`sy¶og
(
LOG_WARNING
,"t˝ sídÉº‹: %s",
	`°ªº
(
î∫o
));

660 
disc⁄√˘
 = 1;

661 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

662 
	`±hªad_muãx_u∆ock
(&
fdlock
);

663 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

666 
ªc
->
rcvd
 = 0;

667 
ªc
->
£¡
 = 1;

668 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

669 
	`ma°î_°©s_add
(
MASTER_BYTESSENT
,
ªc
->
od©Æíg
);

670 
	`ma°î_°©s_öc
(
MASTER_PACKETSSENT
);

671 
œ°wrôe
 = 
	`time
(
NULL
);

672 
	`±hªad_muãx_u∆ock
(&
fdlock
);

674 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

675 
ªc
->
rcvd
==0) {

676 
ªc
->
waôög
 = 1;

677 
	`±hªad_c⁄d_waô
(&(
ªc
->
c⁄d
),&‘ec->
muãx
));

678 
ªc
->
waôög
 = 0;

680 *
™swî_Àng
 = 
ªc
->
id©Æíg
;

683 i‡(
ªc
->
°©us
!=0) {

684 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

685 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

688 *
ª˚ived_cmd
 = 
ªc
->
rcvd_cmd
;

689 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

691  
ªc
->
ibuff
;

693  
NULL
;

694 
	}
}

736 
	$fs_ªsﬁve
(
uöt8_t
 
⁄öô
,c⁄° *
bödho°«me
,c⁄° *
ma°îho°«me
,c⁄° *
ma°îp‹äame
) {

737 i‡(
bödho°«me
) {

738 i‡(
	`t˝ªsﬁve
(
bödho°«me
,
NULL
,&
§cù
,NULL,1)<0) {

739 i‡(
⁄öô
) {

740 
	`Ârötf
(
°dîr
,"ˇn'àªsﬁvêsour˚ ho°«mê(%s)\n",
bödho°«me
);

742 
	`sy¶og
(
LOG_WARNING
,"ˇn'àªsﬁvêsour˚ ho°«mê(%s)",
bödho°«me
);

747 
§cù
=0;

749 
	`¢¥ötf
(
§c°rù
,17,"%"
PRIu8
".%"PRIu8".%"PRIu8".%"PRIu8,(
§cù
>>24)&0xFF,(srcip>>16)&0xFF,(srcip>>8)&0xFF,srcip&0xFF);

750 
§c°rù
[16]=0;

752 i‡(
	`t˝ªsﬁve
(
ma°îho°«me
,
ma°îp‹äame
,&
ma°îù
,&
ma°îp‹t
,0)<0) {

753 i‡(
⁄öô
) {

754 
	`Ârötf
(
°dîr
,"ˇn'àªsﬁvêma°î ho°«mê™d/‹Ö‹äamê(%s:%s)\n",
ma°îho°«me
,
ma°îp‹äame
);

756 
	`sy¶og
(
LOG_WARNING
,"ˇn'àªsﬁvêma°î ho°«mê™d/‹Ö‹äamê(%s:%s)",
ma°îho°«me
,
ma°îp‹äame
);

760 
	`¢¥ötf
(
ma°î°rù
,17,"%"
PRIu8
".%"PRIu8".%"PRIu8".%"PRIu8,(
ma°îù
>>24)&0xFF,(masterip>>16)&0xFF,(masterip>>8)&0xFF,masterip&0xFF);

761 
ma°î°rù
[16]=0;

764 
	}
}

766 
	$fs_c⁄√˘
(
uöt8_t
 
⁄öô
,c⁄° *
bödho°«me
,c⁄° *
ma°îho°«me
,c⁄° *
ma°îp‹äame
,uöt8_à
mëa
,c⁄° *
öfo
,c⁄° *
subfﬁdî
,c⁄° uöt8_à
∑ssw‹ddige°
[16],uöt8_à*
£sÊags
,
uöt32_t
 *
roŸuid
,uöt32_à*
roŸgid
,uöt32_à*
m≠Æluid
,uöt32_à*
m≠Ælgid
) {

767 
uöt32_t
 
i
;

768 
uöt8_t
 *
w±r
,*
ªgbuff
;

769 
md5˘x
 
˘x
;

770 
uöt8_t
 
dige°
[16];

771 c⁄° 
uöt8_t
 *
Ωå
;

772 
uöt8_t
 
havïassw‹d
;

773 
uöt32_t
 
∂íg
,
ûíg
;

775 i‡(
	`fs_ªsﬁve
(
⁄öô
,
bödho°«me
,
ma°îho°«me
,
ma°îp‹äame
)<0) {

779 
havïassw‹d
=(
∑ssw‹ddige°
==
NULL
)?0:1;

780 
ûíg
=
	`°æí
(
öfo
)+1;

781 i‡(
mëa
) {

782 
∂íg
=0;

783 
ªgbuff
 = 
	`mÆloc
(8+64+9+
ûíg
+16);

785 
∂íg
=
	`°æí
(
subfﬁdî
)+1;

786 
ªgbuff
 = 
	`mÆloc
(8+64+13+
∂íg
+
ûíg
+16);

789 
fd
 = 
	`t˝sockë
();

790 i‡(
	`t˝nodñay
(
fd
)<0) {

791 i‡(
⁄öô
) {

792 
	`Ârötf
(
°dîr
,"can't set TCP_NODELAY\n");

794 
	`sy¶og
(
LOG_WARNING
,"can't set TCP_NODELAY");

797 i‡(
§cù
>0) {

798 i‡(
	`t˝numböd
(
fd
,
§cù
,0)<0) {

799 i‡(
⁄öô
) {

800 
	`Ârötf
(
°dîr
,"ˇn'àböd sockëÅÿgiví i∞(\"%s\")\n",
§c°rù
);

802 
	`sy¶og
(
LOG_WARNING
,"ˇn'àböd sockëÅÿgiví i∞(\"%s\")",
§c°rù
);

804 
	`t˝˛o£
(
fd
);

805 
fd
=-1;

806 
	`‰ì
(
ªgbuff
);

810 i‡(
	`t˝numc⁄√˘
(
fd
,
ma°îù
,
ma°îp‹t
)<0) {

811 i‡(
⁄öô
) {

812 
	`Ârötf
(
°dîr
,"ˇn'àc⁄√˘Åÿmfsma°î (\"%s\":\"%"
PRIu16
"\")\n",
ma°î°rù
,
ma°îp‹t
);

814 
	`sy¶og
(
LOG_WARNING
,"ˇn'àc⁄√˘Åÿmfsma°î (\"%s\":\"%"
PRIu16
"\")",
ma°î°rù
,
ma°îp‹t
);

816 
	`t˝˛o£
(
fd
);

817 
fd
=-1;

818 
	`‰ì
(
ªgbuff
);

821 i‡(
havïassw‹d
) {

822 
w±r
 = 
ªgbuff
;

823 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

824 
	`put32bô
(&
w±r
,65);

825 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_ACL
,64);

826 
w±r
+=64;

827 
	`put8bô
(&
w±r
,
REGISTER_GETRANDOM
);

828 i‡(
	`t˝towrôe
(
fd
,
ªgbuff
,8+65,1000)!=8+65) {

829 i‡(
⁄öô
) {

830 
	`Ârötf
(
°dîr
,"error sending dataÅo mfsmaster\n");

832 
	`sy¶og
(
LOG_WARNING
,"error sending dataÅo mfsmaster");

834 
	`t˝˛o£
(
fd
);

835 
fd
=-1;

836 
	`‰ì
(
ªgbuff
);

839 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,8,1000)!=8) {

840 i‡(
⁄öô
) {

841 
	`Ârötf
(
°dîr
,"errorÑeceiving data from mfsmaster\n");

843 
	`sy¶og
(
LOG_WARNING
,"errorÑeceiving data from mfsmaster");

845 
	`t˝˛o£
(
fd
);

846 
fd
=-1;

847 
	`‰ì
(
ªgbuff
);

850 
Ωå
 = 
ªgbuff
;

851 
i
 = 
	`gë32bô
(&
Ωå
);

852 i‡(
i
!=
MATOCL_FUSE_REGISTER
) {

853 i‡(
⁄öô
) {

854 
	`Ârötf
(
°dîr
,"got incorrectánswer from mfsmaster\n");

856 
	`sy¶og
(
LOG_WARNING
,"got incorrectánswer from mfsmaster");

858 
	`t˝˛o£
(
fd
);

859 
fd
=-1;

860 
	`‰ì
(
ªgbuff
);

863 
i
 = 
	`gë32bô
(&
Ωå
);

864 i‡(
i
!=32) {

865 i‡(
⁄öô
) {

866 
	`Ârötf
(
°dîr
,"got incorrectánswer from mfsmaster\n");

868 
	`sy¶og
(
LOG_WARNING
,"got incorrectánswer from mfsmaster");

870 
	`t˝˛o£
(
fd
);

871 
fd
=-1;

872 
	`‰ì
(
ªgbuff
);

875 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,32,1000)!=32) {

876 i‡(
⁄öô
) {

877 
	`Ârötf
(
°dîr
,"errorÑeceiving data from mfsmaster\n");

879 
	`sy¶og
(
LOG_WARNING
,"errorÑeceiving data from mfsmaster");

881 
	`t˝˛o£
(
fd
);

882 
fd
=-1;

883 
	`‰ì
(
ªgbuff
);

886 
	`md5_öô
(&
˘x
);

887 
	`md5_upd©e
(&
˘x
,
ªgbuff
,16);

888 
	`md5_upd©e
(&
˘x
,
∑ssw‹ddige°
,16);

889 
	`md5_upd©e
(&
˘x
,
ªgbuff
+16,16);

890 
	`md5_föÆ
(
dige°
,&
˘x
);

892 
w±r
 = 
ªgbuff
;

893 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

894 i‡(
mëa
) {

895 i‡(
havïassw‹d
) {

896 
	`put32bô
(&
w±r
,64+9+
ûíg
+16);

898 
	`put32bô
(&
w±r
,64+9+
ûíg
);

901 i‡(
havïassw‹d
) {

902 
	`put32bô
(&
w±r
,64+13+
ûíg
+
∂íg
+16);

904 
	`put32bô
(&
w±r
,64+13+
ûíg
+
∂íg
);

907 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_ACL
,64);

908 
w±r
+=64;

909 
	`put8bô
(&
w±r
,(
mëa
)?
REGISTER_NEWMETASESSION
:
REGISTER_NEWSESSION
);

910 
	`put16bô
(&
w±r
,
VERSMAJ
);

911 
	`put8bô
(&
w±r
,
VERSMID
);

912 
	`put8bô
(&
w±r
,
VERSMIN
);

913 
	`put32bô
(&
w±r
,
ûíg
);

914 
	`mem˝y
(
w±r
,
öfo
,
ûíg
);

915 
w±r
+=
ûíg
;

916 i‡(!
mëa
) {

917 
	`put32bô
(&
w±r
,
∂íg
);

918 
	`mem˝y
(
w±r
,
subfﬁdî
,
∂íg
);

920 i‡(
havïassw‹d
) {

921 
	`mem˝y
(
w±r
+
∂íg
,
dige°
,16);

923 i‡(
	`t˝towrôe
(
fd
,
ªgbuff
,8+64+(
mëa
?9:13)+
ûíg
+
∂íg
+(
havïassw‹d
?16:0),1000)!=(
öt32_t
)(8+64+(meta?9:13)+ileng+pleng+(havepassword?16:0))) {

924 i‡(
⁄öô
) {

925 
	`Ârötf
(
°dîr
,"îr‹ sídög d©®tÿmfsma°î: %s\n",
	`°ªº
(
î∫o
));

927 
	`sy¶og
(
LOG_WARNING
,"îr‹ sídög d©®tÿmfsma°î: %s",
	`°ªº
(
î∫o
));

929 
	`t˝˛o£
(
fd
);

930 
fd
=-1;

931 
	`‰ì
(
ªgbuff
);

934 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,8,1000)!=8) {

935 i‡(
⁄öô
) {

936 
	`Ârötf
(
°dîr
,"îr‹Ñe˚ivög d©®‰om mfsma°î: %s\n",
	`°ªº
(
î∫o
));

938 
	`sy¶og
(
LOG_WARNING
,"îr‹Ñe˚ivög d©®‰om mfsma°î: %s",
	`°ªº
(
î∫o
));

940 
	`t˝˛o£
(
fd
);

941 
fd
=-1;

942 
	`‰ì
(
ªgbuff
);

945 
Ωå
 = 
ªgbuff
;

946 
i
 = 
	`gë32bô
(&
Ωå
);

947 i‡(
i
!=
MATOCL_FUSE_REGISTER
) {

948 i‡(
⁄öô
) {

949 
	`Ârötf
(
°dîr
,"got incorrectánswer from mfsmaster\n");

951 
	`sy¶og
(
LOG_WARNING
,"got incorrectánswer from mfsmaster");

953 
	`t˝˛o£
(
fd
);

954 
fd
=-1;

955 
	`‰ì
(
ªgbuff
);

958 
i
 = 
	`gë32bô
(&
Ωå
);

959 i‡(!(
i
==1 || (
mëa
 && (i==5 || i==9)) || (meta==0 && (i==13 || i==21 || i==25)))) {

960 i‡(
⁄öô
) {

961 
	`Ârötf
(
°dîr
,"got incorrectánswer from mfsmaster\n");

963 
	`sy¶og
(
LOG_WARNING
,"got incorrectánswer from mfsmaster");

965 
	`t˝˛o£
(
fd
);

966 
fd
=-1;

967 
	`‰ì
(
ªgbuff
);

970 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,
i
,1000)!=(
öt32_t
)i) {

971 i‡(
⁄öô
) {

972 
	`Ârötf
(
°dîr
,"îr‹Ñe˚ivög d©®‰om mfsma°î: %s\n",
	`°ªº
(
î∫o
));

974 
	`sy¶og
(
LOG_WARNING
,"îr‹Ñe˚ivög d©®‰om mfsma°î: %s",
	`°ªº
(
î∫o
));

976 
	`t˝˛o£
(
fd
);

977 
fd
=-1;

978 
	`‰ì
(
ªgbuff
);

981 
Ωå
 = 
ªgbuff
;

982 i‡(
i
==1) {

983 i‡(
⁄öô
) {

984 
	`Ârötf
(
°dîr
,"mfsma°îÑegi°îÉº‹: %s\n",
	`mfs_°ªº‹
(
Ωå
[0]));

986 
	`sy¶og
(
LOG_WARNING
,"mfsma°îÑegi°îÉº‹: %s",
	`mfs_°ªº‹
(
Ωå
[0]));

988 
	`t˝˛o£
(
fd
);

989 
fd
=-1;

990 
	`‰ì
(
ªgbuff
);

993 i‡(
i
==9 || i==25) {

994 
ma°îvîsi⁄
 = 
	`gë32bô
(&
Ωå
);

997 
ma°îvîsi⁄
 = 0;

1000 
£ssi⁄id
 = 
	`gë32bô
(&
Ωå
);

1001 i‡(
£sÊags
) {

1002 *
£sÊags
 = 
	`gë8bô
(&
Ωå
);

1004 
Ωå
++;

1006 i‡(!
mëa
) {

1007 i‡(
roŸuid
) {

1008 *
roŸuid
 = 
	`gë32bô
(&
Ωå
);

1010 
Ωå
+=4;

1012 i‡(
roŸgid
) {

1013 *
roŸgid
 = 
	`gë32bô
(&
Ωå
);

1015 
Ωå
+=4;

1017 i‡(
i
==21) {

1018 i‡(
m≠Æluid
) {

1019 *
m≠Æluid
 = 
	`gë32bô
(&
Ωå
);

1021 
Ωå
+=4;

1023 i‡(
m≠Ælgid
) {

1024 *
m≠Ælgid
 = 
	`gë32bô
(&
Ωå
);

1026 
Ωå
+=4;

1029 i‡(
m≠Æluid
) {

1030 *
m≠Æluid
 = 0;

1032 i‡(
m≠Ælgid
) {

1033 *
m≠Ælgid
 = 0;

1037 
	`‰ì
(
ªgbuff
);

1038 
œ°wrôe
=
	`time
(
NULL
);

1039 i‡(
⁄öô
==0) {

1040 
	`sy¶og
(
LOG_NOTICE
,"registeredÅo master withÇew session");

1043 
	}
}

1045 
	$fs_ªc⁄√˘
() {

1046 
uöt32_t
 
i
;

1047 
uöt8_t
 *
w±r
,
ªgbuff
[8+64+9];

1048 c⁄° 
uöt8_t
 *
Ωå
;

1050 i‡(
£ssi⁄id
==0) {

1051 
	`sy¶og
(
LOG_WARNING
,"can'tÑegister: sessionÇot created");

1055 
fd
 = 
	`t˝sockë
();

1056 i‡(
	`t˝nodñay
(
fd
)<0) {

1057 
	`sy¶og
(
LOG_WARNING
,"ˇn'à£àTCP_NODELAY: %s",
	`°ªº
(
î∫o
));

1059 i‡(
§cù
>0) {

1060 i‡(
	`t˝numböd
(
fd
,
§cù
,0)<0) {

1061 
	`sy¶og
(
LOG_WARNING
,"ˇn'àböd sockëÅÿgiví i∞(\"%s\")",
§c°rù
);

1062 
	`t˝˛o£
(
fd
);

1063 
fd
=-1;

1067 i‡(
	`t˝numc⁄√˘
(
fd
,
ma°îù
,
ma°îp‹t
)<0) {

1068 
	`sy¶og
(
LOG_WARNING
,"ˇn'àc⁄√˘Åÿma°î (\"%s\":\"%"
PRIu16
"\")",
ma°î°rù
,
ma°îp‹t
);

1069 
	`t˝˛o£
(
fd
);

1070 
fd
=-1;

1073 
	`ma°î_°©s_öc
(
MASTER_CONNECTS
);

1074 
w±r
 = 
ªgbuff
;

1075 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

1076 
	`put32bô
(&
w±r
,73);

1077 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_ACL
,64);

1078 
w±r
+=64;

1079 
	`put8bô
(&
w±r
,
REGISTER_RECONNECT
);

1080 
	`put32bô
(&
w±r
,
£ssi⁄id
);

1081 
	`put16bô
(&
w±r
,
VERSMAJ
);

1082 
	`put8bô
(&
w±r
,
VERSMID
);

1083 
	`put8bô
(&
w±r
,
VERSMIN
);

1084 i‡(
	`t˝towrôe
(
fd
,
ªgbuff
,8+64+9,1000)!=8+64+9) {

1085 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°îÉº‹ (wrôe: %s)",
	`°ªº
(
î∫o
));

1086 
	`t˝˛o£
(
fd
);

1087 
fd
=-1;

1090 
	`ma°î_°©s_add
(
MASTER_BYTESSENT
,16+64);

1091 
	`ma°î_°©s_öc
(
MASTER_PACKETSSENT
);

1092 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,8,1000)!=8) {

1093 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°îÉº‹ (ªad hódî: %s)",
	`°ªº
(
î∫o
));

1094 
	`t˝˛o£
(
fd
);

1095 
fd
=-1;

1098 
	`ma°î_°©s_add
(
MASTER_BYTESRCVD
,8);

1099 
Ωå
 = 
ªgbuff
;

1100 
i
 = 
	`gë32bô
(&
Ωå
);

1101 i‡(
i
!=
MATOCL_FUSE_REGISTER
) {

1102 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°îÉº‹ (badánswî: %"
PRIu32
")",
i
);

1103 
	`t˝˛o£
(
fd
);

1104 
fd
=-1;

1107 
i
 = 
	`gë32bô
(&
Ωå
);

1108 i‡(
i
!=1) {

1109 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°îÉº‹ (badÜígth: %"
PRIu32
")",
i
);

1110 
	`t˝˛o£
(
fd
);

1111 
fd
=-1;

1114 i‡(
	`t˝t‹ód
(
fd
,
ªgbuff
,
i
,1000)!=(
öt32_t
)i) {

1115 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°îÉº‹ (ªad d©a: %s)",
	`°ªº
(
î∫o
));

1116 
	`t˝˛o£
(
fd
);

1117 
fd
=-1;

1120 
	`ma°î_°©s_add
(
MASTER_BYTESRCVD
,
i
);

1121 
	`ma°î_°©s_öc
(
MASTER_PACKETSRCVD
);

1122 
Ωå
 = 
ªgbuff
;

1123 i‡(
Ωå
[0]!=0) {

1124 
£ssi⁄lo°
=1;

1125 
	`sy¶og
(
LOG_WARNING
,"ma°î:Ñegi°î sètus: %s",
	`mfs_°ªº‹
(
Ωå
[0]));

1126 
	`t˝˛o£
(
fd
);

1127 
fd
=-1;

1130 
œ°wrôe
=
	`time
(
NULL
);

1131 
	`sy¶og
(
LOG_NOTICE
,"registeredÅo master");

1132 
	}
}

1134 
	$fs_˛o£_£ssi⁄
() {

1135 
uöt8_t
 *
w±r
,
ªgbuff
[8+64+5];

1137 i‡(
£ssi⁄id
==0) {

1141 
w±r
 = 
ªgbuff
;

1142 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

1143 
	`put32bô
(&
w±r
,69);

1144 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_ACL
,64);

1145 
w±r
+=64;

1146 
	`put8bô
(&
w±r
,
REGISTER_CLOSESESSION
);

1147 
	`put32bô
(&
w±r
,
£ssi⁄id
);

1148 i‡(
	`t˝towrôe
(
fd
,
ªgbuff
,8+64+5,1000)!=8+64+5) {

1149 
	`sy¶og
(
LOG_WARNING
,"ma°î: clo£ sessi⁄Éº‹ (wrôe: %s)",
	`°ªº
(
î∫o
));

1151 
	}
}

1153 * 
	$fs_n›_thªad
(*
¨g
) {

1154 
uöt8_t
 *
±r
,
hdr
[12],*
öode•ackë
;

1155 
öt32_t
 
öode¶íg
;

1156 
acquúed_fûe
 *
aÂå
;

1157 
now
;

1158 
öodeswrôe˙t
=0;

1159 ()
¨g
;

1161 
now
 = 
	`time
(
NULL
);

1162 
	`±hªad_muãx_lock
(&
fdlock
);

1163 i‡(
·îm
) {

1164 i‡(
fd
>=0) {

1165 
	`fs_˛o£_£ssi⁄
();

1167 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1168  
NULL
;

1170 i‡(
disc⁄√˘
==0 && 
fd
>=0) {

1171 i‡(
œ°wrôe
+2<
now
) {

1172 
±r
 = 
hdr
;

1173 
	`put32bô
(&
±r
,
ANTOAN_NOP
);

1174 
	`put32bô
(&
±r
,4);

1175 
	`put32bô
(&
±r
,0);

1176 i‡(
	`t˝towrôe
(
fd
,
hdr
,12,1000)!=12) {

1177 
disc⁄√˘
=1;

1179 
	`ma°î_°©s_add
(
MASTER_BYTESSENT
,12);

1180 
	`ma°î_°©s_öc
(
MASTER_PACKETSSENT
);

1182 
œ°wrôe
=
now
;

1184 i‡(
öodeswrôe˙t
<=0 || inodeswritecnt>60) {

1185 
öodeswrôe˙t
=60;

1187 
öodeswrôe˙t
--;

1189 i‡(
öodeswrôe˙t
==0) {

1190 
	`±hªad_muãx_lock
(&
aÊock
);

1192 
öode¶íg
=8;

1193 
aÂå
=
afhód
 ;áÂå ;áÂå˜Âå->
√xt
) {

1195 
öode¶íg
+=4;

1197 
öode•ackë
 = 
	`mÆloc
(
öode¶íg
);

1198 
±r
 = 
öode•ackë
;

1199 
	`put32bô
(&
±r
,
CLTOMA_FUSE_RESERVED_INODES
);

1200 
	`put32bô
(&
±r
,
öode¶íg
-8);

1206 
aÂå
=
afhód
 ;áÂå ;áÂå˜Âå->
√xt
) {

1207 
	`put32bô
(&
±r
,
aÂå
->
öode
);

1209 i‡(
	`t˝towrôe
(
fd
,
öode•ackë
,
öode¶íg
,1000)!=inodesleng) {

1210 
disc⁄√˘
=1;

1212 
	`ma°î_°©s_add
(
MASTER_BYTESSENT
,
öode¶íg
);

1213 
	`ma°î_°©s_öc
(
MASTER_PACKETSSENT
);

1215 
	`‰ì
(
öode•ackë
);

1216 
	`±hªad_muãx_u∆ock
(&
aÊock
);

1219 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1220 
	`¶ìp
(1);

1222 
	}
}

1224 * 
	$fs_ª˚ive_thªad
(*
¨g
) {

1225 c⁄° 
uöt8_t
 *
±r
;

1226 
uöt8_t
 
hdr
[12];

1227 
thªc
 *
ªc
;

1228 
uöt32_t
 
cmd
,
size
,
∑ckëid
;

1231 
r
;

1233 ()
¨g
;

1235 
	`±hªad_muãx_lock
(&
fdlock
);

1236 i‡(
·îm
) {

1237 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1238  
NULL
;

1240 i‡(
disc⁄√˘
) {

1242 
	`t˝˛o£
(
fd
);

1243 
fd
=-1;

1244 
disc⁄√˘
=0;

1246 
	`±hªad_muãx_lock
(&
ª˛ock
);

1247 
ªc
=
thªchód
 ;Ñe¯;ÑecÙec->
√xt
) {

1248 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

1249 i‡(
ªc
->
£¡
) {

1250 
ªc
->
°©us
 = 1;

1251 
ªc
->
rcvd
 = 1;

1252 i‡(
ªc
->
waôög
) {

1253 
	`±hªad_c⁄d_sig«l
(&(
ªc
->
c⁄d
));

1256 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

1258 
	`±hªad_muãx_u∆ock
(&
ª˛ock
);

1260 i‡(
fd
==-1) {

1261 
	`fs_ªc⁄√˘
();

1263 i‡(
fd
==-1) {

1264 i‡(
£ssi⁄lo°
) {

1265 i‡(
	`fs_c⁄√˘
(0,
c⁄√˘_¨gs
.
bödho°«me
,c⁄√˘_¨gs.
ma°îho°«me
,c⁄√˘_¨gs.
ma°îp‹äame
,c⁄√˘_¨gs.
mëa
,c⁄√˘_¨gs.
öfo
,c⁄√˘_¨gs.
subfﬁdî
,c⁄√˘_¨gs.
∑ssw‹ddige°
,
NULL
,NULL,NULL,NULL,NULL)==0) {

1266 
£ssi⁄lo°
=0;

1269 i‡(
	`fs_ªsﬁve
(0,
c⁄√˘_¨gs
.
bödho°«me
,c⁄√˘_¨gs.
ma°îho°«me
,c⁄√˘_¨gs.
ma°îp‹äame
)==0) {

1270 
	`fs_ªc⁄√˘
();

1274 i‡(
fd
==-1) {

1275 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1276 
	`¶ìp
(2);

1279 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1280 
r
 = 
	`t˝t‹ód
(
fd
,
hdr
,12,
RECEIVE_TIMEOUT
*1000);

1282 i‡(
r
==0) {

1283 
	`sy¶og
(
LOG_WARNING
,"master: connectionÜost (1)");

1284 
disc⁄√˘
=1;

1287 i‡(
r
!=12) {

1288 
	`sy¶og
(
LOG_WARNING
,"ma°î:Å˝ÑecvÉº‹: %†(1)",
	`°ªº
(
î∫o
));

1289 
disc⁄√˘
=1;

1292 
	`ma°î_°©s_add
(
MASTER_BYTESRCVD
,12);

1293 
	`ma°î_°©s_öc
(
MASTER_PACKETSRCVD
);

1295 
±r
 = 
hdr
;

1296 
cmd
 = 
	`gë32bô
(&
±r
);

1297 
size
 = 
	`gë32bô
(&
±r
);

1298 
∑ckëid
 = 
	`gë32bô
(&
±r
);

1299 i‡(
size
<4) {

1300 
	`sy¶og
(
LOG_WARNING
,"master:ÖacketÅoo small");

1301 
disc⁄√˘
=1;

1304 
size
 -= 4;

1305 i‡(
∑ckëid
==0) {

1306 i‡(
cmd
==
ANTOAN_NOP
 && 
size
==0) {

1384 
ªc
 = 
	`fs_gë_thªc_by_id
(
∑ckëid
);

1385 i‡(
ªc
==
NULL
) {

1386 
	`sy¶og
(
LOG_WARNING
,"master: got unexpected queryid");

1387 
disc⁄√˘
=1;

1390 
	`±hªad_muãx_lock
(&(
ªc
->
muãx
));

1391 
	`fs_öput_buf„r_öô
(
ªc
,
size
);

1392 i‡(
ªc
->
ibuff
==
NULL
) {

1393 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

1394 
disc⁄√˘
=1;

1398 i‡(
size
>0) {

1399 
r
 = 
	`t˝t‹ód
(
fd
,
ªc
->
ibuff
,
size
,1000);

1401 i‡(
r
==0) {

1402 
	`sy¶og
(
LOG_WARNING
,"master: connectionÜost (2)");

1403 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

1404 
disc⁄√˘
=1;

1407 i‡(
r
!=(
öt32_t
)(
size
)) {

1408 
	`sy¶og
(
LOG_WARNING
,"ma°î:Å˝ÑecvÉº‹: %†(2)",
	`°ªº
(
î∫o
));

1409 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

1410 
disc⁄√˘
=1;

1413 
	`ma°î_°©s_add
(
MASTER_BYTESRCVD
,
size
);

1415 
ªc
->
£¡
 = 0;

1416 
ªc
->
°©us
 = 0;

1417 
ªc
->
id©Æíg
 = 
size
;

1418 
ªc
->
rcvd_cmd
 = 
cmd
;

1420 
ªc
->
rcvd
 = 1;

1421 i‡(
ªc
->
waôög
) {

1422 
	`±hªad_c⁄d_sig«l
(&(
ªc
->
c⁄d
));

1424 
	`±hªad_muãx_u∆ock
(&(
ªc
->
muãx
));

1426 
	}
}

1429 
	$fs_öô_ma°î_c⁄√˘i⁄
(c⁄° *
bödho°«me
,c⁄° *
ma°îho°«me
,c⁄° *
ma°îp‹äame
,
uöt8_t
 
mëa
,c⁄° *
öfo
,c⁄° *
subfﬁdî
,c⁄° uöt8_à
∑ssw‹ddige°
[16],uöt8_à
d⁄Ÿªmembî∑ssw‹d
,uöt8_à*
Êags
,
uöt32_t
 *
roŸuid
,uöt32_à*
roŸgid
,uöt32_à*
m≠Æluid
,uöt32_à*
m≠Ælgid
) {

1430 
	`ma°î_°©•å_öô
();

1432 
fd
 = -1;

1433 
£ssi⁄lo°
 = 0;

1434 
£ssi⁄id
 = 0;

1435 
disc⁄√˘
 = 0;

1437 i‡(
bödho°«me
) {

1438 
c⁄√˘_¨gs
.
bödho°«me
 = 
	`°rdup
(bindhostname);

1440 
c⁄√˘_¨gs
.
bödho°«me
 = 
NULL
;

1442 
c⁄√˘_¨gs
.
ma°îho°«me
 = 
	`°rdup
(masterhostname);

1443 
c⁄√˘_¨gs
.
ma°îp‹äame
 = 
	`°rdup
(masterportname);

1444 
c⁄√˘_¨gs
.
mëa
 = meta;

1445 
c⁄√˘_¨gs
.
öfo
 = 
	`°rdup
(info);

1446 
c⁄√˘_¨gs
.
subfﬁdî
 = 
	`°rdup
(subfolder);

1447 i‡(
∑ssw‹ddige°
==
NULL
 || 
d⁄Ÿªmembî∑ssw‹d
) {

1448 
c⁄√˘_¨gs
.
∑ssw‹ddige°
 = 
NULL
;

1450 
c⁄√˘_¨gs
.
∑ssw‹ddige°
 = 
	`mÆloc
(16);

1451 
	`mem˝y
(
c⁄√˘_¨gs
.
∑ssw‹ddige°
,passworddigest,16);

1454  
	`fs_c⁄√˘
(1,
bödho°«me
,
ma°îho°«me
,
ma°îp‹äame
,
mëa
,
öfo
,
subfﬁdî
,
∑ssw‹ddige°
,
Êags
,
roŸuid
,
roŸgid
,
m≠Æluid
,
m≠Ælgid
);

1455 
	}
}

1458 
	$fs_öô_thªads
(
uöt32_t
 
ªåõs
) {

1459 
±hªad_©å_t
 
th©å
;

1460 
maxªåõs
 = 
ªåõs
;

1461 
·îm
 = 0;

1462 
	`±hªad_muãx_öô
(&
ª˛ock
,
NULL
);

1463 
	`±hªad_muãx_öô
(&
fdlock
,
NULL
);

1464 
	`±hªad_muãx_öô
(&
aÊock
,
NULL
);

1465 
	`±hªad_©å_öô
(&
th©å
);

1466 
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000);

1467 
	`±hªad_¸óã
(&
Ωthid
,&
th©å
,
fs_ª˚ive_thªad
,
NULL
);

1468 
	`±hªad_¸óã
(&
≈thid
,&
th©å
,
fs_n›_thªad
,
NULL
);

1469 
	`±hªad_©å_de°roy
(&
th©å
);

1470 
	}
}

1472 
	$fs_ãrm
() {

1473 
thªc
 *
å
,*
ån
;

1474 
acquúed_fûe
 *
af
,*
a‚
;

1476 
	`±hªad_muãx_lock
(&
fdlock
);

1477 
·îm
 = 1;

1478 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1479 
	`±hªad_joö
(
≈thid
,
NULL
);

1480 
	`±hªad_joö
(
Ωthid
,
NULL
);

1481 
	`±hªad_muãx_de°roy
(&
aÊock
);

1482 
	`±hªad_muãx_de°roy
(&
fdlock
);

1483 
	`±hªad_muãx_de°roy
(&
ª˛ock
);

1484 
å
 = 
thªchód
 ;Å∏;Å∏
ån
) {

1485 
ån
 = 
å
->
√xt
;

1486 i‡(
å
->
obuff
) {

1487 #ifde‡
MMAP_ALLOC


1488 
	`munm≠
((*)(
å
->
obuff
),å->
obuffsize
);

1490 
	`‰ì
(
å
->
obuff
);

1493 i‡(
å
->
ibuff
) {

1494 #ifde‡
MMAP_ALLOC


1495 
	`munm≠
((*)(
å
->
ibuff
),å->
ibuffsize
);

1497 
	`‰ì
(
å
->
ibuff
);

1500 
	`±hªad_muãx_de°roy
(&(
å
->
muãx
));

1501 
	`±hªad_c⁄d_de°roy
(&(
å
->
c⁄d
));

1502 
	`‰ì
(
å
);

1504 
af
 = 
afhód
 ;á‡;á‡
a‚
) {

1505 
a‚
 = 
af
->
√xt
;

1506 
	`‰ì
(
af
);

1508 i‡(
fd
>=0) {

1509 
	`t˝˛o£
(
fd
);

1511 i‡(
c⁄√˘_¨gs
.
bödho°«me
) {

1512 
	`‰ì
(
c⁄√˘_¨gs
.
bödho°«me
);

1514 
	`‰ì
(
c⁄√˘_¨gs
.
ma°îho°«me
);

1515 
	`‰ì
(
c⁄√˘_¨gs
.
ma°îp‹äame
);

1516 
	`‰ì
(
c⁄√˘_¨gs
.
öfo
);

1517 
	`‰ì
(
c⁄√˘_¨gs
.
subfﬁdî
);

1518 i‡(
c⁄√˘_¨gs
.
∑ssw‹ddige°
) {

1519 
	`‰ì
(
c⁄√˘_¨gs
.
∑ssw‹ddige°
);

1521 
	}
}

1523 
	$fs_°©fs
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
åash•a˚
,uöt64_à*
ª£rved•a˚
,
uöt32_t
 *
öodes
) {

1524 
uöt8_t
 *
w±r
;

1525 c⁄° 
uöt8_t
 *
Ωå
;

1526 
uöt32_t
 
i
;

1527 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1528 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_STATFS
,0);

1529 i‡(
w±r
==
NULL
) {

1530 *
tŸÆ•a˚
 = 0;

1531 *
avaû•a˚
 = 0;

1532 *
åash•a˚
 = 0;

1533 *
ª£rved•a˚
 = 0;

1534 *
öodes
 = 0;

1537 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_STATFS
,&
i
);

1538 i‡(
Ωå
==
NULL
 || 
i
!=36) {

1539 *
tŸÆ•a˚
 = 0;

1540 *
avaû•a˚
 = 0;

1541 *
åash•a˚
 = 0;

1542 *
ª£rved•a˚
 = 0;

1543 *
öodes
 = 0;

1545 *
tŸÆ•a˚
 = 
	`gë64bô
(&
Ωå
);

1546 *
avaû•a˚
 = 
	`gë64bô
(&
Ωå
);

1547 *
åash•a˚
 = 
	`gë64bô
(&
Ωå
);

1548 *
ª£rved•a˚
 = 
	`gë64bô
(&
Ωå
);

1549 *
öodes
 = 
	`gë32bô
(&
Ωå
);

1551 
	}
}

1553 
uöt8_t
 
	$fs_ac˚ss
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,
uöt8_t
 
modemask
) {

1554 
uöt8_t
 *
w±r
;

1555 c⁄° 
uöt8_t
 *
Ωå
;

1556 
uöt32_t
 
i
;

1557 
uöt8_t
 
ªt
;

1558 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1559 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_ACCESS
,13);

1560 i‡(
w±r
==
NULL
) {

1561  
ERROR_IO
;

1563 
	`put32bô
(&
w±r
,
öode
);

1564 
	`put32bô
(&
w±r
,
uid
);

1565 
	`put32bô
(&
w±r
,
gid
);

1566 
	`put8bô
(&
w±r
,
modemask
);

1567 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_ACCESS
,&
i
);

1568 i‡(!
Ωå
 || 
i
!=1) {

1569 
ªt
 = 
ERROR_IO
;

1571 
ªt
 = 
Ωå
[0];

1573  
ªt
;

1574 
	}
}

1576 
uöt8_t
 
	$fs_lookup
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1577 
uöt8_t
 *
w±r
;

1578 c⁄° 
uöt8_t
 *
Ωå
;

1579 
uöt32_t
 
i
;

1580 
uöt32_t
 
t32
;

1581 
uöt8_t
 
ªt
;

1582 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1583 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_LOOKUP
,13+
∆íg
);

1584 i‡(
w±r
==
NULL
) {

1585  
ERROR_IO
;

1587 
	`put32bô
(&
w±r
,
∑ª¡
);

1588 
	`put8bô
(&
w±r
,
∆íg
);

1589 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1590 
w±r
+=
∆íg
;

1591 
	`put32bô
(&
w±r
,
uid
);

1592 
	`put32bô
(&
w±r
,
gid
);

1593 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_LOOKUP
,&
i
);

1594 i‡(
Ωå
==
NULL
) {

1595 
ªt
 = 
ERROR_IO
;

1596 } i‡(
i
==1) {

1597 
ªt
 = 
Ωå
[0];

1598 } i‡(
i
!=39) {

1599 
	`±hªad_muãx_lock
(&
fdlock
);

1600 
disc⁄√˘
 = 1;

1601 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1602 
ªt
 = 
ERROR_IO
;

1604 
t32
 = 
	`gë32bô
(&
Ωå
);

1605 *
öode
 = 
t32
;

1606 
	`mem˝y
(
©å
,
Ωå
,35);

1607 
ªt
 = 
STATUS_OK
;

1609  
ªt
;

1610 
	}
}

1612 
uöt8_t
 
	$fs_gë©å
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,
uöt8_t
 
©å
[35]) {

1613 
uöt8_t
 *
w±r
;

1614 c⁄° 
uöt8_t
 *
Ωå
;

1615 
uöt32_t
 
i
;

1616 
uöt8_t
 
ªt
;

1617 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1618 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETATTR
,12);

1619 i‡(
w±r
==
NULL
) {

1620  
ERROR_IO
;

1622 
	`put32bô
(&
w±r
,
öode
);

1623 
	`put32bô
(&
w±r
,
uid
);

1624 
	`put32bô
(&
w±r
,
gid
);

1625 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETATTR
,&
i
);

1626 i‡(
Ωå
==
NULL
) {

1627 
ªt
 = 
ERROR_IO
;

1628 } i‡(
i
==1) {

1629 
ªt
 = 
Ωå
[0];

1630 } i‡(
i
!=35) {

1631 
	`±hªad_muãx_lock
(&
fdlock
);

1632 
disc⁄√˘
 = 1;

1633 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1634 
ªt
 = 
ERROR_IO
;

1636 
	`mem˝y
(
©å
,
Ωå
,35);

1637 
ªt
 = 
STATUS_OK
;

1639  
ªt
;

1640 
	}
}

1642 
uöt8_t
 
	$fs_£èâr
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,
uöt8_t
 
£tmask
,
uöt16_t
 
©åmode
,uöt32_à
©åuid
,uöt32_à
©ågid
,uöt32_à
©å©ime
,uöt32_à
©åmtime
,uöt8_à
sugid˛órmode
,uöt8_à
©å
[35]) {

1643 
uöt8_t
 *
w±r
;

1644 c⁄° 
uöt8_t
 *
Ωå
;

1645 
uöt32_t
 
i
;

1646 
uöt8_t
 
ªt
;

1647 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1648 i‡(
ma°îvîsi⁄
<0x010619) {

1649 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_SETATTR
,31);

1651 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_SETATTR
,32);

1653 i‡(
w±r
==
NULL
) {

1654  
ERROR_IO
;

1656 
	`put32bô
(&
w±r
,
öode
);

1657 
	`put32bô
(&
w±r
,
uid
);

1658 
	`put32bô
(&
w±r
,
gid
);

1659 
	`put8bô
(&
w±r
,
£tmask
);

1660 
	`put16bô
(&
w±r
,
©åmode
);

1661 
	`put32bô
(&
w±r
,
©åuid
);

1662 
	`put32bô
(&
w±r
,
©ågid
);

1663 
	`put32bô
(&
w±r
,
©å©ime
);

1664 
	`put32bô
(&
w±r
,
©åmtime
);

1665 i‡(
ma°îvîsi⁄
>=0x010619) {

1666 
	`put8bô
(&
w±r
,
sugid˛órmode
);

1668 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_SETATTR
,&
i
);

1669 i‡(
Ωå
==
NULL
) {

1670 
ªt
 = 
ERROR_IO
;

1671 } i‡(
i
==1) {

1672 
ªt
 = 
Ωå
[0];

1673 } i‡(
i
!=35) {

1674 
	`±hªad_muãx_lock
(&
fdlock
);

1675 
disc⁄√˘
 = 1;

1676 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1677 
ªt
 = 
ERROR_IO
;

1679 
	`mem˝y
(
©å
,
Ωå
,35);

1680 
ªt
 = 
STATUS_OK
;

1682  
ªt
;

1683 
	}
}

1685 
uöt8_t
 
	$fs_åunˇã
(
uöt32_t
 
öode
,
uöt8_t
 
›íed
,uöt32_à
uid
,uöt32_à
gid
,
uöt64_t
 
©åÀngth
,uöt8_à
©å
[35]) {

1686 
uöt8_t
 *
w±r
;

1687 c⁄° 
uöt8_t
 *
Ωå
;

1688 
uöt32_t
 
i
;

1689 
uöt8_t
 
ªt
;

1690 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1691 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_TRUNCATE
,21);

1692 i‡(
w±r
==
NULL
) {

1693  
ERROR_IO
;

1695 
	`put32bô
(&
w±r
,
öode
);

1696 
	`put8bô
(&
w±r
,
›íed
);

1697 
	`put32bô
(&
w±r
,
uid
);

1698 
	`put32bô
(&
w±r
,
gid
);

1699 
	`put64bô
(&
w±r
,
©åÀngth
);

1700 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_TRUNCATE
,&
i
);

1701 i‡(
Ωå
==
NULL
) {

1702 
ªt
 = 
ERROR_IO
;

1703 } i‡(
i
==1) {

1704 
ªt
 = 
Ωå
[0];

1705 } i‡(
i
!=35) {

1706 
	`±hªad_muãx_lock
(&
fdlock
);

1707 
disc⁄√˘
 = 1;

1708 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1709 
ªt
 = 
ERROR_IO
;

1711 
	`mem˝y
(
©å
,
Ωå
,35);

1712 
ªt
 = 
STATUS_OK
;

1714  
ªt
;

1715 
	}
}

1717 
uöt8_t
 
	$fs_ªadlök
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 **
∑th
) {

1718 
uöt8_t
 *
w±r
;

1719 c⁄° 
uöt8_t
 *
Ωå
;

1720 
uöt32_t
 
i
;

1721 
uöt32_t
 
∂íg
;

1722 
uöt8_t
 
ªt
;

1723 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1724 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_READLINK
,4);

1725 i‡(
w±r
==
NULL
) {

1726  
ERROR_IO
;

1728 
	`put32bô
(&
w±r
,
öode
);

1729 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_READLINK
,&
i
);

1730 i‡(
Ωå
==
NULL
) {

1731 
ªt
 = 
ERROR_IO
;

1732 } i‡(
i
==1) {

1733 
ªt
 = 
Ωå
[0];

1734 } i‡(
i
<4) {

1735 
	`±hªad_muãx_lock
(&
fdlock
);

1736 
disc⁄√˘
 = 1;

1737 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1738 
ªt
 = 
ERROR_IO
;

1740 
∂íg
 = 
	`gë32bô
(&
Ωå
);

1741 i‡(
i
!=4+
∂íg
 ||ÖÀng==0 || 
Ωå
[pleng-1]!=0) {

1742 
	`±hªad_muãx_lock
(&
fdlock
);

1743 
disc⁄√˘
 = 1;

1744 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1745 
ªt
 = 
ERROR_IO
;

1747 *
∑th
 = 
Ωå
;

1750 
ªt
 = 
STATUS_OK
;

1753  
ªt
;

1754 
	}
}

1756 
uöt8_t
 
	$fs_symlök
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1757 
uöt8_t
 *
w±r
;

1758 c⁄° 
uöt8_t
 *
Ωå
;

1759 
uöt32_t
 
i
;

1760 
uöt32_t
 
t32
;

1761 
uöt8_t
 
ªt
;

1762 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1763 
t32
 = 
	`°æí
((c⁄° *)
∑th
)+1;

1764 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_SYMLINK
,
t32
+
∆íg
+17);

1765 i‡(
w±r
==
NULL
) {

1766  
ERROR_IO
;

1768 
	`put32bô
(&
w±r
,
∑ª¡
);

1769 
	`put8bô
(&
w±r
,
∆íg
);

1770 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1771 
w±r
+=
∆íg
;

1772 
	`put32bô
(&
w±r
,
t32
);

1773 
	`mem˝y
(
w±r
,
∑th
,
t32
);

1774 
w±r
+=
t32
;

1775 
	`put32bô
(&
w±r
,
uid
);

1776 
	`put32bô
(&
w±r
,
gid
);

1777 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_SYMLINK
,&
i
);

1778 i‡(
Ωå
==
NULL
) {

1779 
ªt
 = 
ERROR_IO
;

1780 } i‡(
i
==1) {

1781 
ªt
 = 
Ωå
[0];

1782 } i‡(
i
!=39) {

1783 
	`±hªad_muãx_lock
(&
fdlock
);

1784 
disc⁄√˘
 = 1;

1785 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1786 
ªt
 = 
ERROR_IO
;

1788 
t32
 = 
	`gë32bô
(&
Ωå
);

1789 *
öode
 = 
t32
;

1790 
	`mem˝y
(
©å
,
Ωå
,35);

1791 
ªt
 = 
STATUS_OK
;

1793  
ªt
;

1794 
	}
}

1796 
uöt8_t
 
	$fs_mknod
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt8_à
ty≥
,
uöt16_t
 
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
rdev
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1797 
uöt8_t
 *
w±r
;

1798 c⁄° 
uöt8_t
 *
Ωå
;

1799 
uöt32_t
 
i
;

1800 
uöt32_t
 
t32
;

1801 
uöt8_t
 
ªt
;

1802 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1803 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_MKNOD
,20+
∆íg
);

1804 i‡(
w±r
==
NULL
) {

1805  
ERROR_IO
;

1807 
	`put32bô
(&
w±r
,
∑ª¡
);

1808 
	`put8bô
(&
w±r
,
∆íg
);

1809 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1810 
w±r
+=
∆íg
;

1811 
	`put8bô
(&
w±r
,
ty≥
);

1812 
	`put16bô
(&
w±r
,
mode
);

1813 
	`put32bô
(&
w±r
,
uid
);

1814 
	`put32bô
(&
w±r
,
gid
);

1815 
	`put32bô
(&
w±r
,
rdev
);

1816 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_MKNOD
,&
i
);

1817 i‡(
Ωå
==
NULL
) {

1818 
ªt
 = 
ERROR_IO
;

1819 } i‡(
i
==1) {

1820 
ªt
 = 
Ωå
[0];

1821 } i‡(
i
!=39) {

1822 
	`±hªad_muãx_lock
(&
fdlock
);

1823 
disc⁄√˘
 = 1;

1824 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1825 
ªt
 = 
ERROR_IO
;

1827 
t32
 = 
	`gë32bô
(&
Ωå
);

1828 *
öode
 = 
t32
;

1829 
	`mem˝y
(
©å
,
Ωå
,35);

1830 
ªt
 = 
STATUS_OK
;

1832  
ªt
;

1833 
	}
}

1835 
uöt8_t
 
	$fs_mkdú
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,
uöt16_t
 
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
c›ysgid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1836 
uöt8_t
 *
w±r
;

1837 c⁄° 
uöt8_t
 *
Ωå
;

1838 
uöt32_t
 
i
;

1839 
uöt32_t
 
t32
;

1840 
uöt8_t
 
ªt
;

1841 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1842 i‡(
ma°îvîsi⁄
<0x010619) {

1843 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_MKDIR
,15+
∆íg
);

1845 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_MKDIR
,16+
∆íg
);

1847 i‡(
w±r
==
NULL
) {

1848  
ERROR_IO
;

1850 
	`put32bô
(&
w±r
,
∑ª¡
);

1851 
	`put8bô
(&
w±r
,
∆íg
);

1852 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1853 
w±r
+=
∆íg
;

1854 
	`put16bô
(&
w±r
,
mode
);

1855 
	`put32bô
(&
w±r
,
uid
);

1856 
	`put32bô
(&
w±r
,
gid
);

1857 i‡(
ma°îvîsi⁄
>=0x010619) {

1858 
	`put8bô
(&
w±r
,
c›ysgid
);

1860 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_MKDIR
,&
i
);

1861 i‡(
Ωå
==
NULL
) {

1862 
ªt
 = 
ERROR_IO
;

1863 } i‡(
i
==1) {

1864 
ªt
 = 
Ωå
[0];

1865 } i‡(
i
!=39) {

1866 
	`±hªad_muãx_lock
(&
fdlock
);

1867 
disc⁄√˘
 = 1;

1868 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1869 
ªt
 = 
ERROR_IO
;

1871 
t32
 = 
	`gë32bô
(&
Ωå
);

1872 *
öode
 = 
t32
;

1873 
	`mem˝y
(
©å
,
Ωå
,35);

1874 
ªt
 = 
STATUS_OK
;

1876  
ªt
;

1877 
	}
}

1879 
uöt8_t
 
	$fs_u∆ök
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
) {

1880 
uöt8_t
 *
w±r
;

1881 c⁄° 
uöt8_t
 *
Ωå
;

1882 
uöt32_t
 
i
;

1883 
uöt8_t
 
ªt
;

1884 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1885 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_UNLINK
,13+
∆íg
);

1886 i‡(
w±r
==
NULL
) {

1887  
ERROR_IO
;

1889 
	`put32bô
(&
w±r
,
∑ª¡
);

1890 
	`put8bô
(&
w±r
,
∆íg
);

1891 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1892 
w±r
+=
∆íg
;

1893 
	`put32bô
(&
w±r
,
uid
);

1894 
	`put32bô
(&
w±r
,
gid
);

1895 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_UNLINK
,&
i
);

1896 i‡(
Ωå
==
NULL
) {

1897 
ªt
 = 
ERROR_IO
;

1898 } i‡(
i
==1) {

1899 
ªt
 = 
Ωå
[0];

1901 
	`±hªad_muãx_lock
(&
fdlock
);

1902 
disc⁄√˘
 = 1;

1903 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1904 
ªt
 = 
ERROR_IO
;

1906  
ªt
;

1907 
	}
}

1909 
uöt8_t
 
	$fs_rmdú
(
uöt32_t
 
∑ª¡
,
uöt8_t
 
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
) {

1910 
uöt8_t
 *
w±r
;

1911 c⁄° 
uöt8_t
 *
Ωå
;

1912 
uöt32_t
 
i
;

1913 
uöt8_t
 
ªt
;

1914 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1915 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_RMDIR
,13+
∆íg
);

1916 i‡(
w±r
==
NULL
) {

1917  
ERROR_IO
;

1919 
	`put32bô
(&
w±r
,
∑ª¡
);

1920 
	`put8bô
(&
w±r
,
∆íg
);

1921 
	`mem˝y
(
w±r
,
«me
,
∆íg
);

1922 
w±r
+=
∆íg
;

1923 
	`put32bô
(&
w±r
,
uid
);

1924 
	`put32bô
(&
w±r
,
gid
);

1925 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_RMDIR
,&
i
);

1926 i‡(
Ωå
==
NULL
) {

1927 
ªt
 = 
ERROR_IO
;

1928 } i‡(
i
==1) {

1929 
ªt
 = 
Ωå
[0];

1931 
	`±hªad_muãx_lock
(&
fdlock
);

1932 
disc⁄√˘
 = 1;

1933 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1934 
ªt
 = 
ERROR_IO
;

1936  
ªt
;

1937 
	}
}

1939 
uöt8_t
 
	$fs_ª«me
(
uöt32_t
 
∑ª¡_§c
,
uöt8_t
 
∆íg_§c
,c⁄° uöt8_à*
«me_§c
,uöt32_à
∑ª¡_d°
,uöt8_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1940 
uöt8_t
 *
w±r
;

1941 c⁄° 
uöt8_t
 *
Ωå
;

1942 
uöt32_t
 
i
;

1943 
uöt32_t
 
t32
;

1944 
uöt8_t
 
ªt
;

1945 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1946 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_RENAME
,18+
∆íg_§c
+
∆íg_d°
);

1947 i‡(
w±r
==
NULL
) {

1948  
ERROR_IO
;

1950 
	`put32bô
(&
w±r
,
∑ª¡_§c
);

1951 
	`put8bô
(&
w±r
,
∆íg_§c
);

1952 
	`mem˝y
(
w±r
,
«me_§c
,
∆íg_§c
);

1953 
w±r
+=
∆íg_§c
;

1954 
	`put32bô
(&
w±r
,
∑ª¡_d°
);

1955 
	`put8bô
(&
w±r
,
∆íg_d°
);

1956 
	`mem˝y
(
w±r
,
«me_d°
,
∆íg_d°
);

1957 
w±r
+=
∆íg_d°
;

1958 
	`put32bô
(&
w±r
,
uid
);

1959 
	`put32bô
(&
w±r
,
gid
);

1960 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_RENAME
,&
i
);

1961 i‡(
Ωå
==
NULL
) {

1962 
ªt
 = 
ERROR_IO
;

1963 } i‡(
i
==1) {

1964 
ªt
 = 
Ωå
[0];

1965 *
öode
 = 0;

1966 
	`mem£t
(
©å
,0,35);

1967 } i‡(
i
!=39) {

1968 
	`±hªad_muãx_lock
(&
fdlock
);

1969 
disc⁄√˘
 = 1;

1970 
	`±hªad_muãx_u∆ock
(&
fdlock
);

1971 
ªt
 = 
ERROR_IO
;

1973 
t32
 = 
	`gë32bô
(&
Ωå
);

1974 *
öode
 = 
t32
;

1975 
	`mem˝y
(
©å
,
Ωå
,35);

1976 
ªt
 = 
STATUS_OK
;

1978  
ªt
;

1979 
	}
}

1981 
uöt8_t
 
	$fs_lök
(
uöt32_t
 
öode_§c
,uöt32_à
∑ª¡_d°
,
uöt8_t
 
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]) {

1982 
uöt8_t
 *
w±r
;

1983 c⁄° 
uöt8_t
 *
Ωå
;

1984 
uöt32_t
 
i
;

1985 
uöt32_t
 
t32
;

1986 
uöt8_t
 
ªt
;

1987 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

1988 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_LINK
,17+
∆íg_d°
);

1989 i‡(
w±r
==
NULL
) {

1990  
ERROR_IO
;

1992 
	`put32bô
(&
w±r
,
öode_§c
);

1993 
	`put32bô
(&
w±r
,
∑ª¡_d°
);

1994 
	`put8bô
(&
w±r
,
∆íg_d°
);

1995 
	`mem˝y
(
w±r
,
«me_d°
,
∆íg_d°
);

1996 
w±r
+=
∆íg_d°
;

1997 
	`put32bô
(&
w±r
,
uid
);

1998 
	`put32bô
(&
w±r
,
gid
);

1999 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_LINK
,&
i
);

2000 i‡(
Ωå
==
NULL
) {

2001 
ªt
 = 
ERROR_IO
;

2002 } i‡(
i
==1) {

2003 
ªt
 = 
Ωå
[0];

2004 } i‡(
i
!=39) {

2005 
	`±hªad_muãx_lock
(&
fdlock
);

2006 
disc⁄√˘
 = 1;

2007 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2008 
ªt
 = 
ERROR_IO
;

2010 
t32
 = 
	`gë32bô
(&
Ωå
);

2011 *
öode
 = 
t32
;

2012 
	`mem˝y
(
©å
,
Ωå
,35);

2013 
ªt
 = 
STATUS_OK
;

2015  
ªt
;

2016 
	}
}

2018 
uöt8_t
 
	$fs_gëdú
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,c⁄° 
uöt8_t
 **
dbuff
,uöt32_à*
dbuffsize
) {

2019 
uöt8_t
 *
w±r
;

2020 c⁄° 
uöt8_t
 *
Ωå
;

2021 
uöt32_t
 
i
;

2022 
uöt8_t
 
ªt
;

2023 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2024 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETDIR
,12);

2025 i‡(
w±r
==
NULL
) {

2026  
ERROR_IO
;

2028 
	`put32bô
(&
w±r
,
öode
);

2029 
	`put32bô
(&
w±r
,
uid
);

2030 
	`put32bô
(&
w±r
,
gid
);

2031 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETDIR
,&
i
);

2032 i‡(
Ωå
==
NULL
) {

2033 
ªt
 = 
ERROR_IO
;

2034 } i‡(
i
==1) {

2035 
ªt
 = 
Ωå
[0];

2037 *
dbuff
 = 
Ωå
;

2038 *
dbuffsize
 = 
i
;

2039 
ªt
 = 
STATUS_OK
;

2041  
ªt
;

2042 
	}
}

2044 
uöt8_t
 
	$fs_gëdú_∂us
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,
uöt8_t
 
addtoˇche
,c⁄° uöt8_à**
dbuff
,uöt32_à*
dbuffsize
) {

2045 
uöt8_t
 *
w±r
;

2046 c⁄° 
uöt8_t
 *
Ωå
;

2047 
uöt32_t
 
i
;

2048 
uöt8_t
 
ªt
;

2049 
uöt8_t
 
Êags
;

2050 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2051 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETDIR
,13);

2052 i‡(
w±r
==
NULL
) {

2053  
ERROR_IO
;

2055 
	`put32bô
(&
w±r
,
öode
);

2056 
	`put32bô
(&
w±r
,
uid
);

2057 
	`put32bô
(&
w±r
,
gid
);

2058 
Êags
 = 
GETDIR_FLAG_WITHATTR
;

2059 i‡(
addtoˇche
) {

2060 
Êags
 |
GETDIR_FLAG_ADDTOCACHE
;

2062 
	`put8bô
(&
w±r
,
Êags
);

2063 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETDIR
,&
i
);

2064 i‡(
Ωå
==
NULL
) {

2065 
ªt
 = 
ERROR_IO
;

2066 } i‡(
i
==1) {

2067 
ªt
 = 
Ωå
[0];

2069 *
dbuff
 = 
Ωå
;

2070 *
dbuffsize
 = 
i
;

2071 
ªt
 = 
STATUS_OK
;

2073  
ªt
;

2074 
	}
}

2127 
uöt8_t
 
	$fs_›ícheck
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,
uöt8_t
 
Êags
,uöt8_à
©å
[35]) {

2128 
uöt8_t
 *
w±r
;

2129 c⁄° 
uöt8_t
 *
Ωå
;

2130 
uöt32_t
 
i
;

2131 
uöt8_t
 
ªt
;

2132 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2133 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_OPEN
,13);

2134 i‡(
w±r
==
NULL
) {

2135  
ERROR_IO
;

2137 
	`put32bô
(&
w±r
,
öode
);

2138 
	`put32bô
(&
w±r
,
uid
);

2139 
	`put32bô
(&
w±r
,
gid
);

2140 
	`put8bô
(&
w±r
,
Êags
);

2141 
	`fs_öc_a˙t
(
öode
);

2142 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_OPEN
,&
i
);

2143 i‡(
Ωå
==
NULL
) {

2144 
ªt
 = 
ERROR_IO
;

2145 } i‡(
i
==1) {

2146 i‡(
©å
) {

2147 
	`mem£t
(
©å
,0,35);

2149 
ªt
 = 
Ωå
[0];

2150 } i‡(
i
==35) {

2151 i‡(
©å
) {

2152 
	`mem˝y
(
©å
,
Ωå
,35);

2154 
ªt
 = 
STATUS_OK
;

2156 
	`±hªad_muãx_lock
(&
fdlock
);

2157 
disc⁄√˘
 = 1;

2158 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2159 
ªt
 = 
ERROR_IO
;

2161 i‡(
ªt
) {

2162 
	`fs_dec_a˙t
(
öode
);

2164  
ªt
;

2165 
	}
}

2167 
	$fs_ªÀa£
(
uöt32_t
 
öode
) {

2168 
	`fs_dec_a˙t
(
öode
);

2169 
	}
}

2197 
uöt8_t
 
	$fs_ªadchunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
Àngth
,uöt64_à*
chunkid
,uöt32_à*
vîsi⁄
,c⁄° 
uöt8_t
 **
csd©a
,uöt32_à*
csd©asize
) {

2198 
uöt8_t
 *
w±r
;

2199 c⁄° 
uöt8_t
 *
Ωå
;

2200 
uöt32_t
 
i
;

2201 
uöt8_t
 
ªt
;

2202 
uöt64_t
 
t64
;

2203 
uöt32_t
 
t32
;

2204 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2205 *
csd©a
=
NULL
;

2206 *
csd©asize
=0;

2207 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_READ_CHUNK
,8);

2208 i‡(
w±r
==
NULL
) {

2209  
ERROR_IO
;

2211 
	`put32bô
(&
w±r
,
öode
);

2212 
	`put32bô
(&
w±r
,
ödx
);

2213 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_READ_CHUNK
,&
i
);

2214 i‡(
Ωå
==
NULL
) {

2215 
ªt
 = 
ERROR_IO
;

2216 } i‡(
i
==1) {

2217 
ªt
 = 
Ωå
[0];

2218 } i‡(
i
<20 || ((i-20)%6)!=0) {

2219 
	`±hªad_muãx_lock
(&
fdlock
);

2220 
disc⁄√˘
 = 1;

2221 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2222 
ªt
 = 
ERROR_IO
;

2224 
t64
 = 
	`gë64bô
(&
Ωå
);

2225 *
Àngth
 = 
t64
;

2226 
t64
 = 
	`gë64bô
(&
Ωå
);

2227 *
chunkid
 = 
t64
;

2228 
t32
 = 
	`gë32bô
(&
Ωå
);

2229 *
vîsi⁄
 = 
t32
;

2230 i‡(
i
>20) {

2231 *
csd©a
 = 
Ωå
;

2232 *
csd©asize
 = 
i
-20;

2234 
ªt
 = 
STATUS_OK
;

2236  
ªt
;

2237 
	}
}

2239 
uöt8_t
 
	$fs_wrôechunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
Àngth
,uöt64_à*
chunkid
,uöt32_à*
vîsi⁄
,c⁄° 
uöt8_t
 **
csd©a
,uöt32_à*
csd©asize
) {

2240 
uöt8_t
 *
w±r
;

2241 c⁄° 
uöt8_t
 *
Ωå
;

2242 
uöt32_t
 
i
;

2243 
uöt8_t
 
ªt
;

2244 
uöt64_t
 
t64
;

2245 
uöt32_t
 
t32
;

2246 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2247 *
csd©a
=
NULL
;

2248 *
csd©asize
=0;

2249 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_WRITE_CHUNK
,8);

2250 i‡(
w±r
==
NULL
) {

2251  
ERROR_IO
;

2253 
	`put32bô
(&
w±r
,
öode
);

2254 
	`put32bô
(&
w±r
,
ödx
);

2255 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_WRITE_CHUNK
,&
i
);

2256 i‡(
Ωå
==
NULL
) {

2257 
ªt
 = 
ERROR_IO
;

2258 } i‡(
i
==1) {

2259 
ªt
 = 
Ωå
[0];

2260 } i‡(
i
<20 || ((i-20)%6)!=0) {

2261 
	`±hªad_muãx_lock
(&
fdlock
);

2262 
disc⁄√˘
 = 1;

2263 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2264 
ªt
 = 
ERROR_IO
;

2266 
t64
 = 
	`gë64bô
(&
Ωå
);

2267 *
Àngth
 = 
t64
;

2268 
t64
 = 
	`gë64bô
(&
Ωå
);

2269 *
chunkid
 = 
t64
;

2270 
t32
 = 
	`gë32bô
(&
Ωå
);

2271 *
vîsi⁄
 = 
t32
;

2272 i‡(
i
>20) {

2273 *
csd©a
 = 
Ωå
;

2274 *
csd©asize
 = 
i
-20;

2276 
ªt
 = 
STATUS_OK
;

2278  
ªt
;

2279 
	}
}

2281 
uöt8_t
 
	$fs_wrôìnd
(
uöt64_t
 
chunkid
, 
uöt32_t
 
öode
, uöt64_à
Àngth
) {

2282 
uöt8_t
 *
w±r
;

2283 c⁄° 
uöt8_t
 *
Ωå
;

2284 
uöt32_t
 
i
;

2285 
uöt8_t
 
ªt
;

2286 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2287 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_WRITE_CHUNK_END
,20);

2288 i‡(
w±r
==
NULL
) {

2289  
ERROR_IO
;

2291 
	`put64bô
(&
w±r
,
chunkid
);

2292 
	`put32bô
(&
w±r
,
öode
);

2293 
	`put64bô
(&
w±r
,
Àngth
);

2294 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_WRITE_CHUNK_END
,&
i
);

2295 i‡(
Ωå
==
NULL
) {

2296 
ªt
 = 
ERROR_IO
;

2297 } i‡(
i
==1) {

2298 
ªt
 = 
Ωå
[0];

2300 
	`±hªad_muãx_lock
(&
fdlock
);

2301 
disc⁄√˘
 = 1;

2302 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2303 
ªt
 = 
ERROR_IO
;

2305  
ªt
;

2306 
	}
}

2312 
uöt8_t
 
	$fs_gëª£rved
(c⁄° 
uöt8_t
 **
dbuff
,
uöt32_t
 *
dbuffsize
) {

2313 
uöt8_t
 *
w±r
;

2314 c⁄° 
uöt8_t
 *
Ωå
;

2315 
uöt32_t
 
i
;

2316 
uöt8_t
 
ªt
;

2317 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2318 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETRESERVED
,0);

2319 i‡(
w±r
==
NULL
) {

2320  
ERROR_IO
;

2322 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETRESERVED
,&
i
);

2323 i‡(
Ωå
==
NULL
) {

2324 
ªt
 = 
ERROR_IO
;

2325 } i‡(
i
==1) {

2326 
ªt
 = 
Ωå
[0];

2328 *
dbuff
 = 
Ωå
;

2329 *
dbuffsize
 = 
i
;

2330 
ªt
 = 
STATUS_OK
;

2332  
ªt
;

2333 
	}
}

2335 
uöt8_t
 
	$fs_gëåash
(c⁄° 
uöt8_t
 **
dbuff
,
uöt32_t
 *
dbuffsize
) {

2336 
uöt8_t
 *
w±r
;

2337 c⁄° 
uöt8_t
 *
Ωå
;

2338 
uöt32_t
 
i
;

2339 
uöt8_t
 
ªt
;

2340 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2341 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETTRASH
,0);

2342 i‡(
w±r
==
NULL
) {

2343  
ERROR_IO
;

2345 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETTRASH
,&
i
);

2346 i‡(
Ωå
==
NULL
) {

2347 
ªt
 = 
ERROR_IO
;

2348 } i‡(
i
==1) {

2349 
ªt
 = 
Ωå
[0];

2351 *
dbuff
 = 
Ωå
;

2352 *
dbuffsize
 = 
i
;

2353 
ªt
 = 
STATUS_OK
;

2355  
ªt
;

2356 
	}
}

2358 
uöt8_t
 
	$fs_gëdëached©å
(
uöt32_t
 
öode
,
uöt8_t
 
©å
[35]) {

2359 
uöt8_t
 *
w±r
;

2360 c⁄° 
uöt8_t
 *
Ωå
;

2361 
uöt32_t
 
i
;

2362 
uöt8_t
 
ªt
;

2363 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2364 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETDETACHEDATTR
,4);

2365 i‡(
w±r
==
NULL
) {

2366  
ERROR_IO
;

2368 
	`put32bô
(&
w±r
,
öode
);

2369 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETDETACHEDATTR
,&
i
);

2370 i‡(
Ωå
==
NULL
) {

2371 
ªt
 = 
ERROR_IO
;

2372 } i‡(
i
==1) {

2373 
ªt
 = 
Ωå
[0];

2374 } i‡(
i
!=35) {

2375 
	`±hªad_muãx_lock
(&
fdlock
);

2376 
disc⁄√˘
 = 1;

2377 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2378 
ªt
 = 
ERROR_IO
;

2380 
	`mem˝y
(
©å
,
Ωå
,35);

2381 
ªt
 = 
STATUS_OK
;

2383  
ªt
;

2384 
	}
}

2386 
uöt8_t
 
	$fs_gëåash∑th
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 **
∑th
) {

2387 
uöt8_t
 *
w±r
;

2388 c⁄° 
uöt8_t
 *
Ωå
;

2389 
uöt32_t
 
i
;

2390 
uöt32_t
 
∂íg
;

2391 
uöt8_t
 
ªt
;

2392 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2393 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_GETTRASHPATH
,4);

2394 i‡(
w±r
==
NULL
) {

2395  
ERROR_IO
;

2397 
	`put32bô
(&
w±r
,
öode
);

2398 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_GETTRASHPATH
,&
i
);

2399 i‡(
Ωå
==
NULL
) {

2400 
ªt
 = 
ERROR_IO
;

2401 } i‡(
i
==1) {

2402 
ªt
 = 
Ωå
[0];

2403 } i‡(
i
<4) {

2404 
	`±hªad_muãx_lock
(&
fdlock
);

2405 
disc⁄√˘
 = 1;

2406 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2407 
ªt
 = 
ERROR_IO
;

2409 
∂íg
 = 
	`gë32bô
(&
Ωå
);

2410 i‡(
i
!=4+
∂íg
 ||ÖÀng==0 || 
Ωå
[pleng-1]!=0) {

2411 
	`±hªad_muãx_lock
(&
fdlock
);

2412 
disc⁄√˘
 = 1;

2413 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2414 
ªt
 = 
ERROR_IO
;

2416 *
∑th
 = 
Ωå
;

2417 
ªt
 = 
STATUS_OK
;

2420  
ªt
;

2421 
	}
}

2423 
uöt8_t
 
	$fs_£âøsh∑th
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 *
∑th
) {

2424 
uöt8_t
 *
w±r
;

2425 c⁄° 
uöt8_t
 *
Ωå
;

2426 
uöt32_t
 
i
;

2427 
uöt32_t
 
t32
;

2428 
uöt8_t
 
ªt
;

2429 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2430 
t32
 = 
	`°æí
((c⁄° *)
∑th
)+1;

2431 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_SETTRASHPATH
,
t32
+8);

2432 i‡(
w±r
==
NULL
) {

2433  
ERROR_IO
;

2435 
	`put32bô
(&
w±r
,
öode
);

2436 
	`put32bô
(&
w±r
,
t32
);

2437 
	`mem˝y
(
w±r
,
∑th
,
t32
);

2439 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_SETTRASHPATH
,&
i
);

2440 i‡(
Ωå
==
NULL
) {

2441 
ªt
 = 
ERROR_IO
;

2442 } i‡(
i
==1) {

2443 
ªt
 = 
Ωå
[0];

2445 
	`±hªad_muãx_lock
(&
fdlock
);

2446 
disc⁄√˘
 = 1;

2447 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2448 
ªt
 = 
ERROR_IO
;

2450  
ªt
;

2451 
	}
}

2453 
uöt8_t
 
	$fs_undñ
(
uöt32_t
 
öode
) {

2454 
uöt8_t
 *
w±r
;

2455 c⁄° 
uöt8_t
 *
Ωå
;

2456 
uöt32_t
 
i
;

2457 
uöt8_t
 
ªt
;

2458 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2459 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_UNDEL
,4);

2460 i‡(
w±r
==
NULL
) {

2461  
ERROR_IO
;

2463 
	`put32bô
(&
w±r
,
öode
);

2464 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_UNDEL
,&
i
);

2465 i‡(
Ωå
==
NULL
) {

2466 
ªt
 = 
ERROR_IO
;

2467 } i‡(
i
==1) {

2468 
ªt
 = 
Ωå
[0];

2470 
	`±hªad_muãx_lock
(&
fdlock
);

2471 
disc⁄√˘
 = 1;

2472 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2473 
ªt
 = 
ERROR_IO
;

2475  
ªt
;

2476 
	}
}

2478 
uöt8_t
 
	$fs_purge
(
uöt32_t
 
öode
) {

2479 
uöt8_t
 *
w±r
;

2480 c⁄° 
uöt8_t
 *
Ωå
;

2481 
uöt32_t
 
i
;

2482 
uöt8_t
 
ªt
;

2483 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2484 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
CLTOMA_FUSE_PURGE
,4);

2485 i‡(
w±r
==
NULL
) {

2486  
ERROR_IO
;

2488 
	`put32bô
(&
w±r
,
öode
);

2489 
Ωå
 = 
	`fs_£nd™dª˚ive
(
ªc
,
MATOCL_FUSE_PURGE
,&
i
);

2490 i‡(
Ωå
==
NULL
) {

2491 
ªt
 = 
ERROR_IO
;

2492 } i‡(
i
==1) {

2493 
ªt
 = 
Ωå
[0];

2495 
	`±hªad_muãx_lock
(&
fdlock
);

2496 
disc⁄√˘
 = 1;

2497 
	`±hªad_muãx_u∆ock
(&
fdlock
);

2498 
ªt
 = 
ERROR_IO
;

2500  
ªt
;

2501 
	}
}

2503 
uöt8_t
 
	$fs_cu°om
(
uöt32_t
 
qcmd
,c⁄° 
uöt8_t
 *
quîy
,uöt32_à
quîyÀng
,uöt32_à*
acmd
,uöt8_à*
™swî
,uöt32_à*
™swîÀng
) {

2504 
uöt8_t
 *
w±r
;

2505 c⁄° 
uöt8_t
 *
Ωå
;

2506 
uöt32_t
 
i
;

2507 
uöt8_t
 
ªt
;

2508 
thªc
 *
ªc
 = 
	`fs_gë_my_thªc
();

2509 
w±r
 = 
	`fs_¸óã∑ckë
(
ªc
,
qcmd
,
quîyÀng
);

2510 i‡(
w±r
==
NULL
) {

2511  
ERROR_IO
;

2513 
	`mem˝y
(
w±r
,
quîy
,
quîyÀng
);

2514 
Ωå
 = 
	`fs_£nd™dª˚ive_™y
(
ªc
,
acmd
,&
i
);

2515 i‡(
Ωå
==
NULL
) {

2516 
ªt
 = 
ERROR_IO
;

2518 i‡(*
™swîÀng
<
i
) {

2519 
ªt
 = 
ERROR_EINVAL
;

2521 *
™swîÀng
 = 
i
;

2522 
	`mem˝y
(
™swî
,
Ωå
,
i
);

2523 
ªt
 = 
STATUS_OK
;

2526  
ªt
;

2527 
	}
}

	@mfsmount/mastercomm.h

19 #i‚de‡
_MASTERCOMM_H_


20 
	#_MASTERCOMM_H_


	)

22 
	~<öây≥s.h
>

24 
fs_gëma°îloˇti⁄
(
uöt8_t
 
loc
[14]);

25 
uöt32_t
 
fs_gë§cù
();

27 
fs_nŸify_£ndªmoved
(
uöt32_t
 
˙t
,uöt32_à*
öodes
);

33 
fs_°©fs
(
uöt64_t
 *
tŸÆ•a˚
,uöt64_à*
avaû•a˚
,uöt64_à*
åash•a˚
,uöt64_à*
ª£rved•a˚
,
uöt32_t
 *
öodes
);

34 
uöt8_t
 
fs_ac˚ss
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
modemask
);

35 
uöt8_t
 
fs_lookup
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

36 
uöt8_t
 
fs_gë©å
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
©å
[35]);

37 
uöt8_t
 
fs_£èâr
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
£tmask
,
uöt16_t
 
©åmode
,uöt32_à
©åuid
,uöt32_à
©ågid
,uöt32_à
©å©ime
,uöt32_à
©åmtime
,uöt8_à
sugid˛órmode
,uöt8_à
©å
[35]);

38 
uöt8_t
 
fs_åunˇã
(
uöt32_t
 
öode
,uöt8_à
›íed
,uöt32_à
uid
,uöt32_à
gid
,
uöt64_t
 
©åÀngth
,uöt8_à
©å
[35]);

39 
uöt8_t
 
fs_ªadlök
(
uöt32_t
 
öode
,c⁄° uöt8_à**
∑th
);

40 
uöt8_t
 
fs_symlök
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,c⁄° uöt8_à*
∑th
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

41 
uöt8_t
 
fs_mknod
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,uöt8_à
ty≥
,
uöt16_t
 
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à
rdev
,uöt32_à*
öode
,uöt8_à
©å
[35]);

42 
uöt8_t
 
fs_mkdú
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,
uöt16_t
 
mode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
c›ysgid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

43 
uöt8_t
 
fs_u∆ök
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
);

44 
uöt8_t
 
fs_rmdú
(
uöt32_t
 
∑ª¡
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me
,uöt32_à
uid
,uöt32_à
gid
);

45 
uöt8_t
 
fs_ª«me
(
uöt32_t
 
∑ª¡_§c
,uöt8_à
∆íg_§c
,c⁄° uöt8_à*
«me_§c
,uöt32_à
∑ª¡_d°
,uöt8_à
∆íg
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

46 
uöt8_t
 
fs_lök
(
uöt32_t
 
öode_§c
,uöt32_à
∑ª¡_d°
,uöt8_à
∆íg_d°
,c⁄° uöt8_à*
«me_d°
,uöt32_à
uid
,uöt32_à
gid
,uöt32_à*
öode
,uöt8_à
©å
[35]);

47 
uöt8_t
 
fs_gëdú
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,c⁄° uöt8_à**
dbuff
,uöt32_à*
dbuffsize
);

48 
uöt8_t
 
fs_gëdú_∂us
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
addtoˇche
,c⁄° uöt8_à**
dbuff
,uöt32_à*
dbuffsize
);

52 
uöt8_t
 
fs_›ícheck
(
uöt32_t
 
öode
,uöt32_à
uid
,uöt32_à
gid
,uöt8_à
Êags
,uöt8_à
©å
[35]);

53 
fs_ªÀa£
(
uöt32_t
 
öode
);

55 
uöt8_t
 
fs_ªadchunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
Àngth
,uöt64_à*
chunkid
,uöt32_à*
vîsi⁄
,c⁄° uöt8_à**
csd©a
,uöt32_à*
csd©asize
);

56 
uöt8_t
 
fs_wrôechunk
(
uöt32_t
 
öode
,uöt32_à
ödx
,
uöt64_t
 *
Àngth
,uöt64_à*
chunkid
,uöt32_à*
vîsi⁄
,c⁄° uöt8_à**
csd©a
,uöt32_à*
csd©asize
);

57 
uöt8_t
 
fs_wrôìnd
(
uöt64_t
 
chunkid
, 
uöt32_t
 
öode
, uöt64_à
Àngth
);

61 
uöt8_t
 
fs_gëª£rved
(c⁄° uöt8_à**
dbuff
,
uöt32_t
 *
dbuffsize
);

62 
uöt8_t
 
fs_gëåash
(c⁄° uöt8_à**
dbuff
,
uöt32_t
 *
dbuffsize
);

63 
uöt8_t
 
fs_gëdëached©å
(
uöt32_t
 
öode
,uöt8_à
©å
[35]);

64 
uöt8_t
 
fs_gëåash∑th
(
uöt32_t
 
öode
,c⁄° uöt8_à**
∑th
);

65 
uöt8_t
 
fs_£âøsh∑th
(
uöt32_t
 
öode
,c⁄° uöt8_à*
∑th
);

66 
uöt8_t
 
fs_undñ
(
uöt32_t
 
öode
);

67 
uöt8_t
 
fs_purge
(
uöt32_t
 
öode
);

69 
uöt8_t
 
fs_cu°om
(
uöt32_t
 
qcmd
,c⁄° uöt8_à*
quîy
,uöt32_à
quîyÀng
,uöt32_à*
acmd
,uöt8_à*
™swî
,uöt32_à*
™swîÀng
);

75 
fs_öô_ma°î_c⁄√˘i⁄
(c⁄° *
bödho°«me
,c⁄° *
ma°îho°«me
,c⁄° *
ma°îp‹äame
,
uöt8_t
 
mëa
,c⁄° *
öfo
,c⁄° *
subfﬁdî
,c⁄° uöt8_à
∑ssw‹ddige°
[16],uöt8_à
d⁄Ÿªmembî∑ssw‹d
,uöt8_à*
Êags
,
uöt32_t
 *
roŸuid
,uöt32_à*
roŸgid
,uöt32_à*
m≠Æluid
,uöt32_à*
m≠Ælgid
);

77 
fs_öô_thªads
(
uöt32_t
 
ªåõs
);

78 
fs_ãrm
();

	@mfsmount/masterproxy.c

1 
	~<°rög.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<±hªad.h
>

7 
	~"sockës.h
"

8 
	~"ma°îcomm.h
"

9 
	~"d©≠ack.h
"

10 
	~"MFSCommuniˇti⁄.h
"

12 
	#QUERYSIZE
 10000

	)

13 
	#ANSSIZE
 10000

	)

15 
	glsock
 = -1;

16 
±hªad_t
 
	g¥oxythªad
;

17 
uöt8_t
 
	gãrmö©e
;

19 
uöt32_t
 
	g¥oxyho°
;

20 
uöt16_t
 
	g¥oxyp‹t
;

57 
	$ma°î¥oxy_gëloˇti⁄
(
uöt8_t
 *
ma°îöfo
) {

58 c⁄° 
uöt8_t
 *
Ωå
 = 
ma°îöfo
+10;

59 i‡(
lsock
>=0 && 
	`gë32bô
(&
Ωå
)>=0x00010618) {

60 
	`put32bô
(&
ma°îöfo
,
¥oxyho°
);

61 
	`put16bô
(&
ma°îöfo
,
¥oxyp‹t
);

63 
	}
}

65 * 
	$ma°î¥oxy_£rvî
(*
¨gs
) {

66 
uöt8_t
 
hódî
[8];

67 
uöt8_t
 
quîybuf„r
[
QUERYSIZE
];

68 
uöt8_t
 
™sbuf„r
[
ANSSIZE
];

69 
uöt8_t
 *
w±r
;

70 c⁄° 
uöt8_t
 *
Ωå
;

71 
sock
 = *((*)
¨gs
);

72 
uöt32_t
 
psize
,
cmd
,
msgid
,
asize
,
acmd
;

74 
	`‰ì
(
¨gs
);

77 i‡(
	`t˝t‹ód
(
sock
,
hódî
,8,1000)!=8) {

78 
	`t˝˛o£
(
sock
);

79  
NULL
;

82 
Ωå
 = 
hódî
;

83 
cmd
 = 
	`gë32bô
(&
Ωå
);

84 
psize
 = 
	`gë32bô
(&
Ωå
);

85 i‡(
cmd
==
CLTOMA_FUSE_REGISTER
) {

87 i‡(
psize
!=73) {

88 
	`t˝˛o£
(
sock
);

89  
NULL
;

92 i‡(
	`t˝t‹ód
(
sock
,
quîybuf„r
,
psize
,1000)!=(
öt32_t
)(psize)) {

93 
	`t˝˛o£
(
sock
);

94  
NULL
;

97 i‡(
	`memcmp
(
quîybuf„r
,
FUSE_REGISTER_BLOB_ACL
,64)!=0) {

98 
	`t˝˛o£
(
sock
);

99  
NULL
;

102 i‡(
quîybuf„r
[64]!=
REGISTER_TOOLS
) {

103 
	`t˝˛o£
(
sock
);

104  
NULL
;

107 
w±r
 = 
™sbuf„r
;

108 
	`put32bô
(&
w±r
,
MATOCL_FUSE_REGISTER
);

109 
	`put32bô
(&
w±r
,1);

110 
	`put8bô
(&
w±r
,
STATUS_OK
);

112 i‡(
	`t˝towrôe
(
sock
,
™sbuf„r
,9,1000)!=9) {

113 
	`t˝˛o£
(
sock
);

114  
NULL
;

117 i‡(
psize
<4 ||Ösize>
QUERYSIZE
) {

118 
	`t˝˛o£
(
sock
);

119  
NULL
;

122 i‡(
	`t˝t‹ód
(
sock
,
quîybuf„r
,
psize
,1000)!=(
öt32_t
)(psize)) {

123 
	`t˝˛o£
(
sock
);

124  
NULL
;

127 
Ωå
 = 
quîybuf„r
;

128 
msgid
 = 
	`gë32bô
(&
Ωå
);

130 
asize
 = 
ANSSIZE
-12;

131 i‡(
	`fs_cu°om
(
cmd
,
quîybuf„r
+4,
psize
-4,&
acmd
,
™sbuf„r
+12,&
asize
)!=
STATUS_OK
) {

132 
	`t˝˛o£
(
sock
);

133  
NULL
;

136 
w±r
 = 
™sbuf„r
;

137 
	`put32bô
(&
w±r
,
acmd
);

138 
	`put32bô
(&
w±r
,
asize
+4);

139 
	`put32bô
(&
w±r
,
msgid
);

141 i‡(
	`t˝towrôe
(
sock
,
™sbuf„r
,
asize
+12,1000)!=(
öt32_t
)(asize+12)) {

142 
	`t˝˛o£
(
sock
);

143  
NULL
;

147 
	}
}

149 * 
	$ma°î¥oxy_ac˚±‹
(*
¨gs
) {

150 
±hªad_t
 
˛õ¡thªad
;

151 
±hªad_©å_t
 
th©å
;

152 
sock
;

153 ()
¨gs
;

155 
	`±hªad_©å_öô
(&
th©å
);

156 
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000);

157 
	`±hªad_©å_£tdëach°©e
(&
th©å
,
PTHREAD_CREATE_DETACHED
);

159 
ãrmö©e
==0) {

160 
sock
 = 
	`t˝tﬂc˚±
(
lsock
,1000);

161 i‡(
sock
>=0) {

162 *
s
 = 
	`mÆloc
(());

163 *
s
 = 
sock
;

164 
	`t˝nodñay
(
sock
);

165 
	`±hªad_¸óã
(&
˛õ¡thªad
,&
th©å
,
ma°î¥oxy_£rvî
,
s
);

169 
	`±hªad_©å_de°roy
(&
th©å
);

170  
NULL
;

171 
	}
}

173 
	$ma°î¥oxy_ãrm
() {

174 
ãrmö©e
=1;

175 
	`±hªad_joö
(
¥oxythªad
,
NULL
);

176 
	}
}

178 
	$ma°î¥oxy_öô
() {

179 
±hªad_©å_t
 
th©å
;

181 
lsock
 = 
	`t˝sockë
();

182 i‡(
lsock
<0) {

186 
	`t˝n⁄block
(
lsock
);

187 
	`t˝nodñay
(
lsock
);

189 i‡(
	`t˝£èc˚±fûãr
(
lsock
)<0 && 
î∫o
!=
ENOTSUP
) {

192 i‡(
	`t˝°æi°í
(
lsock
,"127.0.0.1",0,100)<0) {

194 
	`t˝˛o£
(
lsock
);

195 
lsock
 = -1;

198 i‡(
	`t˝gëmyaddr
(
lsock
,&
¥oxyho°
,&
¥oxyp‹t
)<0) {

199 
	`t˝˛o£
(
lsock
);

200 
lsock
 = -1;

204 
ãrmö©e
 = 0;

205 
	`±hªad_©å_öô
(&
th©å
);

206 
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000);

208 
	`±hªad_¸óã
(&
¥oxythªad
,&
th©å
,
ma°î¥oxy_ac˚±‹
,
NULL
);

209 
	`±hªad_©å_de°roy
(&
th©å
);

212 
	}
}

	@mfsmount/masterproxy.h

19 #i‚de‡
_MASTERPROXY_H_


20 
	#_MASTERPROXY_H_


	)

22 
	~<öây≥s.h
>

24 
ma°î¥oxy_gëloˇti⁄
(
uöt8_t
 *
ma°îöfo
);

26 
ma°î¥oxy_ãrm
();

27 
ma°î¥oxy_öô
();

	@mfsmount/mfs_fuse.c

19 #i‡
deföed
(
__APPLE__
)

20 #i‚de‡
__DARWIN_64_BIT_INO_T


21 
	#__DARWIN_64_BIT_INO_T
 0

	)

25 
	~"c⁄fig.h
"

27 
	~<fu£_lowÀvñ.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<î∫o.h
>

32 
	~<f˙é.h
>

33 
	~<uni°d.h
>

34 
	~<as£π.h
>

35 
	~<sy¶og.h
>

36 
	~<öây≥s.h
>

37 
	~<±hªad.h
>

39 
	~"°©s.h
"

40 
	~"›log.h
"

41 
	~"d©≠ack.h
"

42 
	~"ma°îcomm.h
"

43 
	~"ma°î¥oxy.h
"

44 
	~"ªadd©a.h
"

45 
	~"wrôed©a.h
"

46 
	~"°ªº.h
"

47 
	~"MFSCommuniˇti⁄.h
"

49 
	~"dú©åˇche.h
"

50 
	~"symlökˇche.h
"

53 #i‡
MFS_ROOT_ID
 !
FUSE_ROOT_ID


54 #îr‹ 
FUSE_ROOT_ID
 
is
 
nŸ
 
equÆ
 
to
 
MFS_ROOT_ID


57 
	#READDIR_BUFFSIZE
 50000

	)

59 
	#MAX_FILE_SIZE
 (
öt64_t
)(
MFS_MAX_FILE_SIZE
)

	)

61 
	#PKGVERSION
 ((
VERSMAJ
)*1000000+(
VERSMID
)*1000+(
VERSMIN
))

	)

68 
	#MASTERINFO_NAME
 ".ma°îöfo"

	)

69 
	#MASTERINFO_INODE
 0x7FFFFFFF

	)

71 #ifde‡
MASTERINFO_WITH_VERSION


72 
uöt8_t
 
	gma°îöfﬂâr
[35]={'f', 0x01,0x24, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,14};

74 
uöt8_t
 
	gma°îöfﬂâr
[35]={'f', 0x01,0x24, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,10};

77 
	#STATS_NAME
 ".°©s"

	)

78 
	#STATS_INODE
 0x7FFFFFF0

	)

80 
uöt8_t
 
	g°©ßâr
[35]={'f', 0x01,0xA4, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,0};

82 
	#OPLOG_NAME
 ".›log"

	)

83 
	#OPLOG_INODE
 0x7FFFFFF1

	)

84 
	#OPHISTORY_NAME
 ".›hi°‹y"

	)

85 
	#OPHISTORY_INODE
 0x7FFFFFF2

	)

87 
uöt8_t
 
	g›log©å
[35]={'f', 0x01,0x00, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,0};

96 
	#MIN_SPECIAL_INODE
 0x7FFFFFF0

	)

97 
	#IS_SPECIAL_INODE
(
öo
Ë((öo)>=
MIN_SPECIAL_INODE
)

	)

98 
	#IS_SPECIAL_NAME
(
«me
Ë(“ame)[0]=='.' && (
	`°rcmp
(
STATS_NAME
,“ame))==0 || såcmp(
MASTERINFO_NAME
,“ame))==0 || såcmp(
OPLOG_NAME
,“ame))==0 || såcmp(
OPHISTORY_NAME
,“ame))==0 ))

	)

100 
	s_söfo
 {

101 *
	mbuff
;

102 
uöt32_t
 
	mÀng
;

103 
uöt8_t
 
	mª£t
;

104 
±hªad_muãx_t
 
	mlock
;

105 } 
	tsöfo
;

107 
	s_dúbuf
 {

108 
	mwa§ód
;

109 
	md©af‹m©
;

110 
uid_t
 
	muid
;

111 
gid_t
 
	mgid
;

112 c⁄° 
uöt8_t
 *
	mp
;

113 
size_t
 
	msize
;

114 *
	mdˇche
;

115 
±hªad_muãx_t
 
	mlock
;

116 } 
	tdúbuf
;

118 íum {
	mIO_NONE
,
	mIO_READ
,
	mIO_WRITE
,
	mIO_READONLY
,
	mIO_WRITEONLY
};

120 
	s_föfo
 {

121 
uöt8_t
 
	mmode
;

122 *
	md©a
;

123 
±hªad_muãx_t
 
	mlock
;

124 } 
	tföfo
;

126 
	gdebug_mode
 = 0;

127 
	gu£dúˇche
 = 1;

128 
	gkìp_ˇche
 = 0;

129 
	gdúíåy_ˇche_timeout
 = 0.1;

130 
	gíåy_ˇche_timeout
 = 0.0;

131 
	g©å_ˇche_timeout
 = 0.1;

132 
	gmkdú_c›y_sgid
 = 0;

133 
	gsugid_˛ór_mode
 = 0;

139 
	mOP_STATFS
 = 0,

140 
	mOP_ACCESS
,

141 
	mOP_LOOKUP
,

142 
	mOP_LOOKUP_INTERNAL
,

143 
	mOP_DIRCACHE_LOOKUP
,

147 
	mOP_GETATTR
,

148 
	mOP_DIRCACHE_GETATTR
,

149 
	mOP_SETATTR
,

150 
	mOP_MKNOD
,

151 
	mOP_UNLINK
,

152 
	mOP_MKDIR
,

153 
	mOP_RMDIR
,

154 
	mOP_SYMLINK
,

155 
	mOP_READLINK
,

156 
	mOP_READLINK_CACHED
,

157 
	mOP_RENAME
,

158 
	mOP_LINK
,

159 
	mOP_OPENDIR
,

160 
	mOP_READDIR
,

161 
	mOP_RELEASEDIR
,

162 
	mOP_CREATE
,

163 
	mOP_OPEN
,

164 
	mOP_RELEASE
,

165 
	mOP_READ
,

166 
	mOP_WRITE
,

167 
	mOP_FLUSH
,

168 
	mOP_FSYNC
,

170 
	mOP_GETDIR_FULL
,

171 
	mOP_GETDIR_SMALL
,

172 
	mSTATNODES


175 
uöt64_t
 *
	g°©•å
[
STATNODES
];

177 
	$mfs_°©•å_öô
() {

178 *
s
;

179 
s
 = 
	`°©s_gë_subnode
(
NULL
,"fuse_ops",0);

180 
°©•å
[
OP_FSYNC
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"fsync",0));

181 
°©•å
[
OP_FLUSH
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"flush",0));

182 
°©•å
[
OP_WRITE
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"write",0));

183 
°©•å
[
OP_READ
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"read",0));

184 
°©•å
[
OP_RELEASE
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"release",0));

185 
°©•å
[
OP_OPEN
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"open",0));

186 
°©•å
[
OP_CREATE
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"create",0));

187 
°©•å
[
OP_RELEASEDIR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"releasedir",0));

188 
°©•å
[
OP_READDIR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"readdir",0));

189 
°©•å
[
OP_OPENDIR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"opendir",0));

190 
°©•å
[
OP_LINK
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"link",0));

191 
°©•å
[
OP_RENAME
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"rename",0));

192 
°©•å
[
OP_READLINK
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"readlink",0));

193 
°©•å
[
OP_READLINK_CACHED
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"readlink-cached",0));

194 
°©•å
[
OP_SYMLINK
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"symlink",0));

195 
°©•å
[
OP_RMDIR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"rmdir",0));

196 
°©•å
[
OP_MKDIR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"mkdir",0));

197 
°©•å
[
OP_UNLINK
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"unlink",0));

198 
°©•å
[
OP_MKNOD
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"mknod",0));

199 
°©•å
[
OP_SETATTR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"setattr",0));

200 
°©•å
[
OP_GETATTR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"getattr",0));

201 
°©•å
[
OP_DIRCACHE_GETATTR
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"getattr-cached",0));

202 
°©•å
[
OP_LOOKUP
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"lookup",0));

203 
°©•å
[
OP_LOOKUP_INTERNAL
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"lookup-internal",0));

204 i‡(
u£dúˇche
) {

205 
°©•å
[
OP_DIRCACHE_LOOKUP
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"lookup-cached",0));

207 
°©•å
[
OP_ACCESS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"access",0));

208 
°©•å
[
OP_STATFS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"statfs",0));

209 i‡(
u£dúˇche
) {

210 
°©•å
[
OP_GETDIR_FULL
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"getdir-full",0));

212 
°©•å
[
OP_GETDIR_SMALL
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"getdir-small",0));

214 
	}
}

216 
	$mfs_°©s_öc
(
uöt8_t
 
id
) {

217 i‡(
id
<
STATNODES
) {

218 
	`°©s_lock
();

219 (*
°©•å
[
id
])++;

220 
	`°©s_u∆ock
();

222 
	}
}

224 #i‚de‡
EDQUOT


225 
	#EDQUOT
 
ENOSPC


	)

228 
	$mfs_îr‹c⁄v
(
°©us
) {

229 
ªt
;

230 
°©us
) {

231 
STATUS_OK
:

232 
ªt
=0;

234 
ERROR_EPERM
:

235 
ªt
=
EPERM
;

237 
ERROR_ENOTDIR
:

238 
ªt
=
ENOTDIR
;

240 
ERROR_ENOENT
:

241 
ªt
=
ENOENT
;

243 
ERROR_EACCES
:

244 
ªt
=
EACCES
;

246 
ERROR_EEXIST
:

247 
ªt
=
EEXIST
;

249 
ERROR_EINVAL
:

250 
ªt
=
EINVAL
;

252 
ERROR_ENOTEMPTY
:

253 
ªt
=
ENOTEMPTY
;

255 
ERROR_IO
:

256 
ªt
=
EIO
;

258 
ERROR_EROFS
:

259 
ªt
=
EROFS
;

261 
ERROR_QUOTA
:

262 
ªt
=
EDQUOT
;

265 
ªt
=
EINVAL
;

268 i‡(
debug_mode
 && 
ªt
!=0) {

269 #ifde‡
HAVE_STRERROR_R


270 
îr‹buff
[500];

271 #ifde‡
STRERROR_R_CHAR_P


272 
	`Ârötf
(
°dîr
,"°©us: %s\n",
	`°ªº‹_r
(
ªt
,
îr‹buff
,500));

274 
	`°ªº‹_r
(
ªt
,
îr‹buff
,500);

275 
	`Ârötf
(
°dîr
,"°©us: %s\n",
îr‹buff
);

278 #ifde‡
HAVE_PERROR


279 
î∫o
=
ªt
;

280 
	`≥º‹
("status: ");

282 
	`Ârötf
(
°dîr
,"°©us: %d\n",
ªt
);

286  
ªt
;

287 
	}
}

289 
	$mfs_ty≥_to_°©
(
uöt32_t
 
öode
,
uöt8_t
 
ty≥
, 
°©
 *
°buf
) {

290 
	`mem£t
(
°buf
,0,(
°©
));

291 
°buf
->
°_öo
 = 
öode
;

292 
ty≥
) {

293 
TYPE_DIRECTORY
:

294 
°buf
->
°_mode
 = 
S_IFDIR
;

296 
TYPE_SYMLINK
:

297 
°buf
->
°_mode
 = 
S_IFLNK
;

299 
TYPE_FILE
:

300 
°buf
->
°_mode
 = 
S_IFREG
;

302 
TYPE_FIFO
:

303 
°buf
->
°_mode
 = 
S_IFIFO
;

305 
TYPE_SOCKET
:

306 
°buf
->
°_mode
 = 
S_IFSOCK
;

308 
TYPE_BLOCKDEV
:

309 
°buf
->
°_mode
 = 
S_IFBLK
;

311 
TYPE_CHARDEV
:

312 
°buf
->
°_mode
 = 
S_IFCHR
;

315 
°buf
->
°_mode
 = 0;

317 
	}
}

319 
uöt8_t
 
	$mfs_©å_gë_m©å
(c⁄° 
uöt8_t
 
©å
[35]) {

320  (
©å
[1]>>4);

321 
	}
}

323 
	$mfs_©å_to_°©
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 
©å
[35], 
°©
 *
°buf
) {

324 
uöt16_t
 
©åmode
;

325 
uöt8_t
 
©åty≥
;

326 
uöt32_t
 
©åuid
,
©ågid
,
©å©ime
,
©åmtime
,
©å˘ime
,
©å∆ök
,
©årdev
;

327 
uöt64_t
 
©åÀngth
;

328 c⁄° 
uöt8_t
 *
±r
;

329 
±r
 = 
©å
;

330 
©åty≥
 = 
	`gë8bô
(&
±r
);

331 
©åmode
 = 
	`gë16bô
(&
±r
);

332 
©åuid
 = 
	`gë32bô
(&
±r
);

333 
©ågid
 = 
	`gë32bô
(&
±r
);

334 
©å©ime
 = 
	`gë32bô
(&
±r
);

335 
©åmtime
 = 
	`gë32bô
(&
±r
);

336 
©å˘ime
 = 
	`gë32bô
(&
±r
);

337 
©å∆ök
 = 
	`gë32bô
(&
±r
);

338 
°buf
->
°_öo
 = 
öode
;

339 #ifde‡
HAVE_STRUCT_STAT_ST_BLKSIZE


340 
°buf
->
°_blksize
 = 
MFSBLOCKSIZE
;

342 
©åty≥
) {

343 
TYPE_DIRECTORY
:

344 
°buf
->
°_mode
 = 
S_IFDIR
 | ( 
©åmode
 & 07777);

345 
©åÀngth
 = 
	`gë64bô
(&
±r
);

346 
°buf
->
°_size
 = 
©åÀngth
;

347 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


348 
°buf
->
°_blocks
 = (
©åÀngth
+511)/512;

351 
TYPE_SYMLINK
:

352 
°buf
->
°_mode
 = 
S_IFLNK
 | ( 
©åmode
 & 07777);

353 
©åÀngth
 = 
	`gë64bô
(&
±r
);

354 
°buf
->
°_size
 = 
©åÀngth
;

355 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


356 
°buf
->
°_blocks
 = (
©åÀngth
+511)/512;

359 
TYPE_FILE
:

360 
°buf
->
°_mode
 = 
S_IFREG
 | ( 
©åmode
 & 07777);

361 
©åÀngth
 = 
	`gë64bô
(&
±r
);

362 
°buf
->
°_size
 = 
©åÀngth
;

363 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


364 
°buf
->
°_blocks
 = (
©åÀngth
+511)/512;

367 
TYPE_FIFO
:

368 
°buf
->
°_mode
 = 
S_IFIFO
 | ( 
©åmode
 & 07777);

369 
°buf
->
°_size
 = 0;

370 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


371 
°buf
->
°_blocks
 = 0;

374 
TYPE_SOCKET
:

375 
°buf
->
°_mode
 = 
S_IFSOCK
 | ( 
©åmode
 & 07777);

376 
°buf
->
°_size
 = 0;

377 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


378 
°buf
->
°_blocks
 = 0;

381 
TYPE_BLOCKDEV
:

382 
°buf
->
°_mode
 = 
S_IFBLK
 | ( 
©åmode
 & 07777);

383 
©årdev
 = 
	`gë32bô
(&
±r
);

384 #ifde‡
HAVE_STRUCT_STAT_ST_RDEV


385 
°buf
->
°_rdev
 = 
©årdev
;

387 
°buf
->
°_size
 = 0;

388 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


389 
°buf
->
°_blocks
 = 0;

392 
TYPE_CHARDEV
:

393 
°buf
->
°_mode
 = 
S_IFCHR
 | ( 
©åmode
 & 07777);

394 
©årdev
 = 
	`gë32bô
(&
±r
);

395 #ifde‡
HAVE_STRUCT_STAT_ST_RDEV


396 
°buf
->
°_rdev
 = 
©årdev
;

398 
°buf
->
°_size
 = 0;

399 #ifde‡
HAVE_STRUCT_STAT_ST_BLOCKS


400 
°buf
->
°_blocks
 = 0;

404 
°buf
->
°_mode
 = 0;

406 
°buf
->
°_uid
 = 
©åuid
;

407 
°buf
->
°_gid
 = 
©ågid
;

408 
°buf
->
°_©ime
 = 
©å©ime
;

409 
°buf
->
°_mtime
 = 
©åmtime
;

410 
°buf
->
°_˘ime
 = 
©å˘ime
;

411 #ifde‡
HAVE_STRUCT_STAT_ST_BIRTHTIME


412 
°buf
->
°_búthtime
 = 
©å˘ime
;

414 
°buf
->
°_∆ök
 = 
©å∆ök
;

415 
	}
}

417 #i‡
FUSE_USE_VERSION
 >= 26

418 
	$mfs_°©fs
(
fu£_ªq_t
 
ªq
,
fu£_öo_t
 
öo
) {

420 
	$mfs_°©fs
(
fu£_ªq_t
 
ªq
) {

422 
uöt64_t
 
tŸÆ•a˚
,
avaû•a˚
,
åash•a˚
,
ª£rved•a˚
;

423 
uöt32_t
 
öodes
;

424 
uöt32_t
 
bsize
;

425 
°©vfs
 
°fsbuf
;

426 
	`mem£t
(&
°fsbuf
,0,(stfsbuf));

428 #i‡
FUSE_USE_VERSION
 >= 26

429 
	`›log_¥ötf
(
	`fu£_ªq_˘x
(
ªq
),"°©f†(%lu)",()
öo
);

431 
	`›log_¥ötf
(
	`fu£_ªq_˘x
(
ªq
),"statfs ()");

433 
	`mfs_°©s_öc
(
OP_STATFS
);

434 #i‡
FUSE_USE_VERSION
 >= 26

435 ()
öo
;

437 
	`fs_°©fs
(&
tŸÆ•a˚
,&
avaû•a˚
,&
åash•a˚
,&
ª£rved•a˚
,&
öodes
);

439 #i‡
	`deföed
(
__APPLE__
)

440 i‡(
tŸÆ•a˚
>0x0001000000000000ULL) {

441 
bsize
 = 0x20000;

443 
bsize
 = 0x10000;

446 
bsize
 = 0x10000;

449 
°fsbuf
.
f_«memax
 = 
MFS_NAME_MAX
;

450 
°fsbuf
.
f_‰size
 = 
bsize
;

451 
°fsbuf
.
f_bsize
 = 
bsize
;

452 #i‡
	`deföed
(
__APPLE__
)

456 i‡(
tŸÆ•a˚
/
bsize
>0xFFFFFFFFU) {

457 
°fsbuf
.
f_blocks
 = 0xFFFFFFFFU;

459 
°fsbuf
.
f_blocks
 = 
tŸÆ•a˚
/
bsize
;

461 i‡(
avaû•a˚
/
bsize
>0xFFFFFFFFU) {

462 
°fsbuf
.
f_b‰ì
 = 0xFFFFFFFFU;

463 
°fsbuf
.
f_bavaû
 = 0xFFFFFFFFU;

465 
°fsbuf
.
f_b‰ì
 = 
avaû•a˚
/
bsize
;

466 
°fsbuf
.
f_bavaû
 = 
avaû•a˚
/
bsize
;

469 
°fsbuf
.
f_blocks
 = 
tŸÆ•a˚
/
bsize
;

470 
°fsbuf
.
f_b‰ì
 = 
avaû•a˚
/
bsize
;

471 
°fsbuf
.
f_bavaû
 = 
avaû•a˚
/
bsize
;

473 
°fsbuf
.
f_fûes
 = 1000000000+
PKGVERSION
+
öodes
;

474 
°fsbuf
.
f_f‰ì
 = 1000000000+
PKGVERSION
;

475 
°fsbuf
.
f_Ávaû
 = 1000000000+
PKGVERSION
;

477 
	`fu£_ª∂y_°©fs
(
ªq
,&
°fsbuf
);

478 
	}
}

517 
	$mfs_ac˚ss
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
mask
) {

518 
°©us
;

519 c⁄° 
fu£_˘x
 *
˘x
;

520 
mmode
;

522 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

523 
	`›log_¥ötf
(
˘x
,"ac˚s†(%lu,0x%X)",()
öo
,
mask
);

524 
	`mfs_°©s_öc
(
OP_ACCESS
);

525 #i‡(
R_OK
==
MODE_MASK_R
Ë&& (
W_OK
==
MODE_MASK_W
Ë&& (
X_OK
==
MODE_MASK_X
)

526 
mmode
 = 
mask
 & (
MODE_MASK_R
 | 
MODE_MASK_W
 | 
MODE_MASK_X
);

528 
mmode
 = 0;

529 i‡(
mask
 & 
R_OK
) {

530 
mmode
 |
MODE_MASK_R
;

532 i‡(
mask
 & 
W_OK
) {

533 
mmode
 |
MODE_MASK_W
;

535 i‡(
mask
 & 
X_OK
) {

536 
mmode
 |
MODE_MASK_X
;

543 i‡(
	`IS_SPECIAL_INODE
(
öo
)) {

544 i‡(
mask
 & (
W_OK
 | 
X_OK
)) {

545 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

547 
	`fu£_ª∂y_îr
(
ªq
,0);

551 
°©us
 = 
	`fs_ac˚ss
(
öo
,
˘x
->
uid
,˘x->
gid
,
mmode
);

552 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

553 i‡(
°©us
!=0) {

554 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

556 
	`fu£_ª∂y_îr
(
ªq
,0);

558 
	}
}

560 
	$mfs_lookup
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

561 
fu£_íåy_∑øm
 
e
;

562 
uöt64_t
 
maxÊíg
;

563 
uöt32_t
 
öode
;

564 
uöt32_t
 
∆íg
;

565 
uöt8_t
 
©å
[35];

566 
uöt8_t
 
m©å
;

567 
°©us
;

568 c⁄° 
fu£_˘x
 *
˘x
;

570 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

571 i‡(
debug_mode
) {

572 
	`Ârötf
(
°dîr
,"looku∞(%lu,%s)\n",()
∑ª¡
,
«me
);

574 
∆íg
 = 
	`°æí
(
«me
);

575 i‡(
∆íg
>
MFS_NAME_MAX
) {

576 
	`mfs_°©s_öc
(
OP_LOOKUP
);

577 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

578 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öã∫Æ check: %s)",()
∑ª¡
,
«me
,
	`°ªº
(
ENAMETOOLONG
));

581 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

582 i‡(
∆íg
==2 && 
«me
[0]=='.' &&Çame[1]=='.') {

583 
∆íg
=1;

595 i‡(
	`°rcmp
(
«me
,
MASTERINFO_NAME
)==0) {

596 
	`mem£t
(&
e
, 0, (e));

597 
e
.
öo
 = 
MASTERINFO_INODE
;

598 
e
.
©å_timeout
 = 3600.0;

599 
e
.
íåy_timeout
 = 3600.0;

600 
	`mfs_©å_to_°©
(
MASTERINFO_INODE
,
ma°îöfﬂâr
,&
e
.
©å
);

601 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

602 
	`mfs_°©s_öc
(
OP_LOOKUP_INTERNAL
);

603 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öã∫ÆÇode: MASTERINFO)",()
∑ª¡
,
«me
);

606 i‡(
	`°rcmp
(
«me
,
STATS_NAME
)==0) {

607 
	`mem£t
(&
e
, 0, (e));

608 
e
.
öo
 = 
STATS_INODE
;

609 
e
.
©å_timeout
 = 3600.0;

610 
e
.
íåy_timeout
 = 3600.0;

611 
	`mfs_©å_to_°©
(
STATS_INODE
,
°©ßâr
,&
e
.
©å
);

612 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

613 
	`mfs_°©s_öc
(
OP_LOOKUP_INTERNAL
);

614 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öã∫ÆÇode: STATS)",()
∑ª¡
,
«me
);

617 i‡(
	`°rcmp
(
«me
,
OPLOG_NAME
)==0) {

618 
	`mem£t
(&
e
, 0, (e));

619 
e
.
öo
 = 
OPLOG_INODE
;

620 
e
.
©å_timeout
 = 3600.0;

621 
e
.
íåy_timeout
 = 3600.0;

622 
	`mfs_©å_to_°©
(
OPLOG_INODE
,
›log©å
,&
e
.
©å
);

623 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

624 
	`mfs_°©s_öc
(
OP_LOOKUP_INTERNAL
);

625 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öã∫ÆÇode: OPLOG)",()
∑ª¡
,
«me
);

628 i‡(
	`°rcmp
(
«me
,
OPHISTORY_NAME
)==0) {

629 
	`mem£t
(&
e
, 0, (e));

630 
e
.
öo
 = 
OPHISTORY_INODE
;

631 
e
.
©å_timeout
 = 3600.0;

632 
e
.
íåy_timeout
 = 3600.0;

633 
	`mfs_©å_to_°©
(
OPHISTORY_INODE
,
›log©å
,&
e
.
©å
);

634 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

635 
	`mfs_°©s_öc
(
OP_LOOKUP_INTERNAL
);

636 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öã∫ÆÇode: OPHISTORY)",()
∑ª¡
,
«me
);

721 i‡(
u£dúˇche
 && 
	`dˇche_lookup
(
˘x
,
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,&
öode
,
©å
)) {

722 i‡(
debug_mode
) {

723 
	`Ârötf
(
°dîr
,"lookup: sending data from dircache\n");

725 
	`mfs_°©s_öc
(
OP_DIRCACHE_LOOKUP
);

726 
°©us
 = 0;

727 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(›í dú cache: %lu)",()
∑ª¡
,
«me
,()
öode
);

729 
	`mfs_°©s_öc
(
OP_LOOKUP
);

730 
°©us
 = 
	`fs_lookup
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
˘x
->
uid
,˘x->
gid
,&
öode
,
©å
);

731 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

732 i‡(
°©us
!=0) {

733 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(%s)",()
∑ª¡
,
«me
,
	`°ªº
(
°©us
));

735 
	`›log_¥ötf
(
˘x
,"looku∞(%lu,%sË(öode: %lu)",()
∑ª¡
,
«me
,()
öode
);

738 i‡(
°©us
!=0) {

739 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

742 i‡(
©å
[0]==
TYPE_FILE
) {

743 
maxÊíg
 = 
	`wrôe_d©a_gëmaxÊíg
(
öode
);

745 
maxÊíg
 = 0;

747 
	`mem£t
(&
e
, 0, (e));

748 
e
.
öo
 = 
öode
;

749 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

750 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

751 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:((
©å
[0]==
TYPE_DIRECTORY
)?
dúíåy_ˇche_timeout
:
íåy_ˇche_timeout
);

752 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

753 i‡(
maxÊíg
>(
uöt64_t
)(
e
.
©å
.
°_size
)) {

754 
e
.
©å
.
°_size
=
maxÊíg
;

759 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

760 
	}
}

762 
	$mfs_gë©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

763 
uöt64_t
 
maxÊíg
;

764 
°©
 
o_°buf
;

765 
uöt8_t
 
©å
[35];

766 
°©us
;

767 c⁄° 
fu£_˘x
 *
˘x
;

768 ()
fi
;

770 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

772 i‡(
debug_mode
) {

773 
	`Ârötf
(
°dîr
,"gë©å (%lu)\n",()
öo
);

782 i‡(
öo
==
MASTERINFO_INODE
) {

783 
	`mem£t
(&
o_°buf
, 0, (
°©
));

784 
	`mfs_©å_to_°©
(
öo
,
ma°îöfﬂâr
,&
o_°buf
);

785 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

786 
	`mfs_°©s_öc
(
OP_GETATTR
);

787 
	`›log_¥ötf
(
˘x
,"gë©å (%luË(öã∫ÆÇodêMASTERINFO)",()
öo
);

790 i‡(
öo
==
STATS_INODE
) {

791 
	`mem£t
(&
o_°buf
, 0, (
°©
));

792 
	`mfs_©å_to_°©
(
öo
,
°©ßâr
,&
o_°buf
);

793 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

794 
	`mfs_°©s_öc
(
OP_GETATTR
);

795 
	`›log_¥ötf
(
˘x
,"gë©å (%luË(öã∫ÆÇodêSTATS)",()
öo
);

798 i‡(
öo
==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

799 
	`mem£t
(&
o_°buf
, 0, (
°©
));

800 
	`mfs_©å_to_°©
(
öo
,
›log©å
,&
o_°buf
);

805 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

806 
	`mfs_°©s_öc
(
OP_GETATTR
);

807 
	`›log_¥ötf
(
˘x
,"gë©å (%luË(öã∫ÆÇodêOPLOG/OPHISTORY)",()
öo
);

842 i‡(
u£dúˇche
 && 
	`dˇche_gë©å
(
˘x
,
öo
,
©å
)) {

843 i‡(
debug_mode
) {

844 
	`Ârötf
(
°dîr
,"getattr: sending data from dircache\n");

846 
	`mfs_°©s_öc
(
OP_DIRCACHE_GETATTR
);

847 
°©us
 = 0;

848 
	`›log_¥ötf
(
˘x
,"gë©å (%luË(d©®found i¿›í dú cache)",()
öo
);

850 
	`mfs_°©s_öc
(
OP_GETATTR
);

851 
°©us
 = 
	`fs_gë©å
(
öo
,
˘x
->
uid
,˘x->
gid
,
©å
);

852 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

853 i‡(
°©us
!=0) {

854 
	`›log_¥ötf
(
˘x
,"gë©å (%luË”º‹: %s)",()
öo
,
	`°ªº
(
°©us
));

856 
	`›log_¥ötf
(
˘x
,"gë©å (%luË(ok)",()
öo
);

859 i‡(
°©us
!=0) {

860 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

863 i‡(
©å
[0]==
TYPE_FILE
) {

864 
maxÊíg
 = 
	`wrôe_d©a_gëmaxÊíg
(
öo
);

866 
maxÊíg
 = 0;

868 
	`mem£t
(&
o_°buf
, 0, (
°©
));

869 
	`mfs_©å_to_°©
(
öo
,
©å
,&
o_°buf
);

870 i‡(
maxÊíg
>(
uöt64_t
)(
o_°buf
.
°_size
)) {

871 
o_°buf
.
°_size
=
maxÊíg
;

873 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, (
	`mfs_©å_gë_m©å
(
©å
)&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
);

874 
	}
}

876 
	$mfs_£èâr
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
°©
 *
°buf
, 
to_£t
, 
fu£_fûe_öfo
 *
fi
) {

877 
°©
 
o_°buf
;

878 
uöt64_t
 
maxÊíg
;

879 
uöt8_t
 
©å
[35];

880 
°©us
;

881 c⁄° 
fu£_˘x
 *
˘x
;

882 
uöt8_t
 
£tmask
 = 0;

884 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

885 
	`›log_¥ötf
(
˘x
,"£èâ∏(%lu,0x%X,(0%04o,%ld,%ld,%lu,%lu,%Œu))",()
öo
,
to_£t
,()(
°buf
->
°_mode
 & 07777),()°buf->
°_uid
,()°buf->
°_gid
,()(°buf->
°_©ime
),()(°buf->
°_mtime
),()(°buf->
°_size
));

886 
	`mfs_°©s_öc
(
OP_SETATTR
);

887 i‡(
debug_mode
) {

888 
	`Ârötf
(
°dîr
,"£èâ∏(%lu,0x%X,(0%04o,%ld,%ld,%lu,%lu,%Œu))\n",()
öo
,
to_£t
,()(
°buf
->
°_mode
 & 07777),()°buf->
°_uid
,()°buf->
°_gid
,()(°buf->
°_©ime
),()(°buf->
°_mtime
),()(°buf->
°_size
));

890 i‡–
öo
==
MASTERINFO_INODE
) {

891 
	`fu£_ª∂y_îr
(
ªq
, 
EPERM
);

894 i‡(
öo
==
STATS_INODE
) {

895 
	`mem£t
(&
o_°buf
, 0, (
°©
));

896 
	`mfs_©å_to_°©
(
öo
,
°©ßâr
,&
o_°buf
);

897 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

900 i‡(
öo
==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

901 
	`mem£t
(&
o_°buf
, 0, (
°©
));

902 
	`mfs_©å_to_°©
(
öo
,
›log©å
,&
o_°buf
);

907 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

918 
°©us
 = 
EINVAL
;

919 i‡((
to_£t
 & (
FUSE_SET_ATTR_MODE
|
FUSE_SET_ATTR_UID
|
FUSE_SET_ATTR_GID
|
FUSE_SET_ATTR_ATIME
|
FUSE_SET_ATTR_MTIME
|
FUSE_SET_ATTR_SIZE
)) == 0) {

921 
°©us
 = 
	`fs_£èâr
(
öo
,
˘x
->
uid
,˘x->
gid
,0,0,0,0,0,0,0,
©å
);

922 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

923 i‡(
°©us
!=0) {

924 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

928 i‡(
to_£t
 & (
FUSE_SET_ATTR_MODE
|
FUSE_SET_ATTR_UID
|
FUSE_SET_ATTR_GID
|
FUSE_SET_ATTR_ATIME
|
FUSE_SET_ATTR_MTIME
)) {

929 
£tmask
 = 0;

930 i‡(
to_£t
 & 
FUSE_SET_ATTR_MODE
) {

931 
£tmask
 |
SET_MODE_FLAG
;

933 i‡(
to_£t
 & 
FUSE_SET_ATTR_UID
) {

934 
£tmask
 |
SET_UID_FLAG
;

936 i‡(
to_£t
 & 
FUSE_SET_ATTR_GID
) {

937 
£tmask
 |
SET_GID_FLAG
;

939 i‡(
to_£t
 & 
FUSE_SET_ATTR_ATIME
) {

940 
£tmask
 |
SET_ATIME_FLAG
;

942 i‡(
to_£t
 & 
FUSE_SET_ATTR_MTIME
) {

943 
£tmask
 |
SET_MTIME_FLAG
;

944 
	`wrôe_d©a_Êush_öode
(
öo
);

946 
°©us
 = 
	`fs_£èâr
(
öo
,
˘x
->
uid
,˘x->
gid
,
£tmask
,
°buf
->
°_mode
&07777,°buf->
°_uid
,°buf->
°_gid
,°buf->
°_©ime
,°buf->
°_mtime
,
sugid_˛ór_mode
,
©å
);

947 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

948 i‡(
°©us
!=0) {

949 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

953 i‡(
to_£t
 & 
FUSE_SET_ATTR_SIZE
) {

954 i‡(
°buf
->
°_size
<0) {

955 
	`fu£_ª∂y_îr
(
ªq
, 
EINVAL
);

958 i‡(
°buf
->
°_size
>=
MAX_FILE_SIZE
) {

959 
	`fu£_ª∂y_îr
(
ªq
, 
EFBIG
);

962 
	`wrôe_d©a_Êush_öode
(
öo
);

963 
°©us
 = 
	`fs_åunˇã
(
öo
,(
fi
!=
NULL
)?1:0,
˘x
->
uid
,˘x->
gid
,
°buf
->
°_size
,
©å
);

964 
°©us
==
ERROR_LOCKED
) {

965 
	`¶ìp
(1);

966 
°©us
 = 
	`fs_åunˇã
(
öo
,(
fi
!=
NULL
)?1:0,
˘x
->
uid
,˘x->
gid
,
°buf
->
°_size
,
©å
);

968 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

969 
	`ªad_öode_›s
(
öo
);

970 i‡(
°©us
!=0) {

971 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

975 i‡(
°©us
!=0) {

976 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

979 i‡(
©å
[0]==
TYPE_FILE
) {

980 
maxÊíg
 = 
	`wrôe_d©a_gëmaxÊíg
(
öo
);

982 
maxÊíg
 = 0;

984 
	`mem£t
(&
o_°buf
, 0, (
°©
));

985 
	`mfs_©å_to_°©
(
öo
,
©å
,&
o_°buf
);

986 i‡(
maxÊíg
>(
uöt64_t
)(
o_°buf
.
°_size
)) {

987 
o_°buf
.
°_size
=
maxÊíg
;

989 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, (
	`mfs_©å_gë_m©å
(
©å
)&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
);

990 
	}
}

992 
	$mfs_mknod
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
, 
dev_t
 
rdev
) {

993 
fu£_íåy_∑øm
 
e
;

994 
uöt32_t
 
öode
;

995 
uöt8_t
 
©å
[35];

996 
uöt8_t
 
m©å
;

997 
uöt32_t
 
∆íg
;

998 
°©us
;

999 
uöt8_t
 
ty≥
;

1000 c⁄° 
fu£_˘x
 *
˘x
;

1002 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1003 
	`›log_¥ötf
(
˘x
,"mknod (%lu,%s,0%04o,0x%08lX)",()
∑ª¡
,
«me
,()
mode
,()
rdev
);

1004 
	`mfs_°©s_öc
(
OP_MKNOD
);

1005 i‡(
debug_mode
) {

1006 
	`Ârötf
(
°dîr
,"mknod (%lu,%s,0%04o,0x%08lX)\n",()
∑ª¡
,
«me
,()
mode
,()
rdev
);

1008 
∆íg
 = 
	`°æí
(
«me
);

1009 i‡(
∆íg
>
MFS_NAME_MAX
) {

1010 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1013 i‡(
	`S_ISFIFO
(
mode
)) {

1014 
ty≥
 = 
TYPE_FIFO
;

1015 } i‡(
	`S_ISCHR
(
mode
)) {

1016 
ty≥
 = 
TYPE_CHARDEV
;

1017 } i‡(
	`S_ISBLK
(
mode
)) {

1018 
ty≥
 = 
TYPE_BLOCKDEV
;

1019 } i‡(
	`S_ISSOCK
(
mode
)) {

1020 
ty≥
 = 
TYPE_SOCKET
;

1021 } i‡(
	`S_ISREG
(
mode
) || (mode&0170000)==0) {

1022 
ty≥
 = 
TYPE_FILE
;

1024 
	`fu£_ª∂y_îr
(
ªq
, 
EPERM
);

1028 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1029 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1030 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1035 
°©us
 = 
	`fs_mknod
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
ty≥
,
mode
&07777,
˘x
->
uid
,˘x->
gid
,
rdev
,&
öode
,
©å
);

1036 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1037 i‡(
°©us
!=0) {

1038 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1043 
	`mem£t
(&
e
, 0, (e));

1044 
e
.
öo
 = 
öode
;

1045 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1046 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

1047 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:
íåy_ˇche_timeout
;

1048 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

1049 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

1051 
	}
}

1053 
	$mfs_u∆ök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

1054 
uöt32_t
 
∆íg
;

1055 
°©us
;

1056 c⁄° 
fu£_˘x
 *
˘x
;

1058 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1059 
	`›log_¥ötf
(
˘x
,"u∆ök (%lu,%s)",()
∑ª¡
,
«me
);

1060 
	`mfs_°©s_öc
(
OP_UNLINK
);

1061 i‡(
debug_mode
) {

1062 
	`Ârötf
(
°dîr
,"u∆ök (%lu,%s)\n",()
∑ª¡
,
«me
);

1064 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1065 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1066 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1071 
∆íg
 = 
	`°æí
(
«me
);

1072 i‡(
∆íg
>
MFS_NAME_MAX
) {

1073 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1077 
°©us
 = 
	`fs_u∆ök
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
˘x
->
uid
,˘x->
gid
);

1078 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1079 i‡(
°©us
!=0) {

1080 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1085 
	`fu£_ª∂y_îr
(
ªq
, 0);

1087 
	}
}

1089 
	$mfs_mkdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
) {

1090 
fu£_íåy_∑øm
 
e
;

1091 
uöt32_t
 
öode
;

1092 
uöt8_t
 
©å
[35];

1093 
uöt8_t
 
m©å
;

1094 
uöt32_t
 
∆íg
;

1095 
°©us
;

1096 c⁄° 
fu£_˘x
 *
˘x
;

1098 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1099 
	`›log_¥ötf
(
˘x
,"mkdú (%lu,%s,0%04o)",()
∑ª¡
,
«me
,()
mode
);

1100 
	`mfs_°©s_öc
(
OP_MKDIR
);

1101 i‡(
debug_mode
) {

1102 
	`Ârötf
(
°dîr
,"mkdú (%lu,%s,0%04o)\n",()
∑ª¡
,
«me
,()
mode
);

1104 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1105 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1106 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1110 
∆íg
 = 
	`°æí
(
«me
);

1111 i‡(
∆íg
>
MFS_NAME_MAX
) {

1112 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1116 
°©us
 = 
	`fs_mkdú
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
mode
,
˘x
->
uid
,˘x->
gid
,
mkdú_c›y_sgid
,&
öode
,
©å
);

1117 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1118 i‡(
°©us
!=0) {

1119 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1124 
	`mem£t
(&
e
, 0, (e));

1125 
e
.
öo
 = 
öode
;

1126 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1127 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

1128 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:
dúíåy_ˇche_timeout
;

1129 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

1130 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

1132 
	}
}

1134 
	$mfs_rmdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

1135 
uöt32_t
 
∆íg
;

1136 
°©us
;

1137 c⁄° 
fu£_˘x
 *
˘x
;

1139 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1140 
	`›log_¥ötf
(
˘x
,"rmdú (%lu,%s)",()
∑ª¡
,
«me
);

1141 
	`mfs_°©s_öc
(
OP_RMDIR
);

1142 i‡(
debug_mode
) {

1143 
	`Ârötf
(
°dîr
,"rmdú (%lu,%s)\n",()
∑ª¡
,
«me
);

1145 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1146 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1147 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1151 
∆íg
 = 
	`°æí
(
«me
);

1152 i‡(
∆íg
>
MFS_NAME_MAX
) {

1153 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1157 
°©us
 = 
	`fs_rmdú
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
˘x
->
uid
,˘x->
gid
);

1158 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1159 i‡(
°©us
!=0) {

1160 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1165 
	`fu£_ª∂y_îr
(
ªq
, 0);

1167 
	}
}

1169 
	$mfs_symlök
(
fu£_ªq_t
 
ªq
, c⁄° *
∑th
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

1170 
fu£_íåy_∑øm
 
e
;

1171 
uöt32_t
 
öode
;

1172 
uöt8_t
 
©å
[35];

1173 
uöt8_t
 
m©å
;

1174 
uöt32_t
 
∆íg
;

1175 
°©us
;

1176 c⁄° 
fu£_˘x
 *
˘x
;

1178 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1179 
	`›log_¥ötf
(
˘x
,"symlök (%s,%lu,%s)",
∑th
,()
∑ª¡
,
«me
);

1180 
	`mfs_°©s_öc
(
OP_SYMLINK
);

1181 i‡(
debug_mode
) {

1182 
	`Ârötf
(
°dîr
,"symlök (%s,%lu,%s)\n",
∑th
,()
∑ª¡
,
«me
);

1184 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1185 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1186 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1190 
∆íg
 = 
	`°æí
(
«me
);

1191 i‡(
∆íg
>
MFS_NAME_MAX
) {

1192 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1196 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1197 
°©us
 = 
	`fs_symlök
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,(c⁄° uöt8_t*)
∑th
,
˘x
->
uid
,˘x->
gid
,&
öode
,
©å
);

1198 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1199 i‡(
°©us
!=0) {

1200 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1205 
	`mem£t
(&
e
, 0, (e));

1206 
e
.
öo
 = 
öode
;

1207 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1208 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

1209 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:
íåy_ˇche_timeout
;

1210 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

1211 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

1213 
	}
}

1215 
	$mfs_ªadlök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
) {

1216 
°©us
;

1217 c⁄° 
uöt8_t
 *
∑th
;

1218 c⁄° 
fu£_˘x
 *
˘x
;

1220 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1221 i‡(
debug_mode
) {

1222 
	`Ârötf
(
°dîr
,"ªadlök (%lu)\n",()
öo
);

1224 i‡(
	`symlök_ˇche_£¨ch
(
öo
,&
∑th
)) {

1225 
	`mfs_°©s_öc
(
OP_READLINK_CACHED
);

1226 
	`fu£_ª∂y_ªadlök
(
ªq
, (*)
∑th
);

1227 
	`›log_¥ötf
(
˘x
,"ªadlök (%luË(d©®found i¿ˇche)",()
öo
);

1230 
	`mfs_°©s_öc
(
OP_READLINK
);

1231 
°©us
 = 
	`fs_ªadlök
(
öo
,&
∑th
);

1232 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1233 i‡(
°©us
!=0) {

1234 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1235 
	`›log_¥ötf
(
˘x
,"ªadlök (%luË(d©®nŸ found i¿ˇche: %s)",()
öo
,
	`°ªº
(
°©us
));

1237 
	`symlök_ˇche_ö£π
(
öo
,
∑th
);

1238 
	`fu£_ª∂y_ªadlök
(
ªq
, (*)
∑th
);

1239 
	`›log_¥ötf
(
˘x
,"ªadlök (%luË(d©®nŸ found i¿ˇche)",()
öo
);

1241 
	}
}

1243 
	$mfs_ª«me
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
) {

1244 
uöt32_t
 
∆íg
,
√w∆íg
;

1245 
°©us
;

1246 
uöt32_t
 
öode
;

1247 
uöt8_t
 
©å
[35];

1248 c⁄° 
fu£_˘x
 *
˘x
;

1250 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1251 
	`›log_¥ötf
(
˘x
,"ª«mê(%lu,%s,%lu,%s)",()
∑ª¡
,
«me
,()
√w∑ª¡
,
√w«me
);

1252 
	`mfs_°©s_öc
(
OP_RENAME
);

1253 i‡(
debug_mode
) {

1254 
	`Ârötf
(
°dîr
,"ª«mê(%lu,%s,%lu,%s)\n",()
∑ª¡
,
«me
,()
√w∑ª¡
,
√w«me
);

1256 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1257 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1258 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1262 i‡(
√w∑ª¡
==
FUSE_ROOT_ID
) {

1263 i‡(
	`IS_SPECIAL_NAME
(
√w«me
)) {

1264 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1268 
∆íg
 = 
	`°æí
(
«me
);

1269 i‡(
∆íg
>
MFS_NAME_MAX
) {

1270 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1273 
√w∆íg
 = 
	`°æí
(
√w«me
);

1274 i‡(
√w∆íg
>
MFS_NAME_MAX
) {

1275 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1279 
°©us
 = 
	`fs_ª«me
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
√w∑ª¡
,
√w∆íg
,(c⁄° uöt8_t*)
√w«me
,
˘x
->
uid
,˘x->
gid
,&
öode
,
©å
);

1280 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1281 i‡(
°©us
!=0) {

1282 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1288 
	`fu£_ª∂y_îr
(
ªq
, 0);

1290 
	}
}

1292 
	$mfs_lök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
) {

1293 
uöt32_t
 
√w∆íg
;

1294 
°©us
;

1295 
fu£_íåy_∑øm
 
e
;

1296 
uöt32_t
 
öode
;

1297 
uöt8_t
 
©å
[35];

1298 
uöt8_t
 
m©å
;

1299 c⁄° 
fu£_˘x
 *
˘x
;

1301 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1302 
	`›log_¥ötf
(
˘x
,"lök (%lu,%lu,%s)",()
öo
,()
√w∑ª¡
,
√w«me
);

1303 
	`mfs_°©s_öc
(
OP_LINK
);

1304 i‡(
debug_mode
) {

1305 
	`Ârötf
(
°dîr
,"lök (%lu,%lu,%s)\n",()
öo
,()
√w∑ª¡
,
√w«me
);

1307 i‡(
	`IS_SPECIAL_INODE
(
öo
)) {

1308 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1311 i‡(
√w∑ª¡
==
FUSE_ROOT_ID
) {

1312 i‡(
	`IS_SPECIAL_NAME
(
√w«me
)) {

1313 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

1317 
√w∆íg
 = 
	`°æí
(
√w«me
);

1318 i‡(
√w∆íg
>
MFS_NAME_MAX
) {

1319 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1324 
°©us
 = 
	`fs_lök
(
öo
,
√w∑ª¡
,
√w∆íg
,(c⁄° 
uöt8_t
*)
√w«me
,
˘x
->
uid
,˘x->
gid
,&
öode
,
©å
);

1325 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1326 i‡(
°©us
!=0) {

1327 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1332 
	`mem£t
(&
e
, 0, (e));

1333 
e
.
öo
 = 
öode
;

1334 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1335 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

1336 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:
íåy_ˇche_timeout
;

1337 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

1338 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

1340 
	}
}

1342 
	$mfs_›ídú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

1343 
dúbuf
 *
dúöfo
;

1344 
°©us
;

1345 c⁄° 
fu£_˘x
 *
˘x
;

1347 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1348 
	`›log_¥ötf
(
˘x
,"›ídú (%lu)",()
öo
);

1349 
	`mfs_°©s_öc
(
OP_OPENDIR
);

1350 i‡(
debug_mode
) {

1351 
	`Ârötf
(
°dîr
,"›ídú (%lu)\n",()
öo
);

1353 i‡(
	`IS_SPECIAL_INODE
(
öo
)) {

1354 
	`fu£_ª∂y_îr
(
ªq
, 
ENOTDIR
);

1356 
°©us
 = 
	`fs_ac˚ss
(
öo
,
˘x
->
uid
,˘x->
gid
,
MODE_MASK_R
);

1357 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1358 i‡(
°©us
!=0) {

1359 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1361 
dúöfo
 = 
	`mÆloc
((
dúbuf
));

1362 
	`±hªad_muãx_öô
(&(
dúöfo
->
lock
),
NULL
);

1363 
	`±hªad_muãx_lock
(&(
dúöfo
->
lock
));

1364 
dúöfo
->
p
 = 
NULL
;

1365 
dúöfo
->
size
 = 0;

1366 
dúöfo
->
dˇche
 = 
NULL
;

1367 
dúöfo
->
wa§ód
 = 0;

1368 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

1369 
fi
->
fh
 = ()
dúöfo
;

1370 i‡(
	`fu£_ª∂y_›í
(
ªq
,
fi
Ë=-
ENOENT
) {

1371 
fi
->
fh
 = 0;

1372 
	`±hªad_muãx_de°roy
(&(
dúöfo
->
lock
));

1373 
	`‰ì
(
dúöfo
);

1376 
	}
}

1378 
	$mfs_ªaddú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

1379 
°©us
;

1380 
dúbuf
 *
dúöfo
 = (dúbu‡*)(()(
fi
->
fh
));

1381 
buf„r
[
READDIR_BUFFSIZE
];

1382 
«me
[
MFS_NAME_MAX
+1];

1383 c⁄° 
uöt8_t
 *
±r
,*
ïå
;

1384 
uöt8_t
 
íd
;

1385 
size_t
 
›os
,
ﬁíg
;

1386 
uöt8_t
 
∆íg
;

1387 
uöt32_t
 
öode
;

1388 
uöt8_t
 
ty≥
;

1389 
°©
 
°buf
;

1390 c⁄° 
fu£_˘x
 *
˘x
;

1392 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1393 
	`›log_¥ötf
(
˘x
,"ªaddú (%lu,%Œu,%Œu)",()
öo
,()
size
,()
off
);

1394 
	`mfs_°©s_öc
(
OP_READDIR
);

1395 i‡(
debug_mode
) {

1396 
	`Ârötf
(
°dîr
,"ªaddú (%lu,%Œu,%Œu)\n",()
öo
,()
size
,()
off
);

1398 i‡(
off
<0) {

1399 
	`fu£_ª∂y_îr
(
ªq
,
EINVAL
);

1402 
	`±hªad_muãx_lock
(&(
dúöfo
->
lock
));

1403 i‡(
dúöfo
->
wa§ód
==0 || (dúöfo->wa§ód==1 && 
off
==0)) {

1404 c⁄° 
uöt8_t
 *
dbuff
;

1405 
uöt32_t
 
dsize
;

1406 
uöt8_t
 
√edsc›y
;

1426 i‡(
u£dúˇche
) {

1427 
°©us
 = 
	`fs_gëdú_∂us
(
öo
,
˘x
->
uid
,˘x->
gid
,0,&
dbuff
,&
dsize
);

1428 i‡(
°©us
==0) {

1429 
	`mfs_°©s_öc
(
OP_GETDIR_FULL
);

1431 
√edsc›y
 = 1;

1432 
dúöfo
->
d©af‹m©
 = 1;

1434 
°©us
 = 
	`fs_gëdú
(
öo
,
˘x
->
uid
,˘x->
gid
,&
dbuff
,&
dsize
);

1435 i‡(
°©us
==0) {

1436 
	`mfs_°©s_öc
(
OP_GETDIR_SMALL
);

1438 
√edsc›y
 = 1;

1439 
dúöfo
->
d©af‹m©
 = 0;

1441 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1442 i‡(
°©us
!=0) {

1443 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1444 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

1447 i‡(
dúöfo
->
dˇche
) {

1448 
	`dˇche_ªÀa£
(
dúöfo
->
dˇche
);

1449 
dúöfo
->
dˇche
 = 
NULL
;

1451 i‡(
dúöfo
->
p
) {

1452 
	`‰ì
((
uöt8_t
*)(
dúöfo
->
p
));

1453 
dúöfo
->
p
 = 
NULL
;

1455 i‡(
√edsc›y
) {

1456 
dúöfo
->
p
 = 
	`mÆloc
(
dsize
);

1457 i‡(
dúöfo
->
p
 =
NULL
) {

1458 
	`fu£_ª∂y_îr
(
ªq
,
EINVAL
);

1459 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

1462 
	`mem˝y
((
uöt8_t
*)(
dúöfo
->
p
),
dbuff
,
dsize
);

1464 
dúöfo
->
p
 = 
dbuff
;

1466 
dúöfo
->
size
 = 
dsize
;

1467 i‡(
u£dúˇche
 && 
dúöfo
->
d©af‹m©
==1) {

1468 
dúöfo
->
dˇche
 = 
	`dˇche_√w
(
˘x
,
öo
,dúöfo->
p
,dúöfo->
size
);

1471 
dúöfo
->
wa§ód
=1;

1473 i‡(
off
>=(
off_t
)(
dúöfo
->
size
)) {

1474 
	`fu£_ª∂y_buf
(
ªq
, 
NULL
, 0);

1476 i‡(
size
>
READDIR_BUFFSIZE
) {

1477 
size
=
READDIR_BUFFSIZE
;

1479 
±r
 = 
dúöfo
->
p
+
off
;

1480 
ïå
 = 
dúöfo
->
p
+dúöfo->
size
;

1481 
›os
 = 0;

1482 
íd
 = 0;

1484 
±r
<
ïå
 && 
íd
==0) {

1485 
∆íg
 = 
±r
[0];

1486 
±r
++;

1487 
	`mem˝y
(
«me
,
±r
,
∆íg
);

1488 
«me
[
∆íg
]=0;

1489 
±r
+=
∆íg
;

1490 
off
+=
∆íg
+((
dúöfo
->
d©af‹m©
)?40:6);

1491 i‡(
±r
+5<=
ïå
) {

1492 
öode
 = 
	`gë32bô
(&
±r
);

1493 i‡(
dúöfo
->
d©af‹m©
) {

1494 
	`mfs_©å_to_°©
(
öode
,
±r
,&
°buf
);

1495 
±r
+=35;

1497 
ty≥
 = 
	`gë8bô
(&
±r
);

1498 
	`mfs_ty≥_to_°©
(
öode
,
ty≥
,&
°buf
);

1500 
ﬁíg
 = 
	`fu£_add_dúíåy
(
ªq
, 
buf„r
 + 
›os
, 
size
 - opos, 
«me
, &
°buf
, 
off
);

1501 i‡(
›os
+
ﬁíg
>
size
) {

1502 
íd
=1;

1504 
›os
+=
ﬁíg
;

1509 
	`fu£_ª∂y_buf
(
ªq
,
buf„r
,
›os
);

1511 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

1512 
	}
}

1514 
	$mfs_ªÀa£dú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

1515 ()
öo
;

1516 
dúbuf
 *
dúöfo
 = (dúbu‡*)(()(
fi
->
fh
));

1517 c⁄° 
fu£_˘x
 *
˘x
;

1519 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1520 
	`›log_¥ötf
(
˘x
,"ªÀa£dú (%lu)",()
öo
);

1521 
	`mfs_°©s_öc
(
OP_RELEASEDIR
);

1522 i‡(
debug_mode
) {

1523 
	`Ârötf
(
°dîr
,"ªÀa£dú (%lu)\n",()
öo
);

1525 
	`±hªad_muãx_lock
(&(
dúöfo
->
lock
));

1526 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

1527 
	`±hªad_muãx_de°roy
(&(
dúöfo
->
lock
));

1528 i‡(
dúöfo
->
dˇche
) {

1529 
	`dˇche_ªÀa£
(
dúöfo
->
dˇche
);

1531 i‡(
dúöfo
->
p
) {

1532 
	`‰ì
((
uöt8_t
*)(
dúöfo
->
p
));

1534 
	`‰ì
(
dúöfo
);

1535 
fi
->
fh
 = 0;

1536 
	`fu£_ª∂y_îr
(
ªq
,0);

1537 
	}
}

1540 
föfo
* 
	$mfs_√wfûeöfo
(
uöt8_t
 
accmode
,
uöt32_t
 
öode
) {

1541 
föfo
 *
fûeöfo
;

1542 
fûeöfo
 = 
	`mÆloc
((
föfo
));

1543 
	`±hªad_muãx_öô
(&(
fûeöfo
->
lock
),
NULL
);

1544 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

1545 #ifde‡
__FªeBSD__


1548 ()
accmode
;

1549 ()
öode
;

1550 
fûeöfo
->
mode
 = 
IO_NONE
;

1551 
fûeöfo
->
d©a
 = 
NULL
;

1553 i‡(
accmode
 =
O_RDONLY
) {

1554 
fûeöfo
->
mode
 = 
IO_READONLY
;

1555 
fûeöfo
->
d©a
 = 
	`ªad_d©a_√w
(
öode
);

1556 } i‡(
accmode
 =
O_WRONLY
) {

1557 
fûeöfo
->
mode
 = 
IO_WRITEONLY
;

1558 
fûeöfo
->
d©a
 = 
	`wrôe_d©a_√w
(
öode
);

1560 
fûeöfo
->
mode
 = 
IO_NONE
;

1561 
fûeöfo
->
d©a
 = 
NULL
;

1564 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

1565  
fûeöfo
;

1566 
	}
}

1568 
	$mfs_ªmovefûeöfo
(
föfo
* 
fûeöfo
) {

1569 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

1570 i‡(
fûeöfo
->
mode
 =
IO_READONLY
 || fûeöfo->modê=
IO_READ
) {

1571 
	`ªad_d©a_íd
(
fûeöfo
->
d©a
);

1572 } i‡(
fûeöfo
->
mode
 =
IO_WRITEONLY
 || fûeöfo->modê=
IO_WRITE
) {

1574 
	`wrôe_d©a_íd
(
fûeöfo
->
d©a
);

1576 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

1577 
	`±hªad_muãx_de°roy
(&(
fûeöfo
->
lock
));

1578 
	`‰ì
(
fûeöfo
);

1579 
	}
}

1581 
	$mfs_¸óã
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
, 
fu£_fûe_öfo
 *
fi
) {

1582 
fu£_íåy_∑øm
 
e
;

1583 
uöt32_t
 
öode
;

1584 
uöt8_t
 
oÊags
;

1585 
uöt8_t
 
©å
[35];

1586 
uöt8_t
 
m©å
;

1587 
uöt32_t
 
∆íg
;

1588 
°©us
;

1589 c⁄° 
fu£_˘x
 *
˘x
;

1590 
föfo
 *
fûeöfo
;

1592 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1593 
	`›log_¥ötf
(
˘x
,"¸óã (%lu,%s,0%04o)",()
∑ª¡
,
«me
,()
mode
);

1594 
	`mfs_°©s_öc
(
OP_CREATE
);

1595 i‡(
debug_mode
) {

1596 
	`Ârötf
(
°dîr
,"¸óã (%lu,%s,0%04o)\n",()
∑ª¡
,
«me
,()
mode
);

1598 i‡(
∑ª¡
==
FUSE_ROOT_ID
) {

1599 i‡(
	`IS_SPECIAL_NAME
(
«me
)) {

1600 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

1604 
∆íg
 = 
	`°æí
(
«me
);

1605 i‡(
∆íg
>
MFS_NAME_MAX
) {

1606 
	`fu£_ª∂y_îr
(
ªq
, 
ENAMETOOLONG
);

1610 
oÊags
 = 
AFTER_CREATE
;

1611 i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

1612 
oÊags
 |
WANT_READ
;

1613 } i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

1614 
oÊags
 |
WANT_WRITE
;

1615 } i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_RDWR
) {

1616 
oÊags
 |
WANT_READ
 | 
WANT_WRITE
;

1618 
	`fu£_ª∂y_îr
(
ªq
, 
EINVAL
);

1621 
°©us
 = 
	`fs_mknod
(
∑ª¡
,
∆íg
,(c⁄° 
uöt8_t
*)
«me
,
TYPE_FILE
,
mode
&07777,
˘x
->
uid
,˘x->
gid
,0,&
öode
,
©å
);

1622 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1623 i‡(
°©us
!=0) {

1624 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1630 
°©us
 = 
	`fs_›ícheck
(
öode
,
˘x
->
uid
,˘x->
gid
,
oÊags
,
NULL
);

1631 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1632 i‡(
°©us
!=0) {

1633 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1637 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1638 
fûeöfo
 = 
	`mfs_√wfûeöfo
(
fi
->
Êags
 & 
O_ACCMODE
,
öode
);

1639 
fi
->
fh
 = ()
fûeöfo
;

1640 i‡(
kìp_ˇche
==1) {

1641 
fi
->
kìp_ˇche
=1;

1642 } i‡(
kìp_ˇche
==2) {

1643 
fi
->
kìp_ˇche
=0;

1645 
fi
->
kìp_ˇche
 = (
m©å
&
MATTR_ALLOWDATACACHE
)?1:0;

1647 i‡(
debug_mode
) {

1648 
	`Ârötf
(
°dîr
,"¸óã (%luËok -> kì∞ˇche: %lu\n",()
öode
,()
fi
->
kìp_ˇche
);

1650 
	`mem£t
(&
e
, 0, (e));

1651 
e
.
öo
 = 
öode
;

1652 
e
.
©å_timeout
 = (
m©å
&
MATTR_NOACACHE
)?0.0:
©å_ˇche_timeout
;

1653 
e
.
íåy_timeout
 = (
m©å
&
MATTR_NOECACHE
)?0.0:
íåy_ˇche_timeout
;

1654 
	`mfs_©å_to_°©
(
öode
,
©å
,&
e
.attr);

1655 i‡(
	`fu£_ª∂y_¸óã
(
ªq
, &
e
, 
fi
Ë=-
ENOENT
) {

1656 
	`mfs_ªmovefûeöfo
(
fûeöfo
);

1658 
	}
}

1660 
	$mfs_›í
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

1661 
uöt8_t
 
oÊags
;

1662 
uöt8_t
 
©å
[35];

1663 
uöt8_t
 
m©å
;

1664 
°©us
;

1665 c⁄° 
fu£_˘x
 *
˘x
;

1666 
föfo
 *
fûeöfo
;

1668 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1669 
	`›log_¥ötf
(
˘x
,"›í (%lu)",()
öo
);

1670 
	`mfs_°©s_öc
(
OP_OPEN
);

1671 i‡(
debug_mode
) {

1672 
	`Ârötf
(
°dîr
,"›í (%lu)\n",()
öo
);

1694 i‡(
öo
==
MASTERINFO_INODE
) {

1695 i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë!
O_RDONLY
) {

1696 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

1699 
fi
->
fh
 = 0;

1700 
fi
->
dúe˘_io
 = 0;

1701 
fi
->
kìp_ˇche
 = 1;

1702 
	`fu£_ª∂y_›í
(
ªq
, 
fi
);

1706 i‡(
öo
==
STATS_INODE
) {

1707 
söfo
 *
°©söfo
;

1713 
°©söfo
 = 
	`mÆloc
((
söfo
));

1714 i‡(
°©söfo
==
NULL
) {

1715 
	`fu£_ª∂y_îr
(
ªq
,
ENOMEM
);

1718 
	`±hªad_muãx_öô
(&(
°©söfo
->
lock
),
NULL
);

1719 
	`±hªad_muãx_lock
(&(
°©söfo
->
lock
));

1720 
	`°©s_show_Æl
(&(
°©söfo
->
buff
),&(°©söfo->
Àng
));

1721 
°©söfo
->
ª£t
 = 0;

1722 
	`±hªad_muãx_u∆ock
(&(
°©söfo
->
lock
));

1723 
fi
->
fh
 = ()
°©söfo
;

1724 
fi
->
dúe˘_io
 = 1;

1725 
fi
->
kìp_ˇche
 = 0;

1726 
	`fu£_ª∂y_›í
(
ªq
, 
fi
);

1730 i‡(
öo
==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

1731 i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë!
O_RDONLY
) {

1732 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

1735 
fi
->
fh
 = 
	`›log_√wh™dÀ
((
öo
==
OPHISTORY_INODE
)?1:0);

1736 
fi
->
dúe˘_io
 = 1;

1737 
fi
->
kìp_ˇche
 = 0;

1738 
	`fu£_ª∂y_›í
(
ªq
, 
fi
);

1750 
oÊags
 = 0;

1751 i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

1752 
oÊags
 |
WANT_READ
;

1753 } i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

1754 
oÊags
 |
WANT_WRITE
;

1755 } i‡((
fi
->
Êags
 & 
O_ACCMODE
Ë=
O_RDWR
) {

1756 
oÊags
 |
WANT_READ
 | 
WANT_WRITE
;

1758 
°©us
 = 
	`fs_›ícheck
(
öo
,
˘x
->
uid
,˘x->
gid
,
oÊags
,
©å
);

1759 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

1760 i‡(
°©us
!=0) {

1761 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

1765 
m©å
 = 
	`mfs_©å_gë_m©å
(
©å
);

1766 
fûeöfo
 = 
	`mfs_√wfûeöfo
(
fi
->
Êags
 & 
O_ACCMODE
,
öo
);

1767 
fi
->
fh
 = ()
fûeöfo
;

1768 i‡(
kìp_ˇche
==1) {

1769 
fi
->
kìp_ˇche
=1;

1770 } i‡(
kìp_ˇche
==2) {

1771 
fi
->
kìp_ˇche
=0;

1773 
fi
->
kìp_ˇche
 = (
m©å
&
MATTR_ALLOWDATACACHE
)?1:0;

1775 i‡(
debug_mode
) {

1776 
	`Ârötf
(
°dîr
,"›í (%luËok -> kì∞ˇche: %lu\n",()
öo
,()
fi
->
kìp_ˇche
);

1779 i‡(
	`fu£_ª∂y_›í
(
ªq
, 
fi
Ë=-
ENOENT
) {

1780 
	`mfs_ªmovefûeöfo
(
fûeöfo
);

1782 
	}
}

1784 
	$mfs_ªÀa£
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

1785 
föfo
 *
fûeöfo
 = (föfo*)()(
fi
->
fh
);

1786 c⁄° 
fu£_˘x
 *
˘x
;

1788 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1789 
	`›log_¥ötf
(
˘x
,"ªÀa£ (%lu)",()
öo
);

1790 
	`mfs_°©s_öc
(
OP_RELEASE
);

1791 i‡(
debug_mode
) {

1792 
	`Ârötf
(
°dîr
,"ªÀa£ (%lu)\n",()
öo
);

1803 i‡(
öo
==
MASTERINFO_INODE
 ) {

1804 
	`fu£_ª∂y_îr
(
ªq
,0);

1807 i‡(
öo
==
STATS_INODE
) {

1808 
söfo
 *
°©söfo
 = (söfo*)()(
fi
->
fh
);

1809 i‡(
°©söfo
!=
NULL
) {

1810 
	`±hªad_muãx_lock
(&(
°©söfo
->
lock
));

1811 i‡(
°©söfo
->
buff
!=
NULL
) {

1812 
	`‰ì
(
°©söfo
->
buff
);

1814 i‡(
°©söfo
->
ª£t
) {

1815 
	`°©s_ª£t_Æl
();

1817 
	`±hªad_muãx_u∆ock
(&(
°©söfo
->
lock
));

1818 
	`±hªad_muãx_de°roy
(&(
°©söfo
->
lock
));

1819 
	`‰ì
(
°©söfo
);

1821 
	`fu£_ª∂y_îr
(
ªq
,0);

1824 i‡(
öo
==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

1825 
	`›log_ªÀa£h™dÀ
(
fi
->
fh
);

1826 
	`fu£_ª∂y_îr
(
ªq
,0);

1829 i‡(
fûeöfo
!=
NULL
) {

1830 
	`mfs_ªmovefûeöfo
(
fûeöfo
);

1832 
	`fs_ªÀa£
(
öo
);

1833 
	`fu£_ª∂y_îr
(
ªq
,0);

1834 
	}
}

1836 
	$mfs_ªad
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

1837 
föfo
 *
fûeöfo
 = (föfo*)()(
fi
->
fh
);

1838 
uöt8_t
 *
buff
;

1839 
uöt32_t
 
ssize
;

1840 
îr
;

1841 c⁄° 
fu£_˘x
 *
˘x
;

1843 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1844 i‡(
öo
!=
OPLOG_INODE
 && ino!=
OPHISTORY_INODE
) {

1845 
	`›log_¥ötf
(
˘x
,"ªad (%lu,%Œu,%Œu)",()
öo
,()
size
,()
off
);

1847 
	`mfs_°©s_öc
(
OP_READ
);

1848 i‡(
debug_mode
) {

1849 
	`Ârötf
(
°dîr
,"ªad from inodê%lu u∞tÿ%Œu byã†‰omÖosôi⁄ %Œu\n",()
öo
,()
size
,()
off
);

1851 i‡(
öo
==
MASTERINFO_INODE
) {

1852 
uöt8_t
 
ma°îöfo
[14];

1853 
	`fs_gëma°îloˇti⁄
(
ma°îöfo
);

1854 
	`ma°î¥oxy_gëloˇti⁄
(
ma°îöfo
);

1855 #ifde‡
MASTERINFO_WITH_VERSION


1856 i‡(
off
>=14) {

1857 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

1858 } i‡(
off
+
size
>14) {

1859 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),14-off);

1861 i‡(
off
>=10) {

1862 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

1863 } i‡(
off
+
size
>10) {

1864 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),10-off);

1867 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),
size
);

1871 i‡(
öo
==
STATS_INODE
) {

1872 
söfo
 *
°©söfo
 = (söfo*)()(
fi
->
fh
);

1873 i‡(
°©söfo
!=
NULL
) {

1874 
	`±hªad_muãx_lock
(&(
°©söfo
->
lock
));

1875 i‡(
off
>=
°©söfo
->
Àng
) {

1876 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

1877 } i‡((
uöt64_t
)(
off
+
size
)>(uöt64_t)(
°©söfo
->
Àng
)) {

1878 
	`fu£_ª∂y_buf
(
ªq
,
°©söfo
->
buff
+
off
,°©söfo->
Àng
-off);

1880 
	`fu£_ª∂y_buf
(
ªq
,
°©söfo
->
buff
+
off
,
size
);

1882 
	`±hªad_muãx_u∆ock
(&(
°©söfo
->
lock
));

1884 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

1888 i‡(
öo
==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

1889 
	`›log_gëd©a
(
fi
->
fh
,&
buff
,&
ssize
,
size
);

1890 
	`fu£_ª∂y_buf
(
ªq
,(*)
buff
,
ssize
);

1891 
	`›log_ªÀa£d©a
(
fi
->
fh
);

1912 i‡(
fûeöfo
==
NULL
) {

1913 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

1931 i‡(
off
>=
MAX_FILE_SIZE
 || off+
size
>=MAX_FILE_SIZE) {

1932 
	`fu£_ª∂y_îr
(
ªq
,
EFBIG
);

1935 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

1936 i‡(
fûeöfo
->
mode
==
IO_WRITEONLY
) {

1937 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

1938 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

1941 i‡(
fûeöfo
->
mode
==
IO_WRITE
) {

1942 
îr
 = 
	`wrôe_d©a_Êush
(
fûeöfo
->
d©a
);

1943 i‡(
îr
!=0) {

1944 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

1945 
	`fu£_ª∂y_îr
(
ªq
,
îr
);

1946 i‡(
debug_mode
) {

1947 
	`Ârötf
(
°dîr
,"IOÉº‹ occuªd whûêwrôtög inodê%lu\n",()
öo
);

1951 
	`wrôe_d©a_íd
(
fûeöfo
->
d©a
);

1953 i‡(
fûeöfo
->
mode
==
IO_WRITE
 || fûeöfo->mode==
IO_NONE
) {

1954 
fûeöfo
->
mode
 = 
IO_READ
;

1955 
fûeöfo
->
d©a
 = 
	`ªad_d©a_√w
(
öo
);

1957 
	`wrôe_d©a_Êush_öode
(
öo
);

1958 
ssize
 = 
size
;

1959 
buff
 = 
NULL
;

1960 
îr
 = 
	`ªad_d©a
(
fûeöfo
->
d©a
,
off
,&
ssize
,&
buff
);

1961 i‡(
îr
!=0) {

1962 
	`fu£_ª∂y_îr
(
ªq
,
îr
);

1963 i‡(
debug_mode
) {

1964 
	`Ârötf
(
°dîr
,"IOÉº‹ occuªd whûêªadög inodê%lu\n",()
öo
);

1967 
	`fu£_ª∂y_buf
(
ªq
,(*)
buff
,
ssize
);

1968 i‡(
debug_mode
) {

1969 
	`Ârötf
(
°dîr
,"%"
PRIu32
" byã†havêbì¿ªad from inodê%lu\n",
ssize
,()
öo
);

1972 
	`ªad_d©a_‰ìbuff
(
fûeöfo
->
d©a
);

1973 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

1974 
	}
}

1976 
	$mfs_wrôe
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
buf
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

1977 
föfo
 *
fûeöfo
 = (föfo*)()(
fi
->
fh
);

1978 
îr
;

1979 c⁄° 
fu£_˘x
 *
˘x
;

1981 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

1982 
	`›log_¥ötf
(
˘x
,"wrôê(%lu,%Œu,%Œu)",()
öo
,()
size
,()
off
);

1983 
	`mfs_°©s_öc
(
OP_WRITE
);

1984 i‡(
debug_mode
) {

1985 
	`Ârötf
(
°dîr
,"wrôêtÿöodê%lu %Œu byã†©Öosôi⁄ %Œu\n",()
öo
,()
size
,()
off
);

1987 i‡(
öo
==
MASTERINFO_INODE
 || ino==
OPLOG_INODE
 || ino==
OPHISTORY_INODE
) {

1988 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

1991 i‡(
öo
==
STATS_INODE
) {

1992 
söfo
 *
°©söfo
 = (söfo*)()(
fi
->
fh
);

1993 i‡(
°©söfo
!=
NULL
) {

1994 
	`±hªad_muãx_lock
(&(
°©söfo
->
lock
));

1995 
°©söfo
->
ª£t
=1;

1996 
	`±hªad_muãx_u∆ock
(&(
°©söfo
->
lock
));

1998 
	`fu£_ª∂y_wrôe
(
ªq
,
size
);

2011 i‡(
fûeöfo
==
NULL
) {

2012 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

2024 i‡(
off
>=
MAX_FILE_SIZE
 || off+
size
>=MAX_FILE_SIZE) {

2025 
	`fu£_ª∂y_îr
(
ªq
, 
EFBIG
);

2028 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

2029 i‡(
fûeöfo
->
mode
==
IO_READONLY
) {

2030 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

2031 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

2034 i‡(
fûeöfo
->
mode
==
IO_READ
) {

2035 
	`ªad_d©a_íd
(
fûeöfo
->
d©a
);

2037 i‡(
fûeöfo
->
mode
==
IO_READ
 || fûeöfo->mode==
IO_NONE
) {

2038 
fûeöfo
->
mode
 = 
IO_WRITE
;

2039 
fûeöfo
->
d©a
 = 
	`wrôe_d©a_√w
(
öo
);

2041 
îr
 = 
	`wrôe_d©a
(
fûeöfo
->
d©a
,
off
,
size
,(c⁄° 
uöt8_t
*)
buf
);

2042 i‡(
îr
!=0) {

2043 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

2044 
	`fu£_ª∂y_îr
(
ªq
,
îr
);

2045 i‡(
debug_mode
) {

2046 
	`Ârötf
(
°dîr
,"IOÉº‹ occuªd whûêwrôtög inodê%lu\n",()
öo
);

2049 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

2050 
	`fu£_ª∂y_wrôe
(
ªq
,
size
);

2051 i‡(
debug_mode
) {

2052 
	`Ârötf
(
°dîr
,"%Œu byã†havêbì¿wrôã¿tÿöodê%lu\n",()
size
,()
öo
);

2055 
	}
}

2057 
	$mfs_Êush
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

2058 
föfo
 *
fûeöfo
 = (föfo*)()(
fi
->
fh
);

2059 
îr
;

2060 c⁄° 
fu£_˘x
 *
˘x
;

2062 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

2063 
	`›log_¥ötf
(
˘x
,"Êush (%lu)",()
öo
);

2064 
	`mfs_°©s_öc
(
OP_FLUSH
);

2065 i‡(
debug_mode
) {

2066 
	`Ârötf
(
°dîr
,"Êush (%lu)\n",()
öo
);

2068 i‡(
	`IS_SPECIAL_INODE
(
öo
)) {

2069 
	`fu£_ª∂y_îr
(
ªq
,0);

2072 i‡(
fûeöfo
==
NULL
) {

2073 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

2077 
îr
 = 0;

2078 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

2079 i‡(
fûeöfo
->
mode
==
IO_WRITE
 || fûeöfo->mode==
IO_WRITEONLY
) {

2080 
îr
 = 
	`wrôe_d©a_Êush
(
fûeöfo
->
d©a
);

2082 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

2083 
	`fu£_ª∂y_îr
(
ªq
,
îr
);

2084 
	}
}

2086 
	$mfs_fsync
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
d©async
, 
fu£_fûe_öfo
 *
fi
) {

2087 
föfo
 *
fûeöfo
 = (föfo*)()(
fi
->
fh
);

2088 
îr
;

2089 c⁄° 
fu£_˘x
 *
˘x
;

2091 
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

2092 
	`›log_¥ötf
(
˘x
,"fsyn¯(%lu,%d)",()
öo
,
d©async
);

2093 
	`mfs_°©s_öc
(
OP_FSYNC
);

2094 i‡(
debug_mode
) {

2095 
	`Ârötf
(
°dîr
,"fsyn¯(%lu)\n",()
öo
);

2097 i‡(
	`IS_SPECIAL_INODE
(
öo
)) {

2098 
	`fu£_ª∂y_îr
(
ªq
,0);

2101 i‡(
fûeöfo
==
NULL
) {

2102 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

2105 
îr
 = 0;

2106 
	`±hªad_muãx_lock
(&(
fûeöfo
->
lock
));

2107 i‡(
fûeöfo
->
mode
==
IO_WRITE
 || fûeöfo->mode==
IO_WRITEONLY
) {

2108 
îr
 = 
	`wrôe_d©a_Êush
(
fûeöfo
->
d©a
);

2110 
	`±hªad_muãx_u∆ock
(&(
fûeöfo
->
lock
));

2111 
	`fu£_ª∂y_îr
(
ªq
,
îr
);

2112 
	}
}

2114 #i‡
FUSE_USE_VERSION
 >= 26

2135 
	$mfs_öô
(
debug_mode_ö
,
kìp_ˇche_ö
,
dúíåy_ˇche_timeout_ö
,
íåy_ˇche_timeout_ö
,
©å_ˇche_timeout_ö
,
mkdú_c›y_sgid_ö
,
sugid_˛ór_mode_ö
) {

2136 c⁄° * 
sugid_˛ór_mode_°rögs
[] = {
SUGID_CLEAR_MODE_STRINGS
};

2137 
debug_mode
 = 
debug_mode_ö
;

2138 
kìp_ˇche
 = 
kìp_ˇche_ö
;

2139 
dúíåy_ˇche_timeout
 = 
dúíåy_ˇche_timeout_ö
;

2140 
íåy_ˇche_timeout
 = 
íåy_ˇche_timeout_ö
;

2141 
©å_ˇche_timeout
 = 
©å_ˇche_timeout_ö
;

2142 
mkdú_c›y_sgid
 = 
mkdú_c›y_sgid_ö
;

2143 
sugid_˛ór_mode
 = 
sugid_˛ór_mode_ö
;

2144 i‡(
debug_mode
) {

2145 
	`Ârötf
(
°dîr
,"ˇchê∑ømëîs: fûe_kìp_ˇche=%†dúíåy_ˇche_timeout=%.2l‡íåy_ˇche_timeout=%.2l‡©å_ˇche_timeout=%.2lf\n",(
kìp_ˇche
==1)?"Æways":(kìp_ˇche==2)?"√vî":"auto",
dúíåy_ˇche_timeout
,
íåy_ˇche_timeout
,
©å_ˇche_timeout
);

2146 
	`Ârötf
(
°dîr
,"mkdú c›y sgid=%d\nsugid cÀ¨ mode=%s\n",
mkdú_c›y_sgid_ö
,(
sugid_˛ór_mode_ö
<
SUGID_CLEAR_MODE_OPTIONS
)?
sugid_˛ór_mode_°rögs
[sugid_clear_mode_in]:"???");

2148 
	`mfs_°©•å_öô
();

2149 
	}
}

	@mfsmount/mfs_fuse.h

19 #i‚de‡
_MFS_FUSE_H_


20 
	#_MFS_FUSE_H_


	)

22 
	~<fu£_lowÀvñ.h
>

26 #i‡
FUSE_USE_VERSION
 >= 26

27 
mfs_°©fs
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
);

29 
mfs_°©fs
(
fu£_ªq_t
 
ªq
);

31 
mfs_ac˚ss
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
mask
);

32 
mfs_lookup
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

33 
mfs_gë©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

34 
mfs_£èâr
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
°©
 *
°buf
, 
to_£t
, 
fu£_fûe_öfo
 *
fi
);

35 
mfs_mknod
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
, 
dev_t
 
rdev
);

36 
mfs_u∆ök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

37 
mfs_mkdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
);

38 
mfs_rmdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

39 
mfs_symlök
(
fu£_ªq_t
 
ªq
, c⁄° *
∑th
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

40 
mfs_ªadlök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
);

41 
mfs_ª«me
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
);

42 
mfs_lök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
);

43 
mfs_›ídú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

44 
mfs_ªaddú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

45 
mfs_ªÀa£dú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

46 
mfs_¸óã
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, 
mode_t
 
mode
, 
fu£_fûe_öfo
 *
fi
);

47 
mfs_›í
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

48 
mfs_ªÀa£
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

49 
mfs_ªad
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

50 
mfs_wrôe
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
buf
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

51 
mfs_Êush
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

52 
mfs_fsync
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
d©async
, 
fu£_fûe_öfo
 *
fi
);

53 #i‡
FUSE_USE_VERSION
 >= 26

57 
mfs_öô
(
debug_mode_ö
,
kìp_ˇche_ö
,
dúíåy_ˇche_timeout_ö
,
íåy_ˇche_timeout_ö
,
©å_ˇche_timeout_ö
,
mkdú_c›y_sgid_ö
,
sugid_˛ór_mode_ö
);

	@mfsmount/mfs_meta_fuse.c

19 #i‡
deföed
(
__APPLE__
)

20 #i‚de‡
__DARWIN_64_BIT_INO_T


21 
	#__DARWIN_64_BIT_INO_T
 0

	)

25 
	~"c⁄fig.h
"

27 
	~<fu£_lowÀvñ.h
>

28 
	~<°dio.h
>

29 
	~<°rög.h
>

30 
	~<°dlib.h
>

31 
	~<sy¶og.h
>

32 
	~<î∫o.h
>

33 
	~<time.h
>

34 
	~<±hªad.h
>

36 
	~"d©≠ack.h
"

37 
	~"ma°îcomm.h
"

38 
	~"ma°î¥oxy.h
"

39 
	~"MFSCommuniˇti⁄.h
"

41 
	#READDIR_BUFFSIZE
 50000

	)

47 
	s_dúbuf
 {

48 
	mwa§ód
;

49 
uöt8_t
 *
	mp
;

50 
size_t
 
	msize
;

51 
±hªad_muãx_t
 
	mlock
;

52 } 
	tdúbuf
;

54 
	s_∑thbuf
 {

55 
	mch™ged
;

56 *
	mp
;

57 
size_t
 
	msize
;

58 
±hªad_muãx_t
 
	mlock
;

59 } 
	t∑thbuf
;

61 
	#NAME_MAX
 255

	)

62 
	#PATH_SIZE_LIMIT
 1024

	)

64 
	#META_ROOT_INODE
 
FUSE_ROOT_ID


	)

65 
	#META_ROOT_MODE
 0555

	)

67 
	#META_TRASH_INODE
 (
FUSE_ROOT_ID
+1)

	)

68 
	#META_TRASH_MODE
 0700

	)

69 
	#META_TRASH_NAME
 "åash"

	)

70 
	#META_UNDEL_INODE
 (
FUSE_ROOT_ID
+2)

	)

71 
	#META_UNDEL_MODE
 0200

	)

72 
	#META_UNDEL_NAME
 "undñ"

	)

73 
	#META_RESERVED_INODE
 (
FUSE_ROOT_ID
+3)

	)

74 
	#META_RESERVED_MODE
 0500

	)

75 
	#META_RESERVED_NAME
 "ª£rved"

	)

77 
	#META_INODE_MIN
 
META_ROOT_INODE


	)

78 
	#META_INODE_MAX
 
META_RESERVED_INODE


	)

80 
	#INODE_VALUE_MASK
 0x1FFFFFFF

	)

81 
	#INODE_TYPE_MASK
 0x60000000

	)

82 
	#INODE_TYPE_TRASH
 0x20000000

	)

83 
	#INODE_TYPE_RESERVED
 0x40000000

	)

84 
	#INODE_TYPE_SPECIAL
 0x00000000

	)

93 
	#MASTERINFO_NAME
 ".ma°îöfo"

	)

94 
	#MASTERINFO_INODE
 0x7FFFFFFE

	)

96 #ifde‡
MASTERINFO_WITH_VERSION


97 
uöt8_t
 
	gma°îöfﬂâr
[35]={'f', 0x01,0x24, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,14};

99 
uöt8_t
 
	gma°îöfﬂâr
[35]={'f', 0x01,0x24, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,1, 0,0,0,0,0,0,0,10};

106 
	#PKGVERSION
 ((
VERSMAJ
)*1000000+(
VERSMID
)*1000+(
VERSMIN
))

	)

108 
	gdebug_mode
 = 0;

109 
	gíåy_ˇche_timeout
 = 0.0;

110 
	g©å_ˇche_timeout
 = 1.0;

112 
uöt32_t
 
	$mfs_mëa_«me_to_öode
(c⁄° *
«me
) {

113 
uöt32_t
 
öode
=0;

114 *
íd
;

115 
öode
 = 
	`°πoul
(
«me
,&
íd
,16);

116 i‡(*
íd
=='|' &&Énd[1]!=0) {

117  
öode
;

121 
	}
}

123 
	$mfs_mëa_ty≥_to_°©
(
uöt32_t
 
öode
,
uöt8_t
 
ty≥
, 
°©
 *
°buf
) {

124 
	`mem£t
(
°buf
,0,(
°©
));

125 
°buf
->
°_öo
 = 
öode
;

126 
ty≥
) {

127 
TYPE_DIRECTORY
:

128 
°buf
->
°_mode
 = 
S_IFDIR
;

130 
TYPE_SYMLINK
:

131 
°buf
->
°_mode
 = 
S_IFLNK
;

133 
TYPE_FILE
:

134 
°buf
->
°_mode
 = 
S_IFREG
;

136 
TYPE_FIFO
:

137 
°buf
->
°_mode
 = 
S_IFIFO
;

139 
TYPE_SOCKET
:

140 
°buf
->
°_mode
 = 
S_IFSOCK
;

142 
TYPE_BLOCKDEV
:

143 
°buf
->
°_mode
 = 
S_IFBLK
;

145 
TYPE_CHARDEV
:

146 
°buf
->
°_mode
 = 
S_IFCHR
;

149 
°buf
->
°_mode
 = 0;

151 
	}
}

153 
	$mfs_îr‹c⁄v
(
°©us
) {

154 
°©us
) {

155 
STATUS_OK
:

157 
ERROR_EPERM
:

158  
EPERM
;

159 
ERROR_ENOTDIR
:

160  
ENOTDIR
;

161 
ERROR_ENOENT
:

162  
ENOENT
;

163 
ERROR_EACCES
:

164  
EACCES
;

165 
ERROR_EEXIST
:

166  
EEXIST
;

167 
ERROR_EINVAL
:

168  
EINVAL
;

169 
ERROR_ENOTEMPTY
:

170  
ENOTEMPTY
;

171 
ERROR_IO
:

172  
EIO
;

173 
ERROR_EROFS
:

174  
EROFS
;

175 
ERROR_QUOTA
:

176 #ifde‡
EDQUOT


177  
EDQUOT
;

179  
ENOSPC
;

182  
EINVAL
;

184 
	}
}

187 
	$mfs_mëa_°©
(
uöt32_t
 
öode
, 
°©
 *
°buf
) {

188 
now
;

189 
°buf
->
°_öo
 = 
öode
;

190 
°buf
->
°_size
 = 0;

191 
°buf
->
°_blocks
 = 0;

192 
öode
) {

193 
META_ROOT_INODE
:

194 
°buf
->
°_∆ök
 = 4;

195 
°buf
->
°_mode
 = 
S_IFDIR
 | 
META_ROOT_MODE
 ;

197 
META_TRASH_INODE
:

198 
°buf
->
°_∆ök
 = 3;

199 
°buf
->
°_mode
 = 
S_IFDIR
 | 
META_TRASH_MODE
 ;

201 
META_UNDEL_INODE
:

202 
°buf
->
°_∆ök
 = 2;

203 
°buf
->
°_mode
 = 
S_IFDIR
 | 
META_UNDEL_MODE
 ;

205 
META_RESERVED_INODE
:

206 
°buf
->
°_∆ök
 = 2;

207 
°buf
->
°_mode
 = 
S_IFDIR
 | 
META_RESERVED_MODE
 ;

210 
°buf
->
°_uid
 = 0;

211 
°buf
->
°_gid
 = 0;

212 
now
 = 
	`time
(
NULL
);

213 
°buf
->
°_©ime
 = 
now
;

214 
°buf
->
°_mtime
 = 
now
;

215 
°buf
->
°_˘ime
 = 
now
;

216 
	}
}

226 
	$mfs_©å_to_°©
(
uöt32_t
 
öode
,
uöt8_t
 
©å
[35], 
°©
 *
°buf
) {

227 
uöt16_t
 
©åmode
;

228 
uöt8_t
 
©åty≥
;

229 
uöt32_t
 
©åuid
,
©ågid
,
©å©ime
,
©åmtime
,
©å˘ime
,
©å∆ök
;

230 
uöt64_t
 
©åÀngth
;

231 c⁄° 
uöt8_t
 *
±r
;

232 
±r
 = 
©å
;

233 
©åty≥
 = 
	`gë8bô
(&
±r
);

234 
©åmode
 = 
	`gë16bô
(&
±r
);

235 
©åuid
 = 
	`gë32bô
(&
±r
);

236 
©ågid
 = 
	`gë32bô
(&
±r
);

237 
©å©ime
 = 
	`gë32bô
(&
±r
);

238 
©åmtime
 = 
	`gë32bô
(&
±r
);

239 
©å˘ime
 = 
	`gë32bô
(&
±r
);

240 
©å∆ök
 = 
	`gë32bô
(&
±r
);

241 
©åÀngth
 = 
	`gë64bô
(&
±r
);

242 
°buf
->
°_öo
 = 
öode
;

243 i‡(
©åty≥
==
TYPE_FILE
 ||áâπy≥==
TYPE_TRASH
 ||áâπy≥==
TYPE_RESERVED
) {

244 
°buf
->
°_mode
 = 
S_IFREG
 | ( 
©åmode
 & 07777);

246 
°buf
->
°_mode
 = 0;

248 
°buf
->
°_size
 = 
©åÀngth
;

249 
°buf
->
°_blocks
 = (
©åÀngth
+511)/512;

250 
°buf
->
°_uid
 = 
©åuid
;

251 
°buf
->
°_gid
 = 
©ågid
;

252 
°buf
->
°_©ime
 = 
©å©ime
;

253 
°buf
->
°_mtime
 = 
©åmtime
;

254 
°buf
->
°_˘ime
 = 
©å˘ime
;

255 
°buf
->
°_∆ök
 = 
©å∆ök
;

256 
	}
}

258 #i‡
FUSE_USE_VERSION
 >= 26

259 
	$mfs_mëa_°©fs
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
) {

261 
	$mfs_mëa_°©fs
(
fu£_ªq_t
 
ªq
) {

263 
uöt64_t
 
tŸÆ•a˚
,
avaû•a˚
,
åash•a˚
,
ª£rved•a˚
;

264 
uöt32_t
 
öodes
;

265 
°©vfs
 
°fsbuf
;

266 
	`mem£t
(&
°fsbuf
,0,(stfsbuf));

268 #i‡
FUSE_USE_VERSION
 >= 26

269 ()
öo
;

271 
	`fs_°©fs
(&
tŸÆ•a˚
,&
avaû•a˚
,&
åash•a˚
,&
ª£rved•a˚
,&
öodes
);

273 
°fsbuf
.
f_«memax
 = 
NAME_MAX
;

274 
°fsbuf
.
f_‰size
 = 512;

275 
°fsbuf
.
f_bsize
 = 512;

276 
°fsbuf
.
f_blocks
 = 
åash•a˚
/512+
ª£rved•a˚
/512;

277 
°fsbuf
.
f_b‰ì
 = 
ª£rved•a˚
/512;

278 
°fsbuf
.
f_bavaû
 = 
ª£rved•a˚
/512;

279 
°fsbuf
.
f_fûes
 = 1000000000+
PKGVERSION
;

280 
°fsbuf
.
f_f‰ì
 = 1000000000+
PKGVERSION
;

281 
°fsbuf
.
f_Ávaû
 = 1000000000+
PKGVERSION
;

283 
	`fu£_ª∂y_°©fs
(
ªq
,&
°fsbuf
);

284 
	}
}

314 
	$mfs_mëa_lookup
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

315 
fu£_íåy_∑øm
 
e
;

316 
uöt32_t
 
öode
;

319 
	`mem£t
(&
e
, 0, (e));

320 
öode
 = 0;

321 
∑ª¡
) {

322 
META_ROOT_INODE
:

323 i‡(
	`°rcmp
(
«me
,".")==0 || strcmp(name,"..")==0) {

324 
öode
 = 
META_ROOT_INODE
;

325 } i‡(
	`°rcmp
(
«me
,
META_TRASH_NAME
)==0) {

326 
öode
 = 
META_TRASH_INODE
;

327 } i‡(
	`°rcmp
(
«me
,
META_RESERVED_NAME
)==0) {

328 
öode
 = 
META_RESERVED_INODE
;

337 } i‡(
	`°rcmp
(
«me
,
MASTERINFO_NAME
)==0) {

338 
	`mem£t
(&
e
, 0, (e));

339 
e
.
öo
 = 
MASTERINFO_INODE
;

340 
e
.
©å_timeout
 = 3600.0;

341 
e
.
íåy_timeout
 = 3600.0;

342 
	`mfs_©å_to_°©
(
MASTERINFO_INODE
,
ma°îöfﬂâr
,&
e
.
©å
);

343 
	`fu£_ª∂y_íåy
(
ªq
, &
e
);

347 
META_TRASH_INODE
:

348 i‡(
	`°rcmp
(
«me
,".")==0) {

349 
öode
 = 
META_TRASH_INODE
;

350 } i‡(
	`°rcmp
(
«me
,"..")==0) {

351 
öode
 = 
META_ROOT_INODE
;

352 } i‡(
	`°rcmp
(
«me
,
META_UNDEL_NAME
)==0) {

353 
öode
 = 
META_UNDEL_INODE
;

355 
öode
 = 
	`mfs_mëa_«me_to_öode
(
«me
);

356 i‡(
öode
>0) {

357 
°©us
;

358 
uöt8_t
 
©å
[35];

359 
°©us
 = 
	`fs_gëdëached©å
(
öode
,
©å
);

360 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

361 i‡(
°©us
!=0) {

362 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

364 
e
.
öo
 = 
öode
 | 
INODE_TYPE_TRASH
;

365 
e
.
©å_timeout
 = 
©å_ˇche_timeout
;

366 
e
.
íåy_timeout
 = 
íåy_ˇche_timeout
;

367 
	`mfs_©å_to_°©
(
öode
 | 
INODE_TYPE_TRASH
,
©å
,&
e
.attr);

368 
	`fu£_ª∂y_íåy
(
ªq
,&
e
);

374 
META_UNDEL_INODE
:

375 i‡(
	`°rcmp
(
«me
,".")==0) {

376 
öode
 = 
META_UNDEL_INODE
;

377 } i‡(
	`°rcmp
(
«me
,"..")==0) {

378 
öode
 = 
META_TRASH_INODE
;

381 
META_RESERVED_INODE
:

382 i‡(
	`°rcmp
(
«me
,".")==0) {

383 
öode
 = 
META_RESERVED_INODE
;

384 } i‡(
	`°rcmp
(
«me
,"..")==0) {

385 
öode
 = 
META_ROOT_INODE
;

387 
öode
 = 
	`mfs_mëa_«me_to_öode
(
«me
);

388 i‡(
öode
>0) {

389 
°©us
;

390 
uöt8_t
 
©å
[35];

391 
°©us
 = 
	`fs_gëdëached©å
(
öode
,
©å
);

392 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

393 i‡(
°©us
!=0) {

394 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

396 
e
.
öo
 = 
öode
 | 
INODE_TYPE_RESERVED
;

397 
e
.
©å_timeout
 = 
©å_ˇche_timeout
;

398 
e
.
íåy_timeout
 = 
íåy_ˇche_timeout
;

399 
	`mfs_©å_to_°©
(
öode
 | 
INODE_TYPE_RESERVED
,
©å
,&
e
.attr);

400 
	`fu£_ª∂y_íåy
(
ªq
,&
e
);

407 i‡(
öode
==0) {

408 
	`fu£_ª∂y_îr
(
ªq
,
ENOENT
);

410 
e
.
öo
 = 
öode
;

411 
e
.
©å_timeout
 = 
©å_ˇche_timeout
;

412 
e
.
íåy_timeout
 = 
íåy_ˇche_timeout
;

413 
	`mfs_mëa_°©
(
öode
,&
e
.
©å
);

414 
	`fu£_ª∂y_íåy
(
ªq
,&
e
);

416 
	}
}

418 
	$mfs_mëa_gë©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

419 
°©
 
o_°buf
;

420 ()
fi
;

426 i‡(
öo
==
MASTERINFO_INODE
) {

427 
	`mem£t
(&
o_°buf
, 0, (
°©
));

428 
	`mfs_©å_to_°©
(
öo
,
ma°îöfﬂâr
,&
o_°buf
);

429 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 3600.0);

430 } i‡(
öo
>=
META_INODE_MIN
 && ino<=
META_INODE_MAX
) {

431 
	`mem£t
(&
o_°buf
, 0, (
°©
));

432 
	`mfs_mëa_°©
(
öo
,&
o_°buf
);

433 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 
©å_ˇche_timeout
);

434 } i‡((
öo
 & 
INODE_TYPE_MASK
Ë=
INODE_TYPE_TRASH
) {

435 
°©us
;

436 
uöt8_t
 
©å
[35];

437 
°©us
 = 
	`fs_gëdëached©å
(
öo
 & 
INODE_VALUE_MASK
,
©å
);

438 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

439 i‡(
°©us
!=0) {

440 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

442 
	`mem£t
(&
o_°buf
, 0, (
°©
));

443 
	`mfs_©å_to_°©
(
öo
,
©å
,&
o_°buf
);

444 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 
©å_ˇche_timeout
);

446 } i‡((
öo
 & 
INODE_TYPE_MASK
Ë=
INODE_TYPE_RESERVED
) {

447 
°©us
;

448 
uöt8_t
 
©å
[35];

449 
°©us
 = 
	`fs_gëdëached©å
(
öo
 & 
INODE_VALUE_MASK
,
©å
);

450 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

451 i‡(
°©us
!=0) {

452 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

454 
	`mem£t
(&
o_°buf
, 0, (
°©
));

455 
	`mfs_©å_to_°©
(
öo
,
©å
,&
o_°buf
);

456 
	`fu£_ª∂y_©å
(
ªq
, &
o_°buf
, 
©å_ˇche_timeout
);

459 
	`fu£_ª∂y_îr
(
ªq
, 
ENOENT
);

461 
	}
}

463 
	$mfs_mëa_£èâr
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
°©
 *
°buf
, 
to_£t
, 
fu£_fûe_öfo
 *
fi
) {

464 ()
to_£t
;

465 ()
°buf
;

466 
	`mfs_mëa_gë©å
(
ªq
,
öo
,
fi
);

467 
	}
}

469 
	$mfs_mëa_u∆ök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
) {

470 
°©us
;

471 
uöt32_t
 
öode
;

472 i‡(
∑ª¡
!=
META_TRASH_INODE
) {

473 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

476 
öode
 = 
	`mfs_mëa_«me_to_öode
(
«me
);

477 i‡(
öode
==0) {

478 
	`fu£_ª∂y_îr
(
ªq
,
ENOENT
);

481 
°©us
 = 
	`fs_purge
(
öode
);

482 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

484 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

488 
	}
}

490 
	$mfs_mëa_ª«me
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
) {

491 
°©us
;

492 
uöt32_t
 
öode
;

493 ()
√w«me
;

494 i‡(
∑ª¡
!=
META_TRASH_INODE
 && 
√w∑ª¡
!=
META_UNDEL_INODE
) {

495 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

498 
öode
 = 
	`mfs_mëa_«me_to_öode
(
«me
);

499 i‡(
öode
==0) {

500 
	`fu£_ª∂y_îr
(
ªq
,
ENOENT
);

503 
°©us
 = 
	`fs_undñ
(
öode
);

504 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

506 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

510 
	}
}

533 
uöt32_t
 
	$dú_më´¡rõs_size
(
uöt32_t
 
öo
) {

534 
öo
) {

535 
META_ROOT_INODE
:

536  4*6+1+2+
	`°æí
(
META_TRASH_NAME
)+°æí(
META_RESERVED_NAME
);

537 
META_TRASH_INODE
:

538  3*6+1+2+
	`°æí
(
META_UNDEL_NAME
);

539 
META_UNDEL_INODE
:

541 
META_RESERVED_INODE
:

545 
	}
}

547 
	$dú_më´¡rõs_fûl
(
uöt8_t
 *
buff
,
uöt32_t
 
öo
) {

548 
uöt8_t
 
l
;

549 
öo
) {

550 
META_ROOT_INODE
:

552 
	`put8bô
(&
buff
,1);

553 
	`put8bô
(&
buff
,'.');

554 
	`put32bô
(&
buff
,
META_ROOT_INODE
);

555 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

557 
	`put8bô
(&
buff
,2);

558 
	`put8bô
(&
buff
,'.');

559 
	`put8bô
(&
buff
,'.');

560 
	`put32bô
(&
buff
,
META_ROOT_INODE
);

561 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

563 
l
 = 
	`°æí
(
META_TRASH_NAME
);

564 
	`put8bô
(&
buff
,
l
);

565 
	`mem˝y
(
buff
,
META_TRASH_NAME
,
l
);

566 
buff
+=
l
;

567 
	`put32bô
(&
buff
,
META_TRASH_INODE
);

568 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

570 
l
 = 
	`°æí
(
META_RESERVED_NAME
);

571 
	`put8bô
(&
buff
,
l
);

572 
	`mem˝y
(
buff
,
META_RESERVED_NAME
,
l
);

573 
buff
+=
l
;

574 
	`put32bô
(&
buff
,
META_RESERVED_INODE
);

575 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

577 
META_TRASH_INODE
:

579 
	`put8bô
(&
buff
,1);

580 
	`put8bô
(&
buff
,'.');

581 
	`put32bô
(&
buff
,
META_TRASH_INODE
);

582 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

584 
	`put8bô
(&
buff
,2);

585 
	`put8bô
(&
buff
,'.');

586 
	`put8bô
(&
buff
,'.');

587 
	`put32bô
(&
buff
,
META_ROOT_INODE
);

588 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

590 
l
 = 
	`°æí
(
META_UNDEL_NAME
);

591 
	`put8bô
(&
buff
,
l
);

592 
	`mem˝y
(
buff
,
META_UNDEL_NAME
,
l
);

593 
buff
+=
l
;

594 
	`put32bô
(&
buff
,
META_UNDEL_INODE
);

595 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

597 
META_UNDEL_INODE
:

599 
	`put8bô
(&
buff
,1);

600 
	`put8bô
(&
buff
,'.');

601 
	`put32bô
(&
buff
,
META_UNDEL_INODE
);

602 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

604 
	`put8bô
(&
buff
,2);

605 
	`put8bô
(&
buff
,'.');

606 
	`put8bô
(&
buff
,'.');

607 
	`put32bô
(&
buff
,
META_TRASH_INODE
);

608 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

610 
META_RESERVED_INODE
:

612 
	`put8bô
(&
buff
,1);

613 
	`put8bô
(&
buff
,'.');

614 
	`put32bô
(&
buff
,
META_RESERVED_INODE
);

615 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

617 
	`put8bô
(&
buff
,2);

618 
	`put8bô
(&
buff
,'.');

619 
	`put8bô
(&
buff
,'.');

620 
	`put32bô
(&
buff
,
META_ROOT_INODE
);

621 
	`put8bô
(&
buff
,
TYPE_DIRECTORY
);

624 
	}
}

626 
uöt32_t
 
	$dú_d©´¡rõs_size
(c⁄° 
uöt8_t
 *
dbuff
,
uöt32_t
 
dsize
) {

627 
uöt8_t
 
∆íg
;

628 
uöt32_t
 
ñíg
;

629 c⁄° 
uöt8_t
 *
ïå
;

630 
ñíg
=0;

631 i‡(
dbuff
==
NULL
 || 
dsize
==0) {

634 
ïå
 = 
dbuff
+
dsize
;

635 
dbuff
<
ïå
) {

636 
∆íg
 = 
dbuff
[0];

637 
dbuff
+=5+
∆íg
;

638 i‡(
∆íg
>255-9) {

639 
ñíg
+=6+255;

641 
ñíg
+=6+
∆íg
+9;

644  
ñíg
;

645 
	}
}

647 
	$dú_d©´¡rõs_c⁄vît
(
uöt8_t
 *
buff
,c⁄° uöt8_à*
dbuff
,
uöt32_t
 
dsize
,uöt32_à
öodemask
) {

648 c⁄° *
«me
;

649 
uöt32_t
 
öode
;

650 
uöt8_t
 
∆íg
;

651 
uöt8_t
 
öﬁíg
;

652 c⁄° 
uöt8_t
 *
ïå
;

653 
ïå
 = 
dbuff
+
dsize
;

654 
dbuff
<
ïå
) {

655 
∆íg
 = 
dbuff
[0];

656 i‡(
dbuff
+
∆íg
+5<=
ïå
) {

657 
dbuff
++;

658 i‡(
∆íg
>255-9) {

659 
öﬁíg
 = 255;

661 
öﬁíg
 = 
∆íg
+9;

663 
	`put8bô
(&
buff
,
öﬁíg
);

664 
«me
 = (c⁄° *)
dbuff
;

665 
dbuff
+=
∆íg
;

666 
öode
 = 
	`gë32bô
(&
dbuff
);

667 
	`•rötf
((*)
buff
,"%08"
PRIX32
"|",
öode
);

668 i‡(
∆íg
>255-9) {

669 
	`mem˝y
(
buff
+9,
«me
,255-9);

670 
buff
+=255;

672 
	`mem˝y
(
buff
+9,
«me
,
∆íg
);

673 
buff
+=9+
∆íg
;

675 
öode
|=
öodemask
;

676 
	`put32bô
(&
buff
,
öode
);

677 
	`put8bô
(&
buff
,
TYPE_FILE
);

679 
	`sy¶og
(
LOG_WARNING
,"dir data malformed (trash)");

680 
dbuff
=
ïå
;

683 
	}
}

686 
	$dúbuf_mëa_fûl
(
dúbuf
 *
b
, 
uöt32_t
 
öo
) {

687 
°©us
;

688 
uöt32_t
 
msize
,
dcsize
,
imask
;

689 c⁄° 
uöt8_t
 *
dbuff
;

690 
uöt32_t
 
dsize
;

692 
b
->
p
 = 
NULL
;

693 
b
->
size
 = 0;

694 
msize
 = 
	`dú_më´¡rõs_size
(
öo
);

695 i‡(
öo
==
META_TRASH_INODE
) {

696 
°©us
 = 
	`fs_gëåash
(&
dbuff
,&
dsize
);

697 i‡(
°©us
!=
STATUS_OK
) {

700 
dcsize
 = 
	`dú_d©´¡rõs_size
(
dbuff
,
dsize
);

701 
imask
 = 
INODE_TYPE_TRASH
;

702 } i‡(
öo
==
META_RESERVED_INODE
) {

703 
°©us
 = 
	`fs_gëª£rved
(&
dbuff
,&
dsize
);

704 i‡(
°©us
!=
STATUS_OK
) {

707 
dcsize
 = 
	`dú_d©´¡rõs_size
(
dbuff
,
dsize
);

708 
imask
 = 
INODE_TYPE_RESERVED
;

710 
dcsize
 = 0;

711 
imask
 = 0;

713 i‡(
msize
+
dcsize
==0) {

716 
b
->
p
 = 
	`mÆloc
(
msize
+
dcsize
);

717 i‡(
b
->
p
==
NULL
) {

718 
	`sy¶og
(
LOG_WARNING
,"out of memory");

721 i‡(
msize
>0) {

722 
	`dú_më´¡rõs_fûl
(
b
->
p
,
öo
);

724 i‡(
dcsize
>0) {

725 
	`dú_d©´¡rõs_c⁄vît
(
b
->
p
+
msize
,
dbuff
,
dsize
,
imask
);

727 
b
->
size
 = 
msize
+
dcsize
;

728 
	}
}

730 
	$mfs_mëa_›ídú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

731 
dúbuf
 *
dúöfo
;

732 i‡(
öo
==
META_ROOT_INODE
 || ino==
META_TRASH_INODE
 || ino==
META_UNDEL_INODE
 || ino==
META_RESERVED_INODE
) {

733 
dúöfo
 = 
	`mÆloc
((
dúbuf
));

734 
	`±hªad_muãx_öô
(&(
dúöfo
->
lock
),
NULL
);

735 
dúöfo
->
p
 = 
NULL
;

736 
dúöfo
->
size
 = 0;

737 
dúöfo
->
wa§ód
 = 0;

738 
fi
->
fh
 = ()
dúöfo
;

739 i‡(
	`fu£_ª∂y_›í
(
ªq
,
fi
Ë=-
ENOENT
) {

740 
fi
->
fh
 = 0;

741 
	`±hªad_muãx_de°roy
(&(
dúöfo
->
lock
));

742 
	`‰ì
(
dúöfo
->
p
);

743 
	`‰ì
(
dúöfo
);

746 
	`fu£_ª∂y_îr
(
ªq
, 
ENOTDIR
);

748 
	}
}

750 
	$mfs_mëa_ªaddú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

751 
dúbuf
 *
dúöfo
 = (dúbu‡*)(()(
fi
->
fh
));

752 
buf„r
[
READDIR_BUFFSIZE
];

753 *
«me
,
c
;

754 c⁄° 
uöt8_t
 *
±r
,*
ïå
;

755 
uöt8_t
 
íd
;

756 
size_t
 
›os
,
ﬁíg
;

757 
uöt8_t
 
∆íg
;

758 
uöt32_t
 
öode
;

759 
uöt8_t
 
ty≥
;

760 
°©
 
°buf
;

762 i‡(
off
<0) {

763 
	`fu£_ª∂y_îr
(
ªq
,
EINVAL
);

766 
	`±hªad_muãx_lock
(&(
dúöfo
->
lock
));

767 i‡(
dúöfo
->
wa§ód
==0 || (dúöfo->wa§ód==1 && 
off
==0)) {

768 i‡(
dúöfo
->
p
!=
NULL
) {

769 
	`‰ì
(
dúöfo
->
p
);

771 
	`dúbuf_mëa_fûl
(
dúöfo
,
öo
);

774 
dúöfo
->
wa§ód
=1;

776 i‡(
off
>=(
off_t
)(
dúöfo
->
size
)) {

777 
	`fu£_ª∂y_buf
(
ªq
, 
NULL
, 0);

779 i‡(
size
>
READDIR_BUFFSIZE
) {

780 
size
=
READDIR_BUFFSIZE
;

782 
±r
 = (c⁄° 
uöt8_t
*)(
dúöfo
->
p
)+
off
;

783 
ïå
 = (c⁄° 
uöt8_t
*)(
dúöfo
->
p
)+dúöfo->
size
;

784 
›os
 = 0;

785 
íd
 = 0;

787 
±r
<
ïå
 && 
íd
==0) {

788 
∆íg
 = 
±r
[0];

789 
±r
++;

790 
«me
 = (*)
±r
;

791 
±r
+=
∆íg
;

792 
off
+=
∆íg
+6;

793 i‡(
±r
+5<=
ïå
) {

794 
öode
 = 
	`gë32bô
(&
±r
);

795 
ty≥
 = 
	`gë8bô
(&
±r
);

796 
	`mfs_mëa_ty≥_to_°©
(
öode
,
ty≥
,&
°buf
);

797 
c
 = 
«me
[
∆íg
];

798 
«me
[
∆íg
]=0;

799 
ﬁíg
 = 
	`fu£_add_dúíåy
(
ªq
, 
buf„r
 + 
›os
, 
size
 - opos, 
«me
, &
°buf
, 
off
);

800 
«me
[
∆íg
] = 
c
;

801 i‡(
›os
+
ﬁíg
>
size
) {

802 
íd
=1;

804 
›os
+=
ﬁíg
;

808 
	`fu£_ª∂y_buf
(
ªq
,
buf„r
,
›os
);

810 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

811 
	}
}

813 
	$mfs_mëa_ªÀa£dú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

814 ()
öo
;

815 
dúbuf
 *
dúöfo
 = (dúbu‡*)(()(
fi
->
fh
));

816 
	`±hªad_muãx_lock
(&(
dúöfo
->
lock
));

817 
	`±hªad_muãx_u∆ock
(&(
dúöfo
->
lock
));

818 
	`±hªad_muãx_de°roy
(&(
dúöfo
->
lock
));

819 
	`‰ì
(
dúöfo
->
p
);

820 
	`‰ì
(
dúöfo
);

821 
fi
->
fh
 = 0;

822 
	`fu£_ª∂y_îr
(
ªq
,0);

823 
	}
}

825 
	$mfs_mëa_›í
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

826 
∑thbuf
 *
∑thöfo
;

827 c⁄° 
uöt8_t
 *
∑th
;

829 
°©us
;

849 i‡(
öo
==
MASTERINFO_INODE
) {

850 
fi
->
fh
 = 0;

851 
fi
->
dúe˘_io
 = 0;

852 
fi
->
kìp_ˇche
 = 1;

853 
	`fu£_ª∂y_›í
(
ªq
, 
fi
);

856 i‡((
öo
 & 
INODE_TYPE_MASK
Ë=
INODE_TYPE_TRASH
) {

857 
°©us
 = 
	`fs_gëåash∑th
((
öo
&
INODE_VALUE_MASK
),&
∑th
);

858 
°©us
 = 
	`mfs_îr‹c⁄v
(status);

859 i‡(
°©us
!=0) {

860 
	`fu£_ª∂y_îr
(
ªq
, 
°©us
);

862 
∑thöfo
 = 
	`mÆloc
((
∑thbuf
));

863 
	`±hªad_muãx_öô
(&(
∑thöfo
->
lock
),
NULL
);

864 
∑thöfo
->
ch™ged
 = 0;

865 
∑thöfo
->
size
 = 
	`°æí
((*)
∑th
)+1;

866 
∑thöfo
->
p
 = 
	`mÆloc
’©höfo->
size
);

867 
	`mem˝y
(
∑thöfo
->
p
,
∑th
,∑thöfo->
size
-1);

868 
∑thöfo
->
p
[∑thöfo->
size
-1]='\n';

869 
fi
->
dúe˘_io
 = 1;

870 
fi
->
fh
 = ()
∑thöfo
;

871 i‡(
	`fu£_ª∂y_›í
(
ªq
,
fi
Ë=-
ENOENT
) {

872 
fi
->
fh
 = 0;

873 
	`±hªad_muãx_de°roy
(&(
∑thöfo
->
lock
));

874 
	`‰ì
(
∑thöfo
->
p
);

875 
	`‰ì
(
∑thöfo
);

879 
	`fu£_ª∂y_îr
(
ªq
, 
EACCES
);

881 
	}
}

883 
	$mfs_mëa_ªÀa£
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
) {

884 i‡(
öo
==
MASTERINFO_INODE
) {

885 
	`fu£_ª∂y_îr
(
ªq
,0);

897 
∑thbuf
 *
∑thöfo
 = (∑thbu‡*)(()(
fi
->
fh
));

898 
	`±hªad_muãx_lock
(&(
∑thöfo
->
lock
));

899 i‡(
∑thöfo
->
ch™ged
) {

900 i‡(
∑thöfo
->
p
[∑thöfo->
size
-1]=='\n') {

901 
∑thöfo
->
p
[∑thöfo->
size
-1]=0;

903 
∑thöfo
->
p
 = 
	`ªÆloc
’©höfo->p,∑thöfo->
size
+1);

904 
∑thöfo
->
p
[∑thöfo->
size
]=0;

906 
	`fs_£âøsh∑th
((
öo
&
INODE_VALUE_MASK
),(
uöt8_t
*)
∑thöfo
->
p
);

908 
	`±hªad_muãx_u∆ock
(&(
∑thöfo
->
lock
));

909 
	`±hªad_muãx_de°roy
(&(
∑thöfo
->
lock
));

910 
	`‰ì
(
∑thöfo
->
p
);

911 
	`‰ì
(
∑thöfo
);

912 
fi
->
fh
 = 0;

913 
	`fu£_ª∂y_îr
(
ªq
,0);

914 
	}
}

916 
	$mfs_mëa_ªad
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

917 
∑thbuf
 *
∑thöfo
 = (∑thbu‡*)(()(
fi
->
fh
));

918 i‡(
öo
==
MASTERINFO_INODE
) {

919 
uöt8_t
 
ma°îöfo
[14];

920 
	`fs_gëma°îloˇti⁄
(
ma°îöfo
);

921 
	`ma°î¥oxy_gëloˇti⁄
(
ma°îöfo
);

922 #ifde‡
MASTERINFO_WITH_VERSION


923 i‡(
off
>=14) {

924 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

925 } i‡(
off
+
size
>14) {

926 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),14-off);

928 i‡(
off
>=10) {

929 
	`fu£_ª∂y_buf
(
ªq
,
NULL
,0);

930 } i‡(
off
+
size
>10) {

931 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),10-off);

934 
	`fu£_ª∂y_buf
(
ªq
,(*)(
ma°îöfo
+
off
),
size
);

938 i‡(
∑thöfo
==
NULL
) {

939 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

958 
	`±hªad_muãx_lock
(&(
∑thöfo
->
lock
));

959 i‡(
off
<0) {

960 
	`±hªad_muãx_u∆ock
(&(
∑thöfo
->
lock
));

961 
	`fu£_ª∂y_îr
(
ªq
,
EINVAL
);

964 i‡((
size_t
)
off
>
∑thöfo
->
size
) {

965 
	`fu£_ª∂y_buf
(
ªq
, 
NULL
, 0);

966 } i‡(
off
 + 
size
 > 
∑thöfo
->size) {

967 
	`fu£_ª∂y_buf
(
ªq
, (
∑thöfo
->
p
)+
off
,’©höfo->
size
)-off);

969 
	`fu£_ª∂y_buf
(
ªq
, (
∑thöfo
->
p
)+
off
,
size
);

971 
	`±hªad_muãx_u∆ock
(&(
∑thöfo
->
lock
));

972 
	}
}

974 
	$mfs_mëa_wrôe
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
buf
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
) {

975 
∑thbuf
 *
∑thöfo
 = (∑thbu‡*)(()(
fi
->
fh
));

976 i‡(
öo
==
MASTERINFO_INODE
) {

977 
	`fu£_ª∂y_îr
(
ªq
,
EACCES
);

980 i‡(
∑thöfo
==
NULL
) {

981 
	`fu£_ª∂y_îr
(
ªq
,
EBADF
);

993 i‡(
off
 + 
size
 > 
PATH_SIZE_LIMIT
) {

994 
	`fu£_ª∂y_îr
(
ªq
,
EINVAL
);

997 
	`±hªad_muãx_lock
(&(
∑thöfo
->
lock
));

998 i‡(
∑thöfo
->
ch™ged
==0) {

999 
∑thöfo
->
size
 = 0;

1001 i‡(
off
+
size
 > 
∑thöfo
->size) {

1002 
size_t
 
s
 = 
∑thöfo
->
size
;

1003 
∑thöfo
->
p
 = 
	`ªÆloc
’©höfo->p,
off
+
size
);

1004 
∑thöfo
->
size
 = 
off
+size;

1005 
	`mem£t
(
∑thöfo
->
p
+
s
,0,
off
+
size
-s);

1007 
	`mem˝y
((
∑thöfo
->
p
)+
off
,
buf
,
size
);

1008 
∑thöfo
->
ch™ged
 = 1;

1009 
	`±hªad_muãx_u∆ock
(&(
∑thöfo
->
lock
));

1010 
	`fu£_ª∂y_wrôe
(
ªq
,
size
);

1011 
	}
}

1013 
	$mfs_mëa_öô
(
debug_mode_ö
,
íåy_ˇche_timeout_ö
,
©å_ˇche_timeout_ö
) {

1014 
debug_mode
 = 
debug_mode_ö
;

1015 
íåy_ˇche_timeout
 = 
íåy_ˇche_timeout_ö
;

1016 
©å_ˇche_timeout
 = 
©å_ˇche_timeout_ö
;

1017 i‡(
debug_mode
) {

1018 
	`Ârötf
(
°dîr
,"ˇchê∑ømëîs:É¡ry_ˇche_timeout=%.2l‡©å_ˇche_timeout=%.2lf\n",
íåy_ˇche_timeout
,
©å_ˇche_timeout
);

1020 
	}
}

	@mfsmount/mfs_meta_fuse.h

19 #i‚de‡
_MFS_META_FUSE_H_


20 
	#_MFS_META_FUSE_H_


	)

22 
	~<fu£_lowÀvñ.h
>

24 #i‡
FUSE_USE_VERSION
 >= 26

25 
mfs_mëa_°©fs
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
);

27 
mfs_mëa_°©fs
(
fu£_ªq_t
 
ªq
);

30 
mfs_mëa_lookup
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

31 
mfs_mëa_gë©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

32 
mfs_mëa_£èâr
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
°©
 *
°buf
, 
to_£t
, 
fu£_fûe_öfo
 *
fi
);

33 
mfs_mëa_u∆ök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
);

34 
mfs_mëa_ª«me
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
, fu£_öo_à
√w∑ª¡
, c⁄° *
√w«me
);

35 
mfs_mëa_›ídú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

36 
mfs_mëa_ªaddú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

37 
mfs_mëa_ªÀa£dú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

38 
mfs_mëa_›í
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

39 
mfs_mëa_ªÀa£
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
fu£_fûe_öfo
 *
fi
);

40 
mfs_mëa_ªad
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

41 
mfs_mëa_wrôe
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
buf
, 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

42 
mfs_mëa_öô
(
debug_mode_ö
,
íåy_ˇche_timeout_ö
,
©å_ˇche_timeout_ö
);

	@mfsmount/mfstools.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<m©h.h
>

24 
	~<limôs.h
>

25 
	~<°dlib.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/°©vfs.h
>

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

31 
	~<öây≥s.h
>

32 
	~<pﬁl.h
>

33 
	~<î∫o.h
>

35 
	~"d©≠ack.h
"

36 
	~"°ªº.h
"

37 
	~"sockës.h
"

38 
	~"MFSCommuniˇti⁄.h
"

40 
	#t˝ªad
(
s
,
b
,
l
Ë
	`t˝t‹ód
(s,b,l,10000)

	)

41 
	#t˝wrôe
(
s
,
b
,
l
Ë
	`t˝towrôe
(s,b,l,10000)

	)

43 
	#STR_AUX
(
x
Ë#x

	)

44 
	#STR
(
x
Ë
	`STR_AUX
(x)

	)

45 c⁄° 
	gid
[]="@(#Ëvîsi⁄: " 
STR
(
VERSMAJ
Ë"." STR(
VERSMID
Ë"." STR(
VERSMIN
) ", written by Jakub Kruszona-Zawadzki";

47 
	#INODE_VALUE_MASK
 0x1FFFFFFF

	)

48 
	#INODE_TYPE_MASK
 0x60000000

	)

49 
	#INODE_TYPE_TRASH
 0x20000000

	)

50 
	#INODE_TYPE_RESERVED
 0x40000000

	)

51 
	#INODE_TYPE_SPECIAL
 0x00000000

	)

53 c⁄° * 
	góâπab
[
EATTR_BITS
]={
EATTR_STRINGS
};

54 c⁄° * 
	góârdesc
[
EATTR_BITS
]={
EATTR_DESCRIPTIONS
};

56 
ölöe
 c⁄° * 
	$mfs_°ªº‹
(
uöt8_t
 
°©us
) {

57 c⁄° * 
îπab
[]={
ERROR_STRINGS
};

58 i‡(
°©us
>
ERROR_MAX
) {

59 
°©us
=
ERROR_MAX
;

61  
îπab
[
°©us
];

62 
	}
}

64 
uöt8_t
 
	ghumode
=0;

66 
	#PHN_USESI
 0x01

	)

67 
	#PHN_USEIEC
 0x00

	)

68 
	$¥öt_hum™ized_numbî
(c⁄° *
f‹m©
,
uöt64_t
 
numbî
,
uöt8_t
 
Êags
) {

69 
numbuf
[6];

70 
uöt64_t
 
divis‹
;

71 
uöt16_t
 
b
;

72 
uöt8_t
 
i
;

73 
uöt8_t
 
sˇÀ
;

75 i‡(
Êags
 & 
PHN_USESI
) {

76 
divis‹
 = 1000;

78 
divis‹
 = 1024;

80 i‡(
numbî
>(
UINT64_MAX
/100)) {

81 
numbî
 /
divis‹
;

82 
numbî
 *= 100;

83 
sˇÀ
 = 1;

85 
numbî
 *= 100;

86 
sˇÀ
 = 0;

88 
numbî
>=99950) {

89 
numbî
 /
divis‹
;

90 
sˇÀ
+=1;

92 
i
=0;

93 i‡(
numbî
<995 && 
sˇÀ
>0) {

94 
b
 = ((
uöt32_t
)
numbî
 + 5) / 10;

95 
numbuf
[
i
++]=(
b
/10)+'0';

96 
numbuf
[
i
++]='.';

97 
numbuf
[
i
++]=(
b
%10)+'0';

99 
b
 = ((
uöt32_t
)
numbî
 + 50) / 100;

100 i‡(
b
>=100) {

101 
numbuf
[
i
++]=(
b
/100)+'0';

102 
b
%=100;

104 i‡(
b
>=10 || 
i
>0) {

105 
numbuf
[
i
++]=(
b
/10)+'0';

106 
b
%=10;

108 
numbuf
[
i
++]=
b
+'0';

110 i‡(
sˇÀ
>0) {

111 i‡(
Êags
&
PHN_USESI
) {

112 
numbuf
[
i
++]="-kMGTPE"[
sˇÀ
];

114 
numbuf
[
i
++]="-KMGTPE"[
sˇÀ
];

115 
numbuf
[
i
++]='i';

118 
numbuf
[
i
++]='\0';

119 
	`¥ötf
(
f‹m©
,
numbuf
);

120 
	}
}

122 
	$¥öt_numbî
(c⁄° *
¥efix
,c⁄° *
suffix
,
uöt64_t
 
numbî
,
uöt8_t
 
mode32
,uöt8_à
byãsÊag
,uöt8_à
dÊag
) {

123 i‡(
¥efix
) {

124 
	`¥ötf
("%s",
¥efix
);

126 i‡(
dÊag
) {

127 i‡(
humode
>0) {

128 i‡(
byãsÊag
) {

129 i‡(
humode
==1 || humode==3) {

130 
	`¥öt_hum™ized_numbî
("%5sB",
numbî
,
PHN_USEIEC
);

132 
	`¥öt_hum™ized_numbî
("%4sB",
numbî
,
PHN_USESI
);

135 i‡(
humode
==1 || humode==3) {

136 
	`¥öt_hum™ized_numbî
(" %5s",
numbî
,
PHN_USEIEC
);

138 
	`¥öt_hum™ized_numbî
(" %4s",
numbî
,
PHN_USESI
);

141 i‡(
humode
>2) {

142 i‡(
mode32
) {

143 
	`¥ötf
(" (%10"
PRIu32
")",(
uöt32_t
)
numbî
);

145 
	`¥ötf
(" (%20"
PRIu64
")",
numbî
);

149 i‡(
mode32
) {

150 
	`¥ötf
("%10"
PRIu32
,(
uöt32_t
)
numbî
);

152 
	`¥ötf
("%20"
PRIu64
,
numbî
);

156 
humode
) {

158 i‡(
mode32
) {

159 
	`¥ötf
(" -");

161 
	`¥ötf
(" -");

165 
	`¥ötf
(" -");

168 
	`¥ötf
(" -");

171 i‡(
mode32
) {

172 
	`¥ötf
(" -");

174 
	`¥ötf
(" -");

178 i‡(
mode32
) {

179 
	`¥ötf
(" -");

181 
	`¥ötf
(" -");

186 i‡(
suffix
) {

187 
	`¥ötf
("%s",
suffix
);

189 
	}
}

191 
	$my_gë_numbî
(c⁄° *
°r
,
uöt64_t
 *
ªt
,
max
,
uöt8_t
 
byãsÊag
) {

192 
uöt64_t
 
vÆ
,
‰ac
,
‰acdiv
;

193 
drvÆ
,
mu…
;

194 
f
;

195 
vÆ
=0;

196 
‰ac
=0;

197 
‰acdiv
=1;

198 
f
=0;

199 *
°r
>='0' && *str<='9') {

200 
f
=1;

201 
vÆ
*=10;

202 
vÆ
+=(*
°r
-'0');

203 
°r
++;

205 i‡(*
°r
=='.') {

206 
°r
++;

207 *
°r
>='0' && *str<='9') {

208 
‰acdiv
*=10;

209 
‰ac
*=10;

210 
‰ac
+=(*
°r
-'0');

211 
°r
++;

213 i‡(
‰acdiv
==1) {

216 } i‡(
f
==0) {

219 i‡(
°r
[0]=='\0' || (
byãsÊag
 && str[0]=='B' && str[1]=='\0')) {

220 
mu…
=1.0;

221 } i‡(
°r
[0]!='\0' && (°r[1]=='\0' || (
byãsÊag
 && str[1]=='B' && str[2]=='\0'))) {

222 
°r
[0]) {

224 
mu…
=1e3;

227 
mu…
=1e6;

230 
mu…
=1e9;

233 
mu…
=1e12;

236 
mu…
=1e15;

239 
mu…
=1e18;

244 } i‡(
°r
[0]!='\0' && så[1]=='i' && (°r[2]=='\0' || (
byãsÊag
 && str[2]=='B' && str[3]=='\0'))) {

245 
°r
[0]) {

247 
mu…
=1024.0;

250 
mu…
=1048576.0;

253 
mu…
=1073741824.0;

256 
mu…
=1099511627776.0;

259 
mu…
=1125899906842624.0;

262 
mu…
=1152921504606846976.0;

270 
drvÆ
 = 
	`round
((()
‰ac
/()
‰acdiv
+()
vÆ
)*
mu…
);

271 i‡(
drvÆ
>
max
) {

274 *
ªt
 = 
drvÆ
;

277 
	}
}

279 
	$bsd_ba£«me
(c⁄° *
∑th
,*
b«me
) {

280 c⁄° *
ídp
, *
°¨ç
;

283 i‡(
∑th
 =
NULL
 || *path == '\0') {

284 ()
	`°r˝y
(
b«me
, ".");

289 
ídp
 = 
∑th
 + 
	`°æí
(path) - 1;

290 
ídp
 > 
∑th
 && *endp == '/') {

291 
ídp
--;

295 i‡(
ídp
 =
∑th
 && *endp == '/') {

296 ()
	`°r˝y
(
b«me
, "/");

301 
°¨ç
 = 
ídp
;

302 
°¨ç
 > 
∑th
 && *(startp - 1) != '/') {

303 
°¨ç
--;

305 i‡(
ídp
 - 
°¨ç
 + 2 > 
PATH_MAX
) {

308 ()
	`°∫˝y
(
b«me
, 
°¨ç
, 
ídp
 - startp + 1);

309 
b«me
[
ídp
 - 
°¨ç
 + 1] = '\0';

311 
	}
}

313 
	$bsd_dú«me
(c⁄° *
∑th
,*
b«me
) {

314 c⁄° *
ídp
;

317 i‡(
∑th
 =
NULL
 || *path == '\0') {

318 ()
	`°r˝y
(
b«me
, ".");

323 
ídp
 = 
∑th
 + 
	`°æí
(path) - 1;

324 
ídp
 > 
∑th
 && *endp == '/') {

325 
ídp
--;

329 
ídp
 > 
∑th
 && *endp != '/') {

330 
ídp
--;

334 i‡(
ídp
 =
∑th
) {

335 ()
	`°r˝y
(
b«me
, *
ídp
 == '/' ? "/" : ".");

339 
ídp
--;

340 } 
ídp
 > 
∑th
 && *endp == '/');

343 i‡(
ídp
 - 
∑th
 + 2 > 
PATH_MAX
) {

346 ()
	`°∫˝y
(
b«me
, 
∑th
, 
ídp
 -Öath + 1);

347 
b«me
[
ídp
 - 
∑th
 + 1] = '\0';

349 
	}
}

375 
	$ma°î_ªgi°î_ﬁd
(
rfd
) {

376 
uöt32_t
 
i
;

377 c⁄° 
uöt8_t
 *
Ωå
;

378 
uöt8_t
 *
w±r
,
ªgbuff
[8+72];

380 
w±r
 = 
ªgbuff
;

381 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

382 
	`put32bô
(&
w±r
,68);

383 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_TOOLS_NOACL
,64);

384 
w±r
+=64;

385 
	`put16bô
(&
w±r
,
VERSMAJ
);

386 
	`put8bô
(&
w±r
,
VERSMID
);

387 
	`put8bô
(&
w±r
,
VERSMIN
);

388 i‡(
	`t˝wrôe
(
rfd
,
ªgbuff
,8+68)!=8+68) {

389 
	`¥ötf
("registerÅo master: sendÉrror\n");

392 i‡(
	`t˝ªad
(
rfd
,
ªgbuff
,9)!=9) {

393 
	`¥ötf
("registerÅo master:ÑeceiveÉrror\n");

396 
Ωå
 = 
ªgbuff
;

397 
i
 = 
	`gë32bô
(&
Ωå
);

398 i‡(
i
!=
MATOCL_FUSE_REGISTER
) {

399 
	`¥ötf
("registerÅo master: wrongánswer (type)\n");

402 
i
 = 
	`gë32bô
(&
Ωå
);

403 i‡(
i
!=1) {

404 
	`¥ötf
("registerÅo master: wrongánswer (length)\n");

407 i‡(*
Ωå
) {

408 
	`¥ötf
("ªgi°îÅÿma°î: %s\n",
	`mfs_°ªº‹
(*
Ωå
));

412 
	}
}

414 
	$ma°î_ªgi°î
(
rfd
,
uöt32_t
 
cuid
) {

415 
uöt32_t
 
i
;

416 c⁄° 
uöt8_t
 *
Ωå
;

417 
uöt8_t
 *
w±r
,
ªgbuff
[8+73];

419 
w±r
 = 
ªgbuff
;

420 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REGISTER
);

421 
	`put32bô
(&
w±r
,73);

422 
	`mem˝y
(
w±r
,
FUSE_REGISTER_BLOB_ACL
,64);

423 
w±r
+=64;

424 
	`put8bô
(&
w±r
,
REGISTER_TOOLS
);

425 
	`put32bô
(&
w±r
,
cuid
);

426 
	`put16bô
(&
w±r
,
VERSMAJ
);

427 
	`put8bô
(&
w±r
,
VERSMID
);

428 
	`put8bô
(&
w±r
,
VERSMIN
);

429 i‡(
	`t˝wrôe
(
rfd
,
ªgbuff
,8+73)!=8+73) {

430 
	`¥ötf
("registerÅo master: sendÉrror\n");

433 i‡(
	`t˝ªad
(
rfd
,
ªgbuff
,9)!=9) {

434 
	`¥ötf
("registerÅo master:ÑeceiveÉrror\n");

437 
Ωå
 = 
ªgbuff
;

438 
i
 = 
	`gë32bô
(&
Ωå
);

439 i‡(
i
!=
MATOCL_FUSE_REGISTER
) {

440 
	`¥ötf
("registerÅo master: wrongánswer (type)\n");

443 
i
 = 
	`gë32bô
(&
Ωå
);

444 i‡(
i
!=1) {

445 
	`¥ötf
("registerÅo master: wrongánswer (length)\n");

448 i‡(*
Ωå
) {

449 
	`¥ötf
("ªgi°îÅÿma°î: %s\n",
	`mfs_°ªº‹
(*
Ωå
));

453 
	}
}

455 
dev_t
 
	gcuºít_devi˚
 = 0;

456 
	gcuºít_ma°î
 = -1;

457 
uöt32_t
 
	gma°îvîsi⁄
 = 0;

459 
	$›í_ma°î_c⁄n
(c⁄° *
«me
,
uöt32_t
 *
öode
,
mode_t
 *
mode
,
uöt8_t
 
√edßmedev
,uöt8_à
√edrwfs
) {

460 
Ω©h
[
PATH_MAX
],*
p
;

461 
≠©h
[
PATH_MAX
];

462 
°©
 
°b
;

463 
°©vfs
 
°vfsb
;

464 
sd
;

465 
uöt8_t
 
ma°îöfo
[14];

466 c⁄° 
uöt8_t
 *
mùå
;

467 
uöt8_t
 
˙t
;

468 
uöt32_t
 
ma°îù
;

469 
uöt16_t
 
ma°îp‹t
;

470 
uöt32_t
 
ma°îcuid
;

472 
Ω©h
[0]=0;

473 i‡(
	`ªÆ∑th
(
«me
,
Ω©h
)==
NULL
) {

474 
	`¥ötf
("%s:ÑóÕ©hÉº‹ o¿(%s): %s\n",
«me
,
Ω©h
,
	`°ªº
(
î∫o
));

477 
p
 = 
Ω©h
;

478 i‡(
√edrwfs
) {

479 i‡(
	`°©vfs
(
p
,&
°vfsb
)!=0) {

480 
	`¥ötf
("%s: (%sË°©vf†îr‹: %s\n",
«me
,
p
,
	`°ªº
(
î∫o
));

483 i‡(
°vfsb
.
f_Êag
&
ST_RDONLY
) {

484 
	`¥ötf
("%s: (%sËRód-⁄ly fûêsy°em\n",
«me
,
p
);

488 i‡(
	`l°©
(
p
,&
°b
)!=0) {

489 
	`¥ötf
("%s: (%sËl°©Éº‹: %s\n",
«me
,
p
,
	`°ªº
(
î∫o
));

492 *
öode
 = 
°b
.
°_öo
;

493 i‡(
mode
) {

494 *
mode
 = 
°b
.
°_mode
;

496 i‡(
cuºít_ma°î
>=0) {

497 i‡(
cuºít_devi˚
==
°b
.
°_dev
) {

498  
cuºít_ma°î
;

500 i‡(
√edßmedev
) {

501 
	`¥ötf
("%s: dif„ª¡ devi˚\n",
«me
);

505 i‡(
cuºít_ma°î
>=0) {

506 
	`˛o£
(
cuºít_ma°î
);

507 
cuºít_ma°î
=-1;

509 
cuºít_devi˚
 = 
°b
.
°_dev
;

511 i‡(
°b
.
°_öo
==1) {

513 
p
 = 
	`°rˇt
(p,"/.masterinfo");

514 i‡(
	`l°©
(
p
,&
°b
)==0) {

515 i‡((
°b
.
°_öo
==0x7FFFFFFF || stb.°_öo==0x7FFFFFFEË&& stb.
°_∆ök
==1 && stb.
°_uid
==0 && stb.
°_gid
==0 && (°b.
°_size
==10 || stb.st_size==14)) {

516 i‡(
°b
.
°_öo
==0x7FFFFFFE) {

517 i‡(((*
öode
)&
INODE_TYPE_MASK
)!=
INODE_TYPE_TRASH
 && ((*öode)&INODE_TYPE_MASK)!=
INODE_TYPE_RESERVED
) {

518 
	`¥ötf
("%s: o∆y fûe†ö 'åash'ánd 'ª£rved'áª ußbÀ i¿mfsmëa\n",
«me
);

521 (*
öode
)&=
INODE_VALUE_MASK
;

523 
sd
 = 
	`›í
(
p
,
O_RDONLY
);

524 i‡(
°b
.
°_size
==10) {

525 i‡(
	`ªad
(
sd
,
ma°îöfo
,10)!=10) {

526 
	`¥ötf
("%s: c™'àªad '.ma°îöfo'\n",
«me
);

527 
	`˛o£
(
sd
);

530 } i‡(
°b
.
°_size
==14) {

531 i‡(
	`ªad
(
sd
,
ma°îöfo
,14)!=14) {

532 
	`¥ötf
("%s: c™'àªad '.ma°îöfo'\n",
«me
);

533 
	`˛o£
(
sd
);

537 
	`˛o£
(
sd
);

538 
mùå
 = 
ma°îöfo
;

539 
ma°îù
 = 
	`gë32bô
(&
mùå
);

540 
ma°îp‹t
 = 
	`gë16bô
(&
mùå
);

541 
ma°îcuid
 = 
	`gë32bô
(&
mùå
);

542 i‡(
°b
.
°_size
==14) {

543 
ma°îvîsi⁄
 = 
	`gë32bô
(&
mùå
);

545 
ma°îvîsi⁄
 = 0;

547 i‡(
ma°îù
==0 || 
ma°îp‹t
==0 || 
ma°îcuid
==0) {

548 
	`¥ötf
("%s: inc‹ª˘ '.ma°îöfo'\n",
«me
);

551 
˙t
=0;

552 
˙t
<10) {

553 
sd
 = 
	`t˝sockë
();

554 i‡(
sd
<0) {

555 
	`¥ötf
("%s: c™'à¸óã c⁄√˘i⁄ sockë: %s\n",
«me
,
	`°ªº
(
î∫o
));

558 i‡(
	`t˝numtoc⁄√˘
(
sd
,
ma°îù
,
ma°îp‹t
,(
˙t
%2)?(300*(1<<(cnt>>1))):(200*(1<<(cnt>>1))))<0) {

559 
˙t
++;

560 i‡(
˙t
==10) {

561 
	`¥ötf
("%s: c™'àc⁄√˘Åÿma°î (.ma°îöfo): %s\n",
«me
,
	`°ªº
(
î∫o
));

564 
	`t˝˛o£
(
sd
);

566 
˙t
=10;

569 i‡(
	`ma°î_ªgi°î
(
sd
,
ma°îcuid
)<0) {

570 
	`¥ötf
("%s: c™'àªgi°îÅÿma°î (.ma°îöfo)\n",
«me
);

573 
cuºít_ma°î
 = 
sd
;

574  
sd
;

577 
p
[
	`°æí
(p)-4]=0;

578 i‡(
	`l°©
(
p
,&
°b
)==0) {

579 i‡((
°b
.
°_öo
==0x7FFFFFFF || stb.°_öo==0x7FFFFFFEË&& stb.
°_∆ök
==1 && stb.
°_uid
==0 && stb.
°_gid
==0) {

580 i‡(
°b
.
°_öo
==0x7FFFFFFE) {

581 i‡(((*
öode
)&
INODE_TYPE_MASK
)!=
INODE_TYPE_TRASH
 && ((*öode)&INODE_TYPE_MASK)!=
INODE_TYPE_RESERVED
) {

582 
	`¥ötf
("%s: o∆y fûe†ö 'åash'ánd 'ª£rved'áª ußbÀ i¿mfsmëa\n",
«me
);

585 (*
öode
)&=
INODE_VALUE_MASK
;

587 
	`Ârötf
(
°dîr
,"old version of mfsmount detected - using oldánd deprecated version ofÖrotocol -Ölease upgrade your mfsmount\n");

588 
sd
 = 
	`›í
(
p
,
O_RDWR
);

589 i‡(
	`ma°î_ªgi°î_ﬁd
(
sd
)<0) {

590 
	`¥ötf
("%s: c™'àªgi°îÅÿma°î (.ma°î / oldÖrŸocﬁ)\n",
«me
);

593 
cuºít_ma°î
 = 
sd
;

594  
sd
;

597 
	`¥ötf
("%s:ÇŸ MFS obje˘\n",
«me
);

600 i‡(
p
[0]!='/' ||Ö[1]=='\0') {

601 
	`¥ötf
("%s:ÇŸ MFS obje˘\n",
«me
);

604 i‡(
	`bsd_dú«me
(
p
,
≠©h
)<0) {

605 
	`¥ötf
("%s: (%sËdú«mêîr‹\n",
«me
,
p
);

607 
	`°r˝y
(
Ω©h
,
≠©h
);

608 
p
=
Ω©h
;

609 i‡(
	`l°©
(
p
,&
°b
)!=0) {

610 
	`¥ötf
("%s: (%sËl°©Éº‹: %s\n",
«me
,
p
,
	`°ªº
(
î∫o
));

615 
	}
}

617 
	$˛o£_ma°î_c⁄n
(
îr
) {

618 i‡(
cuºít_ma°î
<0) {

621 i‡(
îr
) {

622 
	`˛o£
(
cuºít_ma°î
);

623 
cuºít_ma°î
 = -1;

624 
cuºít_devi˚
 = 0;

626 
	}
}

751 
	$check_fûe
(c⁄° * 
‚ame
) {

752 
uöt8_t
 
ªqbuff
[16],*
w±r
,*
buff
;

753 c⁄° 
uöt8_t
 *
Ωå
;

754 
uöt32_t
 
cmd
,
Àng
,
öode
;

755 
uöt8_t
 
c›õs
;

756 
uöt32_t
 
chunks
;

757 
fd
;

758 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

759 i‡(
fd
<0) {

762 
w±r
 = 
ªqbuff
;

763 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_CHECK
);

764 
	`put32bô
(&
w±r
,8);

765 
	`put32bô
(&
w±r
,0);

766 
	`put32bô
(&
w±r
,
öode
);

767 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,16)!=16) {

768 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

769 
	`˛o£_ma°î_c⁄n
(1);

772 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

773 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

774 
	`˛o£_ma°î_c⁄n
(1);

777 
Ωå
 = 
ªqbuff
;

778 
cmd
 = 
	`gë32bô
(&
Ωå
);

779 
Àng
 = 
	`gë32bô
(&
Ωå
);

780 i‡(
cmd
!=
MATOCL_FUSE_CHECK
) {

781 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

782 
	`˛o£_ma°î_c⁄n
(1);

785 
buff
 = 
	`mÆloc
(
Àng
);

786 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

787 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

788 
	`‰ì
(
buff
);

789 
	`˛o£_ma°î_c⁄n
(1);

792 
	`˛o£_ma°î_c⁄n
(0);

793 
Ωå
 = 
buff
;

794 
cmd
 = 
	`gë32bô
(&
Ωå
);

795 i‡(
cmd
!=0) {

796 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

797 
	`‰ì
(
buff
);

800 
Àng
-=4;

801 i‡(
Àng
==1) {

802 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

803 
	`‰ì
(
buff
);

805 } i‡(
Àng
%3!=0 &&Üeng!=44) {

806 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

807 
	`‰ì
(
buff
);

810 
	`¥ötf
("%s:\n",
‚ame
);

811 i‡(
Àng
%3==0) {

812 
cmd
=0 ; cmd<
Àng
 ; cmd+=3) {

813 
c›õs
 = 
	`gë8bô
(&
Ωå
);

814 
chunks
 = 
	`gë16bô
(&
Ωå
);

815 i‡(
c›õs
==1) {

816 
	`¥ötf
("1 copy:");

818 
	`¥ötf
("%"
PRIu8
" c›õs:",
c›õs
);

820 
	`¥öt_numbî
(" ","\n",
chunks
,1,0,1);

823 
cmd
=0 ; cmd<11 ; cmd++) {

824 
chunks
 = 
	`gë32bô
(&
Ωå
);

825 i‡(
chunks
>0) {

826 i‡(
cmd
==1) {

827 
	`¥ötf
(" chunks with 1 copy: ");

828 } i‡(
cmd
>=10) {

829 
	`¥ötf
(" chunks with 10+ copies:");

831 
	`¥ötf
(" chunk†wôh %u c›õs: ",
cmd
);

833 
	`¥öt_numbî
(" ","\n",
chunks
,1,0,1);

837 
	`‰ì
(
buff
);

839 
	}
}

841 
	$gë_gﬂl
(c⁄° *
‚ame
,
uöt8_t
 
mode
) {

842 
uöt8_t
 
ªqbuff
[17],*
w±r
,*
buff
;

843 c⁄° 
uöt8_t
 *
Ωå
;

844 
uöt32_t
 
cmd
,
Àng
,
öode
;

845 
uöt8_t
 
‚
,
dn
,
i
;

846 
uöt8_t
 
gﬂl
;

847 
uöt32_t
 
˙t
;

848 
fd
;

849 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

850 i‡(
fd
<0) {

853 
w±r
 = 
ªqbuff
;

854 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_GETGOAL
);

855 
	`put32bô
(&
w±r
,9);

856 
	`put32bô
(&
w±r
,0);

857 
	`put32bô
(&
w±r
,
öode
);

858 
	`put8bô
(&
w±r
,
mode
);

859 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,17)!=17) {

860 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

861 
	`˛o£_ma°î_c⁄n
(1);

864 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

865 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

866 
	`˛o£_ma°î_c⁄n
(1);

869 
Ωå
 = 
ªqbuff
;

870 
cmd
 = 
	`gë32bô
(&
Ωå
);

871 
Àng
 = 
	`gë32bô
(&
Ωå
);

872 i‡(
cmd
!=
MATOCL_FUSE_GETGOAL
) {

873 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

874 
	`˛o£_ma°î_c⁄n
(1);

877 
buff
 = 
	`mÆloc
(
Àng
);

878 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

879 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

880 
	`‰ì
(
buff
);

881 
	`˛o£_ma°î_c⁄n
(1);

884 
	`˛o£_ma°î_c⁄n
(0);

885 
Ωå
 = 
buff
;

886 
cmd
 = 
	`gë32bô
(&
Ωå
);

887 i‡(
cmd
!=0) {

888 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

889 
	`‰ì
(
buff
);

892 
Àng
-=4;

893 i‡(
Àng
==1) {

894 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

895 
	`‰ì
(
buff
);

897 } i‡(
Àng
%5!=2) {

898 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

899 
	`‰ì
(
buff
);

901 } i‡(
mode
==
GMODE_NORMAL
 && 
Àng
!=7) {

902 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

903 
	`‰ì
(
buff
);

906 i‡(
mode
==
GMODE_NORMAL
) {

907 
‚
 = 
	`gë8bô
(&
Ωå
);

908 
dn
 = 
	`gë8bô
(&
Ωå
);

909 
gﬂl
 = 
	`gë8bô
(&
Ωå
);

910 
˙t
 = 
	`gë32bô
(&
Ωå
);

911 i‡((
‚
!=0 || 
dn
!=1) && (fn!=1 || dn!=0)) {

912 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (‚,dn)\n",
‚ame
);

913 
	`‰ì
(
buff
);

916 i‡(
˙t
!=1) {

917 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (˙t)\n",
‚ame
);

918 
	`‰ì
(
buff
);

921 
	`¥ötf
("%s: %"
PRIu8
"\n",
‚ame
,
gﬂl
);

923 
‚
 = 
	`gë8bô
(&
Ωå
);

924 
dn
 = 
	`gë8bô
(&
Ωå
);

925 
	`¥ötf
("%s:\n",
‚ame
);

926 
i
=0 ; i<
‚
 ; i++) {

927 
gﬂl
 = 
	`gë8bô
(&
Ωå
);

928 
˙t
 = 
	`gë32bô
(&
Ωå
);

929 
	`¥ötf
(" fûe†wôh gﬂ» %"
PRIu8
" :",
gﬂl
);

930 
	`¥öt_numbî
(" ","\n",
˙t
,1,0,1);

932 
i
=0 ; i<
dn
 ; i++) {

933 
gﬂl
 = 
	`gë8bô
(&
Ωå
);

934 
˙t
 = 
	`gë32bô
(&
Ωå
);

935 
	`¥ötf
(" dúe˘‹õ†wôh gﬂ» %"
PRIu8
" :",
gﬂl
);

936 
	`¥öt_numbî
(" ","\n",
˙t
,1,0,1);

939 
	`‰ì
(
buff
);

941 
	}
}

943 
	$gë_åashtime
(c⁄° *
‚ame
,
uöt8_t
 
mode
) {

944 
uöt8_t
 
ªqbuff
[17],*
w±r
,*
buff
;

945 c⁄° 
uöt8_t
 *
Ωå
;

946 
uöt32_t
 
cmd
,
Àng
,
öode
;

947 
uöt32_t
 
‚
,
dn
,
i
;

948 
uöt32_t
 
åashtime
;

949 
uöt32_t
 
˙t
;

950 
fd
;

951 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

952 i‡(
fd
<0) {

955 
w±r
 = 
ªqbuff
;

956 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_GETTRASHTIME
);

957 
	`put32bô
(&
w±r
,9);

958 
	`put32bô
(&
w±r
,0);

959 
	`put32bô
(&
w±r
,
öode
);

960 
	`put8bô
(&
w±r
,
mode
);

961 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,17)!=17) {

962 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

963 
	`˛o£_ma°î_c⁄n
(1);

966 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

967 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

968 
	`˛o£_ma°î_c⁄n
(1);

971 
Ωå
 = 
ªqbuff
;

972 
cmd
 = 
	`gë32bô
(&
Ωå
);

973 
Àng
 = 
	`gë32bô
(&
Ωå
);

974 i‡(
cmd
!=
MATOCL_FUSE_GETTRASHTIME
) {

975 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

976 
	`˛o£_ma°î_c⁄n
(1);

979 
buff
 = 
	`mÆloc
(
Àng
);

980 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

981 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

982 
	`‰ì
(
buff
);

983 
	`˛o£_ma°î_c⁄n
(1);

986 
	`˛o£_ma°î_c⁄n
(0);

987 
Ωå
 = 
buff
;

988 
cmd
 = 
	`gë32bô
(&
Ωå
);

989 i‡(
cmd
!=0) {

990 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

991 
	`‰ì
(
buff
);

994 
Àng
-=4;

995 i‡(
Àng
==1) {

996 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

997 
	`‰ì
(
buff
);

999 } i‡(
Àng
<8 ||Üeng%8!=0) {

1000 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1001 
	`‰ì
(
buff
);

1003 } i‡(
mode
==
GMODE_NORMAL
 && 
Àng
!=16) {

1004 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1005 
	`‰ì
(
buff
);

1008 i‡(
mode
==
GMODE_NORMAL
) {

1009 
‚
 = 
	`gë32bô
(&
Ωå
);

1010 
dn
 = 
	`gë32bô
(&
Ωå
);

1011 
åashtime
 = 
	`gë32bô
(&
Ωå
);

1012 
˙t
 = 
	`gë32bô
(&
Ωå
);

1013 i‡((
‚
!=0 || 
dn
!=1) && (fn!=1 || dn!=0)) {

1014 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (‚,dn)\n",
‚ame
);

1015 
	`‰ì
(
buff
);

1018 i‡(
˙t
!=1) {

1019 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (˙t)\n",
‚ame
);

1020 
	`‰ì
(
buff
);

1023 
	`¥ötf
("%s: %"
PRIu32
"\n",
‚ame
,
åashtime
);

1025 
‚
 = 
	`gë32bô
(&
Ωå
);

1026 
dn
 = 
	`gë32bô
(&
Ωå
);

1027 
	`¥ötf
("%s:\n",
‚ame
);

1028 
i
=0 ; i<
‚
 ; i++) {

1029 
åashtime
 = 
	`gë32bô
(&
Ωå
);

1030 
˙t
 = 
	`gë32bô
(&
Ωå
);

1031 
	`¥ötf
(" fûe†wôhÅøshtimê %10"
PRIu32
" :",
åashtime
);

1032 
	`¥öt_numbî
(" ","\n",
˙t
,1,0,1);

1034 
i
=0 ; i<
dn
 ; i++) {

1035 
åashtime
 = 
	`gë32bô
(&
Ωå
);

1036 
˙t
 = 
	`gë32bô
(&
Ωå
);

1037 
	`¥ötf
(" dúe˘‹õ†wôhÅøshtimê %10"
PRIu32
" :",
åashtime
);

1038 
	`¥öt_numbî
(" ","\n",
˙t
,1,0,1);

1041 
	`‰ì
(
buff
);

1043 
	}
}

1045 
	$gë_óâr
(c⁄° *
‚ame
,
uöt8_t
 
mode
) {

1046 
uöt8_t
 
ªqbuff
[17],*
w±r
,*
buff
;

1047 c⁄° 
uöt8_t
 *
Ωå
;

1048 
uöt32_t
 
cmd
,
Àng
,
öode
;

1049 
uöt8_t
 
‚
,
dn
,
i
,
j
;

1050 
uöt32_t
 
f˙t
[
EATTR_BITS
];

1051 
uöt32_t
 
d˙t
[
EATTR_BITS
];

1052 
uöt8_t
 
óâr
;

1053 
uöt32_t
 
˙t
;

1054 
fd
;

1055 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

1056 i‡(
fd
<0) {

1059 
w±r
 = 
ªqbuff
;

1060 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_GETEATTR
);

1061 
	`put32bô
(&
w±r
,9);

1062 
	`put32bô
(&
w±r
,0);

1063 
	`put32bô
(&
w±r
,
öode
);

1064 
	`put8bô
(&
w±r
,
mode
);

1065 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,17)!=17) {

1066 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1067 
	`˛o£_ma°î_c⁄n
(1);

1070 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1071 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1072 
	`˛o£_ma°î_c⁄n
(1);

1075 
Ωå
 = 
ªqbuff
;

1076 
cmd
 = 
	`gë32bô
(&
Ωå
);

1077 
Àng
 = 
	`gë32bô
(&
Ωå
);

1078 i‡(
cmd
!=
MATOCL_FUSE_GETEATTR
) {

1079 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1080 
	`˛o£_ma°î_c⁄n
(1);

1083 
buff
 = 
	`mÆloc
(
Àng
);

1084 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1085 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1086 
	`‰ì
(
buff
);

1087 
	`˛o£_ma°î_c⁄n
(1);

1090 
	`˛o£_ma°î_c⁄n
(0);

1091 
Ωå
 = 
buff
;

1092 
cmd
 = 
	`gë32bô
(&
Ωå
);

1093 i‡(
cmd
!=0) {

1094 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1095 
	`‰ì
(
buff
);

1098 
Àng
-=4;

1099 i‡(
Àng
==1) {

1100 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1101 
	`‰ì
(
buff
);

1103 } i‡(
Àng
%5!=2) {

1104 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1105 
	`‰ì
(
buff
);

1107 } i‡(
mode
==
GMODE_NORMAL
 && 
Àng
!=7) {

1108 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1109 
	`‰ì
(
buff
);

1112 i‡(
mode
==
GMODE_NORMAL
) {

1113 
‚
 = 
	`gë8bô
(&
Ωå
);

1114 
dn
 = 
	`gë8bô
(&
Ωå
);

1115 
óâr
 = 
	`gë8bô
(&
Ωå
);

1116 
˙t
 = 
	`gë32bô
(&
Ωå
);

1117 i‡((
‚
!=0 || 
dn
!=1) && (fn!=1 || dn!=0)) {

1118 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (‚,dn)\n",
‚ame
);

1119 
	`‰ì
(
buff
);

1122 i‡(
˙t
!=1) {

1123 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (˙t)\n",
‚ame
);

1124 
	`‰ì
(
buff
);

1127 
	`¥ötf
("%s: ",
‚ame
);

1128 i‡(
óâr
>0) {

1129 
˙t
=0;

1130 
j
=0 ; j<
EATTR_BITS
 ; j++) {

1131 i‡(
óâr
 & (1<<
j
)) {

1132 
	`¥ötf
("%s%s",(
˙t
)?",":"",
óâπab
[
j
]);

1133 
˙t
=1;

1136 
	`¥ötf
("\n");

1138 
	`¥ötf
("-\n");

1142 
j
=0 ; j<
EATTR_BITS
 ; j++) {

1143 
f˙t
[
j
]=0;

1144 
d˙t
[
j
]=0;

1146 
‚
 = 
	`gë8bô
(&
Ωå
);

1147 
dn
 = 
	`gë8bô
(&
Ωå
);

1148 
i
=0 ; i<
‚
 ; i++) {

1149 
óâr
 = 
	`gë8bô
(&
Ωå
);

1150 
˙t
 = 
	`gë32bô
(&
Ωå
);

1151 
j
=0 ; j<
EATTR_BITS
 ; j++) {

1152 i‡(
óâr
 & (1<<
j
)) {

1153 
f˙t
[
j
]+=
˙t
;

1157 
i
=0 ; i<
dn
 ; i++) {

1158 
óâr
 = 
	`gë8bô
(&
Ωå
);

1159 
˙t
 = 
	`gë32bô
(&
Ωå
);

1160 
j
=0 ; j<
EATTR_BITS
 ; j++) {

1161 i‡(
óâr
 & (1<<
j
)) {

1162 
d˙t
[
j
]+=
˙t
;

1166 
	`¥ötf
("%s:\n",
‚ame
);

1167 
j
=0 ; j<
EATTR_BITS
 ; j++) {

1168 i‡(
óâπab
[
j
][0]) {

1169 
	`¥ötf
("ÇŸ dúe˘‹yÇode†wôháâribuã %16†:",
óâπab
[
j
]);

1170 
	`¥öt_numbî
(" ","\n",
f˙t
[
j
],1,0,1);

1171 
	`¥ötf
(" dúe˘‹õ†wôháâribuã %16†:",
óâπab
[
j
]);

1172 
	`¥öt_numbî
(" ","\n",
d˙t
[
j
],1,0,1);

1174 i‡(
f˙t
[
j
]>0) {

1175 
	`¥ötf
("ÇŸ dúe˘‹yÇode†wôháâribuã 'unknown-%u' :",
j
);

1176 
	`¥öt_numbî
(" ","\n",
f˙t
[
j
],1,0,1);

1178 i‡(
d˙t
[
j
]>0) {

1179 
	`¥ötf
(" dúe˘‹õ†wôháâribuã 'unknown-%u' :",
j
);

1180 
	`¥öt_numbî
(" ","\n",
d˙t
[
j
],1,0,1);

1199 
	`‰ì
(
buff
);

1201 
	}
}

1203 
	$£t_gﬂl
(c⁄° *
‚ame
,
uöt8_t
 
gﬂl
,uöt8_à
mode
) {

1204 
uöt8_t
 
ªqbuff
[22],*
w±r
,*
buff
;

1205 c⁄° 
uöt8_t
 *
Ωå
;

1206 
uöt32_t
 
cmd
,
Àng
,
öode
,
uid
;

1207 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
,
quŸ´x˚eded
;

1208 
fd
;

1209 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,1);

1210 i‡(
fd
<0) {

1213 
uid
 = 
	`gëuid
();

1214 
w±r
 = 
ªqbuff
;

1215 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_SETGOAL
);

1216 
	`put32bô
(&
w±r
,14);

1217 
	`put32bô
(&
w±r
,0);

1218 
	`put32bô
(&
w±r
,
öode
);

1219 
	`put32bô
(&
w±r
,
uid
);

1220 
	`put8bô
(&
w±r
,
gﬂl
);

1221 
	`put8bô
(&
w±r
,
mode
);

1222 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,22)!=22) {

1223 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1224 
	`˛o£_ma°î_c⁄n
(1);

1227 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1228 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1229 
	`˛o£_ma°î_c⁄n
(1);

1232 
Ωå
 = 
ªqbuff
;

1233 
cmd
 = 
	`gë32bô
(&
Ωå
);

1234 
Àng
 = 
	`gë32bô
(&
Ωå
);

1235 i‡(
cmd
!=
MATOCL_FUSE_SETGOAL
) {

1236 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1237 
	`˛o£_ma°î_c⁄n
(1);

1240 
buff
 = 
	`mÆloc
(
Àng
);

1241 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1242 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1243 
	`‰ì
(
buff
);

1244 
	`˛o£_ma°î_c⁄n
(1);

1247 
	`˛o£_ma°î_c⁄n
(0);

1248 
Ωå
 = 
buff
;

1249 
cmd
 = 
	`gë32bô
(&
Ωå
);

1250 i‡(
cmd
!=0) {

1251 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1252 
	`‰ì
(
buff
);

1255 
Àng
-=4;

1256 i‡(
Àng
==1) {

1257 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1258 
	`‰ì
(
buff
);

1260 } i‡(
Àng
!=12 &&Üeng!=16) {

1261 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1262 
	`‰ì
(
buff
);

1265 
ch™ged
 = 
	`gë32bô
(&
Ωå
);

1266 
nŸch™ged
 = 
	`gë32bô
(&
Ωå
);

1267 
nŸ≥rmôãd
 = 
	`gë32bô
(&
Ωå
);

1268 i‡(
Àng
==16) {

1269 
quŸ´x˚eded
 = 
	`gë32bô
(&
Ωå
);

1271 
quŸ´x˚eded
 = 0;

1273 i‡((
mode
&
SMODE_RMASK
)==0) {

1274 i‡(
ch™ged
 || 
mode
==
SMODE_SET
) {

1275 
	`¥ötf
("%s: %"
PRIu8
"\n",
‚ame
,
gﬂl
);

1277 
	`¥ötf
("%s: gﬂ»nŸ ch™ged\n",
‚ame
);

1280 
	`¥ötf
("%s:\n",
‚ame
);

1281 
	`¥öt_numbî
(" inode†wôh gﬂ»ch™ged: ","\n",
ch™ged
,1,0,1);

1282 
	`¥öt_numbî
(" inode†wôh gﬂ»nŸ ch™ged: ","\n",
nŸch™ged
,1,0,1);

1283 
	`¥öt_numbî
(" inode†wôhÖîmissi⁄ díõd: ","\n",
nŸ≥rmôãd
,1,0,1);

1284 i‡(
Àng
==16) {

1285 
	`¥öt_numbî
(" inode†wôh quŸ®ex˚eded: ","\n",
quŸ´x˚eded
,1,0,1);

1288 
	`‰ì
(
buff
);

1290 
	}
}

1292 
	$£t_åashtime
(c⁄° *
‚ame
,
uöt32_t
 
åashtime
,
uöt8_t
 
mode
) {

1293 
uöt8_t
 
ªqbuff
[25],*
w±r
,*
buff
;

1294 c⁄° 
uöt8_t
 *
Ωå
;

1295 
uöt32_t
 
cmd
,
Àng
,
öode
,
uid
;

1296 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
;

1297 
fd
;

1298 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,1);

1299 i‡(
fd
<0) {

1302 
uid
 = 
	`gëuid
();

1303 
w±r
 = 
ªqbuff
;

1304 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_SETTRASHTIME
);

1305 
	`put32bô
(&
w±r
,17);

1306 
	`put32bô
(&
w±r
,0);

1307 
	`put32bô
(&
w±r
,
öode
);

1308 
	`put32bô
(&
w±r
,
uid
);

1309 
	`put32bô
(&
w±r
,
åashtime
);

1310 
	`put8bô
(&
w±r
,
mode
);

1311 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,25)!=25) {

1312 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1313 
	`˛o£_ma°î_c⁄n
(1);

1316 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1317 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1318 
	`˛o£_ma°î_c⁄n
(1);

1321 
Ωå
 = 
ªqbuff
;

1322 
cmd
 = 
	`gë32bô
(&
Ωå
);

1323 
Àng
 = 
	`gë32bô
(&
Ωå
);

1324 i‡(
cmd
!=
MATOCL_FUSE_SETTRASHTIME
) {

1325 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1326 
	`˛o£_ma°î_c⁄n
(1);

1329 
buff
 = 
	`mÆloc
(
Àng
);

1330 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1331 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1332 
	`‰ì
(
buff
);

1333 
	`˛o£_ma°î_c⁄n
(1);

1336 
	`˛o£_ma°î_c⁄n
(0);

1337 
Ωå
 = 
buff
;

1338 
cmd
 = 
	`gë32bô
(&
Ωå
);

1339 i‡(
cmd
!=0) {

1340 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1341 
	`‰ì
(
buff
);

1344 
Àng
-=4;

1345 i‡(
Àng
==1) {

1346 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1347 
	`‰ì
(
buff
);

1349 } i‡(
Àng
!=12) {

1350 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1351 
	`‰ì
(
buff
);

1354 
ch™ged
 = 
	`gë32bô
(&
Ωå
);

1355 
nŸch™ged
 = 
	`gë32bô
(&
Ωå
);

1356 
nŸ≥rmôãd
 = 
	`gë32bô
(&
Ωå
);

1357 i‡((
mode
&
SMODE_RMASK
)==0) {

1358 i‡(
ch™ged
 || 
mode
==
SMODE_SET
) {

1359 
	`¥ötf
("%s: %"
PRIu32
"\n",
‚ame
,
åashtime
);

1361 
	`¥ötf
("%s:ÅøshtimênŸ ch™ged\n",
‚ame
);

1364 
	`¥ötf
("%s:\n",
‚ame
);

1365 
	`¥öt_numbî
(" inode†wôhÅøshtimêch™ged: ","\n",
ch™ged
,1,0,1);

1366 
	`¥öt_numbî
(" inode†wôhÅøshtimênŸ ch™ged: ","\n",
nŸch™ged
,1,0,1);

1367 
	`¥öt_numbî
(" inode†wôhÖîmissi⁄ díõd: ","\n",
nŸ≥rmôãd
,1,0,1);

1369 
	`‰ì
(
buff
);

1371 
	}
}

1373 
	$£t_óâr
(c⁄° *
‚ame
,
uöt8_t
 
óâr
,uöt8_à
mode
) {

1374 
uöt8_t
 
ªqbuff
[22],*
w±r
,*
buff
;

1375 c⁄° 
uöt8_t
 *
Ωå
;

1376 
uöt32_t
 
cmd
,
Àng
,
öode
,
uid
;

1377 
uöt32_t
 
ch™ged
,
nŸch™ged
,
nŸ≥rmôãd
;

1378 
fd
;

1379 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,1);

1380 i‡(
fd
<0) {

1383 
uid
 = 
	`gëuid
();

1384 
w±r
 = 
ªqbuff
;

1385 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_SETEATTR
);

1386 
	`put32bô
(&
w±r
,14);

1387 
	`put32bô
(&
w±r
,0);

1388 
	`put32bô
(&
w±r
,
öode
);

1389 
	`put32bô
(&
w±r
,
uid
);

1390 
	`put8bô
(&
w±r
,
óâr
);

1391 
	`put8bô
(&
w±r
,
mode
);

1392 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,22)!=22) {

1393 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1394 
	`˛o£_ma°î_c⁄n
(1);

1397 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1398 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1399 
	`˛o£_ma°î_c⁄n
(1);

1402 
Ωå
 = 
ªqbuff
;

1403 
cmd
 = 
	`gë32bô
(&
Ωå
);

1404 
Àng
 = 
	`gë32bô
(&
Ωå
);

1405 i‡(
cmd
!=
MATOCL_FUSE_SETEATTR
) {

1406 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1407 
	`˛o£_ma°î_c⁄n
(1);

1410 
buff
 = 
	`mÆloc
(
Àng
);

1411 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1412 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1413 
	`‰ì
(
buff
);

1414 
	`˛o£_ma°î_c⁄n
(1);

1417 
	`˛o£_ma°î_c⁄n
(0);

1418 
Ωå
 = 
buff
;

1419 
cmd
 = 
	`gë32bô
(&
Ωå
);

1420 i‡(
cmd
!=0) {

1421 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1422 
	`‰ì
(
buff
);

1425 
Àng
-=4;

1426 i‡(
Àng
==1) {

1427 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1428 
	`‰ì
(
buff
);

1430 } i‡(
Àng
!=12) {

1431 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1432 
	`‰ì
(
buff
);

1435 
ch™ged
 = 
	`gë32bô
(&
Ωå
);

1436 
nŸch™ged
 = 
	`gë32bô
(&
Ωå
);

1437 
nŸ≥rmôãd
 = 
	`gë32bô
(&
Ωå
);

1438 i‡((
mode
&
SMODE_RMASK
)==0) {

1439 i‡(
ch™ged
) {

1440 
	`¥ötf
("%s:áâribuã(sËch™ged\n",
‚ame
);

1442 
	`¥ötf
("%s:áâribuã(sËnŸ ch™ged\n",
‚ame
);

1445 
	`¥ötf
("%s:\n",
‚ame
);

1446 
	`¥öt_numbî
(" inode†wôháâribuã†ch™ged: ","\n",
ch™ged
,1,0,1);

1447 
	`¥öt_numbî
(" inode†wôháâribuã†nŸ ch™ged: ","\n",
nŸch™ged
,1,0,1);

1448 
	`¥öt_numbî
(" inode†wôhÖîmissi⁄ díõd: ","\n",
nŸ≥rmôãd
,1,0,1);

1450 
	`‰ì
(
buff
);

1452 
	}
}

1454 
	$ù_p‹t_cmp
(c⁄° *
a
,c⁄° *
b
) {

1455  
	`memcmp
(
a
,
b
,6);

1456 
	}
}

1458 
	$fûe_öfo
(c⁄° *
‚ame
) {

1459 
uöt8_t
 
ªqbuff
[20],*
w±r
,*
buff
;

1460 c⁄° 
uöt8_t
 *
Ωå
;

1461 
uöt32_t
 
ödx
,
cmd
,
Àng
,
öode
,
vîsi⁄
;

1462 
uöt8_t
 
ù1
,
ù2
,
ù3
,
ù4
;

1463 
uöt16_t
 
p‹t
;

1464 
uöt64_t
 
Êíg
,
chunkid
;

1465 
fd
;

1466 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

1467 i‡(
fd
<0) {

1470 
ödx
=0;

1472 
w±r
 = 
ªqbuff
;

1473 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_READ_CHUNK
);

1474 
	`put32bô
(&
w±r
,12);

1475 
	`put32bô
(&
w±r
,0);

1476 
	`put32bô
(&
w±r
,
öode
);

1477 
	`put32bô
(&
w±r
,
ödx
);

1478 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,20)!=20) {

1479 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy: sídÉº‹\n",
‚ame
,
ödx
);

1480 
	`˛o£_ma°î_c⁄n
(1);

1483 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1484 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
,
ödx
);

1485 
	`˛o£_ma°î_c⁄n
(1);

1488 
Ωå
 = 
ªqbuff
;

1489 
cmd
 = 
	`gë32bô
(&
Ωå
);

1490 
Àng
 = 
	`gë32bô
(&
Ωå
);

1491 i‡(
cmd
!=
MATOCL_FUSE_READ_CHUNK
) {

1492 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
,
ödx
);

1493 
	`˛o£_ma°î_c⁄n
(1);

1496 
buff
 = 
	`mÆloc
(
Àng
);

1497 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1498 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
,
ödx
);

1499 
	`‰ì
(
buff
);

1500 
	`˛o£_ma°î_c⁄n
(1);

1503 
Ωå
 = 
buff
;

1504 
cmd
 = 
	`gë32bô
(&
Ωå
);

1505 i‡(
cmd
!=0) {

1506 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
,
ödx
);

1507 
	`‰ì
(
buff
);

1508 
	`˛o£_ma°î_c⁄n
(1);

1511 
Àng
-=4;

1512 i‡(
Àng
==1) {

1513 
	`¥ötf
("%†[%"
PRIu32
"]: %s\n",
‚ame
,
ödx
,
	`mfs_°ªº‹
(*
Ωå
));

1514 
	`‰ì
(
buff
);

1515 
	`˛o£_ma°î_c⁄n
(1);

1517 } i‡(
Àng
<20 || ((leng-20)%6)!=0) {

1518 
	`¥ötf
("%†[%"
PRIu32
"]: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
,
ödx
);

1519 
	`‰ì
(
buff
);

1520 
	`˛o£_ma°î_c⁄n
(1);

1523 i‡(
ödx
==0) {

1524 
	`¥ötf
("%s:\n",
‚ame
);

1526 
Êíg
 = 
	`gë64bô
(&
Ωå
);

1527 
chunkid
 = 
	`gë64bô
(&
Ωå
);

1528 
vîsi⁄
 = 
	`gë32bô
(&
Ωå
);

1529 i‡(
Êíg
>0) {

1530 i‡(
chunkid
==0 && 
vîsi⁄
==0) {

1531 
	`¥ötf
("\tchunk %"
PRIu32
":Ém±y\n",
ödx
);

1533 
	`¥ötf
("\tchunk %"
PRIu32
": %016"
PRIX64
"_%08"
PRIX32
" / (id:%"
PRIu64
" vî:%"PRIu32")\n",
ödx
,
chunkid
,
vîsi⁄
,chunkid,version);

1534 
Àng
-=20;

1535 
Àng
/=6;

1536 i‡(
Àng
>0) {

1537 
w±r
 = (
uöt8_t
*)
Ωå
;

1538 
	`qs‹t
(
w±r
,
Àng
,6,
ù_p‹t_cmp
);

1539 
cmd
=0 ; cmd<
Àng
 ; cmd++) {

1540 
ù1
 = 
Ωå
[0];

1541 
ù2
 = 
Ωå
[1];

1542 
ù3
 = 
Ωå
[2];

1543 
ù4
 = 
Ωå
[3];

1544 
Ωå
+=4;

1545 
p‹t
 = 
	`gë16bô
(&
Ωå
);

1546 
	`¥ötf
("\t\tc›y %"
PRIu32
": %"
PRIu8
".%"PRIu8".%"PRIu8".%"PRIu8":%"
PRIu16
"\n",
cmd
+1,
ù1
,
ù2
,
ù3
,
ù4
,
p‹t
);

1549 
	`¥ötf
("\t\tno valid copies !!!\n");

1553 
	`‰ì
(
buff
);

1554 
ödx
++;

1555 } 
ödx
<((
Êíg
+
MFSCHUNKMASK
)>>
MFSCHUNKBITS
));

1556 
	`˛o£_ma°î_c⁄n
(0);

1558 
	}
}

1560 
	$≠≥nd_fûe
(c⁄° *
‚ame
,c⁄° *
a‚ame
) {

1561 
uöt8_t
 
ªqbuff
[28],*
w±r
,*
buff
;

1562 c⁄° 
uöt8_t
 *
Ωå
;

1563 
uöt32_t
 
cmd
,
Àng
,
öode
,
aöode
,
uid
,
gid
;

1564 
mode_t
 
dmode
,
smode
;

1565 
fd
;

1566 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,&
dmode
,0,1);

1567 i‡(
fd
<0) {

1570 i‡(
	`›í_ma°î_c⁄n
(
a‚ame
,&
aöode
,&
smode
,1,1)<0) {

1574 i‡((
smode
&
S_IFMT
)!=
S_IFREG
) {

1575 
	`¥ötf
("%s:ÇŸá fûe\n",
a‚ame
);

1578 i‡((
dmode
&
S_IFMT
)!=
S_IFREG
) {

1579 
	`¥ötf
("%s:ÇŸá fûe\n",
‚ame
);

1582 
uid
 = 
	`gëuid
();

1583 
gid
 = 
	`gëgid
();

1584 
w±r
 = 
ªqbuff
;

1585 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_APPEND
);

1586 
	`put32bô
(&
w±r
,20);

1587 
	`put32bô
(&
w±r
,0);

1588 
	`put32bô
(&
w±r
,
öode
);

1589 
	`put32bô
(&
w±r
,
aöode
);

1590 
	`put32bô
(&
w±r
,
uid
);

1591 
	`put32bô
(&
w±r
,
gid
);

1592 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,28)!=28) {

1593 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1594 
	`˛o£_ma°î_c⁄n
(1);

1597 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1598 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1599 
	`˛o£_ma°î_c⁄n
(1);

1602 
Ωå
 = 
ªqbuff
;

1603 
cmd
 = 
	`gë32bô
(&
Ωå
);

1604 
Àng
 = 
	`gë32bô
(&
Ωå
);

1605 i‡(
cmd
!=
MATOCL_FUSE_APPEND
) {

1606 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1607 
	`˛o£_ma°î_c⁄n
(1);

1610 
buff
 = 
	`mÆloc
(
Àng
);

1611 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1612 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1613 
	`‰ì
(
buff
);

1614 
	`˛o£_ma°î_c⁄n
(1);

1617 
	`˛o£_ma°î_c⁄n
(0);

1618 
Ωå
 = 
buff
;

1619 
cmd
 = 
	`gë32bô
(&
Ωå
);

1620 i‡(
cmd
!=0) {

1621 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1622 
	`‰ì
(
buff
);

1625 
Àng
-=4;

1626 i‡(
Àng
!=1) {

1627 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1628 
	`‰ì
(
buff
);

1630 } i‡(*
Ωå
!=
STATUS_OK
) {

1631 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1632 
	`‰ì
(
buff
);

1635 
	`‰ì
(
buff
);

1637 
	}
}

1639 
	$dú_öfo
(c⁄° *
‚ame
) {

1640 
uöt8_t
 
ªqbuff
[16],*
w±r
,*
buff
;

1641 c⁄° 
uöt8_t
 *
Ωå
;

1642 
uöt32_t
 
cmd
,
Àng
,
öode
;

1643 
uöt32_t
 
öodes
,
dús
,
fûes
,
chunks
;

1644 
uöt64_t
 
Àngth
,
size
,
ªÆsize
;

1645 
fd
;

1646 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,0);

1647 i‡(
fd
<0) {

1650 
w±r
 = 
ªqbuff
;

1651 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_GETDIRSTATS
);

1652 
	`put32bô
(&
w±r
,8);

1653 
	`put32bô
(&
w±r
,0);

1654 
	`put32bô
(&
w±r
,
öode
);

1655 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,16)!=16) {

1656 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1657 
	`˛o£_ma°î_c⁄n
(1);

1660 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1661 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1662 
	`˛o£_ma°î_c⁄n
(1);

1665 
Ωå
 = 
ªqbuff
;

1666 
cmd
 = 
	`gë32bô
(&
Ωå
);

1667 
Àng
 = 
	`gë32bô
(&
Ωå
);

1668 i‡(
cmd
!=
MATOCL_FUSE_GETDIRSTATS
) {

1669 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1670 
	`˛o£_ma°î_c⁄n
(1);

1673 
buff
 = 
	`mÆloc
(
Àng
);

1674 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1675 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1676 
	`‰ì
(
buff
);

1677 
	`˛o£_ma°î_c⁄n
(1);

1680 
Ωå
 = 
buff
;

1681 
cmd
 = 
	`gë32bô
(&
Ωå
);

1682 i‡(
cmd
!=0) {

1683 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1684 
	`‰ì
(
buff
);

1685 
	`˛o£_ma°î_c⁄n
(1);

1688 
Àng
-=4;

1689 i‡(
Àng
==1) {

1690 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1691 
	`‰ì
(
buff
);

1692 
	`˛o£_ma°î_c⁄n
(1);

1694 } i‡(
Àng
!=56 &&Üeng!=40) {

1695 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1696 
	`‰ì
(
buff
);

1697 
	`˛o£_ma°î_c⁄n
(1);

1700 
	`˛o£_ma°î_c⁄n
(0);

1701 
öodes
 = 
	`gë32bô
(&
Ωå
);

1702 
dús
 = 
	`gë32bô
(&
Ωå
);

1703 
fûes
 = 
	`gë32bô
(&
Ωå
);

1704 i‡(
Àng
==56) {

1705 
Ωå
+=8;

1707 
chunks
 = 
	`gë32bô
(&
Ωå
);

1708 i‡(
Àng
==56) {

1709 
Ωå
+=8;

1711 
Àngth
 = 
	`gë64bô
(&
Ωå
);

1712 
size
 = 
	`gë64bô
(&
Ωå
);

1713 
ªÆsize
 = 
	`gë64bô
(&
Ωå
);

1714 
	`‰ì
(
buff
);

1715 
	`¥ötf
("%s:\n",
‚ame
);

1716 
	`¥öt_numbî
(" inodes: ","\n",
öodes
,0,0,1);

1717 
	`¥öt_numbî
(" dúe˘‹õs: ","\n",
dús
,0,0,1);

1718 
	`¥öt_numbî
(" fûes: ","\n",
fûes
,0,0,1);

1719 
	`¥öt_numbî
(" chunks: ","\n",
chunks
,0,0,1);

1720 
	`¥öt_numbî
("Üígth: ","\n",
Àngth
,0,1,1);

1721 
	`¥öt_numbî
(" size: ","\n",
size
,0,1,1);

1722 
	`¥öt_numbî
("Ñólsize: ","\n",
ªÆsize
,0,1,1);

1724 
	}
}

1726 
	$fûe_ª∑ú
(c⁄° *
‚ame
) {

1727 
uöt8_t
 
ªqbuff
[24],*
w±r
,*
buff
;

1728 c⁄° 
uöt8_t
 *
Ωå
;

1729 
uöt32_t
 
cmd
,
Àng
,
öode
;

1730 
uöt32_t
 
nŸch™ged
,
îa£d
,
ª∑úed
;

1731 
fd
;

1732 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,1);

1733 i‡(
fd
<0) {

1736 
w±r
 = 
ªqbuff
;

1737 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_REPAIR
);

1738 
	`put32bô
(&
w±r
,16);

1739 
	`put32bô
(&
w±r
,0);

1740 
	`put32bô
(&
w±r
,
öode
);

1741 
	`put32bô
(&
w±r
,
	`gëuid
());

1742 
	`put32bô
(&
w±r
,
	`gëgid
());

1743 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,24)!=24) {

1744 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1745 
	`˛o£_ma°î_c⁄n
(1);

1748 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1749 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1750 
	`˛o£_ma°î_c⁄n
(1);

1753 
Ωå
 = 
ªqbuff
;

1754 
cmd
 = 
	`gë32bô
(&
Ωå
);

1755 
Àng
 = 
	`gë32bô
(&
Ωå
);

1756 i‡(
cmd
!=
MATOCL_FUSE_REPAIR
) {

1757 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1758 
	`˛o£_ma°î_c⁄n
(1);

1761 
buff
 = 
	`mÆloc
(
Àng
);

1762 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1763 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1764 
	`‰ì
(
buff
);

1765 
	`˛o£_ma°î_c⁄n
(1);

1768 
Ωå
 = 
buff
;

1769 
cmd
 = 
	`gë32bô
(&
Ωå
);

1770 i‡(
cmd
!=0) {

1771 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1772 
	`‰ì
(
buff
);

1773 
	`˛o£_ma°î_c⁄n
(1);

1776 
Àng
-=4;

1777 i‡(
Àng
==1) {

1778 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1779 
	`‰ì
(
buff
);

1780 
	`˛o£_ma°î_c⁄n
(1);

1782 } i‡(
Àng
!=12) {

1783 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1784 
	`‰ì
(
buff
);

1785 
	`˛o£_ma°î_c⁄n
(1);

1788 
	`˛o£_ma°î_c⁄n
(0);

1789 
nŸch™ged
 = 
	`gë32bô
(&
Ωå
);

1790 
îa£d
 = 
	`gë32bô
(&
Ωå
);

1791 
ª∑úed
 = 
	`gë32bô
(&
Ωå
);

1792 
	`‰ì
(
buff
);

1793 
	`¥ötf
("%s:\n",
‚ame
);

1794 
	`¥öt_numbî
(" chunk†nŸ ch™ged: ","\n",
nŸch™ged
,1,0,1);

1795 
	`¥öt_numbî
(" chunk†îa£d: ","\n",
îa£d
,1,0,1);

1796 
	`¥öt_numbî
(" chunk†ª∑úed: ","\n",
ª∑úed
,1,0,1);

1798 
	}
}

1898 
	$quŸa_c⁄åﬁ
(c⁄° *
‚ame
,
uöt8_t
 
dñ
,uöt8_à
qÊags
,
uöt32_t
 
söodes
,
uöt64_t
 
¶ígth
,uöt64_à
ssize
,uöt64_à
§ólsize
,uöt32_à
höodes
,uöt64_à
hÀngth
,uöt64_à
hsize
,uöt64_à
hªÆsize
) {

1899 
uöt8_t
 
ªqbuff
[73],*
w±r
,*
buff
;

1900 c⁄° 
uöt8_t
 *
Ωå
;

1901 
uöt32_t
 
cmd
,
Àng
,
öode
;

1902 
uöt32_t
 
curöodes
;

1903 
uöt64_t
 
cuæígth
,
cursize
,
cuºólsize
;

1904 
fd
;

1906 
fd
 = 
	`›í_ma°î_c⁄n
(
‚ame
,&
öode
,
NULL
,0,
qÊags
?1:0);

1907 i‡(
fd
<0) {

1910 
w±r
 = 
ªqbuff
;

1911 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_QUOTACONTROL
);

1912 
	`put32bô
(&
w±r
,(
dñ
)?9:65);

1913 
	`put32bô
(&
w±r
,0);

1914 
	`put32bô
(&
w±r
,
öode
);

1915 
	`put8bô
(&
w±r
,
qÊags
);

1916 i‡(
dñ
==0) {

1917 
	`put32bô
(&
w±r
,
söodes
);

1918 
	`put64bô
(&
w±r
,
¶ígth
);

1919 
	`put64bô
(&
w±r
,
ssize
);

1920 
	`put64bô
(&
w±r
,
§ólsize
);

1921 
	`put32bô
(&
w±r
,
höodes
);

1922 
	`put64bô
(&
w±r
,
hÀngth
);

1923 
	`put64bô
(&
w±r
,
hsize
);

1924 
	`put64bô
(&
w±r
,
hªÆsize
);

1926 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,(
dñ
)?17:73)!=((del)?17:73)) {

1927 
	`¥ötf
("%s: ma°î quîy: sídÉº‹\n",
‚ame
);

1928 
	`˛o£_ma°î_c⁄n
(1);

1931 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

1932 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1933 
	`˛o£_ma°î_c⁄n
(1);

1936 
Ωå
 = 
ªqbuff
;

1937 
cmd
 = 
	`gë32bô
(&
Ωå
);

1938 
Àng
 = 
	`gë32bô
(&
Ωå
);

1939 i‡(
cmd
!=
MATOCL_FUSE_QUOTACONTROL
) {

1940 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
‚ame
);

1941 
	`˛o£_ma°î_c⁄n
(1);

1944 
buff
 = 
	`mÆloc
(
Àng
);

1945 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

1946 
	`¥ötf
("%s: ma°î quîy:Ñe˚ivêîr‹\n",
‚ame
);

1947 
	`‰ì
(
buff
);

1948 
	`˛o£_ma°î_c⁄n
(1);

1951 
Ωå
 = 
buff
;

1952 
cmd
 = 
	`gë32bô
(&
Ωå
);

1953 i‡(
cmd
!=0) {

1954 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
‚ame
);

1955 
	`‰ì
(
buff
);

1956 
	`˛o£_ma°î_c⁄n
(1);

1959 
Àng
-=4;

1960 i‡(
Àng
==1) {

1961 
	`¥ötf
("%s: %s\n",
‚ame
,
	`mfs_°ªº‹
(*
Ωå
));

1962 
	`‰ì
(
buff
);

1963 
	`˛o£_ma°î_c⁄n
(1);

1965 } i‡(
Àng
!=85) {

1966 
	`¥ötf
("%s: ma°î quîy: wr⁄gánswî (Àng)\n",
‚ame
);

1967 
	`‰ì
(
buff
);

1968 
	`˛o£_ma°î_c⁄n
(1);

1971 
	`˛o£_ma°î_c⁄n
(0);

1972 
qÊags
 = 
	`gë8bô
(&
Ωå
);

1973 
söodes
 = 
	`gë32bô
(&
Ωå
);

1974 
¶ígth
 = 
	`gë64bô
(&
Ωå
);

1975 
ssize
 = 
	`gë64bô
(&
Ωå
);

1976 
§ólsize
 = 
	`gë64bô
(&
Ωå
);

1977 
höodes
 = 
	`gë32bô
(&
Ωå
);

1978 
hÀngth
 = 
	`gë64bô
(&
Ωå
);

1979 
hsize
 = 
	`gë64bô
(&
Ωå
);

1980 
hªÆsize
 = 
	`gë64bô
(&
Ωå
);

1981 
curöodes
 = 
	`gë32bô
(&
Ωå
);

1982 
cuæígth
 = 
	`gë64bô
(&
Ωå
);

1983 
cursize
 = 
	`gë64bô
(&
Ωå
);

1984 
cuºólsize
 = 
	`gë64bô
(&
Ωå
);

1985 
	`‰ì
(
buff
);

1986 
	`¥ötf
("%s: (cuºíàvÆue†| so· quŸ®| h¨d quŸa)\n",
‚ame
);

1987 
	`¥öt_numbî
(" inode† | ",
NULL
,
curöodes
,0,0,1);

1988 
	`¥öt_numbî
(" | ",
NULL
,
söodes
,0,0,
qÊags
&
QUOTA_FLAG_SINODES
);

1989 
	`¥öt_numbî
(" | "," |\n",
höodes
,0,0,
qÊags
&
QUOTA_FLAG_HINODES
);

1990 
	`¥öt_numbî
("Üígth | ",
NULL
,
cuæígth
,0,1,1);

1991 
	`¥öt_numbî
(" | ",
NULL
,
¶ígth
,0,1,
qÊags
&
QUOTA_FLAG_SLENGTH
);

1992 
	`¥öt_numbî
(" | "," |\n",
hÀngth
,0,1,
qÊags
&
QUOTA_FLAG_HLENGTH
);

1993 
	`¥öt_numbî
(" sizê | ",
NULL
,
cursize
,0,1,1);

1994 
	`¥öt_numbî
(" | ",
NULL
,
ssize
,0,1,
qÊags
&
QUOTA_FLAG_SSIZE
);

1995 
	`¥öt_numbî
(" | "," |\n",
hsize
,0,1,
qÊags
&
QUOTA_FLAG_HSIZE
);

1996 
	`¥öt_numbî
("Ñólsizê| ",
NULL
,
cuºólsize
,0,1,1);

1997 
	`¥öt_numbî
(" | ",
NULL
,
§ólsize
,0,1,
qÊags
&
QUOTA_FLAG_SREALSIZE
);

1998 
	`¥öt_numbî
(" | "," |\n",
hªÆsize
,0,1,
qÊags
&
QUOTA_FLAG_HREALSIZE
);

2000 
	}
}

2014 
	$make_¢≠shŸ
(c⁄° *
d°dú
,c⁄° *
d°ba£
,c⁄° *
§˙ame
,
uöt32_t
 
§cöode
,
uöt8_t
 
ˇnovîwrôe
) {

2015 
uöt8_t
 
ªqbuff
[8+22+255],*
w±r
,*
buff
;

2016 c⁄° 
uöt8_t
 *
Ωå
;

2017 
uöt32_t
 
cmd
,
Àng
,
d°öode
,
uid
,
gid
;

2018 
uöt32_t
 
∆íg
;

2019 
fd
;

2020 
∆íg
 = 
	`°æí
(
d°ba£
);

2021 i‡(
∆íg
>255) {

2022 
	`¥ötf
("%s:Çamêtoÿl⁄g\n",
d°ba£
);

2025 
fd
 = 
	`›í_ma°î_c⁄n
(
d°dú
,&
d°öode
,
NULL
,0,1);

2026 i‡(
fd
<0) {

2029 
uid
 = 
	`gëuid
();

2030 
gid
 = 
	`gëgid
();

2031 
w±r
 = 
ªqbuff
;

2032 
	`put32bô
(&
w±r
,
CLTOMA_FUSE_SNAPSHOT
);

2033 
	`put32bô
(&
w±r
,22+
∆íg
);

2034 
	`put32bô
(&
w±r
,0);

2035 
	`put32bô
(&
w±r
,
§cöode
);

2036 
	`put32bô
(&
w±r
,
d°öode
);

2037 
	`put8bô
(&
w±r
,
∆íg
);

2038 
	`mem˝y
(
w±r
,
d°ba£
,
∆íg
);

2039 
w±r
+=
∆íg
;

2040 
	`put32bô
(&
w±r
,
uid
);

2041 
	`put32bô
(&
w±r
,
gid
);

2042 
	`put8bô
(&
w±r
,
ˇnovîwrôe
);

2043 i‡(
	`t˝wrôe
(
fd
,
ªqbuff
,30+
∆íg
)!=(
öt32_t
)(30+nleng)) {

2044 
	`¥ötf
("%s->%s/%s: ma°î quîy: sídÉº‹\n",
§˙ame
,
d°dú
,
d°ba£
);

2045 
	`˛o£_ma°î_c⁄n
(1);

2048 i‡(
	`t˝ªad
(
fd
,
ªqbuff
,8)!=8) {

2049 
	`¥ötf
("%s->%s/%s: ma°î quîy:Ñe˚ivêîr‹\n",
§˙ame
,
d°dú
,
d°ba£
);

2050 
	`˛o£_ma°î_c⁄n
(1);

2053 
Ωå
 = 
ªqbuff
;

2054 
cmd
 = 
	`gë32bô
(&
Ωå
);

2055 
Àng
 = 
	`gë32bô
(&
Ωå
);

2056 i‡(
cmd
!=
MATOCL_FUSE_SNAPSHOT
) {

2057 
	`¥ötf
("%s->%s/%s: ma°î quîy: wr⁄gánswî (ty≥)\n",
§˙ame
,
d°dú
,
d°ba£
);

2058 
	`˛o£_ma°î_c⁄n
(1);

2061 
buff
 = 
	`mÆloc
(
Àng
);

2062 i‡(
	`t˝ªad
(
fd
,
buff
,
Àng
)!=(
öt32_t
)leng) {

2063 
	`¥ötf
("%s->%s/%s: ma°î quîy:Ñe˚ivêîr‹\n",
§˙ame
,
d°dú
,
d°ba£
);

2064 
	`‰ì
(
buff
);

2065 
	`˛o£_ma°î_c⁄n
(1);

2068 
Ωå
 = 
buff
;

2069 
cmd
 = 
	`gë32bô
(&
Ωå
);

2070 i‡(
cmd
!=0) {

2071 
	`¥ötf
("%s->%s/%s: ma°î quîy: wr⁄gánswî (quîyid)\n",
§˙ame
,
d°dú
,
d°ba£
);

2072 
	`‰ì
(
buff
);

2073 
	`˛o£_ma°î_c⁄n
(1);

2076 
Àng
-=4;

2077 i‡(
Àng
!=1) {

2078 
	`¥ötf
("%s->%s/%s: ma°î quîy: wr⁄gánswî (Àng)\n",
§˙ame
,
d°dú
,
d°ba£
);

2079 
	`‰ì
(
buff
);

2080 
	`˛o£_ma°î_c⁄n
(1);

2083 
	`˛o£_ma°î_c⁄n
(0);

2084 i‡(*
Ωå
!=0) {

2085 
	`¥ötf
("%s->%s/%s: %s\n",
§˙ame
,
d°dú
,
d°ba£
,
	`mfs_°ªº‹
(*
Ωå
));

2086 
	`‰ì
(
buff
);

2090 
	}
}

2092 
	$¢≠shŸ
(c⁄° *
d°«me
,* c⁄° *
§˙ames
,
uöt32_t
 
§˚Àmíts
,
uöt8_t
 
ˇnowîwrôe
) {

2093 
to
[
PATH_MAX
],
ba£
[PATH_MAX],
dú
[PATH_MAX];

2094 
§c
[
PATH_MAX
];

2095 
°©
 
s°
,
d°
;

2096 
°©us
;

2097 
uöt32_t
 
i
,
l
;

2099 i‡(
	`°©
(
d°«me
,&
d°
)<0) {

2100 i‡(
î∫o
!=
ENOENT
) {

2101 
	`¥ötf
("%s: sèàîr‹: %s\n",
d°«me
,
	`°ªº
(
î∫o
));

2104 i‡(
§˚Àmíts
>1) {

2105 
	`¥ötf
("can snapshot multipleÉlements only intoÉxisting directory\n");

2108 i‡(
	`l°©
(
§˙ames
[0],&
s°
)<0) {

2109 
	`¥ötf
("%s:Ü°©Éº‹: %s\n",
§˙ames
[0],
	`°ªº
(
î∫o
));

2112 i‡(
	`bsd_dú«me
(
d°«me
,
dú
)<0) {

2113 
	`¥ötf
("%s: dú«mêîr‹\n",
d°«me
);

2116 i‡(
	`°©
(
dú
,&
d°
)<0) {

2117 
	`¥ötf
("%s: sèàîr‹: %s\n",
dú
,
	`°ªº
(
î∫o
));

2120 i‡(
s°
.
°_dev
 !
d°
.st_dev) {

2121 
	`¥ötf
("(%s,%s): bŸhÉÀmít†mu° bê⁄Åhêßmêdevi˚\n",
d°«me
,
§˙ames
[0]);

2124 i‡(
	`ªÆ∑th
(
dú
,
to
)==
NULL
) {

2125 
	`¥ötf
("%s:ÑóÕ©hÉº‹ o¿%s: %s\n",
dú
,
to
,
	`°ªº
(
î∫o
));

2128 i‡(
	`bsd_ba£«me
(
d°«me
,
ba£
)<0) {

2129 
	`¥ötf
("%s: ba£«mêîr‹\n",
d°«me
);

2132 i‡(
	`°æí
(
d°«me
)>0 && d°«me[°æí(d°«me)-1]=='/' && !
	`S_ISDIR
(
s°
.
°_mode
)) {

2133 
	`¥ötf
("dúe˘‹y %†d€†nŸÉxi°\n",
d°«me
);

2136  
	`make_¢≠shŸ
(
to
,
ba£
,
§˙ames
[0],
s°
.
°_öo
,
ˇnowîwrôe
);

2138 i‡(
	`ªÆ∑th
(
d°«me
,
to
)==
NULL
) {

2139 
	`¥ötf
("%s:ÑóÕ©hÉº‹ o¿%s: %s\n",
d°«me
,
to
,
	`°ªº
(
î∫o
));

2142 i‡(!
	`S_ISDIR
(
d°
.
°_mode
)) {

2143 i‡(
§˚Àmíts
>1) {

2144 
	`¥ötf
("can snapshot multipleÉlements only intoÉxisting directory\n");

2147 i‡(
	`l°©
(
§˙ames
[0],&
s°
)<0) {

2148 
	`¥ötf
("%s:Ü°©Éº‹: %s\n",
§˙ames
[0],
	`°ªº
(
î∫o
));

2151 i‡(
s°
.
°_dev
 !
d°
.st_dev) {

2152 
	`¥ötf
("(%s,%s): bŸhÉÀmít†mu° bê⁄Åhêßmêdevi˚\n",
d°«me
,
§˙ames
[0]);

2155 i‡(
	`bsd_dú«me
(
to
,
dú
)<0) {

2156 
	`¥ötf
("%s: dú«mêîr‹\n",
to
);

2159 i‡(
	`bsd_ba£«me
(
to
,
ba£
)<0) {

2160 
	`¥ötf
("%s: ba£«mêîr‹\n",
to
);

2163  
	`make_¢≠shŸ
(
dú
,
ba£
,
§˙ames
[0],
s°
.
°_öo
,
ˇnowîwrôe
);

2165 
°©us
 = 0;

2166 
i
=0 ; i<
§˚Àmíts
 ; i++) {

2167 i‡(
	`l°©
(
§˙ames
[
i
],&
s°
)<0) {

2168 
	`¥ötf
("%s:Ü°©Éº‹: %s\n",
§˙ames
[
i
],
	`°ªº
(
î∫o
));

2169 
°©us
=-1;

2172 i‡(
s°
.
°_dev
 !
d°
.st_dev) {

2173 
	`¥ötf
("(%s,%s): bŸhÉÀmít†mu° bê⁄Åhêßmêdevi˚\n",
d°«me
,
§˙ames
[
i
]);

2174 
°©us
=-1;

2177 i‡(!
	`S_ISDIR
(
s°
.
°_mode
)) {

2178 i‡(!
	`S_ISLNK
(
s°
.
°_mode
)) {

2179 i‡(
	`ªÆ∑th
(
§˙ames
[
i
],
§c
)==
NULL
) {

2180 
	`¥ötf
("%s:ÑóÕ©hÉº‹ o¿%s: %s\n",
§˙ames
[
i
],
§c
,
	`°ªº
(
î∫o
));

2181 
°©us
=-1;

2184 i‡(
	`bsd_ba£«me
(
§c
,
ba£
)<0) {

2185 
	`¥ötf
("%s: ba£«mêîr‹\n",
§c
);

2186 
°©us
=-1;

2190 i‡(
	`bsd_ba£«me
(
§˙ames
[
i
],
ba£
)<0) {

2191 
	`¥ötf
("%s: ba£«mêîr‹\n",
§˙ames
[
i
]);

2192 
°©us
=-1;

2196 i‡(
	`make_¢≠shŸ
(
to
,
ba£
,
§˙ames
[
i
],
s°
.
°_öo
,
ˇnowîwrôe
)<0) {

2197 
°©us
=-1;

2200 
l
 = 
	`°æí
(
§˙ames
[
i
]);

2201 i‡(
l
>0 && 
§˙ames
[
i
][l-1]!='/') {

2202 i‡(
	`ªÆ∑th
(
§˙ames
[
i
],
§c
)==
NULL
) {

2203 
	`¥ötf
("%s:ÑóÕ©hÉº‹ o¿%s: %s\n",
§˙ames
[
i
],
§c
,
	`°ªº
(
î∫o
));

2204 
°©us
=-1;

2207 i‡(
	`bsd_ba£«me
(
§c
,
ba£
)<0) {

2208 
	`¥ötf
("%s: ba£«mêîr‹\n",
§c
);

2209 
°©us
=-1;

2212 i‡(
	`make_¢≠shŸ
(
to
,
ba£
,
§˙ames
[
i
],
s°
.
°_öo
,
ˇnowîwrôe
)<0) {

2213 
°©us
=-1;

2216 i‡(
	`bsd_dú«me
(
to
,
dú
)<0) {

2217 
	`¥ötf
("%s: dú«mêîr‹\n",
to
);

2218 
°©us
=-1;

2221 i‡(
	`bsd_ba£«me
(
to
,
ba£
)<0) {

2222 
	`¥ötf
("%s: ba£«mêîr‹\n",
to
);

2223 
°©us
=-1;

2226 i‡(
	`make_¢≠shŸ
(
dú
,
ba£
,
§˙ames
[
i
],
s°
.
°_öo
,
ˇnowîwrôe
)<0) {

2227 
°©us
=-1;

2232  
°©us
;

2235 
	}
}

2238 
	mMFSGETGOAL
=1,

2239 
	mMFSSETGOAL
,

2240 
	mMFSGETTRASHTIME
,

2241 
	mMFSSETTRASHTIME
,

2242 
	mMFSCHECKFILE
,

2243 
	mMFSFILEINFO
,

2244 
	mMFSAPPENDCHUNKS
,

2245 
	mMFSDIRINFO
,

2246 
	mMFSFILEREPAIR
,

2247 
	mMFSMAKESNAPSHOT
,

2248 
	mMFSGETEATTR
,

2249 
	mMFSSETEATTR
,

2250 
	mMFSDELEATTR
,

2251 
	mMFSGETQUOTA
,

2252 
	mMFSSETQUOTA
,

2253 
	mMFSDELQUOTA


2256 
ölöe
 
	$¥öt_numbîf‹m©_›ti⁄s
() {

2257 
	`Ârötf
(
°dîr
," -n - showÇumbers inÖlain format\n");

2258 
	`Ârötf
(
°dîr
," -h - \"human-readable\"Çumbers using base 2Örefixes (IEC 60027)\n");

2259 
	`Ârötf
(
°dîr
," -H - \"human-readable\"Çumbers using base 10Örefixes (SI)\n");

2260 
	}
}

2262 
ölöe
 
	$¥öt_ªcursive_›ti⁄
() {

2263 
	`Ârötf
(
°dîr
," -r - do itÑecursively\n");

2264 
	}
}

2266 
ölöe
 
	$¥öt_exåa_©åibuãs
() {

2267 
j
;

2268 
	`Ârötf
(
°dîr
,"\nattributes:\n");

2269 
j
=0 ; j<
EATTR_BITS
 ; j++) {

2270 i‡(
óâπab
[
j
][0]) {

2271 
	`Ârötf
(
°dîr
," %†- %s\n",
óâπab
[
j
],
óârdesc
[j]);

2274 
	}
}

2276 
	$ußge
(
f
) {

2277 
f
) {

2278 
MFSGETGOAL
:

2279 
	`Ârötf
(
°dîr
,"get objects goal (desiredÇumber of copies)\n\nusage: mfsgetgoal [-nhHr]Çame [name ...]\n");

2280 
	`¥öt_numbîf‹m©_›ti⁄s
();

2281 
	`¥öt_ªcursive_›ti⁄
();

2283 
MFSSETGOAL
:

2284 
	`Ârötf
(
°dîr
,"set objects goal (desiredÇumber of copies)\n\nusage: mfssetgoal [-nhHr] GOAL[-|+]Çame [name ...]\n");

2285 
	`¥öt_numbîf‹m©_›ti⁄s
();

2286 
	`¥öt_ªcursive_›ti⁄
();

2287 
	`Ârötf
(
°dîr
," GOAL+ - increase goalÅo given value\n");

2288 
	`Ârötf
(
°dîr
," GOAL- - decrease goalÅo given value\n");

2289 
	`Ârötf
(
°dîr
," GOAL - just set goalÅo given value\n");

2291 
MFSGETTRASHTIME
:

2292 
	`Ârötf
(
°dîr
,"get objectsÅrashtime (how many seconds file should beÜeft inÅrash)\n\nusage: mfsgettrashtime [-nhHr]Çame [name ...]\n");

2293 
	`¥öt_numbîf‹m©_›ti⁄s
();

2294 
	`¥öt_ªcursive_›ti⁄
();

2296 
MFSSETTRASHTIME
:

2297 
	`Ârötf
(
°dîr
,"set objectsÅrashtime (how many seconds file should beÜeft inÅrash)\n\nusage: mfssettrashtime [-nhHr] SECONDS[-|+]Çame [name ...]\n");

2298 
	`¥öt_numbîf‹m©_›ti⁄s
();

2299 
	`¥öt_ªcursive_›ti⁄
();

2300 
	`Ârötf
(
°dîr
," SECONDS+ - increaseÅrashtimeÅo given value\n");

2301 
	`Ârötf
(
°dîr
," SECONDS- - decreaseÅrashtimeÅo given value\n");

2302 
	`Ârötf
(
°dîr
," SECONDS - just setÅrashtimeÅo given value\n");

2304 
MFSCHECKFILE
:

2305 
	`Ârötf
(
°dîr
,"check files\n\nusage: mfscheckfile [-nhH]Çame [name ...]\n");

2307 
MFSFILEINFO
:

2308 
	`Ârötf
(
°dîr
,"show files info (shows detailed info ofÉach file chunk)\n\nusage: mfsfileinfoÇame [name ...]\n");

2310 
MFSAPPENDCHUNKS
:

2311 
	`Ârötf
(
°dîr
,"append file chunksÅoánother file. If destination file doesn'tÉxistÅhen it's createdásÉmpty fileándÅhen chunksáreáppended\n\nusage: mfsappendchunks dstfileÇame [name ...]\n");

2313 
MFSDIRINFO
:

2314 
	`Ârötf
(
°dîr
,"show directories stats\n\nusage: mfsdirinfo [-nhH]Çame [name ...]\n");

2315 
	`¥öt_numbîf‹m©_›ti⁄s
();

2316 
	`Ârötf
(
°dîr
,"\nMeaning of someÇot obvious output data:\n 'length' is just sum of filesÜengths\n 'size' is sum of chunksÜengths\n 'realsize' isÉstimated hdd usage (usually size multiplied by current goal)\n");

2318 
MFSFILEREPAIR
:

2319 
	`Ârötf
(
°dîr
,"repair given file. Use it with caution. It forces fileÅo beÑeadable, so it couldÉrase (fill with zeros) file when chunkserversáreÇot currently connected.\n\nusage: mfsfilerepair [-nhH]Çame [name ...]\n");

2320 
	`¥öt_numbîf‹m©_›ti⁄s
();

2322 
MFSMAKESNAPSHOT
:

2323 
	`Ârötf
(
°dîr
,"make snapshot (lazy copy)\n\nusage: mfsmakesnapshot [-o] src [src ...] dst\n");

2324 
	`Ârötf
(
°dîr
,"-o -állowÅo overwriteÉxisting objects\n");

2326 
MFSGETEATTR
:

2327 
	`Ârötf
(
°dîr
,"get objectsÉxtraáttributes\n\nusage: mfsgeteattr [-nhHr]Çame [name ...]\n");

2328 
	`¥öt_numbîf‹m©_›ti⁄s
();

2329 
	`¥öt_ªcursive_›ti⁄
();

2331 
MFSSETEATTR
:

2332 
	`Ârötf
(
°dîr
,"set objectsÉxtraáttributes\n\nusage: mfsseteattr [-nhHr] -fáttrname [-fáttrname ...]Çame [name ...]\n");

2333 
	`¥öt_numbîf‹m©_›ti⁄s
();

2334 
	`¥öt_ªcursive_›ti⁄
();

2335 
	`Ârötf
(
°dîr
," -fáttrname - specifyáttributeÅo set\n");

2336 
	`¥öt_exåa_©åibuãs
();

2338 
MFSDELEATTR
:

2339 
	`Ârötf
(
°dîr
,"delete objectsÉxtraáttributes\n\nusage: mfsdeleattr [-nhHr] -fáttrname [-fáttrname ...]Çame [name ...]\n");

2340 
	`¥öt_numbîf‹m©_›ti⁄s
();

2341 
	`¥öt_ªcursive_›ti⁄
();

2342 
	`Ârötf
(
°dîr
," -fáttrname - specifyáttributeÅo delete\n");

2343 
	`¥öt_exåa_©åibuãs
();

2345 
MFSGETQUOTA
:

2346 
	`Ârötf
(
°dîr
,"get quota for given directory (directories)\n\nusage: mfsgetquota [-nhH] dirname [dirname ...]\n");

2347 
	`¥öt_numbîf‹m©_›ti⁄s
();

2349 
MFSSETQUOTA
:

2350 
	`Ârötf
(
°dîr
,"set quota for given directory (directories)\n\nusage: mfssetquota [-nhH] [-iI inodes] [-lLÜength] [-sS size] [-rRÑealsize] dirname [dirname ...]\n");

2351 
	`¥öt_numbîf‹m©_›ti⁄s
();

2352 
	`Ârötf
(
°dîr
," -i/-I - set soft/hardÜimit forÇumber of filesystem objects\n");

2353 
	`Ârötf
(
°dîr
," -l/-L - set soft/hardÜimit for sum of filesÜengths\n");

2354 
	`Ârötf
(
°dîr
," -s/-S - set soft/hardÜimit for sum of file sizes (chunk sizes)\n");

2355 
	`Ârötf
(
°dîr
," -r/-R - set soft/hardÜimit forÉstimated hdd usage (usually size multiplied by goal)\n");

2356 
	`Ârötf
(
°dîr
,"\nAllÇumbers can have decimalÖointánd SI/IEC symbolÖrefixátÅheÉnd\ndecimal (SI): (k - 10^3 , M - 10^6 , G - 10^9 , T - 10^12 , P - 10^15 , E - 10^18)\nbinary (IEC 60027): (Ki - 2^10 , Mi - 2^20 , Gi - 2^30 , Ti - 2^40 , Pi - 2^50 , Ei - 2^60 )\n");

2358 
MFSDELQUOTA
:

2359 
	`Ârötf
(
°dîr
,"delete quota for given directory (directories)\n\nusage: mfsdelquota [-nhHailsrAILSR] dirname [dirname ...]\n");

2360 
	`¥öt_numbîf‹m©_›ti⁄s
();

2361 
	`Ârötf
(
°dîr
," -i/-I - delete inodes soft/hard quota\n");

2362 
	`Ârötf
(
°dîr
," -l/-L - deleteÜength soft/hard quota\n");

2363 
	`Ârötf
(
°dîr
," -s/-S - delete size soft/hard quota\n");

2364 
	`Ârötf
(
°dîr
," -r/-R - deleteÑeal size soft/hard quota\n");

2365 
	`Ârötf
(
°dîr
," -a/-A - deleteáll soft/hard quotas\n");

2368 
	`exô
(1);

2369 
	}
}

2371 
	$maö
(
¨gc
,**
¨gv
) {

2372 
l
,
f
,
°©us
;

2373 
i
,
found
;

2374 
ch
;

2375 
oÊag
=0;

2376 
rÊag
=0;

2377 
uöt64_t
 
v
;

2378 
uöt8_t
 
óâr
=0,
gﬂl
=1,
smode
=
SMODE_SET
;

2379 
uöt32_t
 
åashtime
=86400;

2380 
uöt32_t
 
söodes
=0,
höodes
=0;

2381 
uöt64_t
 
¶ígth
=0,
hÀngth
=0,
ssize
=0,
hsize
=0,
§ólsize
=0,
hªÆsize
=0;

2382 
uöt8_t
 
qÊags
=0;

2383 *
≠≥nd‚ame
=
NULL
;

2384 *
hrf‹m©
;

2386 
	`°ªº_öô
();

2388 
l
 = 
	`°æí
(
¨gv
[0]);

2389 
f
=0;

2390 
	#CHECKNAME
(
«me
Ë((
l
==()(“ame)-1Ë&& 
	`°rcmp
(
¨gv
[0],«me)==0Ë|| (l>()(“ame)-1Ë&& såcmp(◊rgv[0])+÷-“ame)),"/"Çame)==0))

	)

2391 i‡(
	`CHECKNAME
("mfstools")) {

2392 i‡(
¨gc
==2 && 
	`°rcmp
(
¨gv
[1],"create")==0) {

2393 
	`Ârötf
(
°dîr
,"create symlinks\n");

2394 
	#SYMLINK
(
«me
Ëi‡(
	`symlök
(
¨gv
[0],name)<0) { \

2395 
	`≥º‹
("îr‹ cª©ög symlök '"
«me
"'"); \

2396 }

	)

2397 
	`SYMLINK
("mfsgetgoal")

2398 
	`SYMLINK
("mfssetgoal")

2399 
	`SYMLINK
("mfsgettrashtime")

2400 
	`SYMLINK
("mfssettrashtime")

2401 
	`SYMLINK
("mfscheckfile")

2402 
	`SYMLINK
("mfsfileinfo")

2403 
	`SYMLINK
("mfsappendchunks")

2404 
	`SYMLINK
("mfsdirinfo")

2405 
	`SYMLINK
("mfsfilerepair")

2406 
	`SYMLINK
("mfsmakesnapshot")

2407 
	`SYMLINK
("mfsgeteattr")

2408 
	`SYMLINK
("mfsseteattr")

2409 
	`SYMLINK
("mfsdeleattr")

2410 #i‡
VERSHEX
>=0x010700

2411 
	`SYMLINK
("mfsgetquota")

2412 
	`SYMLINK
("mfssetquota")

2413 
	`SYMLINK
("mfsdelquota")

2416 
	`SYMLINK
("mfsrgetgoal")

2417 
	`SYMLINK
("mfsrsetgoal")

2418 
	`SYMLINK
("mfsrgettrashtime")

2419 
	`SYMLINK
("mfsrsettrashtime")

2422 
	`Ârötf
(
°dîr
,"mf†mu…òtoﬁ\n\nußge:\n\tmf°oﬁ†¸óã - cª©êsymlök†(mfs<toﬁ«me> -> %s)\n",
¨gv
[0]);

2423 
	`Ârötf
(
°dîr
,"\ntools:\n");

2424 
	`Ârötf
(
°dîr
,"\tmfsgetgoal\n\tmfssetgoal\n\tmfsgettrashtime\n\tmfssettrashtime\n");

2425 
	`Ârötf
(
°dîr
,"\tmfscheckfile\n\tmfsfileinfo\n\tmfsappendchunks\n\tmfsdirinfo\n\tmfsfilerepair\n");

2426 
	`Ârötf
(
°dîr
,"\tmfsmakesnapshot\n");

2427 
	`Ârötf
(
°dîr
,"\tmfsgeteattr\n\tmfsseteattr\n\tmfsdeleattr\n");

2428 #i‡
VERSHEX
>=0x010700

2429 
	`Ârötf
(
°dîr
,"\tmfsgetquota\n\tmfssetquota\n\tmfsdelquota\n");

2431 
	`Ârötf
(
°dîr
,"\ndeprecatedÅools:\n");

2432 
	`Ârötf
(
°dîr
,"\tmfsrgetgoal = mfsgetgoal -r\n");

2433 
	`Ârötf
(
°dîr
,"\tmfsrsetgoal = mfssetgoal -r\n");

2434 
	`Ârötf
(
°dîr
,"\tmfsrgettrashtime = mfsgettreshtime -r\n");

2435 
	`Ârötf
(
°dîr
,"\tmfsrsettrashtime = mfssettreshtime -r\n");

2438 } i‡(
	`CHECKNAME
("mfsgetgoal")) {

2439 
f
=
MFSGETGOAL
;

2440 } i‡(
	`CHECKNAME
("mfsrgetgoal")) {

2441 
f
=
MFSGETGOAL
;

2442 
rÊag
=1;

2443 
	`Ârötf
(
°dîr
,"deprecatedÅool - use \"mfsgetgoal -r\"\n");

2444 } i‡(
	`CHECKNAME
("mfssetgoal")) {

2445 
f
=
MFSSETGOAL
;

2446 } i‡(
	`CHECKNAME
("mfsrsetgoal")) {

2447 
f
=
MFSSETGOAL
;

2448 
rÊag
=1;

2449 
	`Ârötf
(
°dîr
,"deprecatedÅool - use \"mfssetgoal -r\"\n");

2450 } i‡(
	`CHECKNAME
("mfsgettrashtime")) {

2451 
f
=
MFSGETTRASHTIME
;

2452 } i‡(
	`CHECKNAME
("mfsrgettrashtime")) {

2453 
f
=
MFSGETTRASHTIME
;

2454 
rÊag
=1;

2455 
	`Ârötf
(
°dîr
,"deprecatedÅool - use \"mfsgettrashtime -r\"\n");

2456 } i‡(
	`CHECKNAME
("mfssettrashtime")) {

2457 
f
=
MFSSETTRASHTIME
;

2458 } i‡(
	`CHECKNAME
("mfsrsettrashtime")) {

2459 
f
=
MFSSETTRASHTIME
;

2460 
rÊag
=1;

2461 
	`Ârötf
(
°dîr
,"deprecatedÅool - use \"mfssettrashtime -r\"\n");

2462 } i‡(
	`CHECKNAME
("mfscheckfile")) {

2463 
f
=
MFSCHECKFILE
;

2464 } i‡(
	`CHECKNAME
("mfsfileinfo")) {

2465 
f
=
MFSFILEINFO
;

2466 } i‡(
	`CHECKNAME
("mfsappendchunks")) {

2467 
f
=
MFSAPPENDCHUNKS
;

2468 } i‡(
	`CHECKNAME
("mfsdirinfo")) {

2469 
f
=
MFSDIRINFO
;

2470 } i‡(
	`CHECKNAME
("mfsgeteattr")) {

2471 
f
=
MFSGETEATTR
;

2472 } i‡(
	`CHECKNAME
("mfsseteattr")) {

2473 
f
=
MFSSETEATTR
;

2474 } i‡(
	`CHECKNAME
("mfsdeleattr")) {

2475 
f
=
MFSDELEATTR
;

2476 } i‡(
	`CHECKNAME
("mfsgetquota")) {

2477 
f
=
MFSGETQUOTA
;

2478 } i‡(
	`CHECKNAME
("mfssetquota")) {

2479 
f
=
MFSSETQUOTA
;

2480 } i‡(
	`CHECKNAME
("mfsdelquota")) {

2481 
f
=
MFSDELQUOTA
;

2482 } i‡(
	`CHECKNAME
("mfsfilerepair")) {

2483 
f
=
MFSFILEREPAIR
;

2484 } i‡(
	`CHECKNAME
("mfsmakesnapshot")) {

2485 
f
=
MFSMAKESNAPSHOT
;

2487 
	`Ârötf
(
°dîr
,"unknown binaryÇame\n");

2493 
hrf‹m©
 = 
	`gëív
("MFSHRFORMAT");

2494 i‡(
hrf‹m©
) {

2495 i‡(
hrf‹m©
[0]>='0' && hrformat[0]<='4') {

2496 
humode
=
hrf‹m©
[0]-'0';

2498 i‡(
hrf‹m©
[0]=='h') {

2499 i‡(
hrf‹m©
[1]=='+') {

2500 
humode
=3;

2502 
humode
=1;

2505 i‡(
hrf‹m©
[0]=='H') {

2506 i‡(
hrf‹m©
[1]=='+') {

2507 
humode
=4;

2509 
humode
=2;

2515 
f
) {

2516 
MFSMAKESNAPSHOT
:

2517 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"o"))!=-1) {

2518 
ch
) {

2520 
oÊag
=1;

2524 
¨gc
 -
›töd
;

2525 
¨gv
 +
›töd
;

2526 i‡(
¨gc
<2) {

2527 
	`ußge
(
f
);

2529  
	`¢≠shŸ
(
¨gv
[
¨gc
-1],¨gv,¨gc-1,
oÊag
);

2530 
MFSGETGOAL
:

2531 
MFSSETGOAL
:

2532 
MFSGETTRASHTIME
:

2533 
MFSSETTRASHTIME
:

2534 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"rnhH"))!=-1) {

2535 
ch
) {

2537 
humode
=0;

2540 
humode
=1;

2543 
humode
=2;

2546 
rÊag
=1;

2550 
¨gc
 -
›töd
;

2551 
¨gv
 +
›töd
;

2552 i‡((
f
==
MFSSETGOAL
 || f==
MFSSETTRASHTIME
Ë&& 
¨gc
==0) {

2553 
	`ußge
(
f
);

2555 i‡(
f
==
MFSSETGOAL
) {

2556 *
p
 = 
¨gv
[0];

2557 i‡(
p
[0]>'0' &&Ö[0]<='9' && (p[1]=='\0' || ((p[1]=='-' ||Ö[1]=='+') &&Ö[2]=='\0'))) {

2558 
gﬂl
 = 
p
[0]-'0';

2559 i‡(
p
[1]=='-') {

2560 
smode
=
SMODE_DECREASE
;

2561 } i‡(
p
[1]=='+') {

2562 
smode
=
SMODE_INCREASE
;

2565 
	`Ârötf
(
°dîr
,"goal should be givenásá digit between 1ánd 9 optionally folowed by '-' or '+'\n");

2566 
	`ußge
(
f
);

2568 
¨gc
--;

2569 
¨gv
++;

2571 i‡(
f
==
MFSSETTRASHTIME
) {

2572 *
p
 = 
¨gv
[0];

2573 
åashtime
 = 0;

2574 
p
[0]>='0' &&Ö[0]<='9') {

2575 
åashtime
*=10;

2576 
åashtime
+=(
p
[0]-'0');

2577 
p
++;

2579 i‡(
p
[0]=='\0' || ((p[0]=='-' ||Ö[0]=='+') &&Ö[1]=='\0')) {

2580 i‡(
p
[0]=='-') {

2581 
smode
=
SMODE_DECREASE
;

2582 } i‡(
p
[0]=='+') {

2583 
smode
=
SMODE_INCREASE
;

2586 
	`Ârötf
(
°dîr
,"trashtime should be givenásÇumber of seconds optionally folowed by '-' or '+'\n");

2587 
	`ußge
(
f
);

2589 
¨gc
--;

2590 
¨gv
++;

2593 
MFSGETEATTR
:

2594 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"rnhH"))!=-1) {

2595 
ch
) {

2597 
humode
=0;

2600 
humode
=1;

2603 
humode
=2;

2606 
rÊag
=1;

2610 
¨gc
 -
›töd
;

2611 
¨gv
 +
›töd
;

2613 
MFSSETEATTR
:

2614 
MFSDELEATTR
:

2615 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"rnhHf:"))!=-1) {

2616 
ch
) {

2618 
humode
=0;

2621 
humode
=1;

2624 
humode
=2;

2627 
rÊag
=1;

2630 
found
=0;

2631 
i
=0 ; 
found
==0 && i<
EATTR_BITS
 ; i++) {

2632 i‡(
	`°rcmp
(
›èrg
,
óâπab
[
i
])==0) {

2633 
found
=1;

2634 
óâr
|=1<<
i
;

2637 i‡(!
found
) {

2638 
	`Ârötf
(
°dîr
,"unknown flag\n");

2639 
	`ußge
(
f
);

2644 
¨gc
 -
›töd
;

2645 
¨gv
 +
›töd
;

2646 i‡(
óâr
==0 && 
¨gc
>=1) {

2647 i‡(
f
==
MFSSETEATTR
) {

2648 
	`Ârötf
(
°dîr
,"noáttribute(s)Åo set\n");

2650 
	`Ârötf
(
°dîr
,"noáttribute(s)Åo delete\n");

2652 
	`ußge
(
f
);

2655 
MFSFILEREPAIR
:

2656 
MFSGETQUOTA
:

2657 
MFSDIRINFO
:

2658 
MFSCHECKFILE
:

2659 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"nhH"))!=-1) {

2660 
ch
) {

2662 
humode
=0;

2665 
humode
=1;

2668 
humode
=2;

2672 
¨gc
 -
›töd
;

2673 
¨gv
 +
›töd
;

2675 
MFSSETQUOTA
:

2676 i‡(
	`gëuid
()) {

2677 
	`Ârötf
(
°dîr
,"onlyÑoot can change quota\n");

2678 
	`ußge
(
f
);

2680 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"nhHi:I:l:L:s:S:r:R:"))!=-1) {

2681 
ch
) {

2683 
humode
=0;

2686 
humode
=1;

2689 
humode
=2;

2692 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT32_MAX
,0)<0) {

2693 
	`Ârötf
(
°dîr
,"bad inodesÜimit\n");

2694 
	`ußge
(
f
);

2696 i‡(
qÊags
 & 
QUOTA_FLAG_SINODES
) {

2697 
	`Ârötf
(
°dîr
,"'soft inodes' quota definedÅwice\n");

2698 
	`ußge
(
f
);

2700 
söodes
 = 
v
;

2701 
qÊags
 |
QUOTA_FLAG_SINODES
;

2704 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT32_MAX
,0)<0) {

2705 
	`Ârötf
(
°dîr
,"bad inodesÜimit\n");

2706 
	`ußge
(
f
);

2708 i‡(
qÊags
 & 
QUOTA_FLAG_HINODES
) {

2709 
	`Ârötf
(
°dîr
,"'hard inodes' quota definedÅwice\n");

2710 
	`ußge
(
f
);

2712 
höodes
 = 
v
;

2713 
qÊags
 |
QUOTA_FLAG_HINODES
;

2716 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2717 
	`Ârötf
(
°dîr
,"badÜengthÜimit\n");

2718 
	`ußge
(
f
);

2720 i‡(
qÊags
 & 
QUOTA_FLAG_SLENGTH
) {

2721 
	`Ârötf
(
°dîr
,"'softÜength' quota definedÅwice\n");

2722 
	`ußge
(
f
);

2724 
¶ígth
 = 
v
;

2725 
qÊags
 |
QUOTA_FLAG_SLENGTH
;

2728 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2729 
	`Ârötf
(
°dîr
,"badÜengthÜimit\n");

2730 
	`ußge
(
f
);

2732 i‡(
qÊags
 & 
QUOTA_FLAG_HLENGTH
) {

2733 
	`Ârötf
(
°dîr
,"'hardÜength' quota definedÅwice\n");

2734 
	`ußge
(
f
);

2736 
hÀngth
 = 
v
;

2737 
qÊags
 |
QUOTA_FLAG_HLENGTH
;

2740 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2741 
	`Ârötf
(
°dîr
,"bad sizeÜimit\n");

2742 
	`ußge
(
f
);

2744 i‡(
qÊags
 & 
QUOTA_FLAG_SSIZE
) {

2745 
	`Ârötf
(
°dîr
,"'soft size' quota definedÅwice\n");

2746 
	`ußge
(
f
);

2748 
ssize
 = 
v
;

2749 
qÊags
 |
QUOTA_FLAG_SSIZE
;

2752 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2753 
	`Ârötf
(
°dîr
,"bad sizeÜimit\n");

2754 
	`ußge
(
f
);

2756 i‡(
qÊags
 & 
QUOTA_FLAG_HSIZE
) {

2757 
	`Ârötf
(
°dîr
,"'hard size' quota definedÅwice\n");

2758 
	`ußge
(
f
);

2760 
hsize
 = 
v
;

2761 
qÊags
 |
QUOTA_FLAG_HSIZE
;

2764 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2765 
	`Ârötf
(
°dîr
,"badÑeal sizeÜimit\n");

2766 
	`ußge
(
f
);

2768 i‡(
qÊags
 & 
QUOTA_FLAG_SREALSIZE
) {

2769 
	`Ârötf
(
°dîr
,"'softÑealsize' quota definedÅwice\n");

2770 
	`ußge
(
f
);

2772 
§ólsize
 = 
v
;

2773 
qÊags
 |
QUOTA_FLAG_SREALSIZE
;

2776 i‡(
	`my_gë_numbî
(
›èrg
,&
v
,
UINT64_MAX
,1)<0) {

2777 
	`Ârötf
(
°dîr
,"badÑeal sizeÜimit\n");

2778 
	`ußge
(
f
);

2780 i‡(
qÊags
 & 
QUOTA_FLAG_HREALSIZE
) {

2781 
	`Ârötf
(
°dîr
,"'hardÑealsize' quota definedÅwice\n");

2782 
	`ußge
(
f
);

2784 
hªÆsize
 = 
v
;

2785 
qÊags
 |
QUOTA_FLAG_HREALSIZE
;

2789 i‡(
qÊags
==0) {

2790 
	`Ârötf
(
°dîr
,"quota optionsÇot defined\n");

2791 
	`ußge
(
f
);

2793 
¨gc
 -
›töd
;

2794 
¨gv
 +
›töd
;

2796 
MFSDELQUOTA
:

2797 i‡(
	`gëuid
()) {

2798 
	`Ârötf
(
°dîr
,"onlyÑoot can change quota\n");

2799 
	`ußge
(
f
);

2801 (
ch
=
	`gë›t
(
¨gc
,
¨gv
,"nhHiIlLsSrRaA"))!=-1) {

2802 
ch
) {

2804 
humode
=0;

2807 
humode
=1;

2810 
humode
=2;

2813 i‡(
qÊags
 & 
QUOTA_FLAG_SINODES
) {

2814 
	`Ârötf
(
°dîr
,"'soft inodes' option givenÅwice\n");

2815 
	`ußge
(
f
);

2817 
qÊags
 |
QUOTA_FLAG_SINODES
;

2820 i‡(
qÊags
 & 
QUOTA_FLAG_HINODES
) {

2821 
	`Ârötf
(
°dîr
,"'hard inodes' option givenÅwice\n");

2822 
	`ußge
(
f
);

2824 
qÊags
 |
QUOTA_FLAG_HINODES
;

2827 i‡(
qÊags
 & 
QUOTA_FLAG_SLENGTH
) {

2828 
	`Ârötf
(
°dîr
,"'softÜength' option givenÅwice\n");

2829 
	`ußge
(
f
);

2831 
qÊags
 |
QUOTA_FLAG_SLENGTH
;

2834 i‡(
qÊags
 & 
QUOTA_FLAG_HLENGTH
) {

2835 
	`Ârötf
(
°dîr
,"'hardÜength' option givenÅwice\n");

2836 
	`ußge
(
f
);

2838 
qÊags
 |
QUOTA_FLAG_HLENGTH
;

2841 i‡(
qÊags
 & 
QUOTA_FLAG_SSIZE
) {

2842 
	`Ârötf
(
°dîr
,"'soft size' option givenÅwice\n");

2843 
	`ußge
(
f
);

2845 
qÊags
 |
QUOTA_FLAG_SSIZE
;

2848 i‡(
qÊags
 & 
QUOTA_FLAG_HSIZE
) {

2849 
	`Ârötf
(
°dîr
,"'hard size' option givenÅwice\n");

2850 
	`ußge
(
f
);

2852 
qÊags
 |
QUOTA_FLAG_HSIZE
;

2855 i‡(
qÊags
 & 
QUOTA_FLAG_SREALSIZE
) {

2856 
	`Ârötf
(
°dîr
,"'softÑealsize' option givenÅwice\n");

2857 
	`ußge
(
f
);

2859 
qÊags
 |
QUOTA_FLAG_SREALSIZE
;

2862 i‡(
qÊags
 & 
QUOTA_FLAG_HREALSIZE
) {

2863 
	`Ârötf
(
°dîr
,"'hardÑealsize' option givenÅwice\n");

2864 
	`ußge
(
f
);

2866 
qÊags
 |
QUOTA_FLAG_HREALSIZE
;

2869 i‡(
qÊags
 & 
QUOTA_FLAG_SALL
) {

2870 
	`Ârötf
(
°dîr
,"'all soft quotas' definedÅogether with other soft quota options\n");

2871 
	`ußge
(
f
);

2873 
qÊags
 |
QUOTA_FLAG_SALL
;

2876 i‡(
qÊags
 & 
QUOTA_FLAG_HALL
) {

2877 
	`Ârötf
(
°dîr
,"'all hard quotas' definedÅogether with other hard quota options\n");

2878 
	`ußge
(
f
);

2880 
qÊags
 |
QUOTA_FLAG_HALL
;

2884 i‡(
qÊags
==0) {

2885 
	`Ârötf
(
°dîr
,"quota optionsÇot defined\n");

2886 
	`ußge
(
f
);

2888 
¨gc
 -
›töd
;

2889 
¨gv
 +
›töd
;

2892 
	`gë›t
(
¨gc
,
¨gv
,"")!=-1);

2893 
¨gc
 -
›töd
;

2894 
¨gv
 +
›töd
;

2899 i‡(
f
==
MFSAPPENDCHUNKS
) {

2900 i‡(
¨gc
<=1) {

2901 
	`ußge
(
f
);

2903 
≠≥nd‚ame
 = 
¨gv
[0];

2904 
i
 = 
	`›í
(
≠≥nd‚ame
,
O_RDWR
 | 
O_CREAT
,0666);

2905 i‡(
i
<0) {

2906 
	`Ârötf
(
°dîr
,"ˇn'à¸óã/›í fûe: %s\n",
≠≥nd‚ame
);

2909 
	`˛o£
(
i
);

2910 
¨gc
--;

2911 
¨gv
++;

2914 i‡(
¨gc
<1) {

2915 
	`ußge
(
f
);

2917 
°©us
=0;

2918 
¨gc
>0) {

2919 
f
) {

2920 
MFSGETGOAL
:

2921 i‡(
	`gë_gﬂl
(*
¨gv
,(
rÊag
)?
GMODE_RECURSIVE
:
GMODE_NORMAL
)<0) {

2922 
°©us
=1;

2925 
MFSSETGOAL
:

2926 i‡(
	`£t_gﬂl
(*
¨gv
,
gﬂl
,(
rÊag
)?(
smode
 | 
SMODE_RMASK
):smode)<0) {

2927 
°©us
=1;

2930 
MFSGETTRASHTIME
:

2931 i‡(
	`gë_åashtime
(*
¨gv
,(
rÊag
)?
GMODE_RECURSIVE
:
GMODE_NORMAL
)<0) {

2932 
°©us
=1;

2935 
MFSSETTRASHTIME
:

2936 i‡(
	`£t_åashtime
(*
¨gv
,
åashtime
,(
rÊag
)?(
smode
 | 
SMODE_RMASK
):smode)<0) {

2937 
°©us
=1;

2940 
MFSCHECKFILE
:

2941 i‡(
	`check_fûe
(*
¨gv
)<0) {

2942 
°©us
=1;

2945 
MFSFILEINFO
:

2946 i‡(
	`fûe_öfo
(*
¨gv
)<0) {

2947 
°©us
=1;

2950 
MFSAPPENDCHUNKS
:

2951 i‡(
	`≠≥nd_fûe
(
≠≥nd‚ame
,*
¨gv
)<0) {

2952 
°©us
=1;

2955 
MFSDIRINFO
:

2956 i‡(
	`dú_öfo
(*
¨gv
)<0) {

2957 
°©us
=1;

2960 
MFSFILEREPAIR
:

2961 i‡(
	`fûe_ª∑ú
(*
¨gv
)<0) {

2962 
°©us
=1;

2965 
MFSGETEATTR
:

2966 i‡(
	`gë_óâr
(*
¨gv
,(
rÊag
)?
GMODE_RECURSIVE
:
GMODE_NORMAL
)<0) {

2967 
°©us
=1;

2970 
MFSSETEATTR
:

2971 i‡(
	`£t_óâr
(*
¨gv
,
óâr
,(
rÊag
)?(
SMODE_RMASK
 | 
SMODE_INCREASE
):SMODE_INCREASE)<0) {

2972 
°©us
=1;

2975 
MFSDELEATTR
:

2976 i‡(
	`£t_óâr
(*
¨gv
,
óâr
,(
rÊag
)?(
SMODE_RMASK
 | 
SMODE_DECREASE
):SMODE_DECREASE)<0) {

2977 
°©us
=1;

2980 
MFSGETQUOTA
:

2981 i‡(
	`quŸa_c⁄åﬁ
(*
¨gv
,1,0,0,0,0,0,0,0,0,0)<0) {

2982 
°©us
=1;

2985 
MFSSETQUOTA
:

2986 i‡(
	`quŸa_c⁄åﬁ
(*
¨gv
,0,
qÊags
,
söodes
,
¶ígth
,
ssize
,
§ólsize
,
höodes
,
hÀngth
,
hsize
,
hªÆsize
)<0) {

2987 
°©us
=1;

2990 
MFSDELQUOTA
:

2991 i‡(
	`quŸa_c⁄åﬁ
(*
¨gv
,1,
qÊags
,0,0,0,0,0,0,0,0)<0) {

2992 
°©us
=1;

2996 
¨gc
--;

2997 
¨gv
++;

2999  
°©us
;

3000 
	}
}

	@mfsmount/oplog.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°d¨g.h
>

25 
	~<time.h
>

26 
	~<sys/time.h
>

27 
	~<î∫o.h
>

28 
	~<±hªad.h
>

30 
	~"›log.h
"

32 
	#OPBUFFSIZE
 0x1000000

	)

33 
	#LINELENG
 1000

	)

34 
	#MAXHISTORYSIZE
 0xF00000

	)

36 
	s_fhíåy
 {

37 
	mfh
;

38 
uöt64_t
 
	mªadpos
;

39 
uöt32_t
 
	mªfcou¡
;

41 
_fhíåy
 *
	m√xt
;

42 } 
	tfhíåy
;

44 
	g√xtfh
=1;

45 
fhíåy
 *
	gfhhód
=
NULL
;

47 
uöt8_t
 
	g›buff
[
OPBUFFSIZE
];

48 
uöt64_t
 
	gwrôïos
=0;

49 
uöt8_t
 
	gwaôög
=0;

50 
±hªad_muãx_t
 
	g›bufÊock
 = 
PTHREAD_MUTEX_INITIALIZER
;

51 
±hªad_c⁄d_t
 
	gnod©a
 = 
PTHREAD_COND_INITIALIZER
;

53 
time_t
 
	gc⁄vts
=0;

54 
tm
 
	gc⁄vtm
;

55 
±hªad_muãx_t
 
	gtimñock
 = 
PTHREAD_MUTEX_INITIALIZER
;

57 
ölöe
 
	$›log_put
(
uöt8_t
 *
buff
,
uöt32_t
 
Àng
) {

58 
uöt32_t
 
bpos
;

59 i‡(
Àng
>
OPBUFFSIZE
) {

60 
buff
+=
Àng
-
OPBUFFSIZE
;

61 
Àng
=
OPBUFFSIZE
;

63 
	`±hªad_muãx_lock
(&
›bufÊock
);

64 
bpos
 = 
wrôïos
%
OPBUFFSIZE
;

65 
wrôïos
+=
Àng
;

66 i‡(
bpos
+
Àng
>
OPBUFFSIZE
) {

67 
	`mem˝y
(
›buff
+
bpos
,
buff
,
OPBUFFSIZE
-bpos);

68 
buff
+=
OPBUFFSIZE
-
bpos
;

69 
Àng
-=
OPBUFFSIZE
-
bpos
;

70 
bpos
 = 0;

72 
	`mem˝y
(
›buff
+
bpos
,
buff
,
Àng
);

73 i‡(
waôög
) {

74 
	`±hªad_c⁄d_brﬂdˇ°
(&
nod©a
);

75 
waôög
=0;

77 
	`±hªad_muãx_u∆ock
(&
›bufÊock
);

78 
	}
}

80 
	$›log_¥ötf
(c⁄° 
fu£_˘x
 *
˘x
,c⁄° *
f‹m©
,...) {

81 
va_li°
 
≠
;

82 
buff
[
LINELENG
];

83 
uöt32_t
 
Àng
;

84 
timevÆ
 
tv
;

85 
tm
 
…ime
;

87 
	`±hªad_muãx_lock
(&
timñock
);

88 
	`gëtimeofday
(&
tv
,
NULL
);

89 i‡(
c⁄vts
/900!=
tv
.
tv_£c
/900) {

90 
c⁄vts
=
tv
.
tv_£c
/900;

91 
c⁄vts
*=900;

92 
	`loˇ…ime_r
(&
c⁄vts
,&
c⁄vtm
);

94 
…ime
 = 
c⁄vtm
;

95 
Àng
 = 
tv
.
tv_£c
 - 
c⁄vts
;

96 
…ime
.
tm_£c
 +
Àng
%60;

97 
…ime
.
tm_mö
 +
Àng
/60;

98 
	`±hªad_muãx_u∆ock
(&
timñock
);

99 
Àng
 = 
	`¢¥ötf
(
buff
,
LINELENG
,"%02u.%02u %02u:%02u:%02u.%06u: uid:%u gid:%uÖid:%u cmd:",
…ime
.
tm_m⁄
+1,…ime.
tm_mday
,…ime.
tm_hour
,…ime.
tm_mö
,…ime.
tm_£c
,()(
tv
.
tv_u£c
),()(
˘x
->
uid
),()(˘x->
gid
),()(˘x->
pid
));

100 i‡(
Àng
<
LINELENG
) {

101 
	`va_°¨t
(
≠
,
f‹m©
);

102 
Àng
 +
	`v¢¥ötf
(
buff
+Àng,
LINELENG
-Àng,
f‹m©
,
≠
);

103 
	`va_íd
(
≠
);

105 i‡(
Àng
>=
LINELENG
) {

106 
Àng
=
LINELENG
-1;

108 
buff
[
Àng
++]='\n';

109 
	`›log_put
((
uöt8_t
*)
buff
,
Àng
);

110 
	}
}

113 
	$›log_√wh™dÀ
(
hÊag
) {

114 
fhíåy
 *
fh±r
;

115 
uöt32_t
 
bpos
;

117 
	`±hªad_muãx_lock
(&
›bufÊock
);

118 
fh±r
 = 
	`mÆloc
((
fhíåy
));

119 
fh±r
->
fh
 = 
√xtfh
++;

120 
fh±r
->
ªfcou¡
 = 1;

122 i‡(
hÊag
) {

123 i‡(
wrôïos
<
MAXHISTORYSIZE
) {

124 
fh±r
->
ªadpos
 = 0;

126 
fh±r
->
ªadpos
 = 
wrôïos
 - 
MAXHISTORYSIZE
;

127 
bpos
 = 
fh±r
->
ªadpos
%
OPBUFFSIZE
;

128 
fh±r
->
ªadpos
 < 
wrôïos
) {

129 i‡(
›buff
[
bpos
]=='\n') {

132 
bpos
++;

133 
bpos
%=
OPBUFFSIZE
;

134 
fh±r
->
ªadpos
++;

136 i‡(
fh±r
->
ªadpos
<
wrôïos
) {

137 
fh±r
->
ªadpos
++;

141 
fh±r
->
ªadpos
 = 
wrôïos
;

143 
fh±r
->
√xt
 = 
fhhód
;

144 
fhhód
 = 
fh±r
;

145 
	`±hªad_muãx_u∆ock
(&
›bufÊock
);

146  
fh±r
->
fh
;

147 
	}
}

149 
	$›log_ªÀa£h™dÀ
(
fh
) {

150 
fhíåy
 **
fhµå
,*
fh±r
;

151 
	`±hªad_muãx_lock
(&
›bufÊock
);

152 
fhµå
 = &
fhhód
;

153 (
fh±r
 = *
fhµå
)) {

154 i‡(
fh±r
->
fh
==fh) {

155 
fh±r
->
ªfcou¡
--;

156 i‡(
fh±r
->
ªfcou¡
==0) {

157 *
fhµå
 = 
fh±r
->
√xt
;

158 
	`‰ì
(
fh±r
);

160 
fhµå
 = &(
fh±r
->
√xt
);

163 
fhµå
 = &(
fh±r
->
√xt
);

166 
	`±hªad_muãx_u∆ock
(&
›bufÊock
);

167 
	}
}

169 
	$›log_gëd©a
(
fh
,
uöt8_t
 **
buff
,
uöt32_t
 *
Àng
,uöt32_à
maxÀng
) {

170 
fhíåy
 *
fh±r
;

171 
uöt32_t
 
bpos
;

172 
timevÆ
 
tv
;

173 
time•ec
 
ts
;

175 
	`±hªad_muãx_lock
(&
›bufÊock
);

176 
fh±r
=
fhhód
 ; fh±∏&& fh±r->
fh
 !fh ; fh±r=fh±r->
√xt
 ) {

178 i‡(
fh±r
==
NULL
) {

179 *
buff
 = 
NULL
;

180 *
Àng
 = 0;

183 
fh±r
->
ªfcou¡
++;

184 
fh±r
->
ªadpos
>=
wrôïos
) {

185 
	`gëtimeofday
(&
tv
,
NULL
);

186 
ts
.
tv_£c
 = 
tv
.tv_sec+1;

187 
ts
.
tv_n£c
 = 
tv
.
tv_u£c
*1000;

188 
waôög
=1;

189 i‡(
	`±hªad_c⁄d_timedwaô
(&
nod©a
,&
›bufÊock
,&
ts
)==
ETIMEDOUT
) {

191 *
buff
 = (
uöt8_t
*)"#\n";

192 *
Àng
 = 2;

202 
bpos
 = 
fh±r
->
ªadpos
%
OPBUFFSIZE
;

203 *
Àng
 = (
wrôïos
-(
fh±r
->
ªadpos
));

204 *
buff
 = 
›buff
+
bpos
;

205 i‡((*
Àng
)>(
OPBUFFSIZE
-
bpos
)) {

206 (*
Àng
Ë(
OPBUFFSIZE
-
bpos
);

208 i‡((*
Àng
)>
maxÀng
) {

209 (*
Àng
Ë
maxÀng
;

211 
fh±r
->
ªadpos
+=(*
Àng
);

212 
	}
}

214 
	$›log_ªÀa£d©a
(
fh
) {

215 
fhíåy
 **
fhµå
,*
fh±r
;

216 
fhµå
 = &
fhhód
;

217 (
fh±r
 = *
fhµå
)) {

218 i‡(
fh±r
->
fh
==fh) {

219 
fh±r
->
ªfcou¡
--;

220 i‡(
fh±r
->
ªfcou¡
==0) {

221 *
fhµå
 = 
fh±r
->
√xt
;

222 
	`‰ì
(
fh±r
);

224 
fhµå
 = &(
fh±r
->
√xt
);

227 
fhµå
 = &(
fh±r
->
√xt
);

230 
	`±hªad_muãx_u∆ock
(&
›bufÊock
);

231 
	}
}

	@mfsmount/oplog.h

19 #i‚de‡
_OPLOG_H_


20 
	#_OPLOG_H_


	)

22 
	~<fu£_lowÀvñ.h
>

23 
	~<öây≥s.h
>

25 #i‚de‡
__¥ötÊike


26 #ifde‡
__GNUC__


27 
	#__¥ötÊike
(
fmt
,
va1
Ë
	`__©åibuã__
((
	`__f‹m©__
(
¥ötf
, fmt, va1)))

	)

29 
	#__¥ötÊike
(
fmt
, 
va1
)

	)

33 
	$›log_¥ötf
(c⁄° 
fu£_˘x
 *
˘x
,c⁄° *
f‹m©
,...Ë
	`__¥ötÊike
(2, 3);

34 
	`›log_√wh™dÀ
(
hÊag
);

35 
	`›log_ªÀa£h™dÀ
(
fh
);

36 
	`›log_gëd©a
(
fh
,
uöt8_t
 **
buff
,
uöt32_t
 *
Àng
,uöt32_à
maxÀng
);

37 
	`›log_ªÀa£d©a
(
fh
);

	@mfsmount/readdata.c

19 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<sys/time.h
>

26 
	~<time.h
>

27 
	~<sy¶og.h
>

28 
	~<öây≥s.h
>

29 
	~<î∫o.h
>

30 
	~<limôs.h
>

31 
	~<±hªad.h
>

33 
	~"MFSCommuniˇti⁄.h
"

34 
	~"sockës.h
"

35 
	~"°ªº.h
"

36 
	~"d©≠ack.h
"

37 
	~"ma°îcomm.h
"

38 
	~"cscomm.h
"

39 
	~"csdb.h
"

41 
	#USECTICK
 333333

	)

43 
	#REFRESHTICKS
 15

	)

44 
	#CLOSEDELAYTICKS
 3

	)

46 
	#MAPBITS
 10

	)

47 
	#MAPSIZE
 (1<<(
MAPBITS
))

	)

48 
	#MAPMASK
 (
MAPSIZE
-1)

	)

49 
	#MAPINDX
(
öode
Ë(öode&
MAPMASK
)

	)

51 
	s_ªadªc
 {

52 
uöt8_t
 *
	mrbuff
;

53 
uöt32_t
 
	mrbuffsize
;

54 
uöt32_t
 
	möode
;

55 
uöt64_t
 
	mÊíg
;

56 
uöt32_t
 
	mödx
;

57 
uöt64_t
 
	mchunkid
;

58 
uöt32_t
 
	mvîsi⁄
;

59 
uöt32_t
 
	mù
;

60 
uöt16_t
 
	mp‹t
;

61 
	mfd
;

62 
uöt8_t
 
	mªf˙t
;

63 
uöt8_t
 
	mnﬂc˚ss˙t
;

64 
uöt8_t
 
	mvÆid
;

65 
uöt8_t
 
	mlocked
;

66 
uöt16_t
 
	mwaôög
;

67 
±hªad_c⁄d_t
 
	mc⁄d
;

68 
_ªadªc
 *
	m√xt
;

69 
_ªadªc
 *
	mm≠√xt
;

70 } 
	tªadªc
;

72 
ªadªc
 *
	grdöodem≠
[
MAPSIZE
];

73 
ªadªc
 *
	grdhód
=
NULL
;

74 
±hªad_t
 
	g±hid
;

75 
±hªad_muãx_t
 
	gglock
;

77 
uöt32_t
 
	gmaxªåõs
;

78 
uöt8_t
 
	gπîm
;

80 
	#TIMEDIFF
(
tv1
,
tv2
Ë(((
öt64_t
)(—v1).
tv_£c
-—v2).tv_£c))*1000000LL+(öt64_t)(—v1).
tv_u£c
-—v2).tv_u£c))

	)

82 * 
	$ªad_d©a_dñayed_›s
(*
¨g
) {

83 
ªadªc
 *
ºec
,**
ºe˝
;

84 
ªadªc
 **
ºecm≠
;

85 ()
¨g
;

87 
	`±hªad_muãx_lock
(&
glock
);

88 i‡(
πîm
) {

89 
	`±hªad_muãx_u∆ock
(&
glock
);

90  
NULL
;

92 
ºe˝
 = &
rdhód
;

93 (
ºec
=*
ºe˝
)!=
NULL
) {

94 i‡(
ºec
->
ªf˙t
<
REFRESHTICKS
) {

95 
ºec
->
ªf˙t
++;

97 i‡(
ºec
->
locked
==0) {

98 i‡(
ºec
->
vÆid
==0) {

99 
	`±hªad_c⁄d_de°roy
(&(
ºec
->
c⁄d
));

100 *
ºe˝
 = 
ºec
->
√xt
;

101 
ºecm≠
 = &(
rdöodem≠
[
	`MAPINDX
(
ºec
->
öode
)]);

102 *
ºecm≠
) {

103 i‡((*
ºecm≠
)==
ºec
) {

104 *
ºecm≠
 = 
ºec
->
m≠√xt
;

106 
ºecm≠
 = &((*ºecm≠)->
m≠√xt
);

109 
	`‰ì
(
ºec
);

111 i‡(
ºec
->
fd
>=0) {

112 i‡(
ºec
->
nﬂc˚ss˙t
==
CLOSEDELAYTICKS
) {

113 
	`csdb_ªaddec
(
ºec
->
ù
,ºec->
p‹t
);

114 
	`t˝˛o£
(
ºec
->
fd
);

115 
ºec
->
fd
=-1;

117 
ºec
->
nﬂc˚ss˙t
++;

120 
ºe˝
 = &(
ºec
->
√xt
);

123 
ºe˝
 = &(
ºec
->
√xt
);

126 
	`±hªad_muãx_u∆ock
(&
glock
);

127 
	`u¶ìp
(
USECTICK
);

129 
	}
}

131 * 
	$ªad_d©a_√w
(
uöt32_t
 
öode
) {

132 
ªadªc
 *
ºec
;

133 
ºec
 = 
	`mÆloc
((
ªadªc
));

134 
ºec
->
rbuff
 = 
NULL
;

135 
ºec
->
rbuffsize
 = 0;

136 
ºec
->
öode
 = inode;

137 
ºec
->
Êíg
 = 0;

138 
ºec
->
ödx
 = 0;

139 
ºec
->
chunkid
 = 0;

140 
ºec
->
vîsi⁄
 = 0;

141 
ºec
->
fd
 = -1;

142 
ºec
->
ù
 = 0;

143 
ºec
->
p‹t
 = 0;

144 
ºec
->
ªf˙t
 = 0;

145 
ºec
->
nﬂc˚ss˙t
 = 0;

146 
ºec
->
vÆid
 = 1;

147 
ºec
->
waôög
 = 0;

148 
ºec
->
locked
 = 0;

149 
	`±hªad_c⁄d_öô
(&(
ºec
->
c⁄d
),
NULL
);

150 
	`±hªad_muãx_lock
(&
glock
);

151 
ºec
->
√xt
 = 
rdhód
;

152 
rdhód
 = 
ºec
;

153 
ºec
->
m≠√xt
 = 
rdöodem≠
[
	`MAPINDX
(
öode
)];

154 
rdöodem≠
[
	`MAPINDX
(
öode
)] = 
ºec
;

155 
	`±hªad_muãx_u∆ock
(&
glock
);

157  
ºec
;

158 
	}
}

160 
	$ªad_d©a_íd
(* 
º
) {

161 
ªadªc
 *
ºec
 = (ªadªc*)
º
;

164 
	`±hªad_muãx_lock
(&
glock
);

165 
ºec
->
waôög
++;

166 
ºec
->
locked
) {

167 
	`±hªad_c⁄d_waô
(&(
ºec
->
c⁄d
),&
glock
);

169 
ºec
->
waôög
--;

170 
ºec
->
locked
 = 1;

171 
ºec
->
vÆid
 = 0;

172 
	`±hªad_muãx_u∆ock
(&
glock
);

174 i‡(
ºec
->
fd
>=0) {

175 
	`csdb_ªaddec
(
ºec
->
ù
,ºec->
p‹t
);

176 
	`t˝˛o£
(
ºec
->
fd
);

177 
ºec
->
fd
=-1;

179 i‡(
ºec
->
rbuff
!=
NULL
) {

180 
	`‰ì
(
ºec
->
rbuff
);

181 
ºec
->
rbuff
=
NULL
;

184 
	`±hªad_muãx_lock
(&
glock
);

185 i‡(
ºec
->
waôög
) {

186 
	`±hªad_c⁄d_sig«l
(&(
ºec
->
c⁄d
));

188 
ºec
->
locked
 = 0;

189 
	`±hªad_muãx_u∆ock
(&
glock
);

190 
	}
}

192 
	$ªad_d©a_öô
(
uöt32_t
 
ªåõs
) {

193 
uöt32_t
 
i
;

194 
±hªad_©å_t
 
th©å
;

196 
πîm
 = 0;

197 
i
=0 ; i<
MAPSIZE
 ; i++) {

198 
rdöodem≠
[
i
]=
NULL
;

200 
maxªåõs
=
ªåõs
;

201 
	`±hªad_muãx_öô
(&
glock
,
NULL
);

202 
	`±hªad_©å_öô
(&
th©å
);

203 
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000);

204 
	`±hªad_¸óã
(&
±hid
,&
th©å
,
ªad_d©a_dñayed_›s
,
NULL
);

205 
	`±hªad_©å_de°roy
(&
th©å
);

206 
	}
}

208 
	$ªad_d©a_ãrm
() {

209 
uöt32_t
 
i
;

210 
ªadªc
 *
º
,*
ºn
;

212 
	`±hªad_muãx_lock
(&
glock
);

213 
πîm
 = 1;

214 
	`±hªad_muãx_u∆ock
(&
glock
);

215 
	`±hªad_joö
(
±hid
,
NULL
);

216 
	`±hªad_muãx_de°roy
(&
glock
);

217 
i
=0 ; i<
MAPSIZE
 ; i++) {

218 
º
 = 
rdöodem≠
[
i
] ;Ñ∏;Ñ∏
ºn
) {

219 
ºn
 = 
º
->
√xt
;

220 i‡(
º
->
fd
>=0) {

221 
	`t˝˛o£
(
º
->
fd
);

223 i‡(
º
->
rbuff
!=
NULL
) {

224 
	`‰ì
(
º
->
rbuff
);

226 
	`±hªad_c⁄d_de°roy
(&(
º
->
c⁄d
));

227 
	`‰ì
(
º
);

229 
rdöodem≠
[
i
] = 
NULL
;

231 
	}
}

233 
	$ªad_d©a_ª‰esh_c⁄√˘i⁄
(
ªadªc
 *
ºec
) {

234 
uöt32_t
 
ù
,
tmpù
;

235 
uöt16_t
 
p‹t
,
tmµ‹t
;

236 
uöt32_t
 
˙t
,
be°˙t
;

237 c⁄° 
uöt8_t
 *
csd©a
;

238 
uöt32_t
 
csd©asize
;

239 
uöt8_t
 
°©us
;

240 
uöt32_t
 
§cù
;

243 i‡(
ºec
->
fd
>=0) {

244 
	`csdb_ªaddec
(
ºec
->
ù
,ºec->
p‹t
);

245 
	`t˝˛o£
(
ºec
->
fd
);

246 
ºec
->
fd
 = -1;

248 
°©us
 = 
	`fs_ªadchunk
(
ºec
->
öode
,ºec->
ödx
,&‘ªc->
Êíg
),&‘ªc->
chunkid
),&‘ªc->
vîsi⁄
),&
csd©a
,&
csd©asize
);

249 i‡(
°©us
!=0) {

250 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" - fs_ªadchunkÑëu∫†°©u†%"
PRIu8
,
ºec
->
öode
,ºec->
ödx
,ºec->
chunkid
,ºec->
vîsi⁄
,
°©us
);

251 i‡(
°©us
==
ERROR_ENOENT
) {

252  
EBADF
;

254  
EIO
;

257 i‡(
ºec
->
chunkid
==0 && 
csd©a
==
NULL
 && 
csd©asize
==0) {

260 i‡(
csd©a
==
NULL
 || 
csd©asize
==0) {

261 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" -Åhîê¨ênÿvÆid c›õs",
ºec
->
öode
,ºec->
ödx
,ºec->
chunkid
,ºec->
vîsi⁄
);

262  
ENXIO
;

264 
ù
 = 0;

265 
p‹t
 = 0;

267 
be°˙t
 = 0xFFFFFFFF;

268 
csd©asize
>=6 && 
be°˙t
>0) {

269 
tmpù
 = 
	`gë32bô
(&
csd©a
);

270 
tmµ‹t
 = 
	`gë16bô
(&
csd©a
);

271 
csd©asize
-=6;

272 
˙t
 = 
	`csdb_gë›˙t
(
tmpù
,
tmµ‹t
);

273 i‡(
˙t
<
be°˙t
) {

274 
ù
 = 
tmpù
;

275 
p‹t
 = 
tmµ‹t
;

276 
be°˙t
 = 
˙t
;

279 i‡(
ù
==0 || 
p‹t
==0) {

280 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" -Åhîê¨ênÿvÆid c›õs",
ºec
->
öode
,ºec->
ödx
,ºec->
chunkid
,ºec->
vîsi⁄
);

281  
ENXIO
;

283 
ºec
->
ù
 = ip;

284 
ºec
->
p‹t
 =Öort;

286 
§cù
 = 
	`fs_gë§cù
();

287 
˙t
=0;

288 
˙t
<10) {

289 
ºec
->
fd
 = 
	`t˝sockë
();

290 i‡(
ºec
->
fd
<0) {

291 
	`sy¶og
(
LOG_WARNING
,"ˇn'à¸óãÅ˝ sockë: %s",
	`°ªº
(
î∫o
));

294 i‡(
§cù
) {

295 i‡(
	`t˝numböd
(
ºec
->
fd
,
§cù
,0)<0) {

296 
	`sy¶og
(
LOG_WARNING
,"ˇn'àbödÅÿgiví ip: %s",
	`°ªº
(
î∫o
));

297 
	`t˝˛o£
(
ºec
->
fd
);

298 
ºec
->
fd
=-1;

302 i‡(
	`t˝numtoc⁄√˘
(
ºec
->
fd
,
ù
,
p‹t
,(
˙t
%2)?(300*(1<<(cnt>>1))):(200*(1<<(cnt>>1))))<0) {

303 
˙t
++;

304 i‡(
˙t
>=10) {

305 
	`sy¶og
(
LOG_WARNING
,"ˇn'àc⁄√˘Åÿ(%08"
PRIX32
":%"
PRIu16
"): %s",
ù
,
p‹t
,
	`°ªº
(
î∫o
));

307 
	`t˝˛o£
(
ºec
->
fd
);

308 
ºec
->
fd
=-1;

310 
˙t
=10;

313 i‡(
ºec
->
fd
<0) {

314  
EIO
;

317 i‡(
	`t˝nodñay
(
ºec
->
fd
)<0) {

318 
	`sy¶og
(
LOG_WARNING
,"ˇn'à£àTCP_NODELAY: %s",
	`°ªº
(
î∫o
));

321 
	`csdb_ªadöc
(
ºec
->
ù
,ºec->
p‹t
);

322 
	`±hªad_muãx_lock
(&
glock
);

323 
ºec
->
ªf˙t
 = 0;

324 
	`±hªad_muãx_u∆ock
(&
glock
);

326 
	}
}

328 
	$ªad_öode_›s
(
uöt32_t
 
öode
) {

329 
ªadªc
 *
ºec
;

330 
	`±hªad_muãx_lock
(&
glock
);

331 
ºec
 = 
rdöodem≠
[
	`MAPINDX
(
öode
)] ;Ñª¯;ÑªcÙªc->
m≠√xt
) {

332 i‡(
ºec
->
öode
==inode) {

333 
ºec
->
nﬂc˚ss˙t
=
CLOSEDELAYTICKS
;

334 
ºec
->
ªf˙t
=
REFRESHTICKS
;

337 
	`±hªad_muãx_u∆ock
(&
glock
);

338 
	}
}

340 
	$ªad_d©a
(*
º
, 
uöt64_t
 
off£t
, 
uöt32_t
 *
size
, 
uöt8_t
 **
buff
) {

341 
uöt8_t
 *
bufÂå
;

342 
uöt64_t
 
cuºoff
;

343 
uöt32_t
 
cuºsize
;

344 
uöt32_t
 
ödx
;

345 
uöt8_t
 
˙t
,
eb
,
f‹˚ªc⁄√˘
;

346 
uöt32_t
 
chunkoff£t
;

347 
uöt32_t
 
chunksize
;

348 
îr
;

349 
ªadªc
 *
ºec
 = (ªadªc*)
º
;

351 i‡(*
size
==0 && *
buff
!=
NULL
) {

355 
	`±hªad_muãx_lock
(&
glock
);

356 
ºec
->
waôög
++;

357 
ºec
->
locked
) {

358 
	`±hªad_c⁄d_waô
(&(
ºec
->
c⁄d
),&
glock
);

360 
ºec
->
waôög
--;

361 
ºec
->
locked
=1;

362 
f‹˚ªc⁄√˘
 = (
ºec
->
fd
>=0 &&Ñªc->
ªf˙t
==
REFRESHTICKS
)?1:0;

363 
	`±hªad_muãx_u∆ock
(&
glock
);

365 i‡(
f‹˚ªc⁄√˘
) {

366 
	`csdb_ªaddec
(
ºec
->
ù
,ºec->
p‹t
);

367 
	`t˝˛o£
(
ºec
->
fd
);

368 
ºec
->
fd
=-1;

371 i‡(*
size
==0) {

375 
eb
=1;

376 i‡(*
buff
==
NULL
) {

377 
eb
=0;

378 i‡(*
size
>
ºec
->
rbuffsize
) {

379 i‡(
ºec
->
rbuff
!=
NULL
) {

380 
	`‰ì
(
ºec
->
rbuff
);

382 
ºec
->
rbuffsize
 = *
size
;

383 
ºec
->
rbuff
 = 
	`mÆloc
‘ªc->
rbuffsize
);

384 i‡(
ºec
->
rbuff
==
NULL
) {

385 
ºec
->
rbuffsize
 = 0;

386 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32" - ouào‡mem‹y",
ºec
->
öode
,ºec->
ödx
);

387  
ENOMEM
;

392 
îr
 = 
EIO
;

393 
˙t
 = 0;

394 i‡(*
buff
==
NULL
) {

395 
bufÂå
 = 
ºec
->
rbuff
;

397 
bufÂå
 = *
buff
;

399 
cuºoff
 = 
off£t
;

400 
cuºsize
 = *
size
;

401 
cuºsize
>0) {

402 
ödx
 = (
cuºoff
>>
MFSCHUNKBITS
);

403 i‡(
ºec
->
fd
<0 ||Ñªc->
ödx
 != indx) {

404 
ºec
->
ödx
 = indx;

405 
˙t
<
maxªåõs
) {

406 
˙t
++;

407 
îr
 = 
	`ªad_d©a_ª‰esh_c⁄√˘i⁄
(
ºec
);

408 i‡(
îr
==0) {

411 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32" - c™'àc⁄√˘Åÿ¥›î chunk£rvî (åy cou¡î: %"PRIu32")",
ºec
->
öode
,ºec->
ödx
,
˙t
);

412 i‡(
îr
==
EBADF
) {

413 i‡(
eb
) {

414 
	`±hªad_muãx_lock
(&
glock
);

415 i‡(
ºec
->
waôög
) {

416 
	`±hªad_c⁄d_sig«l
(&(
ºec
->
c⁄d
));

418 
ºec
->
locked
 = 0;

419 
	`±hªad_muãx_u∆ock
(&
glock
);

422  
îr
;

424 i‡(
îr
==
ENXIO
) {

425 
	`¶ìp
(60);

426 
˙t
+=6;

428 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

431 i‡(
˙t
>=
maxªåõs
) {

432 i‡(
eb
) {

433 
	`±hªad_muãx_lock
(&
glock
);

434 i‡(
ºec
->
waôög
) {

435 
	`±hªad_c⁄d_sig«l
(&(
ºec
->
c⁄d
));

437 
ºec
->
locked
=0;

438 
	`±hªad_muãx_u∆ock
(&
glock
);

441  
îr
;

444 i‡(
cuºoff
>=
ºec
->
Êíg
) {

447 i‡(
cuºoff
+
cuºsize
>
ºec
->
Êíg
) {

448 
cuºsize
 = 
ºec
->
Êíg
-
cuºoff
;

450 
chunkoff£t
 = (
cuºoff
&
MFSCHUNKMASK
);

451 i‡(
chunkoff£t
+
cuºsize
>
MFSCHUNKSIZE
) {

452 
chunksize
 = 
MFSCHUNKSIZE
-
chunkoff£t
;

454 
chunksize
 = 
cuºsize
;

456 i‡(
ºec
->
chunkid
>0) {

458 i‡(
	`cs_ªadblock
(
ºec
->
fd
,ºec->
chunkid
,ºec->
vîsi⁄
,
chunkoff£t
,
chunksize
,
bufÂå
)<0) {

459 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32", cs: %08"
PRIX32
":%"
PRIu16
" -ÑódblockÉº‹ (åy cou¡î: %"PRIu32")",
ºec
->
öode
,ºec->
ödx
,ºec->
chunkid
,ºec->
vîsi⁄
,ºec->
ù
,ºec->
p‹t
,
˙t
);

460 
	`csdb_ªaddec
(
ºec
->
ù
,ºec->
p‹t
);

461 
	`t˝˛o£
(
ºec
->
fd
);

462 
ºec
->
fd
 = -1;

463 
	`¶ìp
(1+(
˙t
<30)?(cnt/3):10);

465 
cuºoff
+=
chunksize
;

466 
cuºsize
-=
chunksize
;

467 
bufÂå
+=
chunksize
;

470 
	`mem£t
(
bufÂå
,0,
chunksize
);

471 
cuºoff
+=
chunksize
;

472 
cuºsize
-=
chunksize
;

473 
bufÂå
+=
chunksize
;

477 i‡(
ºec
->
Êíg
<=
off£t
) {

478 *
size
 = 0;

479 } i‡(
ºec
->
Êíg
<(
off£t
+(*
size
))) {

480 i‡(*
buff
==
NULL
) {

481 *
buff
 = 
ºec
->
rbuff
;

483 *
size
 = 
ºec
->
Êíg
 - 
off£t
;

485 i‡(*
buff
==
NULL
) {

486 *
buff
 = 
ºec
->
rbuff
;

489 
	`±hªad_muãx_lock
(&
glock
);

490 
ºec
->
nﬂc˚ss˙t
=0;

491 i‡(
eb
) {

492 i‡(
ºec
->
waôög
) {

493 
	`±hªad_c⁄d_sig«l
(&(
ºec
->
c⁄d
));

495 
ºec
->
locked
 = 0;

498 
	`±hªad_muãx_u∆ock
(&
glock
);

500 
	}
}

502 
	$ªad_d©a_‰ìbuff
(*
º
) {

503 
ªadªc
 *
ºec
 = (ªadªc*)
º
;

504 
	`±hªad_muãx_lock
(&
glock
);

505 i‡(
ºec
->
waôög
) {

506 
	`±hªad_c⁄d_sig«l
(&(
ºec
->
c⁄d
));

508 
ºec
->
locked
 = 0;

509 
	`±hªad_muãx_u∆ock
(&
glock
);

511 
	}
}

	@mfsmount/readdata.h

19 #i‚de‡
_READDATA_H_


20 
	#_READDATA_H_


	)

22 
	~<öây≥s.h
>

24 
ªad_öode_›s
(
uöt32_t
 
öode
);

25 * 
ªad_d©a_√w
(
uöt32_t
 
öode
);

26 
ªad_d©a_íd
(*
º
);

27 
ªad_d©a
(*
º
,
uöt64_t
 
off£t
,
uöt32_t
 *
size
,
uöt8_t
 **
buff
);

28 
ªad_d©a_‰ìbuff
(*
º
);

29 
ªad_d©a_öô
(
uöt32_t
 
ªåõs
);

30 
ªad_d©a_ãrm
();

	@mfsmount/stats.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<±hªad.h
>

23 
	~<öây≥s.h
>

25 
	s_°©¢ode
 {

26 
uöt64_t
 
	mcou¡î
;

27 
uöt8_t
 
	ma˘ive
;

28 
uöt8_t
 
	mabsﬁuã
;

29 *
	m«me
;

30 *
	mfuŒ«me
;

31 
uöt32_t
 
	m∆íg
;

32 
uöt32_t
 
	m‚Àng
;

33 
_°©¢ode
 *
	mfú°chûd
;

34 
_°©¢ode
 *
	m√xtsiblög
;

35 } 
	t°©¢ode
;

37 
°©¢ode
 *
	gfú°node
 = 
NULL
;

38 
uöt32_t
 
	gÆœ˘ivïÀngs
 = 0;

39 
uöt32_t
 
	ga˘ivíodes
 = 0;

40 
±hªad_muãx_t
 
	gglock
 = 
PTHREAD_MUTEX_INITIALIZER
;

42 
	$°©s_lock
() {

43 
	`±hªad_muãx_lock
(&
glock
);

44 
	}
}

46 
	$°©s_u∆ock
() {

47 
	`±hªad_muãx_u∆ock
(&
glock
);

48 
	}
}

50 * 
	$°©s_gë_subnode
(*
node
,c⁄° *
«me
,
uöt8_t
 
absﬁuã
) {

51 
°©¢ode
 *
¢
 = (°©¢ode*)
node
;

52 
°©¢ode
 *
a
;

53 
	`±hªad_muãx_lock
(&
glock
);

54 
a
=
¢
?¢->
fú°chûd
:
fú°node
 ;á ;á˜->
√xtsiblög
) {

55 i‡(
	`°rcmp
(
a
->
«me
,name)==0) {

56 
	`±hªad_muãx_u∆ock
(&
glock
);

57  
a
;

60 
a
 = 
	`mÆloc
((
°©¢ode
));

61 
a
->
√xtsiblög
 = 
¢
?¢->
fú°chûd
:
fú°node
;

62 
a
->
fú°chûd
 = 
NULL
;

63 
a
->
cou¡î
 = 0;

64 
a
->
a˘ive
 = 0;

65 
a
->
absﬁuã
 =ábsolute;

66 
a
->
«me
 = 
	`°rdup
(name);

67 
a
->
∆íg
 = 
	`°æí
(
«me
);

68 i‡(
¢
) {

69 *
b°r
;

70 
a
->
‚Àng
 = 
¢
->‚Àng+1+a->
∆íg
;

71 
b°r
 = 
	`mÆloc
(
a
->
‚Àng
+1);

72 
	`mem˝y
(
b°r
,
¢
->
fuŒ«me
,¢->
‚Àng
);

73 
b°r
[
¢
->
‚Àng
]='.';

74 
	`mem˝y
(
b°r
+
¢
->
‚Àng
+1,
a
->
«me
,a->
∆íg
);

75 
b°r
[
a
->
‚Àng
]=0;

76 
a
->
fuŒ«me
 = 
b°r
;

78 
a
->
fuŒ«me
 =á->
«me
;

79 
a
->
‚Àng
 =á->
∆íg
;

81 i‡(
¢
) {

82 
¢
->
fú°chûd
 = 
a
;

84 
fú°node
 = 
a
;

86 
	`±hªad_muãx_u∆ock
(&
glock
);

87  
a
;

88 
	}
}

90 
uöt64_t
* 
	$°©s_gë_cou¡î±r
(*
node
) {

91 
°©¢ode
 *
¢
 = (°©¢ode*)
node
;

92 
	`±hªad_muãx_lock
(&
glock
);

93 i‡(
¢
->
a˘ive
==0) {

94 
¢
->
a˘ive
 = 1;

95 
Æœ˘ivïÀngs
 +
¢
->
‚Àng
;

96 
a˘ivíodes
++;

98 
	`±hªad_muãx_u∆ock
(&
glock
);

99  &(
¢
->
cou¡î
);

100 
	}
}

102 
ölöe
 
	$°©s_ª£t
(
°©¢ode
 *
n
) {

103 
°©¢ode
 *
a
;

104 i‡(
n
->
absﬁuã
==0) {

105 
n
->
cou¡î
 = 0;

107 
a
=
n
->
fú°chûd
 ;á ;á˜->
√xtsiblög
) {

108 
	`°©s_ª£t
(
a
);

110 
	}
}

112 
	$°©s_ª£t_Æl
() {

113 
°©¢ode
 *
a
;

114 
	`±hªad_muãx_lock
(&
glock
);

115 
a
=
fú°node
 ;á ;á˜->
√xtsiblög
) {

116 
	`°©s_ª£t
(
a
);

118 
	`±hªad_muãx_u∆ock
(&
glock
);

119 
	}
}

121 
ölöe
 
uöt32_t
 
	$°©s_¥öt_vÆues
(*
buff
,
uöt32_t
 
maxÀng
,
°©¢ode
 *
n
) {

122 
°©¢ode
 *
a
;

123 
uöt32_t
 
l
;

124 i‡(
n
->
a˘ive
) {

125 
l
 = 
	`¢¥ötf
(
buff
,
maxÀng
,"%s: %"
PRIu64
"\n",
n
->
fuŒ«me
,n->
cou¡î
);

127 
l
 = 0;

129 
a
=
n
->
fú°chûd
 ;á ;á˜->
√xtsiblög
) {

130 i‡(
maxÀng
>
l
) {

131 
l
 +
	`°©s_¥öt_vÆues
(
buff
+l,
maxÀng
-l,
a
);

134  
l
;

135 
	}
}

137 
ölöe
 
uöt32_t
 
	$°©s_¥öt_tŸÆ
(*
buff
,
uöt32_t
 
maxÀng
) {

138 
°©¢ode
 *
a
;

139 
uöt32_t
 
l
;

140 
l
 = 0;

141 
a
=
fú°node
 ;á ;á˜->
√xtsiblög
) {

142 i‡(
maxÀng
>
l
) {

143 
l
 +
	`°©s_¥öt_vÆues
(
buff
+l,
maxÀng
-l,
a
);

146  
l
;

147 
	}
}

149 
	$°©s_show_Æl
(**
buff
,
uöt32_t
 *
Àng
) {

150 
uöt32_t
 
æ
;

151 
	`±hªad_muãx_lock
(&
glock
);

152 
æ
 = 
Æœ˘ivïÀngs
 + 23*
a˘ivíodes
 + 1;

153 *
buff
 = 
	`mÆloc
(
æ
);

154 i‡(*
buff
) {

155 *
Àng
 = 
	`°©s_¥öt_tŸÆ
(*
buff
,
æ
);

157 *
Àng
 = 0;

159 
	`±hªad_muãx_u∆ock
(&
glock
);

160 
	}
}

162 
	$°©s_‰ì
(
°©¢ode
 *
n
) {

163 
°©¢ode
 *
a
,*
™
;

164 
	`‰ì
(
n
->
«me
);

165 i‡(
n
->
fuŒ«me
 !n->
«me
) {

166 
	`‰ì
(
n
->
fuŒ«me
);

168 
a
=
n
->
fú°chûd
 ;á ;á = 
™
) {

169 
™
 = 
a
->
√xtsiblög
;

170 
	`°©s_‰ì
(
a
);

171 
	`‰ì
(
a
);

173 
	}
}

175 
	$°©s_ãrm
() {

176 
°©¢ode
 *
a
,*
™
;

177 
a
=
fú°node
 ;á ;á = 
™
) {

178 
™
 = 
a
->
√xtsiblög
;

179 
	`°©s_‰ì
(
a
);

180 
	`‰ì
(
a
);

182 
	}
}

	@mfsmount/stats.h

19 #i‚de‡
_STATS_H_


20 
	#_STATS_H_


	)

22 
	~<öây≥s.h
>

24 * 
°©s_gë_subnode
(*
node
,c⁄° *
«me
,
uöt8_t
 
absﬁuã
);

25 
uöt64_t
* 
°©s_gë_cou¡î±r
(*
node
);

26 
°©s_ª£t_Æl
();

27 
°©s_show_Æl
(**
buff
,
uöt32_t
 *
Àng
);

28 
°©s_lock
();

29 
°©s_u∆ock
();

30 
°©s_ãrm
();

	@mfsmount/symlinkcache.c

19 
	~"c⁄fig.h
"

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<öây≥s.h
>

24 
	~<±hªad.h
>

26 
	~"°©s.h
"

27 
	~"MFSCommuniˇti⁄.h
"

29 
	#HASH_FUNCTIONS
 4

	)

30 
	#HASH_BUCKET_SIZE
 16

	)

31 
	#HASH_BUCKETS
 6257

	)

38 
	s_hashbuckë
 {

39 
uöt32_t
 
	möode
[
HASH_BUCKET_SIZE
];

40 
uöt32_t
 
	mtime
[
HASH_BUCKET_SIZE
];

41 
uöt8_t
* 
	m∑th
[
HASH_BUCKET_SIZE
];

43 } 
	thashbuckë
;

45 
hashbuckë
 *
	gsymlökhash
 = 
NULL
;

46 
±hªad_muãx_t
 
	g¶ˇchñock
 = 
PTHREAD_MUTEX_INITIALIZER
;

49 
	mINSERTS
 = 0,

50 
	mSEARCH_HITS
,

51 
	mSEARCH_MISSES
,

52 
	mLINKS
,

53 
	mSTATNODES


56 
uöt64_t
 *
	g°©•å
[
STATNODES
];

58 
ölöe
 
	$symlök_ˇche_°©•å_öô
() {

59 *
s
;

60 
s
 = 
	`°©s_gë_subnode
(
NULL
,"symlink_cache",0);

61 
°©•å
[
INSERTS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"inserts",0));

62 
°©•å
[
SEARCH_HITS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"search_hits",0));

63 
°©•å
[
SEARCH_MISSES
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"search_misses",0));

64 
°©•å
[
LINKS
] = 
	`°©s_gë_cou¡î±r
(
	`°©s_gë_subnode
(
s
,"#links",1));

65 
	}
}

67 
ölöe
 
	$symlök_ˇche_°©s_öc
(
uöt8_t
 
id
) {

68 i‡(
id
<
STATNODES
) {

69 
	`°©s_lock
();

70 (*
°©•å
[
id
])++;

71 
	`°©s_u∆ock
();

73 
	}
}

75 
ölöe
 
	$symlök_ˇche_°©s_dec
(
uöt8_t
 
id
) {

76 i‡(
id
<
STATNODES
) {

77 
	`°©s_lock
();

78 (*
°©•å
[
id
])--;

79 
	`°©s_u∆ock
();

81 
	}
}

83 
	$symlök_ˇche_ö£π
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 *
∑th
) {

84 
uöt32_t
 
¥imes
[
HASH_FUNCTIONS
] = {1072573589U,3465827623U,2848548977U,748191707U};

85 
hashbuckë
 *
hb
,*
fhb
;

86 
uöt8_t
 
h
,
i
,
fi
;

87 
uöt32_t
 
now
;

88 
uöt32_t
 
möts
;

90 
now
 = 
	`time
(
NULL
);

91 
möts
 = 
UINT32_MAX
;

92 
fi
 = 0;

93 
fhb
 = 
NULL
;

95 
	`symlök_ˇche_°©s_öc
(
INSERTS
);

96 
	`±hªad_muãx_lock
(&
¶ˇchñock
);

97 
h
=0 ; h<
HASH_FUNCTIONS
 ; h++) {

98 
hb
 = 
symlökhash
 + ((
öode
*
¥imes
[
h
])%
HASH_BUCKETS
);

99 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

100 i‡(
hb
->
öode
[
i
]==inode) {

101 i‡(
hb
->
∑th
[
i
]) {

102 
	`‰ì
(
hb
->
∑th
[
i
]);

104 
hb
->
∑th
[
i
]=(
uöt8_t
*)
	`°rdup
((const *)path);

105 
hb
->
time
[
i
]=
now
;

106 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

109 i‡(
hb
->
time
[
i
]<
möts
) {

110 
fhb
 = 
hb
;

111 
fi
 = 
i
;

112 
möts
 = 
hb
->
time
[
i
];

116 i‡(
fhb
) {

117 i‡(
fhb
->
time
[
fi
]==0) {

118 
	`symlök_ˇche_°©s_öc
(
LINKS
);

120 i‡(
fhb
->
∑th
[
fi
]) {

121 
	`‰ì
(
fhb
->
∑th
[
fi
]);

123 
fhb
->
öode
[
fi
]=inode;

124 
fhb
->
∑th
[
fi
]=(
uöt8_t
*)
	`°rdup
((const *)path);

125 
fhb
->
time
[
fi
]=
now
;

127 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

128 
	}
}

130 
	$symlök_ˇche_£¨ch
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 **
∑th
) {

131 
uöt32_t
 
¥imes
[
HASH_FUNCTIONS
] = {1072573589U,3465827623U,2848548977U,748191707U};

132 
hashbuckë
 *
hb
;

133 
uöt8_t
 
h
,
i
;

134 
uöt32_t
 
now
;

136 
now
 = 
	`time
(
NULL
);

138 
	`±hªad_muãx_lock
(&
¶ˇchñock
);

139 
h
=0 ; h<
HASH_FUNCTIONS
 ; h++) {

140 
hb
 = 
symlökhash
 + ((
öode
*
¥imes
[
h
])%
HASH_BUCKETS
);

141 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

142 i‡(
hb
->
öode
[
i
]==inode) {

143 i‡(
hb
->
time
[
i
]+
MFS_INODE_REUSE_DELAY
<
now
) {

144 i‡(
hb
->
∑th
[
i
]) {

145 
	`‰ì
(
hb
->
∑th
[
i
]);

146 
hb
->
∑th
[
i
]=
NULL
;

148 
hb
->
time
[
i
]=0;

149 
hb
->
öode
[
i
]=0;

150 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

151 
	`symlök_ˇche_°©s_dec
(
LINKS
);

152 
	`symlök_ˇche_°©s_öc
(
SEARCH_MISSES
);

155 *
∑th
 = 
hb
->∑th[
i
];

156 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

157 
	`symlök_ˇche_°©s_öc
(
SEARCH_HITS
);

162 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

163 
	`symlök_ˇche_°©s_öc
(
SEARCH_MISSES
);

165 
	}
}

167 
	$symlök_ˇche_öô
() {

168 
symlökhash
 = 
	`mÆloc
((
hashbuckë
)*
HASH_BUCKETS
);

169 
	`mem£t
(
symlökhash
,0,(
hashbuckë
)*
HASH_BUCKETS
);

170 
	`symlök_ˇche_°©•å_öô
();

171 
	}
}

173 
	$symlök_ˇche_ãrm
() {

174 
hashbuckë
 *
hb
;

175 
uöt8_t
 
i
;

176 
uöt32_t
 
hi
;

178 
	`±hªad_muãx_lock
(&
¶ˇchñock
);

179 
hi
=0 ; hi<
HASH_BUCKETS
 ; hi++) {

180 
hb
 = 
symlökhash
 + 
hi
;

181 
i
=0 ; i<
HASH_BUCKET_SIZE
 ; i++) {

182 i‡(
hb
->
∑th
[
i
]) {

183 
	`‰ì
(
hb
->
∑th
[
i
]);

187 
	`‰ì
(
symlökhash
);

188 
	`±hªad_muãx_u∆ock
(&
¶ˇchñock
);

189 
	}
}

	@mfsmount/symlinkcache.h

19 #i‚de‡
_SYMLINKCACHE_H_


20 
	#_SYMLINKCACHE_H_


	)

22 
	~<öây≥s.h
>

24 
symlök_ˇche_ö£π
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 *
∑th
);

25 
symlök_ˇche_£¨ch
(
uöt32_t
 
öode
,c⁄° 
uöt8_t
 **
∑th
);

26 
symlök_ˇche_öô
();

27 
symlök_ˇche_ãrm
();

	@mfsmount/writedata.c

19 
	~"c⁄fig.h
"

21 
	~<sys/ty≥s.h
>

22 #ifde‡
HAVE_WRITEV


23 
	~<sys/uio.h
>

25 
	~<sys/time.h
>

26 
	~<uni°d.h
>

27 
	~<pﬁl.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sy¶og.h
>

32 
	~<î∫o.h
>

33 
	~<limôs.h
>

34 
	~<±hªad.h
>

35 
	~<öây≥s.h
>

37 
	~"d©≠ack.h
"

38 
	~"¸c.h
"

39 
	~"°ªº.h
"

40 
	~"pcqueue.h
"

41 
	~"sockës.h
"

42 
	~"csdb.h
"

43 
	~"ma°îcomm.h
"

44 
	~"ªadd©a.h
"

45 
	~"MFSCommuniˇti⁄.h
"

50 #i‚de‡
EDQUOT


51 
	#EDQUOT
 
ENOSPC


	)

54 
	#WORKERS
 10

	)

56 
	#WCHASHSIZE
 256

	)

57 
	#WCHASH
(
öode
,
ödx
Ë(((öode)*0xB239FB71+(ödx)*193)%
WCHASHSIZE
)

	)

59 
	#IDHASHSIZE
 256

	)

60 
	#IDHASH
(
öode
Ë(((öode)*0xB239FB71)%
IDHASHSIZE
)

	)

62 
	scblock_s
 {

63 
uöt8_t
 
	md©a
[
MFSBLOCKSIZE
];

64 
uöt32_t
 
	mchödx
;

65 
uöt16_t
 
	mpos
;

66 
uöt32_t
 
	mwrôeid
;

67 
uöt32_t
 
	m‰om
;

68 
uöt32_t
 
	mto
;

69 
cblock_s
 *
	m√xt
,*
	m¥ev
;

70 } 
	tcblock
;

72 
	söoded©a_s
 {

73 
uöt32_t
 
	möode
;

74 
uöt64_t
 
	mmaxÊíg
;

75 
uöt32_t
 
	mˇcheblockcou¡
;

76 
	m°©us
;

77 
uöt16_t
 
	mÊushwaôög
;

78 
uöt16_t
 
	mwrôewaôög
;

79 
uöt16_t
 
	ml˙t
;

80 
uöt32_t
 
	måy˙t
;

81 
uöt8_t
 
	mwaôögw‹kî
;

82 
uöt8_t
 
	möqueue
;

83 
	mpùe
[2];

84 
cblock
 *
	md©achaöhód
,*
	md©achaöèû
;

85 
±hªad_c⁄d_t
 
	mÊushc⁄d
;

86 
±hªad_c⁄d_t
 
	mwrôec⁄d
;

87 
öoded©a_s
 *
	m√xt
;

88 } 
	töoded©a
;

92 
±hªad_c⁄d_t
 
	gfcbc⁄d
;

93 
uöt8_t
 
	gfcbwaôög
;

94 
cblock
 *
	gˇcheblocks
,*
	g‰ìcblockshód
;

95 
uöt32_t
 
	g‰ìˇcheblocks
;

97 
uöt32_t
 
	gmaxªåõs
;

99 
öoded©a
 **
	gidhash
;

101 
±hªad_muãx_t
 
	gglock
;

103 #ifde‡
BUFFER_DEBUG


104 
±hªad_t
 
	göfo_w‹kî_th
;

105 
uöt32_t
 
	gu£dblocks
;

108 
±hªad_t
 
	gdqueue_w‹kî_th
;

109 
±hªad_t
 
	gwrôe_w‹kî_th
[
WORKERS
];

111 *
	gjqueue
,*
	gdqueue
;

113 
	#TIMEDIFF
(
tv1
,
tv2
Ë(((
öt64_t
)(—v1).
tv_£c
-—v2).tv_£c))*1000000LL+(öt64_t)(—v1).
tv_u£c
-—v2).tv_u£c))

	)

115 #ifde‡
BUFFER_DEBUG


116 * 
	$wrôe_öfo_w‹kî
(*
¨g
) {

117 ()
¨g
;

119 
	`±hªad_muãx_lock
(&
glock
);

120 
	`sy¶og
(
LOG_NOTICE
,"u£d cachêblocks: %"
PRIu32
,
u£dblocks
);

121 
	`±hªad_muãx_u∆ock
(&
glock
);

122 
	`u¶ìp
(500000);

125 
	}
}

129 
	$wrôe_cb_ªÀa£
 (
öoded©a
 *
id
,
cblock
 *
cb
) {

131 
cb
->
√xt
 = 
‰ìcblockshód
;

132 
‰ìcblockshód
 = 
cb
;

133 
‰ìˇcheblocks
++;

134 
id
->
ˇcheblockcou¡
--;

135 i‡(
fcbwaôög
) {

136 
	`±hªad_c⁄d_sig«l
(&
fcbc⁄d
);

138 #ifde‡
BUFFER_DEBUG


139 
u£dblocks
--;

142 
	}
}

145 
cblock
* 
	$wrôe_cb_acquúe
(
öoded©a
 *
id
) {

146 
cblock
 *
ªt
;

148 
fcbwaôög
++;

149 
‰ìcblockshód
==
NULL
 || 
id
->
ˇcheblockcou¡
>(
‰ìˇcheblocks
/3)) {

150 
	`±hªad_c⁄d_waô
(&
fcbc⁄d
,&
glock
);

152 
fcbwaôög
--;

153 
ªt
 = 
‰ìcblockshód
;

154 
‰ìcblockshód
 = 
ªt
->
√xt
;

155 
ªt
->
chödx
 = 0;

156 
ªt
->
pos
 = 0;

157 
ªt
->
wrôeid
 = 0;

158 
ªt
->
‰om
 = 0;

159 
ªt
->
to
 = 0;

160 
ªt
->
√xt
 = 
NULL
;

161 
ªt
->
¥ev
 = 
NULL
;

162 
‰ìˇcheblocks
--;

163 
id
->
ˇcheblockcou¡
++;

164 #ifde‡
BUFFER_DEBUG


165 
u£dblocks
++;

168  
ªt
;

169 
	}
}

175 
öoded©a
* 
	$wrôe_föd_öoded©a
(
uöt32_t
 
öode
) {

176 
uöt32_t
 
idh
 = 
	`IDHASH
(
öode
);

177 
öoded©a
 *
id
;

178 
id
=
idhash
[
idh
] ; id ; id=id->
√xt
) {

179 i‡(
id
->
öode
 == inode) {

180  
id
;

183  
NULL
;

184 
	}
}

187 
öoded©a
* 
	$wrôe_gë_öoded©a
(
uöt32_t
 
öode
) {

188 
uöt32_t
 
idh
 = 
	`IDHASH
(
öode
);

189 
öoded©a
 *
id
;

190 
pfd
[2];

192 
id
=
idhash
[
idh
] ; id ; id=id->
√xt
) {

193 i‡(
id
->
öode
 == inode) {

194  
id
;

198 i‡(
	`pùe
(
pfd
)<0) {

199 
	`sy¶og
(
LOG_WARNING
,"pùêîr‹: %s",
	`°ªº
(
î∫o
));

200  
NULL
;

202 
id
 = 
	`mÆloc
((
öoded©a
));

203 
id
->
öode
 = inode;

204 
id
->
ˇcheblockcou¡
 = 0;

205 
id
->
maxÊíg
 = 0;

206 
id
->
°©us
 = 0;

207 
id
->
åy˙t
 = 0;

208 
id
->
pùe
[0] = 
pfd
[0];

209 
id
->
pùe
[1] = 
pfd
[1];

210 
id
->
d©achaöhód
 = 
NULL
;

211 
id
->
d©achaöèû
 = 
NULL
;

212 
id
->
waôögw‹kî
 = 0;

213 
id
->
öqueue
 = 0;

214 
id
->
Êushwaôög
 = 0;

215 
id
->
wrôewaôög
 = 0;

216 
id
->
l˙t
 = 0;

217 
	`±hªad_c⁄d_öô
(&(
id
->
Êushc⁄d
),
NULL
);

218 
	`±hªad_c⁄d_öô
(&(
id
->
wrôec⁄d
),
NULL
);

219 
id
->
√xt
 = 
idhash
[
idh
];

220 
idhash
[
idh
] = 
id
;

221  
id
;

222 
	}
}

225 
	$wrôe_‰ì_öoded©a
(
öoded©a
 *
fid
) {

226 
uöt32_t
 
idh
 = 
	`IDHASH
(
fid
->
öode
);

227 
öoded©a
 *
id
,**
idp
;

228 
idp
 = &(
idhash
[
idh
]);

229 (
id
=*
idp
)) {

230 i‡(
id
==
fid
) {

231 *
idp
 = 
id
->
√xt
;

232 
	`±hªad_c⁄d_de°roy
(&(
id
->
Êushc⁄d
));

233 
	`±hªad_c⁄d_de°roy
(&(
id
->
wrôec⁄d
));

234 
	`˛o£
(
id
->
pùe
[0]);

235 
	`˛o£
(
id
->
pùe
[1]);

236 
	`‰ì
(
id
);

239 
idp
 = &(
id
->
√xt
);

241 
	}
}

247 
	$wrôe_dñayed_íqueue
(
öoded©a
 *
id
,
uöt32_t
 
˙t
) {

248 
timevÆ
 
tv
;

249 i‡(
˙t
>0) {

250 
	`gëtimeofday
(&
tv
,
NULL
);

251 
	`queue_put
(
dqueue
,
tv
.
tv_£c
,tv.
tv_u£c
,(
uöt8_t
*)
id
,
˙t
);

253 
	`queue_put
(
jqueue
,0,0,(
uöt8_t
*)
id
,0);

255 
	}
}

258 
	$wrôe_íqueue
(
öoded©a
 *
id
) {

259 
	`queue_put
(
jqueue
,0,0,(
uöt8_t
*)
id
,0);

260 
	}
}

263 * 
	$wrôe_dqueue_w‹kî
(*
¨g
) {

264 
timevÆ
 
tv
;

265 
uöt32_t
 
£c
,
u£c
,
˙t
;

266 
uöt8_t
 *
id
;

267 ()
¨g
;

269 
	`queue_gë
(
dqueue
,&
£c
,&
u£c
,&
id
,&
˙t
);

270 i‡(
id
==
NULL
) {

271  
NULL
;

273 
	`gëtimeofday
(&
tv
,
NULL
);

274 i‡((
uöt32_t
)(
tv
.
tv_u£c
Ë< 
u£c
) {

275 
tv
.
tv_£c
--;

276 
tv
.
tv_u£c
 += 1000000;

278 i‡((
uöt32_t
)(
tv
.
tv_£c
Ë< 
£c
) {

280 
	`¶ìp
(1);

281 } i‡((
uöt32_t
)(
tv
.
tv_£c
Ë=
£c
) {

282 
	`u¶ìp
(1000000-(
tv
.
tv_u£c
-
u£c
));

284 
˙t
--;

285 i‡(
˙t
>0) {

286 
	`gëtimeofday
(&
tv
,
NULL
);

287 
	`queue_put
(
dqueue
,
tv
.
tv_£c
,tv.
tv_u£c
,(
uöt8_t
*)
id
,
˙t
);

289 
	`queue_put
(
jqueue
,0,0,
id
,0);

292  
NULL
;

293 
	}
}

296 
	$wrôe_job_íd
(
öoded©a
 *
id
,
°©us
,
uöt32_t
 
dñay
) {

297 
cblock
 *
cb
,*
fcb
;

299 
	`±hªad_muãx_lock
(&
glock
);

300 i‡(
°©us
) {

301 
î∫o
 = 
°©us
;

302 
	`sy¶og
(
LOG_WARNING
,"îr‹ wrôög fûênumbî %"
PRIu32
": %s",
id
->
öode
,
	`°ªº
(
î∫o
));

303 
id
->
°©us
 = status;

305 
°©us
 = 
id
->status;

307 i‡(
id
->
d©achaöhód
 && 
°©us
==0) {

309 
cb
=
id
->
d©achaöhód
 ; cb ; cb=cb->
√xt
) {

310 
cb
->
wrôeid
 = 0;

312 i‡(
dñay
==0) {

313 
id
->
åy˙t
=0;

315 
	`wrôe_dñayed_íqueue
(
id
,
dñay
);

318 
cb
 = 
id
->
d©achaöhód
;

319 
cb
) {

320 
fcb
 = 
cb
;

321 
cb
 = cb->
√xt
;

322 
	`wrôe_cb_ªÀa£
(
id
,
fcb
);

324 
id
->
d©achaöhód
=
NULL
;

325 
id
->
öqueue
=0;

327 i‡(
id
->
Êushwaôög
>0) {

328 
	`±hªad_c⁄d_brﬂdˇ°
(&(
id
->
Êushc⁄d
));

331 
	`±hªad_muãx_u∆ock
(&
glock
);

332 
	}
}

335 * 
	$wrôe_w‹kî
(*
¨g
) {

336 
uöt32_t
 
z1
,
z2
,
z3
;

337 
uöt8_t
 *
d©a
;

338 
fd
;

339 
i
;

340 
pﬁlfd
 
pfd
[2];

341 
uöt32_t
 
£¡
,
rcvd
;

342 
uöt8_t
 
ªcvbuff
[21];

343 
uöt8_t
 
£ndbuff
[32];

344 #ifde‡
HAVE_WRITEV


345 
iovec
 
siov
[2];

347 
uöt8_t
 
pùebuff
[1024];

348 
uöt8_t
 *
w±r
;

349 c⁄° 
uöt8_t
 *
Ωå
;

351 
uöt32_t
 
ªccmd
;

352 
uöt32_t
 
ª˛íg
;

353 
uöt64_t
 
ªcchunkid
;

354 
uöt32_t
 
ªcwrôeid
;

355 
uöt8_t
 
ªc°©us
;

357 #ifde‡
WORKER_DEBUG


358 
uöt32_t
 
∑πülblocks
;

359 
uöt32_t
 
byãs£¡
;

360 
debugchaö
[200];

361 
uöt32_t
 
˛
;

364 c⁄° 
uöt8_t
 *
˝
,*
˝e
;

365 
uöt32_t
 
chaöù
[10];

366 
uöt16_t
 
chaöp‹t
[10];

367 
uöt16_t
 
chaöñemíts
;

369 
uöt32_t
 
chödx
;

370 
uöt32_t
 
ù
;

371 
uöt16_t
 
p‹t
;

372 
uöt32_t
 
§cù
;

373 
uöt64_t
 
mÊíg
;

374 
uöt64_t
 
maxwroff£t
;

375 
uöt64_t
 
chunkid
;

376 
uöt32_t
 
vîsi⁄
;

377 
uöt32_t
 
√xtwrôeid
;

378 c⁄° 
uöt8_t
 *
chaö
;

379 
uöt32_t
 
chaösize
;

380 c⁄° 
uöt8_t
 *
csd©a
;

381 
uöt32_t
 
csd©asize
;

382 
uöt8_t
 
we°©us
;

383 
uöt8_t
 
wr°©us
;

384 
°©us
;

385 
uöt8_t
 
waôf‹°©us
;

386 
uöt8_t
 
haved©a
;

387 
timevÆ
 
°¨t
,
now
,
œ°rcvd
,
Ãdiff
;

389 
uöt8_t
 
˙t
;

391 
öoded©a
 *
id
;

392 
cblock
 *
cb
,*
rcb
;

395 
chaöñemíts
 = 0;

397 ()
¨g
;

399 
˙t
=0 ; c¡<
chaöñemíts
 ; cnt++) {

400 
	`csdb_wrôedec
(
chaöù
[
˙t
],
chaöp‹t
[cnt]);

402 
chaöñemíts
=0;

405 
	`queue_gë
(
jqueue
,&
z1
,&
z2
,&
d©a
,&
z3
);

406 i‡(
d©a
==
NULL
) {

407  
NULL
;

409 
id
 = (
öoded©a
*)
d©a
;

411 
	`±hªad_muãx_lock
(&
glock
);

412 i‡(
id
->
d©achaöhód
) {

413 
chödx
 = 
id
->
d©achaöhód
->chindx;

415 
	`sy¶og
(
LOG_WARNING
,"writeworker got inode withÇo dataÅo write !!!");

416 
chödx
 = 0;

417 
°©us
 = 
EINVAL
;

419 
°©us
 = 
id
->status;

420 
	`±hªad_muãx_u∆ock
(&
glock
);

422 i‡(
°©us
) {

423 
	`wrôe_job_íd
(
id
,
°©us
,0);

429 
wr°©us
 = 
	`fs_wrôechunk
(
id
->
öode
,
chödx
,&
mÊíg
,&
chunkid
,&
vîsi⁄
,&
csd©a
,&
csd©asize
);

430 i‡(
wr°©us
!=
STATUS_OK
) {

431 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32" - fs_wrôechunkÑëu∫†°©u†%d",
id
->
öode
,
chödx
,
wr°©us
);

432 i‡(
wr°©us
!=
ERROR_LOCKED
) {

433 i‡(
wr°©us
==
ERROR_ENOENT
) {

434 
	`wrôe_job_íd
(
id
,
EBADF
,0);

435 } i‡(
wr°©us
==
ERROR_QUOTA
) {

436 
	`wrôe_job_íd
(
id
,
EDQUOT
,0);

437 } i‡(
wr°©us
==
ERROR_NOSPACE
) {

438 
	`wrôe_job_íd
(
id
,
ENOSPC
,0);

440 
id
->
åy˙t
++;

441 i‡(
id
->
åy˙t
>=
maxªåõs
) {

442 i‡(
wr°©us
==
ERROR_NOCHUNKSERVERS
) {

443 
	`wrôe_job_íd
(
id
,
ENOSPC
,0);

445 
	`wrôe_job_íd
(
id
,
EIO
,0);

448 
	`wrôe_dñayed_íqueue
(
id
,1+((id->
åy˙t
<30)?(id->trycnt/3):10));

452 
	`wrôe_dñayed_íqueue
(
id
,1+((id->
åy˙t
<30)?(id->trycnt/3):10));

456 i‡(
csd©a
==
NULL
 || 
csd©asize
==0) {

457 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" -Åhîê¨ênÿvÆid c›õs",
id
->
öode
,
chödx
,
chunkid
,
vîsi⁄
);

458 
id
->
åy˙t
+=6;

459 i‡(
id
->
åy˙t
>=
maxªåõs
) {

460 
	`wrôe_job_íd
(
id
,
ENXIO
,0);

462 
	`wrôe_dñayed_íqueue
(
id
,60);

466 
˝
 = 
csd©a
;

467 
˝e
 = 
csd©a
+
csd©asize
;

468 
˝
<
˝e
 && 
chaöñemíts
<10) {

469 
chaöù
[
chaöñemíts
] = 
	`gë32bô
(&
˝
);

470 
chaöp‹t
[
chaöñemíts
] = 
	`gë16bô
(&
˝
);

471 
	`csdb_wrôeöc
(
chaöù
[
chaöñemíts
],
chaöp‹t
[chainelements]);

472 
chaöñemíts
++;

475 
chaö
 = 
csd©a
;

476 
ù
 = 
	`gë32bô
(&
chaö
);

477 
p‹t
 = 
	`gë16bô
(&
chaö
);

478 
chaösize
 = 
csd©asize
-6;

479 
	`gëtimeofday
(&
°¨t
,
NULL
);

496 
§cù
 = 
	`fs_gë§cù
();

497 
˙t
=0;

498 
˙t
<10) {

499 
fd
 = 
	`t˝sockë
();

500 i‡(
fd
<0) {

501 
	`sy¶og
(
LOG_WARNING
,"ˇn'à¸óãÅ˝ sockë: %s",
	`°ªº
(
î∫o
));

504 i‡(
§cù
) {

505 i‡(
	`t˝numböd
(
fd
,
§cù
,0)<0) {

506 
	`sy¶og
(
LOG_WARNING
,"ˇn'àböd sockëÅÿgiví ip: %s",
	`°ªº
(
î∫o
));

507 
	`t˝˛o£
(
fd
);

508 
fd
=-1;

512 i‡(
	`t˝numtoc⁄√˘
(
fd
,
ù
,
p‹t
,(
˙t
%2)?(300*(1<<(cnt>>1))):(200*(1<<(cnt>>1))))<0) {

513 
˙t
++;

514 i‡(
˙t
>=10) {

515 
	`sy¶og
(
LOG_WARNING
,"ˇn'àc⁄√˘Åÿ(%08"
PRIX32
":%"
PRIu16
"): %s",
ù
,
p‹t
,
	`°ªº
(
î∫o
));

517 
	`t˝˛o£
(
fd
);

518 
fd
=-1;

520 
˙t
=10;

523 i‡(
fd
<0) {

524 
	`fs_wrôìnd
(
chunkid
,
id
->
öode
,0);

525 
id
->
åy˙t
++;

526 i‡(
id
->
åy˙t
>=
maxªåõs
) {

527 
	`wrôe_job_íd
(
id
,
EIO
,0);

529 
	`wrôe_dñayed_íqueue
(
id
,1+((id->
åy˙t
<30)?(id->trycnt/3):10));

533 i‡(
	`t˝nodñay
(
fd
)<0) {

534 
	`sy¶og
(
LOG_WARNING
,"ˇn'à£àTCP_NODELAY: %s",
	`°ªº
(
î∫o
));

537 #ifde‡
WORKER_DEBUG


538 
∑πülblocks
=0;

539 
byãs£¡
=0;

541 
√xtwrôeid
=1;

543 
pfd
[0].
fd
 = fd;

544 
pfd
[1].
fd
 = 
id
->
pùe
[0];

545 
rcvd
 = 0;

546 
£¡
 = 0;

547 
waôf‹°©us
=1;

548 
haved©a
=1;

549 
w±r
 = 
£ndbuff
;

550 
	`put32bô
(&
w±r
,
CLTOCS_WRITE
);

551 
	`put32bô
(&
w±r
,12+
chaösize
);

552 
	`put64bô
(&
w±r
,
chunkid
);

553 
	`put32bô
(&
w±r
,
vîsi⁄
);

555 
cb
 = 
NULL
;

557 
°©us
 = 0;

558 
wr°©us
 = 
STATUS_OK
;

560 
œ°rcvd
.
tv_£c
 = 0;

563 
	`gëtimeofday
(&
now
,
NULL
);

565 i‡(
œ°rcvd
.
tv_£c
==0) {

566 
œ°rcvd
 = 
now
;

568 
Ãdiff
 = 
now
;

569 i‡(
Ãdiff
.
tv_u£c
<
œ°rcvd
.tv_usec) {

570 
Ãdiff
.
tv_£c
--;

571 
Ãdiff
.
tv_u£c
+=1000000;

573 
Ãdiff
.
tv_£c
 -
œ°rcvd
.tv_sec;

574 
Ãdiff
.
tv_u£c
 -
œ°rcvd
.tv_usec;

575 i‡(
Ãdiff
.
tv_£c
>=2) {

576 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" - wrôew‹kî: c⁄√˘i⁄ wôh (%08"
PRIX32
":%"
PRIu16
"Ëwa†timed ouà(unföished wrôes: %"
PRIu8
";Åry cou¡î: %"PRIu32")",
id
->
öode
,
chödx
,
chunkid
,
vîsi⁄
,
ù
,
p‹t
,
waôf‹°©us
,id->
åy˙t
+1);

581 i‡(
now
.
tv_u£c
<
°¨t
.tv_usec) {

582 
now
.
tv_£c
--;

583 
now
.
tv_u£c
+=1000000;

585 
now
.
tv_£c
 -
°¨t
.tv_sec;

586 
now
.
tv_u£c
 -
°¨t
.tv_usec;

588 i‡(
haved©a
==0 && 
now
.
tv_£c
<5 && 
waôf‹°©us
<5) {

589 
	`±hªad_muãx_lock
(&
glock
);

590 i‡(
cb
==
NULL
) {

591 i‡(
id
->
d©achaöhód
) {

592 i‡(
id
->
d©achaöhód
->
to
-id->d©achaöhód->
‰om
==
MFSBLOCKSIZE
 || 
waôf‹°©us
<=1) {

593 
cb
 = 
id
->
d©achaöhód
;

594 
haved©a
=1;

598 i‡(
cb
->
√xt
) {

599 i‡(
cb
->
√xt
->
chödx
==chindx) {

600 i‡(
cb
->
√xt
->
to
-cb->√xt->
‰om
==
MFSBLOCKSIZE
 || 
waôf‹°©us
<=1) {

601 
cb
 = cb->
√xt
;

602 
haved©a
=1;

606 
id
->
waôögw‹kî
=1;

609 i‡(
haved©a
==1) {

610 
cb
->
wrôeid
 = 
√xtwrôeid
++;

612 
waôf‹°©us
++;

613 
w±r
 = 
£ndbuff
;

614 
	`put32bô
(&
w±r
,
CLTOCS_WRITE_DATA
);

615 
	`put32bô
(&
w±r
,24+(
cb
->
to
-cb->
‰om
));

616 
	`put64bô
(&
w±r
,
chunkid
);

617 
	`put32bô
(&
w±r
,
cb
->
wrôeid
);

618 
	`put16bô
(&
w±r
,
cb
->
pos
);

619 
	`put16bô
(&
w±r
,
cb
->
‰om
);

620 
	`put32bô
(&
w±r
,
cb
->
to
-cb->
‰om
);

621 
	`put32bô
(&
w±r
,
	`my¸c32
(0,
cb
->
d©a
+cb->
‰om
,cb->
to
-cb->from));

622 #ifde‡
WORKER_DEBUG


623 i‡(
cb
->
to
-cb->
‰om
<
MFSBLOCKSIZE
) {

624 
∑πülblocks
++;

626 
byãs£¡
+=(
cb
->
to
-cb->
‰om
);

628 
£¡
=0;

630 
	`±hªad_muãx_u∆ock
(&
glock
);

633 
pfd
[0].
evíts
 = 
POLLIN
 | (
haved©a
?
POLLOUT
:0);

634 
pfd
[0].
ªvíts
 = 0;

635 
pfd
[1].
evíts
 = 
POLLIN
;

636 
pfd
[1].
ªvíts
 = 0;

637 i‡(
	`pﬁl
(
pfd
,2,100)<0) {

638 
	`sy¶og
(
LOG_WARNING
,"wrôew‹kî:Öﬁ»îr‹: %s",
	`°ªº
(
î∫o
));

639 
°©us
=
EIO
;

642 
	`±hªad_muãx_lock
(&
glock
);

643 
id
->
waôögw‹kî
=0;

644 
	`±hªad_muãx_u∆ock
(&
glock
);

645 i‡(
pfd
[1].
ªvíts
&
POLLIN
) {

646 
i
 = 
	`ªad
(
id
->
pùe
[0],
pùebuff
,1024);

648 i‡(
pfd
[0].
ªvíts
&
POLLIN
) {

649 
i
 = 
	`ªad
(
fd
,
ªcvbuff
+
rcvd
,21-rcvd);

650 i‡(
i
==0) {

651 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" - wrôew‹kî: c⁄√˘i⁄ wôh (%08"
PRIX32
":%"
PRIu16
"Ëwa†ª£àbyÖì∏(unföished wrôes: %"
PRIu8
";Åry cou¡î: %"PRIu32")",
id
->
öode
,
chödx
,
chunkid
,
vîsi⁄
,
ù
,
p‹t
,
waôf‹°©us
,id->
åy˙t
+1);

652 
°©us
=
EIO
;

655 
	`gëtimeofday
(&
œ°rcvd
,
NULL
);

656 
rcvd
+=
i
;

657 i‡(
rcvd
>=8 && 
ªcvbuff
[7]==0 &&Ñecvbuff[6]==0 &&Ñecvbuff[5]==0 &&Ñecvbuff[4]==0 &&Ñecvbuff[3]==0 &&Ñecvbuff[2]==0 &&Ñecvbuff[1]==0 &&Ñecvbuff[0]==0) {

658 i‡(
rcvd
>8) {

659 
	`memmove
(
ªcvbuff
,ªcvbuff+8,
rcvd
-8);

660 
rcvd
-=8;

663 i‡(
rcvd
==21) {

664 
Ωå
 = 
ªcvbuff
;

665 
ªccmd
 = 
	`gë32bô
(&
Ωå
);

666 
ª˛íg
 = 
	`gë32bô
(&
Ωå
);

667 
ªcchunkid
 = 
	`gë64bô
(&
Ωå
);

668 
ªcwrôeid
 = 
	`gë32bô
(&
Ωå
);

669 
ªc°©us
 = 
	`gë8bô
(&
Ωå
);

670 i‡(
ªccmd
!=
CSTOCL_WRITE_STATUS
 || 
ª˛íg
!=13) {

671 
	`sy¶og
(
LOG_WARNING
,"wrôew‹kî: gŸ uƒecognizedÖackë from chunk£rvî (cmd:%"
PRIu32
",Àng:%"PRIu32")",
ªccmd
,
ª˛íg
);

672 
°©us
=
EIO
;

675 i‡(
ªcchunkid
!=
chunkid
) {

676 
	`sy¶og
(
LOG_WARNING
,"wrôew‹kî: gŸ u√x≥˘edÖackë (ex≥˘ed chunkdid:%"
PRIu64
",∑ckë chunkid:%"PRIu64")",
chunkid
,
ªcchunkid
);

677 
°©us
=
EIO
;

680 i‡(
ªc°©us
!=
STATUS_OK
) {

681 
	`sy¶og
(
LOG_WARNING
,"wrôew‹kî: wrôêîr‹: %"
PRIu8
,
ªc°©us
);

682 
wr°©us
=
ªc°©us
;

686 i‡(
ªcwrôeid
>0) {

687 
	`±hªad_muãx_lock
(&
glock
);

688 
rcb
 = 
id
->
d©achaöhód
 ;Ñcb &&Ñcb->
wrôeid
!=
ªcwrôeid
 ;ÑcbÙcb->
√xt
) {}

689 i‡(
rcb
==
NULL
) {

690 
	`sy¶og
(
LOG_WARNING
,"wrôew‹kî: gŸ u√x≥˘ed sètu†(wrôeid:%"
PRIu32
")",
ªcwrôeid
);

691 
	`±hªad_muãx_u∆ock
(&
glock
);

692 
°©us
=
EIO
;

695 i‡(
rcb
==
cb
) {

697 i‡(
haved©a
) {

698 
	`sy¶og
(
LOG_WARNING
,"writeworker: got status OK beforeáll data have been sent");

699 
	`±hªad_muãx_u∆ock
(&
glock
);

700 
°©us
=
EIO
;

703 
cb
 = 
NULL
;

706 i‡(
rcb
->
¥ev
) {

707 
rcb
->
¥ev
->
√xt
 =Ñcb->next;

709 
id
->
d©achaöhód
 = 
rcb
->
√xt
;

711 i‡(
rcb
->
√xt
) {

712 
rcb
->
√xt
->
¥ev
 =Ñcb->prev;

714 
id
->
d©achaöèû
 = 
rcb
->
¥ev
;

716 
maxwroff£t
 = (((
uöt64_t
)(
chödx
))<<
MFSCHUNKBITS
)+(((
uöt32_t
)(
rcb
->
pos
))<<
MFSBLOCKBITS
)+rcb->
to
;

717 i‡(
maxwroff£t
>
mÊíg
) {

718 
mÊíg
=
maxwroff£t
;

720 
	`wrôe_cb_ªÀa£
(
id
,
rcb
);

721 
	`±hªad_muãx_u∆ock
(&
glock
);

723 
waôf‹°©us
--;

724 
rcvd
=0;

727 i‡(
haved©a
 && (
pfd
[0].
ªvíts
&
POLLOUT
)) {

728 i‡(
cb
==
NULL
) {

729 i‡(
£¡
<20) {

730 #ifde‡
HAVE_WRITEV


731 i‡(
chaösize
>0) {

732 
siov
[0].
iov_ba£
 = (*)(
£ndbuff
+
£¡
);

733 
siov
[0].
iov_Àn
 = 20-
£¡
;

734 
siov
[1].
iov_ba£
 = (*)
chaö
;

735 
siov
[1].
iov_Àn
 = 
chaösize
;

736 
i
 = 
	`wrôev
(
fd
,
siov
,2);

739 
i
 = 
	`wrôe
(
fd
,
£ndbuff
+
£¡
,20-sent);

740 #ifde‡
HAVE_WRITEV


744 
i
 = 
	`wrôe
(
fd
,
chaö
+(
£¡
-20),
chaösize
-(sent-20));

746 i‡(
i
<0) {

747 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" - wrôew‹kî: c⁄√˘i⁄ wôh (%08"
PRIX32
":%"
PRIu16
"Ëwa†ª£àbyÖì∏(unföished wrôes: %"
PRIu8
";Åry cou¡î: %"PRIu32")",
id
->
öode
,
chödx
,
chunkid
,
vîsi⁄
,
ù
,
p‹t
,
waôf‹°©us
,id->
åy˙t
+1);

748 
°©us
=
EIO
;

751 
£¡
+=
i
;

752 i‡(
£¡
==20+
chaösize
) {

753 
haved©a
=0;

756 i‡(
£¡
<32) {

757 #ifde‡
HAVE_WRITEV


758 
siov
[0].
iov_ba£
 = (*)(
£ndbuff
+
£¡
);

759 
siov
[0].
iov_Àn
 = 32-
£¡
;

760 
siov
[1].
iov_ba£
 = (*)(
cb
->
d©a
+cb->
‰om
);

761 
siov
[1].
iov_Àn
 = 
cb
->
to
-cb->
‰om
;

762 
i
 = 
	`wrôev
(
fd
,
siov
,2);

764 
i
 = 
	`wrôe
(
fd
,
£ndbuff
+
£¡
,32-sent);

767 
i
 = 
	`wrôe
(
fd
,
cb
->
d©a
+cb->
‰om
+(
£¡
-32),cb->
to
-cb->from-(sent-32));

769 i‡(
i
<0) {

770 
	`sy¶og
(
LOG_WARNING
,"fûe: %"
PRIu32
", index: %"PRIu32", chunk: %"
PRIu64
", vîsi⁄: %"PRIu32" - wrôew‹kî: c⁄√˘i⁄ wôh (%08"
PRIX32
":%"
PRIu16
"Ëwa†ª£àbyÖì∏(unföished wrôes: %"
PRIu8
";Åry cou¡î: %"PRIu32")",
id
->
öode
,
chödx
,
chunkid
,
vîsi⁄
,
ù
,
p‹t
,
waôf‹°©us
,id->
åy˙t
+1);

771 
°©us
=
EIO
;

774 
£¡
+=
i
;

775 i‡(
£¡
==32+
cb
->
to
-cb->
‰om
) {

776 
haved©a
=0;

780 } 
waôf‹°©us
>0 && 
now
.
tv_£c
<10);

782 
	`t˝˛o£
(
fd
);

784 #ifde‡
WORKER_DEBUG


785 
	`gëtimeofday
(&
now
,
NULL
);

786 i‡(
now
.
tv_u£c
<
°¨t
.tv_usec) {

787 
now
.
tv_£c
--;

788 
now
.
tv_u£c
+=1000000;

790 
now
.
tv_£c
 -
°¨t
.tv_sec;

791 
now
.
tv_u£c
 -
°¨t
.tv_usec;

793 
˛
=0;

794 
˙t
=0 ; c¡<
chaöñemíts
 ; cnt++) {

795 
˛
+=
	`¢¥ötf
(
debugchaö
+˛,200-˛,"%u.%u.%u.%u:%u->",(
chaöù
[
˙t
]>>24)&255,(chaöù[˙t]>>16)&255,(chaöù[˙t]>>8)&255,chaöù[˙t]&255,
chaöp‹t
[cnt]);

797 i‡(
˛
>=2) {

798 
debugchaö
[
˛
-2]='\0';

800 
	`sy¶og
(
LOG_NOTICE
,"w‹kî %lu síà%"
PRIu32
" block†(%"PRIu32"Ö¨tülËo‡chunk %016"
PRIX64
"_%08"
PRIX32
",Ñe˚ived sètu†f‹ %"PRIu32" block†(%"PRIu32"Üo°), bw: %.6lfMB ( %"PRIu32" B / %.0l‡u†), chaö: %s",()
¨g
,
√xtwrôeid
-1,
∑πülblocks
,
chunkid
,
vîsi⁄
,√xtwrôeid-1-
waôf‹°©us
,waôf‹°©us,()
byãs£¡
/(()(
now
.
tv_£c
)*1000000+()“ow.
tv_u£c
)),byãs£¡,(()“ow.tv_£c)*1000000+()“ow.tv_u£c)),
debugchaö
);

803 
˙t
=0 ; cnt<10 ; cnt++) {

804 
we°©us
 = 
	`fs_wrôìnd
(
chunkid
,
id
->
öode
,
mÊíg
);

805 i‡(
we°©us
!=
STATUS_OK
) {

806 
	`u¶ìp
(100000+(10000<<
˙t
));

812 i‡(
we°©us
!=
STATUS_OK
) {

813 
	`wrôe_job_íd
(
id
,
ENXIO
,0);

814 } i‡(
°©us
!=0 || 
wr°©us
!=
STATUS_OK
) {

815 i‡(
wr°©us
!=
STATUS_OK
) {

816 i‡(
wr°©us
==
ERROR_NOSPACE
) {

817 
°©us
=
ENOSPC
;

819 
°©us
=
EIO
;

822 
id
->
åy˙t
++;

823 i‡(
id
->
åy˙t
>=
maxªåõs
) {

824 
	`wrôe_job_íd
(
id
,
°©us
,0);

826 
	`wrôe_job_íd
(
id
,0,1+((id->
åy˙t
<30)?(id->trycnt/3):10));

829 
	`ªad_öode_›s
(
id
->
öode
);

830 
	`wrôe_job_íd
(
id
,0,0);

833 
	}
}

836 
	$wrôe_d©a_öô
 (
uöt32_t
 
ˇchesize
,uöt32_à
ªåõs
) {

837 
uöt32_t
 
ˇcheblockcou¡
 = (
ˇchesize
/
MFSBLOCKSIZE
);

838 
uöt32_t
 
i
;

839 
±hªad_©å_t
 
th©å
;

841 
maxªåõs
 = 
ªåõs
;

842 i‡(
ˇcheblockcou¡
<10) {

843 
ˇcheblockcou¡
=10;

845 
	`±hªad_muãx_öô
(&
glock
,
NULL
);

847 
	`±hªad_c⁄d_öô
(&
fcbc⁄d
,
NULL
);

848 
fcbwaôög
=0;

849 
ˇcheblocks
 = 
	`mÆloc
((
cblock
)*
ˇcheblockcou¡
);

850 
i
=0 ; i<
ˇcheblockcou¡
-1 ; i++) {

851 
ˇcheblocks
[
i
].
√xt
 = cacheblocks+(i+1);

853 
ˇcheblocks
[
ˇcheblockcou¡
-1].
√xt
 = 
NULL
;

854 
‰ìcblockshód
 = 
ˇcheblocks
;

855 
‰ìˇcheblocks
 = 
ˇcheblockcou¡
;

857 
idhash
 = 
	`mÆloc
((
öoded©a
*)*
IDHASHSIZE
);

858 
i
=0 ; i<
IDHASHSIZE
 ; i++) {

859 
idhash
[
i
]=
NULL
;

862 
dqueue
 = 
	`queue_√w
(0);

863 
jqueue
 = 
	`queue_√w
(0);

865 
	`±hªad_©å_öô
(&
th©å
);

866 
	`±hªad_©å_£t°acksize
(&
th©å
,0x100000);

867 
	`±hªad_¸óã
(&
dqueue_w‹kî_th
,&
th©å
,
wrôe_dqueue_w‹kî
,
NULL
);

868 #ifde‡
BUFFER_DEBUG


869 
	`±hªad_¸óã
(&
öfo_w‹kî_th
,&
th©å
,
wrôe_öfo_w‹kî
,
NULL
);

871 
i
=0 ; i<
WORKERS
 ; i++) {

872 
	`±hªad_¸óã
(
wrôe_w‹kî_th
+
i
,&
th©å
,
wrôe_w‹kî
,(*)()(i));

874 
	`±hªad_©å_de°roy
(&
th©å
);

875 
	}
}

877 
	$wrôe_d©a_ãrm
() {

878 
uöt32_t
 
i
;

879 
öoded©a
 *
id
,*
idn
;

881 
	`queue_put
(
dqueue
,0,0,
NULL
,0);

882 
i
=0 ; i<
WORKERS
 ; i++) {

883 
	`queue_put
(
jqueue
,0,0,
NULL
,0);

885 
i
=0 ; i<
WORKERS
 ; i++) {

886 
	`±hªad_joö
(
wrôe_w‹kî_th
[
i
],
NULL
);

888 
	`±hªad_joö
(
dqueue_w‹kî_th
,
NULL
);

889 
	`queue_dñëe
(
dqueue
);

890 
	`queue_dñëe
(
jqueue
);

891 
i
=0 ; i<
IDHASHSIZE
 ; i++) {

892 
id
 = 
idhash
[
i
] ; id ; id = 
idn
) {

893 
idn
 = 
id
->
√xt
;

894 
	`±hªad_c⁄d_de°roy
(&(
id
->
Êushc⁄d
));

895 
	`±hªad_c⁄d_de°roy
(&(
id
->
wrôec⁄d
));

896 
	`˛o£
(
id
->
pùe
[0]);

897 
	`˛o£
(
id
->
pùe
[1]);

898 
	`‰ì
(
id
);

901 
	`‰ì
(
idhash
);

902 
	`‰ì
(
ˇcheblocks
);

903 
	`±hªad_c⁄d_de°roy
(&
fcbc⁄d
);

904 
	`±hªad_muãx_de°roy
(&
glock
);

905 
	}
}

908 
	$wrôe_cb_ex∑nd
(
cblock
 *
cb
,
uöt32_t
 
‰om
,uöt32_à
to
,c⁄° 
uöt8_t
 *
d©a
) {

909 i‡(
cb
->
wrôeid
>0 || 
‰om
>cb->
to
 ||Åo<cb->from) {

912 
	`mem˝y
(
cb
->
d©a
+
‰om
,d©a,
to
-from);

913 i‡(
‰om
<
cb
->from) {

914 
cb
->
‰om
 = from;

916 i‡(
to
>
cb
->to) {

917 
cb
->
to
 =Åo;

920 
	}
}

923 
	$wrôe_block
(
öoded©a
 *
id
,
uöt32_t
 
chödx
,
uöt16_t
 
pos
,uöt32_à
‰om
,uöt32_à
to
,c⁄° 
uöt8_t
 *
d©a
) {

924 
cblock
 *
cb
;

926 
	`±hªad_muãx_lock
(&
glock
);

927 
cb
=
id
->
d©achaöèû
 ; cb ; cb=cb->
¥ev
) {

928 i‡(
cb
->
pos
=ıo†&& cb->
chödx
==chindx) {

929 i‡(
	`wrôe_cb_ex∑nd
(
cb
,
‰om
,
to
,
d©a
)==0) {

930 
	`±hªad_muãx_u∆ock
(&
glock
);

938 
cb
 = 
	`wrôe_cb_acquúe
(
id
);

940 
cb
->
chödx
 = chindx;

941 
cb
->
pos
 =Öos;

942 
cb
->
‰om
 = from;

943 
cb
->
to
 =Åo;

944 
	`mem˝y
(
cb
->
d©a
+
‰om
,d©a,
to
-from);

945 
cb
->
¥ev
 = 
id
->
d©achaöèû
;

946 
cb
->
√xt
 = 
NULL
;

947 i‡(
id
->
d©achaöèû
!=
NULL
) {

948 
id
->
d©achaöèû
->
√xt
 = 
cb
;

950 
id
->
d©achaöhód
 = 
cb
;

952 
id
->
d©achaöèû
 = 
cb
;

953 i‡(
id
->
öqueue
) {

954 i‡(
id
->
waôögw‹kî
) {

955 i‡(
	`wrôe
(
id
->
pùe
[1]," ",1)!=1) {

956 
	`sy¶og
(
LOG_ERR
,"can't writeÅoÖipe !!!");

958 
id
->
waôögw‹kî
=0;

961 
id
->
öqueue
=1;

962 
	`wrôe_íqueue
(
id
);

964 
	`±hªad_muãx_u∆ock
(&
glock
);

967 
	}
}

970 
	$wrôe_d©a
(*
vid
,
uöt64_t
 
off£t
,
uöt32_t
 
size
,c⁄° 
uöt8_t
 *
d©a
) {

971 
uöt32_t
 
chödx
;

972 
uöt16_t
 
pos
;

973 
uöt32_t
 
‰om
;

974 
°©us
;

975 
öoded©a
 *
id
 = (öoded©a*)
vid
;

979 
	`±hªad_muãx_lock
(&
glock
);

982 
°©us
 = 
id
->status;

983 i‡(
°©us
==0) {

984 i‡(
off£t
+
size
>
id
->
maxÊíg
) {

985 
id
->
maxÊíg
 = 
off£t
+
size
;

987 
id
->
wrôewaôög
++;

988 
id
->
Êushwaôög
>0) {

989 
	`±hªad_c⁄d_waô
(&(
id
->
wrôec⁄d
),&
glock
);

991 
id
->
wrôewaôög
--;

993 
	`±hªad_muãx_u∆ock
(&
glock
);

994 i‡(
°©us
!=0) {

995  
°©us
;

998 
chödx
 = 
off£t
>>
MFSCHUNKBITS
;

999 
pos
 = (
off£t
&
MFSCHUNKMASK
)>>
MFSBLOCKBITS
;

1000 
‰om
 = 
off£t
&
MFSBLOCKMASK
;

1001 
size
>0) {

1002 i‡(
size
>
MFSBLOCKSIZE
-
‰om
) {

1003 i‡(
	`wrôe_block
(
id
,
chödx
,
pos
,
‰om
,
MFSBLOCKSIZE
,
d©a
)<0) {

1004  
EIO
;

1006 
size
 -(
MFSBLOCKSIZE
-
‰om
);

1007 
d©a
 +(
MFSBLOCKSIZE
-
‰om
);

1008 
‰om
 = 0;

1009 
pos
++;

1010 i‡(
pos
==1024) {

1011 
pos
 = 0;

1012 
chödx
++;

1015 i‡(
	`wrôe_block
(
id
,
chödx
,
pos
,
‰om
,‰om+
size
,
d©a
)<0) {

1016  
EIO
;

1018 
size
 = 0;

1024 
	}
}

1027 * 
	$wrôe_d©a_√w
(
uöt32_t
 
öode
) {

1028 
öoded©a
* 
id
;

1029 
	`±hªad_muãx_lock
(&
glock
);

1030 
id
 = 
	`wrôe_gë_öoded©a
(
öode
);

1031 
id
->
l˙t
++;

1033 
	`±hªad_muãx_u∆ock
(&
glock
);

1034  
id
;

1035 
	}
}

1037 
	$wrôe_d©a_Êush
(*
vid
) {

1038 
öoded©a
* 
id
 = (öoded©a*)
vid
;

1039 
ªt
;

1043 
	`±hªad_muãx_lock
(&
glock
);

1044 
id
->
Êushwaôög
++;

1045 
id
->
öqueue
) {

1047 
	`±hªad_c⁄d_waô
(&(
id
->
Êushc⁄d
),&
glock
);

1050 
id
->
Êushwaôög
--;

1051 i‡(
id
->
Êushwaôög
==0 && id->
wrôewaôög
>0) {

1052 
	`±hªad_c⁄d_brﬂdˇ°
(&(
id
->
wrôec⁄d
));

1054 
ªt
 = 
id
->
°©us
;

1055 i‡(
id
->
l˙t
==0 && id->
öqueue
==0 && id->
Êushwaôög
==0 && id->
wrôewaôög
==0) {

1056 
	`wrôe_‰ì_öoded©a
(
id
);

1058 
	`±hªad_muãx_u∆ock
(&
glock
);

1061  
ªt
;

1062 
	}
}

1064 
uöt64_t
 
	$wrôe_d©a_gëmaxÊíg
(
uöt32_t
 
öode
) {

1065 
uöt64_t
 
maxÊíg
;

1066 
öoded©a
* 
id
;

1067 
	`±hªad_muãx_lock
(&
glock
);

1068 
id
 = 
	`wrôe_föd_öoded©a
(
öode
);

1069 i‡(
id
) {

1070 
maxÊíg
 = 
id
->maxfleng;

1072 
maxÊíg
 = 0;

1074 
	`±hªad_muãx_u∆ock
(&
glock
);

1075  
maxÊíg
;

1076 
	}
}

1079 
	$wrôe_d©a_Êush_öode
(
uöt32_t
 
öode
) {

1080 
öoded©a
* 
id
;

1081 
ªt
;

1082 
	`±hªad_muãx_lock
(&
glock
);

1083 
id
 = 
	`wrôe_föd_öoded©a
(
öode
);

1084 i‡(
id
==
NULL
) {

1085 
	`±hªad_muãx_u∆ock
(&
glock
);

1088 
id
->
Êushwaôög
++;

1089 
id
->
öqueue
) {

1091 
	`±hªad_c⁄d_waô
(&(
id
->
Êushc⁄d
),&
glock
);

1094 
id
->
Êushwaôög
--;

1095 i‡(
id
->
Êushwaôög
==0 && id->
wrôewaôög
>0) {

1096 
	`±hªad_c⁄d_brﬂdˇ°
(&(
id
->
wrôec⁄d
));

1098 
ªt
 = 
id
->
°©us
;

1099 i‡(
id
->
l˙t
==0 && id->
öqueue
==0 && id->
Êushwaôög
==0 && id->
wrôewaôög
==0) {

1100 
	`wrôe_‰ì_öoded©a
(
id
);

1102 
	`±hªad_muãx_u∆ock
(&
glock
);

1103  
ªt
;

1104 
	}
}

1107 
	$wrôe_d©a_íd
(*
vid
) {

1108 
öoded©a
* 
id
 = (öoded©a*)
vid
;

1109 
ªt
;

1110 
	`±hªad_muãx_lock
(&
glock
);

1111 
id
->
Êushwaôög
++;

1112 
id
->
öqueue
) {

1114 
	`±hªad_c⁄d_waô
(&(
id
->
Êushc⁄d
),&
glock
);

1117 
id
->
Êushwaôög
--;

1118 i‡(
id
->
Êushwaôög
==0 && id->
wrôewaôög
>0) {

1119 
	`±hªad_c⁄d_brﬂdˇ°
(&(
id
->
wrôec⁄d
));

1121 
ªt
 = 
id
->
°©us
;

1122 
id
->
l˙t
--;

1123 i‡(
id
->
l˙t
==0 && id->
öqueue
==0 && id->
Êushwaôög
==0 && id->
wrôewaôög
==0) {

1124 
	`wrôe_‰ì_öoded©a
(
id
);

1126 
	`±hªad_muãx_u∆ock
(&
glock
);

1127  
ªt
;

1128 
	}
}

	@mfsmount/writedata.h

19 #i‚de‡
_WRITEDATAALT_H_


20 
	#_WRITEDATAALT_H_


	)

22 
	~<öây≥s.h
>

24 
wrôe_d©a_öô
(
uöt32_t
 
ˇchesize
,uöt32_à
ªåõs
);

25 
wrôe_d©a_ãrm
();

26 * 
wrôe_d©a_√w
(
uöt32_t
 
öode
);

27 
wrôe_d©a_íd
(*
vid
);

28 
wrôe_d©a_Êush
(*
vid
);

29 
uöt64_t
 
wrôe_d©a_gëmaxÊíg
(
uöt32_t
 
öode
);

30 
wrôe_d©a_Êush_öode
(
uöt32_t
 
öode
);

31 
wrôe_d©a
(*
vid
,
uöt64_t
 
off£t
,
uöt32_t
 
size
,c⁄° 
uöt8_t
 *
buff
);

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/fuse.h

9 
	~"fu£/fu£.h
"

	@/usr/include/grp.h

24 #i‚def 
_GRP_H


25 
	#_GRP_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 
	#__√ed_size_t


	)

34 
	~<°ddef.h
>

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

44 
	sgroup


46 *
	mgr_«me
;

47 *
	mgr_∑sswd
;

48 
__gid_t
 
	mgr_gid
;

49 **
	mgr_mem
;

53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


54 
	#__√ed_FILE


	)

55 
	~<°dio.h
>

59 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


64 
£tgª¡
 ();

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

68 || 
deföed
 
__USE_XOPEN2K8


73 
ídgª¡
 ();

79 
group
 *
gëgª¡
 ();

82 #ifdef 
__USE_SVID


89 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

92 #ifde‡
__USE_GNU


99 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

100 
FILE
 *
__ª°ri˘
 
__f
);

107 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

113 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

115 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


117 #ifde‡
__USE_MISC


120 
	#NSS_BUFLEN_GROUP
 1024

	)

136 #ifde‡
__USE_GNU


137 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

138 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

139 
group
 **
__ª°ri˘
 
__ªsu…
);

146 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
group
 **
__ª°ri˘
 
__ªsu…
);

154 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

155 
group
 *
__ª°ri˘
 
__ªsu…buf
,

156 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

157 
group
 **
__ª°ri˘
 
__ªsu…
);

159 #ifdef 
__USE_SVID


167 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

168 
group
 *
__ª°ri˘
 
__ªsu…buf
,

169 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

170 
group
 **
__ª°ri˘
 
__ªsu…
);

176 #ifdef 
__USE_BSD


178 
	#__√ed_size_t


	)

179 
	~<°ddef.h
>

182 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

192 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

193 
__gid_t
 *
__groups
, *
__ngroups
);

203 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

207 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.4"

	)

41 
	#ZLIB_VERNUM
 0x1234

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

171 
	#Z_TREES
 6

	)

174 
	#Z_OK
 0

	)

175 
	#Z_STREAM_END
 1

	)

176 
	#Z_NEED_DICT
 2

	)

177 
	#Z_ERRNO
 (-1)

	)

178 
	#Z_STREAM_ERROR
 (-2)

	)

179 
	#Z_DATA_ERROR
 (-3)

	)

180 
	#Z_MEM_ERROR
 (-4)

	)

181 
	#Z_BUF_ERROR
 (-5)

	)

182 
	#Z_VERSION_ERROR
 (-6)

	)

187 
	#Z_NO_COMPRESSION
 0

	)

188 
	#Z_BEST_SPEED
 1

	)

189 
	#Z_BEST_COMPRESSION
 9

	)

190 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

193 
	#Z_FILTERED
 1

	)

194 
	#Z_HUFFMAN_ONLY
 2

	)

195 
	#Z_RLE
 3

	)

196 
	#Z_FIXED
 4

	)

197 
	#Z_DEFAULT_STRATEGY
 0

	)

200 
	#Z_BINARY
 0

	)

201 
	#Z_TEXT
 1

	)

202 
	#Z_ASCII
 
Z_TEXT


	)

203 
	#Z_UNKNOWN
 2

	)

206 
	#Z_DEFLATED
 8

	)

209 
	#Z_NULL
 0

	)

211 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

351 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

390 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

498 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

574 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

575 c⁄° 
Byãf
 *
di˘i⁄¨y
,

576 
uI¡
 
di˘Lígth
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

614 
z_°ªamp
 
sour˚
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

642 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

643 
Àvñ
,

644 
°øãgy
));

663 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

664 
good_Àngth
,

665 
max_œzy
,

666 
ni˚_Àngth
,

667 
max_chaö
));

680 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

681 
uL⁄g
 
sour˚Lí
));

690 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

691 
bôs
,

692 
vÆue
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

707 
gz_hódîp
 
hód
));

777 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

778 c⁄° 
Byãf
 *
di˘i⁄¨y
,

779 
uI¡
 
di˘Lígth
));

799 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

814 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

815 
z_°ªamp
 
sour˚
));

830 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

840 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

841 
wödowBôs
));

852 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

853 
bôs
,

854 
vÆue
));

873 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

901 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

902 
gz_hódîp
 
hód
));

963 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

964 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

966 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

967 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

968 
out_func
 
out
, 
FAR
 *
out_desc
));

1035 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1043 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1095 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1096 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1110 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1111 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1112 
Àvñ
));

1126 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1133 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1134 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1152 
voidp
 
	tgzFûe
;

1172 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1185 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1193 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1201 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1202 
voidpc
 
buf
, 
Àn
));

1209 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1222 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1229 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1238 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1244 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1250 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1260 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1289 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1306 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1312 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1318 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1326 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1338 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1353 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1379 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1411 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1412 c⁄° *
vîsi⁄
, 
°ªam_size
));

1413 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1414 c⁄° *
vîsi⁄
, 
°ªam_size
));

1415 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1416 
wödowBôs
, 
memLevñ
,

1417 
°øãgy
, c⁄° *
vîsi⁄
,

1418 
°ªam_size
));

1419 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1420 c⁄° *
vîsi⁄
, 
°ªam_size
));

1421 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1422 
FAR
 *
wödow
,

1423 c⁄° *
vîsi⁄
,

1424 
°ªam_size
));

1425 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1426 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1427 
	#öÊ©eInô
(
°rm
) \

1428 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1429 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1430 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1431 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1432 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1433 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1434 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1435 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1436 
ZLIB_VERSION
, (
z_°ªam
))

	)

1438 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

1439 
	#z_off64_t
 
off64_t


	)

1441 #i‡
_FILE_OFFSET_BITS
 == 64

1442 
	#z_off64_t
 
off_t


	)

1446 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
_FILE_OFFSET_BITS
 == 64

1447 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1448 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1449 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1450 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1451 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1454 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& 
_FILE_OFFSET_BITS
 == 64

1455 
	#gz›í
 
gz›í64


	)

1456 
	#gz£ek
 
gz£ek64


	)

1457 
	#gzãŒ
 
gzãŒ64


	)

1458 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1459 
	#¸c32_comböe
 
¸c32_comböe64


	)

1460 #i‚de‡
_LARGEFILE64_SOURCE


1461 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1462 
ZEXTERN
 
off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off_t, ));

1463 
ZEXTERN
 
off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1464 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1465 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1468 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1469 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1470 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1471 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1472 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1475 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1476 
	söã∫Æ_°©e
 {
dummy
;};

1479 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1480 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1481 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1482 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1484 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/fuse/fuse.h

9 #i‚de‡
_FUSE_H_


10 
	#_FUSE_H_


	)

22 #i‚de‡
FUSE_USE_VERSION


23 
	#FUSE_USE_VERSION
 21

	)

26 
	~"fu£_comm⁄.h
"

28 
	~<f˙é.h
>

29 
	~<time.h
>

30 
	~<utime.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<sys/°©vfs.h
>

34 
	~<sys/uio.h
>

36 #ifde‡
__˝lu•lus


45 
fu£
;

48 
fu£_cmd
;

58 (*
fu£_fûl_dú_t
Ë(*
	tbuf
, c⁄° *
	t«me
,

59 c⁄° 
	t°©
 *
	t°buf
, 
	toff_t
 
	toff
);

62 
fu£_dúh™dÀ
 *
	tfu£_dúh_t
;

63 (*
fu£_dúfû_t
Ë(
	tfu£_dúh_t
 
	th
, c⁄° *
	t«me
, 
	tty≥
,

64 
	töo_t
 
	töo
);

88 
	sfu£_›î©i⁄s
 {

95 (*
gë©å
Ë(c⁄° *, 
°©
 *);

105 (*
ªadlök
Ë(c⁄° *, *, 
size_t
);

108 (*
gëdú
Ë(c⁄° *, 
fu£_dúh_t
, 
fu£_dúfû_t
);

116 (*
mknod
Ë(c⁄° *, 
mode_t
, 
dev_t
);

124 (*
mkdú
Ë(c⁄° *, 
mode_t
);

127 (*
u∆ök
) (const *);

130 (*
rmdú
) (const *);

133 (*
symlök
) (const *, const *);

136 (*
ª«me
) (const *, const *);

139 (*
lök
) (const *, const *);

142 (*
chmod
Ë(c⁄° *, 
mode_t
);

145 (*
chown
Ë(c⁄° *, 
uid_t
, 
gid_t
);

148 (*
åunˇã
Ë(c⁄° *, 
off_t
);

154 (*
utime
Ë(c⁄° *, 
utimbuf
 *);

173 (*
›í
Ë(c⁄° *, 
fu£_fûe_öfo
 *);

186 (*
ªad
Ë(c⁄° *, *, 
size_t
, 
off_t
,

187 
fu£_fûe_öfo
 *);

197 (*
wrôe
Ë(c⁄° *, c⁄° *, 
size_t
, 
off_t
,

198 
fu£_fûe_öfo
 *);

207 (*
°©fs
Ë(c⁄° *, 
°©vfs
 *);

232 (*
Êush
Ë(c⁄° *, 
fu£_fûe_öfo
 *);

248 (*
ªÀa£
Ë(c⁄° *, 
fu£_fûe_öfo
 *);

257 (*
fsync
Ë(c⁄° *, , 
fu£_fûe_öfo
 *);

260 (*
£tx©å
Ë(c⁄° *, c⁄° *, c⁄° *, 
size_t
, );

263 (*
gëx©å
Ë(c⁄° *, c⁄° *, *, 
size_t
);

266 (*
li°x©å
Ë(c⁄° *, *, 
size_t
);

269 (*
ªmovex©å
) (const *, const *);

281 (*
›ídú
Ë(c⁄° *, 
fu£_fûe_öfo
 *);

304 (*
ªaddú
Ë(c⁄° *, *, 
fu£_fûl_dú_t
, 
off_t
,

305 
fu£_fûe_öfo
 *);

311 (*
ªÀa£dú
Ë(c⁄° *, 
fu£_fûe_öfo
 *);

320 (*
fsyncdú
Ë(c⁄° *, , 
fu£_fûe_öfo
 *);

332 *(*
öô
Ë(
fu£_c⁄n_öfo
 *
c⁄n
);

341 (*
de°roy
) (*);

354 (*
ac˚ss
) (const *, );

368 (*
¸óã
Ë(c⁄° *, 
mode_t
, 
fu£_fûe_öfo
 *);

382 (*
·runˇã
Ë(c⁄° *, 
off_t
, 
fu£_fûe_öfo
 *);

396 (*
fgë©å
Ë(c⁄° *, 
°©
 *, 
fu£_fûe_öfo
 *);

430 (*
lock
Ë(c⁄° *, 
fu£_fûe_öfo
 *, 
cmd
,

431 
Êock
 *);

439 (*
utimís
Ë(c⁄° *, c⁄° 
time•ec
 
tv
[2]);

449 (*
bm≠
Ë(c⁄° *, 
size_t
 
blocksize
, 
uöt64_t
 *
idx
);

458 
Êag_nuŒ∑th_ok
 : 1;

463 
Êag_ª£rved
 : 31;

477 (*
io˘l
Ë(c⁄° *, 
cmd
, *
¨g
,

478 
fu£_fûe_öfo
 *, 
Êags
, *
d©a
);

497 (*
pﬁl
Ë(c⁄° *, 
fu£_fûe_öfo
 *,

498 
fu£_pﬁlh™dÀ
 *
ph
, *
ªvít•
);

506 
	sfu£_c⁄ãxt
 {

508 
fu£
 *fuse;

511 
uid_t
 
uid
;

514 
gid_t
 
gid
;

517 
pid_t
 
pid
;

520 *
¥iv©e_d©a
;

523 
mode_t
 
umask
;

553 
	#fu£_maö
(
¨gc
, 
¨gv
, 
›
, 
u£r_d©a
) \

554 
	`fu£_maö_ªÆ
(
¨gc
, 
¨gv
, 
›
, (*(›)), 
u£r_d©a
)

	)

570 
fu£
 *
fu£_√w
(
fu£_ch™
 *
ch
, 
fu£_¨gs
 *
¨gs
,

571 c⁄° 
fu£_›î©i⁄s
 *
›
, 
size_t
 
›_size
,

572 *
u£r_d©a
);

584 
fu£_de°roy
(
fu£
 *
f
);

595 
fu£_lo›
(
fu£
 *
f
);

602 
fu£_exô
(
fu£
 *
f
);

617 
fu£_lo›_mt
(
fu£
 *
f
);

627 
fu£_c⁄ãxt
 *
fu£_gë_c⁄ãxt
();

647 
fu£_gëgroups
(
size
, 
gid_t
 
li°
[]);

654 
fu£_öãºu±ed
();

661 
fu£_övÆid©e
(
fu£
 *
f
, c⁄° *
∑th
);

664 
fu£_is_lib_›ti⁄
(c⁄° *
›t
);

671 
fu£_maö_ªÆ
(
¨gc
, *
¨gv
[], c⁄° 
fu£_›î©i⁄s
 *
›
,

672 
size_t
 
›_size
, *
u£r_d©a
);

683 
fu£_fs
;

694 
fu£_fs_gë©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
°©
 *
buf
);

695 
fu£_fs_fgë©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
°©
 *
buf
,

696 
fu£_fûe_öfo
 *
fi
);

697 
fu£_fs_ª«me
(
fu£_fs
 *
fs
, c⁄° *
ﬁd∑th
,

698 c⁄° *
√w∑th
);

699 
fu£_fs_u∆ök
(
fu£_fs
 *
fs
, c⁄° *
∑th
);

700 
fu£_fs_rmdú
(
fu£_fs
 *
fs
, c⁄° *
∑th
);

701 
fu£_fs_symlök
(
fu£_fs
 *
fs
, c⁄° *
lök«me
,

702 c⁄° *
∑th
);

703 
fu£_fs_lök
(
fu£_fs
 *
fs
, c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

704 
fu£_fs_ªÀa£
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

705 
fu£_fûe_öfo
 *
fi
);

706 
fu£_fs_›í
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

707 
fu£_fûe_öfo
 *
fi
);

708 
fu£_fs_ªad
(
fu£_fs
 *
fs
, c⁄° *
∑th
, *
buf
, 
size_t
 
size
,

709 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

710 
fu£_fs_wrôe
(
fu£_fs
 *
fs
, c⁄° *
∑th
, c⁄° *
buf
,

711 
size_t
 
size
, 
off_t
 
off
, 
fu£_fûe_öfo
 *
fi
);

712 
fu£_fs_fsync
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
d©async
,

713 
fu£_fûe_öfo
 *
fi
);

714 
fu£_fs_Êush
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

715 
fu£_fûe_öfo
 *
fi
);

716 
fu£_fs_°©fs
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
°©vfs
 *
buf
);

717 
fu£_fs_›ídú
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

718 
fu£_fûe_öfo
 *
fi
);

719 
fu£_fs_ªaddú
(
fu£_fs
 *
fs
, c⁄° *
∑th
, *
buf
,

720 
fu£_fûl_dú_t
 
fûÀr
, 
off_t
 
off
,

721 
fu£_fûe_öfo
 *
fi
);

722 
fu£_fs_fsyncdú
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
d©async
,

723 
fu£_fûe_öfo
 *
fi
);

724 
fu£_fs_ªÀa£dú
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

725 
fu£_fûe_öfo
 *
fi
);

726 
fu£_fs_¸óã
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
mode_t
 
mode
,

727 
fu£_fûe_öfo
 *
fi
);

728 
fu£_fs_lock
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

729 
fu£_fûe_öfo
 *
fi
, 
cmd
, 
Êock
 *
lock
);

730 
fu£_fs_chmod
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
mode_t
 
mode
);

731 
fu£_fs_chown
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
uid_t
 
uid
, 
gid_t
 
gid
);

732 
fu£_fs_åunˇã
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
off_t
 
size
);

733 
fu£_fs_·runˇã
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
off_t
 
size
,

734 
fu£_fûe_öfo
 *
fi
);

735 
fu£_fs_utimís
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

736 c⁄° 
time•ec
 
tv
[2]);

737 
fu£_fs_ac˚ss
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
mask
);

738 
fu£_fs_ªadlök
(
fu£_fs
 *
fs
, c⁄° *
∑th
, *
buf
,

739 
size_t
 
Àn
);

740 
fu£_fs_mknod
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
mode_t
 
mode
,

741 
dev_t
 
rdev
);

742 
fu£_fs_mkdú
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
mode_t
 
mode
);

743 
fu£_fs_£tx©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
, c⁄° *
«me
,

744 c⁄° *
vÆue
, 
size_t
 
size
, 
Êags
);

745 
fu£_fs_gëx©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
, c⁄° *
«me
,

746 *
vÆue
, 
size_t
 
size
);

747 
fu£_fs_li°x©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
, *
li°
,

748 
size_t
 
size
);

749 
fu£_fs_ªmovex©å
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

750 c⁄° *
«me
);

751 
fu£_fs_bm≠
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
size_t
 
blocksize
,

752 
uöt64_t
 *
idx
);

753 
fu£_fs_io˘l
(
fu£_fs
 *
fs
, c⁄° *
∑th
, 
cmd
, *
¨g
,

754 
fu£_fûe_öfo
 *
fi
, 
Êags
, *
d©a
);

755 
fu£_fs_pﬁl
(
fu£_fs
 *
fs
, c⁄° *
∑th
,

756 
fu£_fûe_öfo
 *
fi
, 
fu£_pﬁlh™dÀ
 *
ph
,

757 *
ªvít•
);

758 
fu£_fs_öô
(
fu£_fs
 *
fs
, 
fu£_c⁄n_öfo
 *
c⁄n
);

759 
fu£_fs_de°roy
(
fu£_fs
 *
fs
);

761 
fu£_nŸify_pﬁl
(
fu£_pﬁlh™dÀ
 *
ph
);

774 
fu£_fs
 *
fu£_fs_√w
(c⁄° 
fu£_›î©i⁄s
 *
›
, 
size_t
 
›_size
,

775 *
u£r_d©a
);

787 
	sfu£_moduÀ
 {

791 c⁄° *
«me
;

807 
fu£_fs
 *(*
Á˘‹y
)(
fu£_¨gs
 *
¨gs
,

808 
fu£_fs
 *
fs
[]);

810 
fu£_moduÀ
 *
√xt
;

811 
fu£mod_so
 *
so
;

812 
˘r
;

821 
fu£_ªgi°î_moduÀ
(
fu£_moduÀ
 *
mod
);

829 
	#FUSE_REGISTER_MODULE
(
«me_
, 
Á˘‹y_
) \

830 
	`__©åibuã__
((
c⁄°ru˘‹
)Ë
«me_
 ## 
	`_ªgi°î
() \

832 
fu£_moduÀ
 
mod
 = \

833 { #«me_, 
Á˘‹y_
, 
NULL
, NULL, 0 }; \

834 
	`fu£_ªgi°î_moduÀ
(&
mod
); \

835 }

	)

846 (*
fu£_¥o˚ss‹_t
)(
	tfu£
 *, 
	tfu£_cmd
 *, *);

849 
fu£
 *
fu£_£tup
(
¨gc
, *
¨gv
[],

850 c⁄° 
fu£_›î©i⁄s
 *
›
, 
size_t
 
›_size
,

851 **
mou¡poöt
, *
mu…ôhªaded
,

852 *
u£r_d©a
);

855 
fu£_ã¨down
(
fu£
 *fu£, *
mou¡poöt
);

858 
fu£_cmd
 *
fu£_ªad_cmd
(
fu£
 *
f
);

861 
fu£_¥o˚ss_cmd
(
fu£
 *
f
, 
fu£_cmd
 *
cmd
);

865 
fu£_lo›_mt_¥oc
(
fu£
 *
f
, 
fu£_¥o˚ss‹_t
 
¥oc
, *
d©a
);

869 
fu£_exôed
(
fu£
 *
f
);

872 
fu£_£t_gëc⁄ãxt_func
(
fu£_c⁄ãxt
 *(*
func
)());

875 
fu£_£ssi⁄
 *
fu£_gë_£ssi⁄
(
fu£
 *
f
);

881 #i‡
FUSE_USE_VERSION
 < 26

882 
	~"fu£_com∑t.h
"

883 #unde‡
fu£_maö


884 #i‡
FUSE_USE_VERSION
 == 25

885 
	#fu£_maö
(
¨gc
, 
¨gv
, 
›
) \

886 
	`fu£_maö_ªÆ_com∑t25
(
¨gc
, 
¨gv
, 
›
, (*(›)))

	)

887 
	#fu£_√w
 
fu£_√w_com∑t25


	)

888 
	#fu£_£tup
 
fu£_£tup_com∑t25


	)

889 
	#fu£_ã¨down
 
fu£_ã¨down_com∑t22


	)

890 
	#fu£_›î©i⁄s
 
fu£_›î©i⁄s_com∑t25


	)

891 #ñi‡
FUSE_USE_VERSION
 == 22

892 
	#fu£_maö
(
¨gc
, 
¨gv
, 
›
) \

893 
	`fu£_maö_ªÆ_com∑t22
(
¨gc
, 
¨gv
, 
›
, (*(›)))

	)

894 
	#fu£_√w
 
fu£_√w_com∑t22


	)

895 
	#fu£_£tup
 
fu£_£tup_com∑t22


	)

896 
	#fu£_ã¨down
 
fu£_ã¨down_com∑t22


	)

897 
	#fu£_›î©i⁄s
 
fu£_›î©i⁄s_com∑t22


	)

898 
	#fu£_fûe_öfo
 
fu£_fûe_öfo_com∑t


	)

899 #ñi‡
FUSE_USE_VERSION
 == 24

900 #îr‹ 
Com∑tibûôy
 
wôh
 
high
-
Àvñ
 
API
 
vîsi⁄
 24 
nŸ
 
suµ‹ãd


902 
	#fu£_dúfû_t
 
fu£_dúfû_t_com∑t


	)

903 
	#__fu£_ªad_cmd
 
fu£_ªad_cmd


	)

904 
	#__fu£_¥o˚ss_cmd
 
fu£_¥o˚ss_cmd


	)

905 
	#__fu£_lo›_mt
 
fu£_lo›_mt_¥oc


	)

906 #i‡
FUSE_USE_VERSION
 == 21

907 
	#fu£_›î©i⁄s
 
fu£_›î©i⁄s_com∑t2


	)

908 
	#fu£_maö
 
fu£_maö_com∑t2


	)

909 
	#fu£_√w
 
fu£_√w_com∑t2


	)

910 
	#__fu£_£tup
 
fu£_£tup_com∑t2


	)

911 
	#__fu£_ã¨down
 
fu£_ã¨down_com∑t22


	)

912 
	#__fu£_exôed
 
fu£_exôed


	)

913 
	#__fu£_£t_gëc⁄ãxt_func
 
fu£_£t_gëc⁄ãxt_func


	)

915 
	#fu£_°©fs
 
fu£_°©fs_com∑t1


	)

916 
	#fu£_›î©i⁄s
 
fu£_›î©i⁄s_com∑t1


	)

917 
	#fu£_maö
 
fu£_maö_com∑t1


	)

918 
	#fu£_√w
 
fu£_√w_com∑t1


	)

919 
	#FUSE_DEBUG
 
FUSE_DEBUG_COMPAT1


	)

924 #ifde‡
__˝lu•lus


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
139
3014
config.h
mfschunkserver/bgjobs.c
mfschunkserver/bgjobs.h
mfschunkserver/chartsdata.c
mfschunkserver/chartsdata.h
mfschunkserver/csserv.c
mfschunkserver/csserv.h
mfschunkserver/hddspacemgr.c
mfschunkserver/hddspacemgr.h
mfschunkserver/init.h
mfschunkserver/masterconn.c
mfschunkserver/masterconn.h
mfschunkserver/replicator.c
mfschunkserver/replicator.h
mfscommon/MFSCommunication.h
mfscommon/cfg.c
mfscommon/cfg.h
mfscommon/charts.c
mfscommon/charts.h
mfscommon/crc.c
mfscommon/crc.h
mfscommon/datapack.h
mfscommon/main.c
mfscommon/main.h
mfscommon/massert.h
mfscommon/md5.c
mfscommon/md5.h
mfscommon/pcqueue.c
mfscommon/pcqueue.h
mfscommon/random.c
mfscommon/random.h
mfscommon/slogger.h
mfscommon/sockets.c
mfscommon/sockets.h
mfscommon/strerr.c
mfscommon/strerr.h
mfsmaster/changelog.c
mfsmaster/changelog.h
mfsmaster/chartsdata.c
mfsmaster/chartsdata.h
mfsmaster/chunks.c
mfsmaster/chunks.h
mfsmaster/datacachemgr.c
mfsmaster/datacachemgr.h
mfsmaster/exports.c
mfsmaster/exports.h
mfsmaster/filesystem.c
mfsmaster/filesystem.h
mfsmaster/init.h
mfsmaster/itree.c
mfsmaster/itree.h
mfsmaster/matoclserv.c
mfsmaster/matoclserv.h
mfsmaster/matocsserv.c
mfsmaster/matocsserv.h
mfsmaster/matomlserv.c
mfsmaster/matomlserv.h
mfsmaster/topology.c
mfsmaster/topology.h
mfsmetadump/mfsmetadump.c
mfsmetalogger/init.h
mfsmetalogger/masterconn.c
mfsmetalogger/masterconn.h
mfsmetarestore/main.c
mfsmetarestore/merger.c
mfsmetarestore/merger.h
mfsmetarestore/restore.c
mfsmetarestore/restore.h
mfsmount/chunkloccache.c
mfsmount/chunkloccache.h
mfsmount/cscomm.c
mfsmount/cscomm.h
mfsmount/csdb.c
mfsmount/csdb.h
mfsmount/dirattrcache.c
mfsmount/dirattrcache.h
mfsmount/main.c
mfsmount/mastercomm.c
mfsmount/mastercomm.h
mfsmount/masterproxy.c
mfsmount/masterproxy.h
mfsmount/mfs_fuse.c
mfsmount/mfs_fuse.h
mfsmount/mfs_meta_fuse.c
mfsmount/mfs_meta_fuse.h
mfsmount/mfstools.c
mfsmount/oplog.c
mfsmount/oplog.h
mfsmount/readdata.c
mfsmount/readdata.h
mfsmount/stats.c
mfsmount/stats.h
mfsmount/symlinkcache.c
mfsmount/symlinkcache.h
mfsmount/writedata.c
mfsmount/writedata.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fuse.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/fuse/fuse.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/utime.h
/usr/include/zlibdefs.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
